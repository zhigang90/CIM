acmfock.f:      ijklp=0
acmfock.f:            ijklp=ijklp+1
acmfock.f:            icff=ilab(ijklp)
acmfock.f:            jcff=jlab(ijklp)
acmfock.f:            kcff=klab(ijklp)
acmfock.f:            lcff=llab(ijklp)
acmfock.f:                       ij=ii+jff
acmfock.f:                       fock(ij)=fock(ij)+xin4*dens(kl)
acmfock.f:                       fock(kl)=fock(kl)+xin4*dens(ij)
acmfock.f:     $        xinteg2,     xinteg4,    xinteg8,    ijkllab,
acmfock.f:     $        ijklsiz,     nquarts,    iqstore,    iblstore,
acmfock.f:      integer*2 ijkllab(4,iqstore) !   ilab,jlab,klab,llab
acmfock.f:      integer*2 ijklsiz(4,iblstore)!   isiz(isbl),jsiz,ksiz,lsiz  
acmfock.f:      call read_int2(iunit1,ijklsiz,4*iblstore)
acmfock.f:      call read_int2(iunit3,ijkllab,4*iqstore)
acmfock.f:      ijklp=0
acmfock.f:         ilen=ijklsiz(1,isbl)
acmfock.f:         jlen=ijklsiz(2,isbl)
acmfock.f:         klen=ijklsiz(3,isbl)
acmfock.f:         llen=ijklsiz(4,isbl)
acmfock.f:            ijklp=ijklp+1
acmfock.f:            icff=ijkllab(1,ijklp)
acmfock.f:            jcff=ijkllab(2,ijklp)
acmfock.f:            kcff=ijkllab(3,ijklp)
acmfock.f:            lcff=ijkllab(4,ijklp)
acmfock.f:c          dij=densp(ics,jcs)
acmfock.f:c          dmax1=max(4.0d0*dij,4.0d0*dkl,dik,dil,djk,djl)
acmfock.f:     *                        iarray, nbls,ngcd,lnijkl,
acmfock.f:      dimension buf(nbls,lnijkl,ngcd)
acmfock.f:        do 100 ijklp=1,nbls
acmfock.f:        ngcq=lgenct(ijklp)
acmfock.f:            icff=labels(1,iqu,ijklp)
acmfock.f:            jcff=labels(2,iqu,ijklp)
acmfock.f:            kcff=labels(3,iqu,ijklp)
acmfock.f:            lcff=labels(4,iqu,ijklp)
acmfock.f:             iijf=iarray(jcf,icf)
acmfock.f:             xint=buf(ijklp,intct,iqu)
acmfock.f:          fock(i,iijf)=fock(i,iijf)+xin4*dn(i,kklf)
acmfock.f:          fock(i,kklf)=fock(i,kklf)+xin4*dn(i,iijf)
acmfock.f:     *                         nbls,ngcd,lnijkl,
acmfock.f:      dimension buf(nbls,lnijkl,ngcd)
acmfock.f:        do 100 ijklp=1,nbls
acmfock.f:        ngcq=lgenct(ijklp)
acmfock.f:            icff=labels(1,iqu,ijklp)
acmfock.f:            jcff=labels(2,iqu,ijklp)
acmfock.f:            kcff=labels(3,iqu,ijklp)
acmfock.f:            lcff=labels(4,iqu,ijklp)
acmfock.f:             xint=buf(ijklp,intct,iqu)
acmfock.f:                iijf=iarray(jcf,icf)
acmfock.f:          fock(i,iijf)=fock(i,iijf)+xin4*dn(i,kklf)
acmfock.f:          fock(i,kklf)=fock(i,kklf)+xin4*dn(i,iijf)
acmfock.f:     *                        iar, nbls,ngcd,lnijkl,
acmfock.f:      dimension buf(nbls,lnijkl,ngcd)
acmfock.f:        do 100 ijklp=1,nbls
acmfock.f:        ngcq=lgenct(ijklp)
acmfock.f:            icff=labels(1,iqu,ijklp)
acmfock.f:            jcff=labels(2,iqu,ijklp)
acmfock.f:            kcff=labels(3,iqu,ijklp)
acmfock.f:            lcff=labels(4,iqu,ijklp)
acmfock.f:             xint=buf(ijklp,intct,iqu)
acmfock.f:     *                         iarray,nbls,ngcd,lnijkl,
acmfock.f:      dimension buf(nbls,lnijkl,ngcd)
acmfock.f:        do 100 ijklp=1,nbls
acmfock.f:        ngcq=lgenct(ijklp)
acmfock.f:            icff=labels(1,iqu,ijklp)
acmfock.f:            jcff=labels(2,iqu,ijklp)
acmfock.f:            kcff=labels(3,iqu,ijklp)
acmfock.f:            lcf=labels(4,iqu,ijklp)+1
acmfock.f:             xint=buf(ijklp,intct,iqu)
acmfock.f:                iijf=iarray(jcf,icf)
acmfock.f:          fock(i,iijf)=fock(i,iijf)+xin4*dn(i,kklf)
acmfock.f:          fock(i,kklf)=fock(i,kklf)+xin4*dn(i,iijf)
acmfock.f:                     ij=ii+jff
acmfock.f:                     fock(ij)=fock(ij)+xin4*dens(kl)
acmfock.f:                     fock(kl)=fock(kl)+xin4*dens(ij)
acmfock.f:                     ij=ii+jff
acmfock.f:                     fock(ij)=fock(ij)+xin4*dens(kl)
acmfock.f:                     fock(kl)=fock(kl)+xin4*dens(ij)
acmfock.f:                     ij=ii+jff
acmfock.f:                     fock(ij)=fock(ij)+xin4*dens(kl)
acmfock.f:                     fock(kl)=fock(kl)+xin4*dens(ij)
acm_uhf.f:      ijklp=0
acm_uhf.f:            ijklp=ijklp+1
acm_uhf.f:            icff=ilab(ijklp)
acm_uhf.f:            jcff=jlab(ijklp)
acm_uhf.f:            kcff=klab(ijklp)
acm_uhf.f:            lcff=llab(ijklp)
acm_uhf.f:                       ij=ii+jff
acm_uhf.f:                       fockA(ij)=fockA(ij)+xin2*DenAB(kl)
acm_uhf.f:                       fockA(kl)=fockA(kl)+xin2*DenAB(ij)
acm_uhf.f:                       fockB(ij)=fockB(ij)+xin2*DenAB(kl)
acm_uhf.f:                       fockB(kl)=fockB(kl)+xin2*DenAB(ij)
acm_uhf.f:         ij=0
acm_uhf.f:            ij=ij+1
acm_uhf.f:            fockA(ij)=fockA(ij)*resc
acm_uhf.f:            fockB(ij)=fockB(ij)*resc
acm_uhf.f:     *                       ngcd,   lnijkl, labels, length, lgenct)
acm_uhf.f:      dimension buf(nbls,lnijkl,ngcd)
acm_uhf.f:        do 100 ijklp=1,nbls
acm_uhf.f:        ngcq=lgenct(ijklp)
acm_uhf.f:            icff=labels(1,iqu,ijklp)
acm_uhf.f:            jcff=labels(2,iqu,ijklp)
acm_uhf.f:            kcff=labels(3,iqu,ijklp)
acm_uhf.f:            lcff=labels(4,iqu,ijklp)
acm_uhf.f:             iijf=iarray(jcf,icf)
acm_uhf.f:             xint=buf(ijklp,intct,iqu)
acm_uhf.f:          fockA(iijf)=fockA(iijf)+xin2*DenAB(kklf)
acm_uhf.f:          fockA(kklf)=fockA(kklf)+xin2*DenAB(iijf)
acm_uhf.f:          fockB(iijf)=fockB(iijf)+xin2*DenAB(kklf)
acm_uhf.f:          fockB(kklf)=fockB(kklf)+xin2*DenAB(iijf)
acm_uhf.f:     *                        ngcd,   lnijkl, labels, length, lgenct)
acm_uhf.f:      dimension buf(nbls,lnijkl,ngcd)
acm_uhf.f:        do 400 ijklp=1,nbls
acm_uhf.f:        ngcq=lgenct(ijklp)
acm_uhf.f:            icff=labels(1,iqu,ijklp)
acm_uhf.f:            jcff=labels(2,iqu,ijklp)
acm_uhf.f:            kcff=labels(3,iqu,ijklp)
acm_uhf.f:            lcff=labels(4,iqu,ijklp)
acm_uhf.f:             xint=buf(ijklp,intct,iqu)
acm_uhf.f:                iijf=iarray(jcf,icf)
acm_uhf.f:          fockA(iijf)=fockA(iijf)+xin2*DenAB(kklf)
acm_uhf.f:          fockA(kklf)=fockA(kklf)+xin2*DenAB(iijf)
acm_uhf.f:          fockB(iijf)=fockB(iijf)+xin2*DenAB(kklf)
acm_uhf.f:          fockB(kklf)=fockB(kklf)+xin2*DenAB(iijf)
acm_uhf.f:     *                        ngcd,   lnijkl, labels, length, lgenct)
acm_uhf.f:      dimension buf(nbls,lnijkl,ngcd)
acm_uhf.f:        do 100 ijklp=1,nbls
acm_uhf.f:        ngcq=lgenct(ijklp)
acm_uhf.f:            icff=labels(1,iqu,ijklp)
acm_uhf.f:            jcff=labels(2,iqu,ijklp)
acm_uhf.f:            kcff=labels(3,iqu,ijklp)
acm_uhf.f:            lcf=labels(4,iqu,ijklp)+1
acm_uhf.f:             xint=buf(ijklp,intct,iqu)
acm_uhf.f:                iijf=iarray(jcf,icf)
acm_uhf.f:          fockA(iijf)=fockA(iijf)+xin2*DenAB(kklf)
acm_uhf.f:          fockA(kklf)=fockA(kklf)+xin2*DenAB(iijf)
acm_uhf.f:          fockB(iijf)=fockB(iijf)+xin2*DenAB(kklf)
acm_uhf.f:          fockB(kklf)=fockB(kklf)+xin2*DenAB(iijf)
amber.f:C      EE = qi*qj/(e*Rij)
amber.f:C      EE = qi*qj/(e*Rij)
amshift.f:      subroutine amshift(nbls,l01,l02,npij,npkl,ngcd)
amshift.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,MMAX,
amshift.f:     * NQIJ,NQIJ1,NSIJ1,NQKL,NQKL1,NSKL1,ijbeg,klbeg
amshift.f:     * ibfij1,ibfij2,ibfkl1,ibfkl2,
amshift.f:     * ibf2l1,ibf2l2,ibf2l3,ibf2l4,ibfij3,ibfkl3,
amshift.f:     * ixij,iyij,izij, iwij,ivij,iuij,isij
amshift.f:     * ixab,ixp,ixpn,ixpp,iabnia,iapb,i1apb,ifij,icij,isab,
amshift.f:      lsmx=max(lnij,lnkl)
amshift.f:      lqij=nfu(nqij+1)
amshift.f:      lqmx=max(lqij,lqkl)
amshift.f:      mindxx=lnijkl
amshift.f:c     if(intsize.ne.1) mindxx=lnijkl/intsize+1
amshift.f:            nmr =ngcd*nbls*lnijkl
amshift.f:            nbuh=ibuf + 9*nbls*lnijkl*ngcd
amshift.f:          ibfijx=ibfij1
amshift.f:          if(lshelij.eq.2) ibfijx=ibfij2
amshift.f:c                    ibuh=ibuf + 9*nbls*lnijkl*ngcd
amshift.f:             incrf=9*nbls*lnijkl
amshift.f:             incrh=45*nbls*lnijkl
amshift.f:c    *          bl(ibfijx),           bl(ibfklx),
amshift.f:c    *          lqij,lqkl,
amshift.f:             ibuh=ibuf + 9*nbls*lnijkl*ngcd
amshift.f:     *          bl(ibfijx),           bl(ibfklx),
amshift.f:     *          lqij,lqkl,
amshift.f:             incre =mnbls*lnijkl
amshift.f:     *          bl(ibfijx),           bl(ibfklx),
amshift.f:     *          lqij,lqkl,
amshift.f:         call convr3(bl,m,nbls,npij,npkl,bl(idx1),bl(idx2),
amshift.f:         call convr3_forc(bl,m,nbls,npij,npkl,bl(idx1),bl(idx2),
amshift.f:        incre =mnbls*lnijkl
amshift.f:     *                     l01,l02,bl(iwij),lsmx,lsjl,
amshift.f:     *                     bl(ixij),nfu(nqi+1),lqij,lnkl,mnbls,
amshift.f:              iwij0=iwij +mnbls*lsmx*lsjl
amshift.f:              ixij0=ixij +mnbls*nfu(nqi+1)*lqij*lnkl
amshift.f:     *                         l01,l02,bl(iwij),bl(iwij0),lsmx,lsjl,
amshift.f:     *                         bl(ixij),bl(ixij0),nfu(nqi+1),lqij,lnkl,
amshift.f:              kbuf =nbuf +(iqu-1)*9*nbls*lnijkl  ! output gradient integ
amshift.f:              kbug =nbuh +(iqu-1)*45*nbls*lnijkl ! output hessian  integ
amshift.f:              iwij1=iwij +mnbls*lsmx*lsjl
amshift.f:              ixij1=ixij +mnbls*nfu(nqi+1)*lqij*lnkl
amshift.f:              iwij0=iwij1 +    9*nbls*lsmx*lsjl
amshift.f:              ixij0=ixij1 +    9*nbls*nfu(nqi+1)*lqij*lnkl
amshift.f:     *                         l01,l02,bl(iwij),bl(iwij1),bl(iwij0),
amshift.f:     *                         bl(ixij),bl(ixij1),bl(ixij0),
amshift.f:     *                         nfu(nqi+1),lqij,lnkl, mnbls,nbls,
amshift.f:          jbfijx=ibfij1
amshift.f:          if(lshelij.eq.2) jbfijx=ibfij2
amshift.f:     *                 bl(jbfijx),bl(jbfklx),
amshift.f:     *                 lqij,lqkl,
amshift.f:     *                 bl(iwij),lsmx, bl(ivij),lsjl,
amshift.f:     *                 bl(ixij),nfu(nqi+1),lnkl,bl(iyij),nfu(nqj+1),
amshift.f:          jbfij1=ibfij1
amshift.f:          jbfij2=ibfij2
amshift.f:          jbfij3=ibfij3
amshift.f:     *                 bl(jbfij1),bl(jbfij2),bl(jbfkl1),bl(jbfkl2),
amshift.f:     *                 lqij,lqkl,
amshift.f:     *                 bl(jbfij3),bl(jbfkl3),
amshift.f:     *                 bl(iwij),lsmx, bl(ivij),bl(iuij),bl(isij),lsjl,
amshift.f:     *          bl(ixij),nfu(nqi+1),lnkl,bl(iyij),bl(izij),nfu(nqj+1),
amshift.f:          jbfij1=ibfij1
amshift.f:          jbfij2=ibfij2
amshift.f:          jbfij3=ibfij3
amshift.f:     *                 bl(jbfij1),bl(jbfij2),bl(jbfkl1),bl(jbfkl2),
amshift.f:     *                 lqij,lqkl,
amshift.f:     *                 bl(jbfij3),bl(jbfkl3),
amshift.f:     *                 bl(iwij),lsmx, bl(ivij),bl(iuij),bl(isij),lsjl,
amshift.f:     *           bl(ixij),nfu(nqi+1),lnkl,bl(iyij),bl(izij),nfu(nqj+1),
amshift.f:          jbfij1=ibfij1
amshift.f:          jbfij2=ibfij2
amshift.f:          jbfij3=ibfij3
amshift.f:     *                 bl(jbfij1),bl(jbfij2),bl(jbfkl1),bl(jbfkl2),
amshift.f:     *                 lqij,lqkl,
amshift.f:     *                 bl(jbfij3),bl(jbfkl3),
amshift.f:     *                 bl(iwij),lsmx, bl(ivij),bl(iuij),bl(isij),lsjl,
amshift.f:     *           bl(ixij),nfu(nqi+1),lnkl,bl(iyij),bl(izij),nfu(nqj+1),
amshift.f:      subroutine convr3(bl,m,nbls,npij,npkl,idx1,idx2,
amshift.f:      dimension xab(npij,3),xcd(npkl,3)
amshift.f:      ijklnmr=0
amshift.f:      do 100 ijkl=1,nbls
amshift.f:      ijpar=idx1(ijkl)
amshift.f:      klpar=idx2(ijkl)
amshift.f:      xab1=xab(ijpar,1)
amshift.f:      xab2=xab(ijpar,2)
amshift.f:      xab3=xab(ijpar,3)
amshift.f:        ijklnmr=ijklnmr+1
amshift.f:        bl(ixab1+ijklnmr)      =xab1
amshift.f:        bl(ixab1+ijklnmr+nbls1)=xab2
amshift.f:        bl(ixab1+ijklnmr+nbls2)=xab3
amshift.f:        bl(ixcd1+ijklnmr)      =xcd1
amshift.f:        bl(ixcd1+ijklnmr+nbls1)=xcd2
amshift.f:        bl(ixcd1+ijklnmr+nbls2)=xcd3
amshift.f:     *                   bfijx,      bfklx,
amshift.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,mmax,
amshift.f:     * nqi,nqj,nqk,nql,nsij,nskl,
amshift.f:     * nqij,nqij1,nsij1,nqkl,nqkl1,nskl1,ijbeg,klbeg
amshift.f:      common/shell/lshellt,lshelij,lshelkl,lhelp,lcas2(4),lcas3(4)
amshift.f:c    * bfij1(mnbls,lt3,lt2),bfij2(mnbls,lt3,lt2),
amshift.f:     * bfijx(mnbls,lt3,lt2),
amshift.f:       ijb1=ijbeg-1
amshift.f:         ijkl=0
amshift.f:         ij=ii+j
amshift.f:         ijkl=ijkl+1
amshift.f:ccccccc  indxx(ij+ijb1,kl+klb1)=ijkl
amshift.f:         indxx(ij     ,kl     )=ijkl
amshift.f:         do 5034 ij=ijbeg,lnij
amshift.f:         ijkl=indxx(ij-ijb1,kl-klb1)
amshift.f:         buf(i,ijkl)=buf2(i,ij,kl)
amshift.f:              do 5035 ij=ijbeg,lnij
amshift.f:              ijkl=indxx(ij-ijb1,1)
amshift.f:c--->         buf(i,ijkl)=bfkl1(i,ij,1)
amshift.f:              buf(i,ijkl)=bfklx(i,ij,1)
amshift.f:           if(lshelij.eq.1 .or. lshelij.eq.2) then
amshift.f:              ijkl=indxx(1,kl-klb1)
amshift.f:c----->       buf(i,ijkl)=bfij1(i,1,kl)
amshift.f:              buf(i,ijkl)=bfijx(i,1,kl)
amshift.f:                ijkl=indxx(1,1)
amshift.f:c------>           buf(i,ijkl)=bf2l1(i,1,1)
amshift.f:                   buf(i,ijkl)=bf2lx(i,1,1)
amshift.f:     *                   wij,lt3,lsjl,xij,lt4,lt5,lt6,mnbls,xab,xcd,
amshift.f:      common/shell/lshellt,lshelij,lshelkl,lhelp,lcas2(4),lcas3(4)
amshift.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,mmax,
amshift.f:     * nqi,nqj,nqk,nql,nsij,nskl,
amshift.f:     * nqij,nqij1,nsij1,nqkl,nqkl1,nskl1,ijbex,klbex
amshift.f:      dimension buf2(mnbls,lt1,lt2),wij(mnbls,lt3,lsjl)
amshift.f:      dimension xij(mnbls,lt4,lt5,lt6)
amshift.f:      ijcount=(niend-nibeg+1)*mnbls
amshift.f:         if(nsij.eq.nqij) then  !  ..the (i,s| case ..; nj=1
amshift.f:c              call tfer(buf2(1,ni,nkl),xij(1,ni,1,nkl),mnbls)
amshift.f:            call dcopy(ijcount,buf2(1,nibeg,nkl),1,xij(1,nibeg,1,nkl),1)
amshift.f:     *                   wij,lt3,lsjl,xab,mnbls,nqi,nqj,nsij1,
amshift.f:     *                   xij(1,1,1,nkl),lt4)
amshift.f:c           call tfer(xij(1,ni,nj,nkl),wij(1,nkl,1),mnbls)
amshift.f:            call dcopy(mnbls,xij(1,ni,nj,nkl),1,wij(1,nkl,1),1)
amshift.f:            call horiz12(wij,lt3,lsjl,xcd,mnbls,nqk,nql,nskl1)
amshift.f:c     call tfer(wij(1,nk,nl),buf(1,indx),mnbls)
amshift.f:      call dcopy(mnbls,wij(1,nk,nl),1,buf(1,indx),1)
amshift.f:     *                buf2,lt1,lt2,bijx,bklx,lt3,lt4,
amshift.f:     *                wij,lt5,vij,lt6,
amshift.f:     *                xij,lt7,lt8,yij,lt9,mnbls,xab,xcd,
amshift.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,mmax,
amshift.f:     * nqi,nqj,nqk,nql,nsij,nskl,
amshift.f:     * nqij,nqij1,nsij1,nqkl,nqkl1,nskl1,ijbex,klbex
amshift.f:      common/shell/lshellt,lshelij,lshelkl,lhelp,lcas2(4),lcas3(4)
amshift.f:     * bijx(mnbls,lt3,lt2),
amshift.f:      dimension wij(mnbls,lt5,lt6),vij(mnbls,lt5,lt6)
amshift.f:      dimension xij(mnbls,lt7,lt3,lt8),yij(mnbls,lt7,lt9,lt4)
amshift.f:       do 11 ij=nqi,nsij
amshift.f:c      ijbeg=nfu(ij)+1
amshift.f:c      ijend=nfu(ij+1)
amshift.f:c          do 12 nij=ijbeg,ijend
amshift.f:c          call tfer(buf2(1,nij,nkl),wij(1,nij,1),mnbls)
amshift.f:       nij=nfu(ij)+1
amshift.f:       ijcount=(nfu(ij+1)-nfu(ij))*mnbls
amshift.f:       call dcopy(ijcount,buf2(1,nij,nkl),1,wij(1,nij,1),1)
amshift.f:       call horiz12(wij,lt5,lt6,xab,mnbls,nqi,nqj,nsij1)
amshift.f:c      call tfer(wij(1,ni,nj),xij(1,ni,nj,nkl),mnbls)
amshift.f:       call dcopy(icoun2,wij(1,nibe2,nj),1,xij(1,nibe2,nj,nkl),1)
amshift.f:ccc  here lshelij can be eq. 0, 1 or 2 only  ccc
amshift.f:      if(lshelij.gt.0) then
amshift.f:          if(lshelij.eq.1) then
amshift.f:c               call tfer(bijx(1,1,nkl),xij(1,1,1,nkl),mnbls)
amshift.f:                call dcopy(mnbls,bijx(1,1,nkl),1,xij(1,1,1,nkl),1)
amshift.f:     *          xij(1,1,2,nkl),xij(1,1,3,nkl),xij(1,1,4,nkl),
amshift.f:     *          bijx(1,2,nkl),bijx(1,3,nkl),bijx(1,4,nkl),bijx(1,1,nkl))
amshift.f:c              do 17 nij=nfu(nqi )+1,nfu(nqi +1)
amshift.f:c              call tfer(bijx(1,nij,nkl),xij(1,nij,1,nkl),mnbls)
amshift.f:           call dcopy(icoun2,bijx(1,nibe2,nkl),1,xij(1,nibe2,1,nkl),1)
amshift.f:       do 101 ij=nqix,nsij
amshift.f:c      ijbeg=nfu(ij)+1
amshift.f:c      ijend=nfu(ij+1)
amshift.f:c            do 103 nij=ijbeg,ijend
amshift.f:c            call tfer(bklx(1,nij,nkl),vij(1,nij,1),mnbls)
amshift.f:       nij=nfu(ij)+1
amshift.f:       ijcount=(nfu(ij+1)-nfu(ij))*mnbls
amshift.f:       call dcopy(ijcount,bklx(1,nij,nkl),1,vij(1,nij,1),1)
amshift.f:        call horiz12(vij,lt5,lt6,xab,mnbls,nqi,nqj,nsij1)
amshift.f:c           call tfer(vij(1,ni,nj),yij(1,ni,nj,nkl),mnbls)
amshift.f:            call dcopy(icount,vij(1,nibeg,nj),1,yij(1,nibeg,nj,nkl),1)
amshift.f:c        call tfer(xij(1,ni,nj,nkl),wij(1,nkl,1),mnbls)
amshift.f:         call dcopy(mnbls,xij(1,ni,nj,nkl),1,wij(1,nkl,1),1)
amshift.f:        call horiz12(wij,lt5,lt6,xcd,mnbls,nqk,nql,nskl1)
amshift.f:c            call tfer(yij(1,ni,nj,1),wij(1,1,1),mnbls)
amshift.f:             call dcopy(mnbls,yij(1,ni,nj,1),1,wij(1,1,1),1)
amshift.f:      call daxpy3(mnbls,xcd,wij(1,1,2),wij(1,1,3),wij(1,1,4),
amshift.f:     *    yij(1,ni,nj,2),yij(1,ni,nj,3),yij(1,ni,nj,4),yij(1,ni,nj,1))
amshift.f:c            call tfer(yij(1,ni,nj,nkl),wij(1,nkl,1),mnbls)
amshift.f:             call dcopy(mnbls,yij(1,ni,nj,nkl),1,wij(1,nkl,1),1)
amshift.f:c     call tfer(wij(1,nk,nl),buf(1,indx),mnbls)
amshift.f:      call dcopy(mnbls,wij(1,nk,nl),1,buf(1,indx),1)
amshift.f:     *                buf2,lt1,lt2,bij1,bij2,bkl1,bkl2,lt3,lt4,
amshift.f:     *                bij3,bkl3,b2l12,b2l34,
amshift.f:     *                wij,lt5,vij,uij,sij,lt6,
amshift.f:     *                xij,lt7,lt8,yij,zij,lt9,
amshift.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,mmax,
amshift.f:     * nqi,nqj,nqk,nql,nsij,nskl,
amshift.f:     * nqij,nqij1,nsij1,nqkl,nqkl1,nskl1,ijbex,klbex
amshift.f:      common/shell/lshellt,lshelij,lshelkl,lhelp,lcas2(4),lcas3(4)
amshift.f:     * bij1(mnbls,lt3,lt2),bij2(mnbls,lt3,lt2),
amshift.f:     * bij3(mnbls,lt2),bkl3(mnbls,lt1),
amshift.f:       dimension wij(mnbls,lt5,lt6),
amshift.f:     * vij(mnbls,lt5,lt6),uij(mnbls,lt5,lt6),sij(mnbls,lt5,lt6)
amshift.f:      dimension xij(mnbls,lt7,lt3,lt8),yij(mnbls,lt7,lt9,lt4),
amshift.f:     *                             zij(mnbls,lt7,lt9,lt4)
amshift.f:       icoun3=(nfu(nqij+1)-nfu(nqix))*mnbls
amshift.f:       do 101 ij=nqix,nsij
amshift.f:c      ijbeg=nfu(ij)+1
amshift.f:c      ijend=nfu(ij+1)
amshift.f:c          do 102 nij=ijbeg,ijend
amshift.f:c          call tfer(buf2(1,nij,nkl),wij(1,nij,1),mnbls)
amshift.f:        nij=nfu(ij)+1
amshift.f:        ijcount=(nfu(ij+1)-nfu(ij))*mnbls
amshift.f:        call dcopy(ijcount,buf2(1,nij,nkl),1,wij(1,nij,1),1)
amshift.f:c          do 103 nij=ijbeg,ijend
amshift.f:c          call tfer(bkl1(1,nij,nkl),vij(1,nij,1),mnbls)
amshift.f:           call dcopy(ijcount,bkl1(1,nij,nkl),1,vij(1,nij,1),1)
amshift.f:c          do 104 nij=ijbeg,ijend
amshift.f:c          call tfer(bkl2(1,nij,nkl),uij(1,nij,1),mnbls)
amshift.f:           call dcopy(ijcount,bkl2(1,nij,nkl),1,uij(1,nij,1),1)
amshift.f:c          do 105 nij=ijbeg,ijend
amshift.f:c          call tfer(bkl3(1,nij),sij(1,nij,1),mnbls)
amshift.f:           call dcopy(ijcount,bkl3(1,nij),1,sij(1,nij,1),1)
amshift.f:       call horiz12(wij,lt5,lt6,xab,mnbls,nqi,nqj,nsij1)
amshift.f:            call horiz12(vij,lt5,lt6,xab,mnbls,nqi,nqj,nsij1)
amshift.f:            call horiz12(uij,lt5,lt6,xab,mnbls,nqi,nqj,nsij1)
amshift.f:            call horiz12(sij,lt5,lt6,xab,mnbls,nqi,nqj,nsij1)
amshift.f:c      call tfer(wij(1,ni,nj),xij(1,ni,nj,nkl),mnbls)
amshift.f:          call dcopy(icount,wij(1,nibeg,nj),1,xij(1,nibeg,nj,nkl),1)
amshift.f:c               call tfer(vij(1,ni,nj),yij(1,ni,nj,nkl),mnbls)
amshift.f:            call dcopy(icount,vij(1,nibeg,nj),1,yij(1,nibeg,nj,nkl),1)
amshift.f:c               call tfer(uij(1,ni,nj),zij(1,ni,nj,nkl),mnbls)
amshift.f:            call dcopy(icount,uij(1,nibeg,nj),1,zij(1,nibeg,nj,nkl),1)
amshift.f:       if(lshelij.eq.1.or.lshelij.eq.3) then
amshift.f:c            call tfer(bij1(1,1,nkl),xij(1,1,1,nkl),mnbls)
amshift.f:             call dcopy(mnbls,bij1(1,1,nkl),1,xij(1,1,1,nkl),1)
amshift.f:     *          xij(1,1,2,nkl),xij(1,1,3,nkl),xij(1,1,4,nkl),
amshift.f:     *          bij1(1,2,nkl),bij1(1,3,nkl),bij1(1,4,nkl),bij1(1,1,nkl))
amshift.f:       if(lshelij.eq.2.or.lshelij.eq.3) then
amshift.f:c          do 108 nij=nfu(nqi )+1,nfu(nqi +1)
amshift.f:c          call tfer(bij2(1,nij,nkl),xij(1,nij,1,nkl),mnbls)
amshift.f:           call dcopy(icoun2,bij2(1,nibe2,nkl),1,xij(1,nibe2,1,nkl),1)
amshift.f:       if(lshelij.eq.3) then
amshift.f:c          call tfer(bij3(1,nkl),xij(1,1,1,nkl),mnbls)
amshift.f:           call dcopy(mnbls,bij3(1,nkl),1,xij(1,1,1,nkl),1)
amshift.f:           if(lshelij.eq.1) then
amshift.f:           if(lshelij.eq.2) then
amshift.f:c                 do 109 nij=nfu(nqix)+1,nfu(nqij+1)
amshift.f:c                 call tfer(b2l34(1,nij,nkl),x2l(1,nij,nkl),mnbls)
amshift.f:c        call tfer(xij(1,ni,nj,nkl),wij(1,nkl,1),mnbls)
amshift.f:         call dcopy(mnbls,xij(1,ni,nj,nkl),1,wij(1,nkl,1),1)
amshift.f:       call horiz12(wij,lt5,lt6,xcd,mnbls,nqk,nql,nskl1)
amshift.f:c          call tfer(yij(1,ni,nj,1),wij(1,1,1),mnbls)
amshift.f:           call dcopy(mnbls,yij(1,ni,nj,1),1,wij(1,1,1),1)
amshift.f:      call daxpy3(mnbls,xcd,wij(1,1,2),wij(1,1,3),wij(1,1,4),
amshift.f:     * yij(1,ni,nj,2),yij(1,ni,nj,3),yij(1,ni,nj,4),yij(1,ni,nj,1))
amshift.f:c        call tfer(zij(1,ni,nj,nkl),wij(1,nkl,1),mnbls)
amshift.f:         call dcopy(mnbls,zij(1,ni,nj,nkl),1,wij(1,nkl,1),1)
amshift.f:c        call tfer(sij(1,ni,nj),wij(1,1,1),mnbls)
amshift.f:         call dcopy(mnbls,sij(1,ni,nj),1,wij(1,1,1),1)
amshift.f:c                  call tfer(x2l(1,nj,1),wij(1,1,1),mnbls)
amshift.f:                   call dcopy(mnbls,x2l(1,nj,1),1,wij(1,1,1),1)
amshift.f:c                  call tfer(x2l(1,ni,1),wij(1,1,1),mnbls)
amshift.f:                   call dcopy(mnbls,x2l(1,ni,1),1,wij(1,1,1),1)
amshift.f:      call daxpy3(mnbls,xcd,wij(1,1,2),wij(1,1,3),wij(1,1,4),
amshift.f:      call daxpy3(mnbls,xcd,wij(1,1,2),wij(1,1,3),wij(1,1,4),
amshift.f:c                 call tfer(x2l(1,nj,nkl),wij(1,nkl,1),mnbls)
amshift.f:                  call dcopy(mnbls,x2l(1,nj,nkl),1,wij(1,nkl,1),1)
amshift.f:c                 call tfer(x2l(1,ni,nkl),wij(1,nkl,1),mnbls)
amshift.f:                  call dcopy(mnbls,x2l(1,ni,nkl),1,wij(1,nkl,1),1)
amshift.f:c     call tfer(wij(1,nk,nl),buf(1,indx),mnbls)
amshift.f:      call dcopy(mnbls,wij(1,nk,nl),1,buf(1,indx),1)
amshift.f:     *                buf2,lt1,lt2,bij1,bij2,bkl1,bkl2,lt3,lt4,
amshift.f:     *                bij3,bkl3,b2l1,b2l2,b2l3,b2l4,
amshift.f:     *                wij,lt6,vij,uij,sij,lt7,
amshift.f:     *                xij,lt8,lt9,yij,zij,lt10,
amshift.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,mmax,
amshift.f:     * nqi,nqj,nqk,nql,nsij,nskl,
amshift.f:     * nqij,nqij1,nsij1,nqkl,nqkl1,nskl1,ijbex,klbex
amshift.f:      common/shell/lshellt,lshelij,lshelkl,lhelp,lcas2(4),lcas3(4)
amshift.f:     * bij1(mnbls,lt3,lt2),bij2(mnbls,lt3,lt2),
amshift.f:     * bij3(mnbls,lt2),bkl3(mnbls,lt1),
amshift.f:      dimension wij(mnbls,lt6,lt7),
amshift.f:     * vij(mnbls,lt6,lt7),uij(mnbls,lt6,lt7),sij(mnbls,lt6,lt7)
amshift.f:      dimension xij(mnbls,lt8,lt3,lt9),yij(mnbls,lt8,lt10,lt4)
amshift.f:     *                            ,zij(mnbls,lt8,lt10,lt4)
amshift.f:       icoun3=(nfu(nqij+1)-nfu(nqix))*mnbls
amshift.f:       do 101 ij=nqix,nsij
amshift.f:c      ijbeg=nfu(ij)+1
amshift.f:c      ijend=nfu(ij+1)
amshift.f:           nij=nfu(ij)+1
amshift.f:           ijcount=(nfu(ij+1)-nfu(ij))*mnbls
amshift.f:c          do 102 nij=ijbeg,ijend
amshift.f:c          call tfer(buf2(1,nij,nkl),wij(1,nij,1),mnbls)
amshift.f:           call dcopy(ijcount,buf2(1,nij,nkl),1,wij(1,nij,1),1)
amshift.f:c          do 103 nij=ijbeg,ijend
amshift.f:c          call tfer(bkl1(1,nij,nkl),vij(1,nij,1),mnbls)
amshift.f:           call dcopy(ijcount,bkl1(1,nij,nkl),1,vij(1,nij,1),1)
amshift.f:c          do 104 nij=ijbeg,ijend
amshift.f:c          call tfer(bkl2(1,nij,nkl),uij(1,nij,1),mnbls)
amshift.f:           call dcopy(ijcount,bkl2(1,nij,nkl),1,uij(1,nij,1),1)
amshift.f:c          do 105 nij=ijbeg,ijend
amshift.f:c          call tfer(bkl3(1,nij),sij(1,nij,1),mnbls)
amshift.f:           call dcopy(ijcount,bkl3(1,nij),1,sij(1,nij,1),1)
amshift.f:       call horiz12(wij,lt6,lt7,xab,mnbls,nqi,nqj,nsij1)
amshift.f:            call horiz12(vij,lt6,lt7,xab,mnbls,nqi,nqj,nsij1)
amshift.f:            call horiz12(uij,lt6,lt7,xab,mnbls,nqi,nqj,nsij1)
amshift.f:            call horiz12(sij,lt6,lt7,xab,mnbls,nqi,nqj,nsij1)
amshift.f:c      call tfer(wij(1,ni,nj),xij(1,ni,nj,nkl),mnbls)
amshift.f:       call dcopy(icount,wij(1,nibeg,nj),1,xij(1,nibeg,nj,nkl),1)
amshift.f:c            call tfer(vij(1,ni,nj),yij(1,ni,nj,nkl),mnbls)
amshift.f:             call dcopy(icount,vij(1,nibeg,nj),1,yij(1,nibeg,nj,nkl),1)
amshift.f:c            call tfer(uij(1,ni,nj),zij(1,ni,nj,nkl),mnbls)
amshift.f:             call dcopy(icount,uij(1,nibeg,nj),1,zij(1,nibeg,nj,nkl),1)
amshift.f:       if(lshelij.eq.1.or.lshelij.eq.3) then
amshift.f:c            call tfer(bij1(1,1,nkl),xij(1,1,1,nkl),mnbls)
amshift.f:             call dcopy(mnbls,bij1(1,1,nkl),1,xij(1,1,1,nkl),1)
amshift.f:     *    xij(1,1,2,nkl),xij(1,1,3,nkl),xij(1,1,4,nkl),
amshift.f:     *    bij1(1,2,nkl),bij1(1,3,nkl),bij1(1,4,nkl),bij1(1,1,nkl))
amshift.f:       if(lshelij.eq.2.or.lshelij.eq.3) then
amshift.f:c          do 108 nij=nfu(nqi )+1,nfu(nqi +1)
amshift.f:c          call tfer(bij2(1,nij,nkl),xij(1,nij,1,nkl),mnbls)
amshift.f:           call dcopy(icoun2,bij2(1,nibe2,nkl),1,xij(1,nibe2,1,nkl),1)
amshift.f:       if(lshelij.eq.3) then
amshift.f:c          call tfer(bij3(1,nkl),xij(1,1,1,nkl),mnbls)
amshift.f:           call dcopy(mnbls,bij3(1,nkl),1,xij(1,1,1,nkl),1)
amshift.f:           if(lshelij.eq.1) then
amshift.f:           if(lshelij.eq.2) then
amshift.f:c               do 109 nij=nfu(nqix)+1,nfu(nqij+1)
amshift.f:c                  call tfer(b2l3(1,nij,nkl),x2l3(1,nij,nkl),mnbls)
amshift.f:c                  call tfer(b2l4(1,nij,nkl),x2l4(1,nij,nkl),mnbls)
amshift.f:c                  do 110 nij=nfu(nqi )+1,nfu(nqi +1)
amshift.f:c                  call tfer(b3l34(1,nij),x3l34(1,nij),mnbls)
amshift.f:           if(lshelij.eq.3) then
amshift.f:c        call tfer(xij(1,ni,nj,nkl),wij(1,nkl,1),mnbls)
amshift.f:         call dcopy(mnbls,xij(1,ni,nj,nkl),1,wij(1,nkl,1),1)
amshift.f:        call horiz12(wij,lt6,lt7,xcd,mnbls,nqk,nql,nskl1)
amshift.f:c          call tfer(yij(1,ni,nj,1),wij(1,1,1),mnbls)
amshift.f:           call dcopy(mnbls,yij(1,ni,nj,1),1,wij(1,1,1),1)
amshift.f:      call daxpy3(mnbls,xcd,wij(1,1,2),wij(1,1,3),wij(1,1,4),
amshift.f:     *   yij(1,ni,nj,2),yij(1,ni,nj,3),yij(1,ni,nj,4),yij(1,ni,nj,1))
amshift.f:c        call tfer(zij(1,ni,nj,nkl),wij(1,nkl,1),mnbls)
amshift.f:         call dcopy(mnbls,zij(1,ni,nj,nkl),1,wij(1,nkl,1),1)
amshift.f:c        call tfer(sij(1,ni,nj),wij(1,1,1),mnbls)
amshift.f:         call dcopy(mnbls,sij(1,ni,nj),1,wij(1,1,1),1)
amshift.f:c                 call tfer(x2l1(1,nj,1),wij(1,1,1),mnbls)
amshift.f:                  call dcopy(mnbls,x2l1(1,nj,1),1,wij(1,1,1),1)
amshift.f:c                 call tfer(x2l3(1,ni,1),wij(1,1,1),mnbls)
amshift.f:                  call dcopy(mnbls,x2l3(1,ni,1),1,wij(1,1,1),1)
amshift.f:c                 call tfer(x3l12(1,1),wij(1,1,1),mnbls)
amshift.f:                  call dcopy(mnbls,x3l12(1,1),1,wij(1,1,1),1)
amshift.f:      call daxpy3(mnbls,xcd,wij(1,1,2),wij(1,1,3),wij(1,1,4),
amshift.f:      call daxpy3(mnbls,xcd,wij(1,1,2),wij(1,1,3),wij(1,1,4),
amshift.f:      call daxpy3(mnbls,xcd,wij(1,1,2),wij(1,1,3),wij(1,1,4),
amshift.f:c                 call tfer(x2l2(1,nj,nkl),wij(1,nkl,1),mnbls)
amshift.f:                  call dcopy(mnbls,x2l2(1,nj,nkl),1,wij(1,nkl,1),1)
amshift.f:c                 call tfer(x2l4(1,ni,nkl),wij(1,nkl,1),mnbls)
amshift.f:                  call dcopy(mnbls,x2l4(1,ni,nkl),1,wij(1,nkl,1),1)
amshift.f:c                 call tfer(x3l12(1,nkl),wij(1,nkl,1),mnbls)
amshift.f:                  call dcopy(mnbls,x3l12(1,nkl),1,wij(1,nkl,1),1)
amshift.f:      call daxpy3(mnbls,xcd,wij(1,1,2),wij(1,1,3),wij(1,1,4),
amshift.f:c             call tfer(x2l2(1,nj,2),wij(1,2,1),mnbls)
amshift.f:c             call tfer(x2l2(1,nj,3),wij(1,3,1),mnbls)
amshift.f:c             call tfer(x2l2(1,nj,4),wij(1,4,1),mnbls)
amshift.f:              call dcopy(mnbls,x2l2(1,nj,2),1,wij(1,2,1),1)
amshift.f:              call dcopy(mnbls,x2l2(1,nj,3),1,wij(1,3,1),1)
amshift.f:              call dcopy(mnbls,x2l2(1,nj,4),1,wij(1,4,1),1)
amshift.f:      call daxpy3(mnbls,xcd,wij(1,1,2),wij(1,1,3),wij(1,1,4),
amshift.f:c             call tfer(x2l4(1,ni,2),wij(1,2,1),mnbls)
amshift.f:c             call tfer(x2l4(1,ni,3),wij(1,3,1),mnbls)
amshift.f:c             call tfer(x2l4(1,ni,4),wij(1,4,1),mnbls)
amshift.f:              call dcopy(mnbls,x2l4(1,ni,2),1,wij(1,2,1),1)
amshift.f:              call dcopy(mnbls,x2l4(1,ni,3),1,wij(1,3,1),1)
amshift.f:              call dcopy(mnbls,x2l4(1,ni,4),1,wij(1,4,1),1)
amshift.f:c                 call tfer(x3l34(1,nj),wij(1,1,1),mnbls)
amshift.f:                  call dcopy(mnbls,x3l34(1,nj),1,wij(1,1,1),1)
amshift.f:c                 call tfer(x3l34(1,ni),wij(1,1,1),mnbls)
amshift.f:                  call dcopy(mnbls,x3l34(1,ni),1,wij(1,1,1),1)
amshift.f:c     call tfer(wij(1,nk,nl),buf(1,indx),mnbls)
amshift.f:      call dcopy(mnbls,wij(1,nk,nl),1,buf(1,indx),1)
amshift.f:     *                buf2,lt1,lt2,bij1,bij2,bkl1,bkl2,lt3,lt4,
amshift.f:     *                bij3,bkl3,b2l1,b2l2,b2l3,b2l4,
amshift.f:     *                wij,lt6,vij,uij,sij,lt7,
amshift.f:     *                xij,lt8,lt9,yij,zij,lt10,
amshift.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,mmax,
amshift.f:     * nqi,nqj,nqk,nql,nsij,nskl,
amshift.f:     * nqij,nqij1,nsij1,nqkl,nqkl1,nskl1,ijbex,klbex
amshift.f:      common/shell/lshellt,lshelij,lshelkl,lhelp,lcas2(4),lcas3(4)
amshift.f:     * bij1(mnbls,lt3,lt2),bij2(mnbls,lt3,lt2),
amshift.f:     * bij3(mnbls,lt2),bkl3(mnbls,lt1),
amshift.f:      dimension wij(mnbls,lt6,lt7),
amshift.f:     * vij(mnbls,lt6,lt7),uij(mnbls,lt6,lt7),sij(mnbls,lt6,lt7)
amshift.f:      dimension xij(mnbls,lt8,lt3,lt9),yij(mnbls,lt8,lt10,lt4)
amshift.f:     *                            ,zij(mnbls,lt8,lt10,lt4)
amshift.f:       icoun3=(nfu(nqij+1)-nfu(nqix))*mnbls
amshift.f:c      do 101 ij=nqix,nsij
amshift.f:       do 101 ij=1,3
amshift.f:c      ijbeg=nfu(ij)+1
amshift.f:c      ijend=nfu(ij+1)
amshift.f:c          do 102 nij=ijbeg,ijend
amshift.f:c          call tfer(buf2(1,nij,nkl),wij(1,nij,1),mnbls)
amshift.f:       nij=nfu(ij)+1
amshift.f:       ijcount=(nfu(ij+1)-nfu(ij))*mnbls
amshift.f:       call dcopy(ijcount,buf2(1,nij,nkl),1,wij(1,nij,1),1)
amshift.f:c          do 103 nij=ijbeg,ijend
amshift.f:c          call tfer(bkl1(1,nij,nkl),vij(1,nij,1),mnbls)
amshift.f:           call dcopy(ijcount,bkl1(1,nij,nkl),1,vij(1,nij,1),1)
amshift.f:c          do 104 nij=ijbeg,ijend
amshift.f:c          call tfer(bkl2(1,nij,nkl),uij(1,nij,1),mnbls)
amshift.f:           call dcopy(ijcount,bkl2(1,nij,nkl),1,uij(1,nij,1),1)
amshift.f:c          do 105 nij=ijbeg,ijend
amshift.f:c          call tfer(bkl3(1,nij),sij(1,nij,1),mnbls)
amshift.f:           call dcopy(ijcount,bkl3(1,nij),1,sij(1,nij,1),1)
amshift.f:        call horiz12(wij,lt6,lt7,xab,mnbls,nqi,nqj,nsij1)
amshift.f:            call horiz12(vij,lt6,lt7,xab,mnbls,nqi,nqj,nsij1)
amshift.f:            call horiz12(uij,lt6,lt7,xab,mnbls,nqi,nqj,nsij1)
amshift.f:            call horiz12(sij,lt6,lt7,xab,mnbls,nqi,nqj,nsij1)
amshift.f:c       call tfer(wij(1,ni,nj),xij(1,ni,nj,nkl),mnbls)
amshift.f:        call dcopy(icount,wij(1,nibeg,nj),1,xij(1,nibeg,nj,nkl),1)
amshift.f:c       call tfer(vij(1,ni,nj),yij(1,ni,nj,nkl),mnbls)
amshift.f:c       call tfer(uij(1,ni,nj),zij(1,ni,nj,nkl),mnbls)
amshift.f:        call dcopy(icount,vij(1,nibeg,nj),1,yij(1,nibeg,nj,nkl),1)
amshift.f:        call dcopy(icount,uij(1,nibeg,nj),1,zij(1,nibeg,nj,nkl),1)
amshift.f:     *   xij(1,1,2,nkl),xij(1,1,3,nkl),xij(1,1,4,nkl),
amshift.f:     *   bij1(1,2,nkl),bij1(1,3,nkl),bij1(1,4,nkl),bij1(1,1,nkl))
amshift.f:c          do 108 nij=nfu(nqi )+1,nfu(nqi +1)
amshift.f:c          call tfer(bij2(1,nij,nkl),xij(1,nij,1,nkl),mnbls)
amshift.f:           call dcopy(icoun2,bij2(1,nibe2,nkl),1,xij(1,nibe2,1,nkl),1)
amshift.f:c          call tfer(bij3(1,nkl),xij(1,1,1,nkl),mnbls)
amshift.f:           call dcopy(mnbls,bij3(1,nkl),1,xij(1,1,1,nkl),1)
amshift.f:c               do 1101 nij=nfu(nqix)+1,nfu(nqij+1)
amshift.f:c               call tfer(b3l4(1,nij ),x3l4(1,nij),mnbls)
amshift.f:c        call tfer(xij(1,ni,nj,nkl),wij(1,nkl,1),mnbls)
amshift.f:         call dcopy(mnbls,xij(1,ni,nj,nkl),1,wij(1,nkl,1),1)
amshift.f:           call horiz12(wij,lt6,lt7,xcd,mnbls,nqk,nql,nskl1)
amshift.f:      call daxpy3(mnbls,xcd,wij(1,1,2),wij(1,1,3),wij(1,1,4),
amshift.f:     * yij(1,ni,nj,2),yij(1,ni,nj,3),yij(1,ni,nj,4),yij(1,ni,nj,1))
amshift.f:c        call tfer(zij(1,ni,nj,nkl),wij(1,nkl,1),mnbls)
amshift.f:         call dcopy(mnbls,zij(1,ni,nj,nkl),1,wij(1,nkl,1),1)
amshift.f:c        call tfer(sij(1,ni,nj),wij(1,1,1),mnbls)
amshift.f:         call dcopy(mnbls,sij(1,ni,nj),1,wij(1,1,1),1)
amshift.f:      call daxpy3(mnbls,xcd,wij(1,1,2),wij(1,1,3),wij(1,1,4),
amshift.f:c             call tfer(x2l2(1,nj,2),wij(1,2,1),mnbls)
amshift.f:c             call tfer(x2l2(1,nj,3),wij(1,3,1),mnbls)
amshift.f:c             call tfer(x2l2(1,nj,4),wij(1,4,1),mnbls)
amshift.f:              call dcopy(mnbls,x2l2(1,nj,2),1,wij(1,2,1),1)
amshift.f:              call dcopy(mnbls,x2l2(1,nj,3),1,wij(1,3,1),1)
amshift.f:              call dcopy(mnbls,x2l2(1,nj,4),1,wij(1,4,1),1)
amshift.f:      call daxpy3(mnbls,xcd,wij(1,1,2),wij(1,1,3),wij(1,1,4),
amshift.f:c             call tfer(x2l4(1,ni,2),wij(1,2,1),mnbls)
amshift.f:c             call tfer(x2l4(1,ni,3),wij(1,3,1),mnbls)
amshift.f:c             call tfer(x2l4(1,ni,4),wij(1,4,1),mnbls)
amshift.f:              call dcopy(mnbls,x2l4(1,ni,2),1,wij(1,2,1),1)
amshift.f:              call dcopy(mnbls,x2l4(1,ni,3),1,wij(1,3,1),1)
amshift.f:              call dcopy(mnbls,x2l4(1,ni,4),1,wij(1,4,1),1)
amshift.f:c             if(ni.eq.1) call tfer(x3l3(1,nj),wij(1,1,1),mnbls)
amshift.f:c             if(nj.eq.1) call tfer(x3l4(1,ni),wij(1,1,1),mnbls)
amshift.f:              if(ni.eq.1) call dcopy(mnbls,x3l3(1,nj),1,wij(1,1,1),1)
amshift.f:              if(nj.eq.1) call dcopy(mnbls,x3l4(1,ni),1,wij(1,1,1),1)
amshift.f:      call daxpy3(mnbls,xcd,wij(1,1,2),wij(1,1,3),wij(1,1,4),
amshift.f:c         call tfer(x3l2(1,2),wij(1,2,1),mnbls)
amshift.f:c         call tfer(x3l2(1,3),wij(1,3,1),mnbls)
amshift.f:c         call tfer(x3l2(1,4),wij(1,4,1),mnbls)
amshift.f:          call dcopy(mnbls3,x3l2(1,2),1,wij(1,2,1),1)
amshift.f:c         call tfer(ssss(1),wij(1,1,1),mnbls)
amshift.f:          call dcopy(mnbls,ssss(1),1,wij(1,1,1),1)
amshift.f:c     call tfer(wij(1,nk,nl),buf(1,indx),mnbls)
amshift.f:      call dcopy(mnbls,wij(1,nk,nl),1,buf(1,indx),1)
amshift.f:      subroutine horiz12_ab(buf2,wij,lw1,lw2,xab,mnbls,nqi,nqj,nsij1,
amshift.f:     *                      xij,lt4)
amshift.f:      dimension wij(mnbls,lw1,lw2),xab(mnbls,3)
amshift.f:      dimension buf2(mnbls,*),xij(mnbls,lt4,*)
amshift.f:               do i=nsij1-j,nqi,-1
amshift.f:                  nij=npxyz(kcr,ni)
amshift.f:                     xij(n,ni,nj)=buf2(n,nij) + xab(n,kcr)*buf2(n,ni)
amshift.f:            do i=nsij1-j,nqi,-1
amshift.f:               nij=npxyz(kcr,ni)
amshift.f:                  wij(n,ni,nj)=buf2(n,nij) + xab(n,kcr)*buf2(n,ni)
amshift.f:            do i=nsij1-j,nqi,-1
amshift.f:               nij=npxyz(kcr,ni)
amshift.f:                  wij(n,ni,nj)=wij(n,nij,njm)+xab(n,kcr)*wij(n,ni,njm)
amshift.f:            do i=nsij1-j,nqi+1,-1
amshift.f:               nij=npxyz(kcr,ni)
amshift.f:                  wij(n,ni,nj)=wij(n,nij,njm)+xab(n,kcr)*wij(n,ni,njm)
amshift.f:               nij=npxyz(kcr,ni)
amshift.f:                  xij(n,ni,nj)=wij(n,nij,njm)+xab(n,kcr)*wij(n,ni,njm)
amshift.f:      subroutine horiz12(wij,lw1,lw2,xab,mnbls,nqi,nqj,nsij1)
amshift.f:      dimension wij(mnbls,lw1,lw2),xab(mnbls,3)
amshift.f:                do 120 i=nsij1-j,nqi,-1
amshift.f:                      nij=npxyz(kcr,ni)
amshift.f:        wij(n,ni,nj)=wij(n,nij,njm)+ xab(n,kcr) *wij(n,ni,njm)
amshift.f:     *                   wij,wij0,lt3,lsjl,
amshift.f:     *                   xij,xij0,lt4,lt5,lt6,mnbls,nbls,
amshift.f:      common/shell/lshellt,lshelij,lshelkl,lhelp,lcas2(4),lcas3(4)
amshift.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,mmax,
amshift.f:     * nqi,nqj,nqk,nql,nsij,nskl,
amshift.f:     * nqij,nqij1,nsij1,nqkl,nqkl1,nskl1,ijbex,klbex
amshift.f:      dimension buf0(nbls,lt1,lt2),wij0(nbls,lt3,lsjl)
amshift.f:      dimension buf2(mnbls,lt1,lt2),wij(mnbls,lt3,lsjl)
amshift.f:      dimension xij(mnbls,lt4,lt5,lt6), xij0(nbls,lt4,lt5,lt6)
amshift.f:         if(nsij.eq.nqij) then
amshift.f:            call dcopy(icount,buf2(1,nibeg,nkl),1,xij(1,nibeg,1,nkl),1)
amshift.f:            call dcopy(icoun2,buf0(1,nibeg,nkl),1,xij0(1,nibeg,1,nkl),1)
amshift.f:     *                       wij0,wij,lt3,lsjl,xab, nbls,nqi,nqj,nsij1,
amshift.f:     *                       xij(1,1,1,nkl),xij0(1,1,1,nkl),lt4)
amshift.f:c           call tfer( xij(1,ni,nj,nkl), wij(1,nkl,1),mnbls)
amshift.f:c           call tfer(xij0(1,ni,nj,nkl),wij0(1,nkl,1), nbls)
amshift.f:            call dcopy(mnbls,xij(1,ni,nj,nkl),1,wij(1,nkl,1),1)
amshift.f:            call dcopy(nbls,xij0(1,ni,nj,nkl),1,wij0(1,nkl,1),1)
amshift.f:         call horiz34_der1(wij0,wij,lt3,lsjl,xcd, nbls,nqk,nql,nskl1,
amshift.f:c     call tfer(wij(1,nk,nl),buf(1,indx),mnbls)
amshift.f:      call dcopy(mnbls,wij(1,nk,nl),1,buf(1,indx),1)
amshift.f:     *                        wij0,wij2,lw1,lw2,xab,nbls,nqi,nqj,nsij1,
amshift.f:     *                        xij2,xij0,lt4)
amshift.f:      dimension xij0(nbls,lt4,*),xij2(9,nbls,lt4,*)
amshift.f:      dimension wij0(nbls,lw1,lw2)
amshift.f:      dimension wij2(9,nbls,lw1,lw2),xab(9,nbls,3)
amshift.f:c  wij(1),wij(2),wij(3),wij(4),wij(5),wij(6),wij(7),wij(8),wij(9)
amshift.f:                do 120 i=nsij1-j,nqi,-1
amshift.f:                   nij=npxyz(kcr,ni)
amshift.f:                         xij0(  n,ni,nj)=buf0(  n,nij)
amshift.f:                         xij2(1,n,ni,nj)=buf2(1,n,nij)
amshift.f:                         xij2(2,n,ni,nj)=buf2(2,n,nij)
amshift.f:                         xij2(3,n,ni,nj)=buf2(3,n,nij)
amshift.f:                         xij2(4,n,ni,nj)=buf2(4,n,nij)
amshift.f:                         xij2(5,n,ni,nj)=buf2(5,n,nij)
amshift.f:                         xij2(6,n,ni,nj)=buf2(6,n,nij)
amshift.f:                         xij2(7,n,ni,nj)=buf2(7,n,nij)
amshift.f:                         xij2(8,n,ni,nj)=buf2(8,n,nij)
amshift.f:                         xij2(9,n,ni,nj)=buf2(9,n,nij)
amshift.f:                         xij0(  n,ni,nj)=buf0(  n,nij)+xab1*buf0(  n,ni)
amshift.f:                         xij2(1,n,ni,nj)=buf2(1,n,nij)+xab1*buf2(1,n,ni)
amshift.f:                         xij2(2,n,ni,nj)=buf2(2,n,nij)+xab1*buf2(2,n,ni)
amshift.f:                         xij2(3,n,ni,nj)=buf2(3,n,nij)+xab1*buf2(3,n,ni)
amshift.f:                         xij2(4,n,ni,nj)=buf2(4,n,nij)+xab1*buf2(4,n,ni)
amshift.f:                         xij2(5,n,ni,nj)=buf2(5,n,nij)+xab1*buf2(5,n,ni)
amshift.f:                         xij2(6,n,ni,nj)=buf2(6,n,nij)+xab1*buf2(6,n,ni)
amshift.f:                         xij2(7,n,ni,nj)=buf2(7,n,nij)+xab1*buf2(7,n,ni)
amshift.f:                         xij2(8,n,ni,nj)=buf2(8,n,nij)+xab1*buf2(8,n,ni)
amshift.f:                         xij2(9,n,ni,nj)=buf2(9,n,nij)+xab1*buf2(9,n,ni)
amshift.f:                         xij2(k32,n,ni,nj)=xij2(k32,n,ni,nj)+buf0(n,ni)
amshift.f:                         xij2(k31,n,ni,nj)=xij2(k31,n,ni,nj)-buf0(n,ni)
amshift.f:                do 220 i=nsij1-j,nqi,-1
amshift.f:                   nij=npxyz(kcr,ni)
amshift.f:                         wij0(  n,ni,nj)=buf0(  n,nij)
amshift.f:                         wij2(1,n,ni,nj)=buf2(1,n,nij)
amshift.f:                         wij2(2,n,ni,nj)=buf2(2,n,nij)
amshift.f:                         wij2(3,n,ni,nj)=buf2(3,n,nij)
amshift.f:                         wij2(4,n,ni,nj)=buf2(4,n,nij)
amshift.f:                         wij2(5,n,ni,nj)=buf2(5,n,nij)
amshift.f:                         wij2(6,n,ni,nj)=buf2(6,n,nij)
amshift.f:                         wij2(7,n,ni,nj)=buf2(7,n,nij)
amshift.f:                         wij2(8,n,ni,nj)=buf2(8,n,nij)
amshift.f:                         wij2(9,n,ni,nj)=buf2(9,n,nij)
amshift.f:                         wij0(  n,ni,nj)=buf0(  n,nij)+xab1*buf0(  n,ni)
amshift.f:                         wij2(1,n,ni,nj)=buf2(1,n,nij)+xab1*buf2(1,n,ni)
amshift.f:                         wij2(2,n,ni,nj)=buf2(2,n,nij)+xab1*buf2(2,n,ni)
amshift.f:                         wij2(3,n,ni,nj)=buf2(3,n,nij)+xab1*buf2(3,n,ni)
amshift.f:                         wij2(4,n,ni,nj)=buf2(4,n,nij)+xab1*buf2(4,n,ni)
amshift.f:                         wij2(5,n,ni,nj)=buf2(5,n,nij)+xab1*buf2(5,n,ni)
amshift.f:                         wij2(6,n,ni,nj)=buf2(6,n,nij)+xab1*buf2(6,n,ni)
amshift.f:                         wij2(7,n,ni,nj)=buf2(7,n,nij)+xab1*buf2(7,n,ni)
amshift.f:                         wij2(8,n,ni,nj)=buf2(8,n,nij)+xab1*buf2(8,n,ni)
amshift.f:                         wij2(9,n,ni,nj)=buf2(9,n,nij)+xab1*buf2(9,n,ni)
amshift.f:                         wij2(k32,n,ni,nj)=wij2(k32,n,ni,nj)+buf0(n,ni)
amshift.f:                         wij2(k31,n,ni,nj)=wij2(k31,n,ni,nj)-buf0(n,ni)
amshift.f:                do 320 i=nsij1-j,nqi,-1
amshift.f:                   nij=npxyz(kcr,ni)
amshift.f:                         wij0(  n,ni,nj)=wij0(  n,nij,njm)
amshift.f:                         wij2(1,n,ni,nj)=wij2(1,n,nij,njm)
amshift.f:                         wij2(2,n,ni,nj)=wij2(2,n,nij,njm)
amshift.f:                         wij2(3,n,ni,nj)=wij2(3,n,nij,njm)
amshift.f:                         wij2(4,n,ni,nj)=wij2(4,n,nij,njm)
amshift.f:                         wij2(5,n,ni,nj)=wij2(5,n,nij,njm)
amshift.f:                         wij2(6,n,ni,nj)=wij2(6,n,nij,njm)
amshift.f:                         wij2(7,n,ni,nj)=wij2(7,n,nij,njm)
amshift.f:                         wij2(8,n,ni,nj)=wij2(8,n,nij,njm)
amshift.f:                         wij2(9,n,ni,nj)=wij2(9,n,nij,njm)
amshift.f:               wij0(  n,ni,nj)=wij0(  n,nij,njm) + xab1*wij0(  n,ni,njm)
amshift.f:               wij2(1,n,ni,nj)=wij2(1,n,nij,njm) + xab1*wij2(1,n,ni,njm)
amshift.f:               wij2(2,n,ni,nj)=wij2(2,n,nij,njm) + xab1*wij2(2,n,ni,njm)
amshift.f:               wij2(3,n,ni,nj)=wij2(3,n,nij,njm) + xab1*wij2(3,n,ni,njm)
amshift.f:               wij2(4,n,ni,nj)=wij2(4,n,nij,njm) + xab1*wij2(4,n,ni,njm)
amshift.f:               wij2(5,n,ni,nj)=wij2(5,n,nij,njm) + xab1*wij2(5,n,ni,njm)
amshift.f:               wij2(6,n,ni,nj)=wij2(6,n,nij,njm) + xab1*wij2(6,n,ni,njm)
amshift.f:               wij2(7,n,ni,nj)=wij2(7,n,nij,njm) + xab1*wij2(7,n,ni,njm)
amshift.f:               wij2(8,n,ni,nj)=wij2(8,n,nij,njm) + xab1*wij2(8,n,ni,njm)
amshift.f:               wij2(9,n,ni,nj)=wij2(9,n,nij,njm) + xab1*wij2(9,n,ni,njm)
amshift.f:                      wij2(k32,n,ni,nj)=wij2(k32,n,ni,nj)+wij0(n,ni,njm)
amshift.f:                      wij2(k31,n,ni,nj)=wij2(k31,n,ni,nj)-wij0(n,ni,njm)
amshift.f:                do 420 i=nsij1-j,nqi+1,-1
amshift.f:                   nij=npxyz(kcr,ni)
amshift.f:                         wij0(  n,ni,nj)=wij0(  n,nij,njm)
amshift.f:                         wij2(1,n,ni,nj)=wij2(1,n,nij,njm)
amshift.f:                         wij2(2,n,ni,nj)=wij2(2,n,nij,njm)
amshift.f:                         wij2(3,n,ni,nj)=wij2(3,n,nij,njm)
amshift.f:                         wij2(4,n,ni,nj)=wij2(4,n,nij,njm)
amshift.f:                         wij2(5,n,ni,nj)=wij2(5,n,nij,njm)
amshift.f:                         wij2(6,n,ni,nj)=wij2(6,n,nij,njm)
amshift.f:                         wij2(7,n,ni,nj)=wij2(7,n,nij,njm)
amshift.f:                         wij2(8,n,ni,nj)=wij2(8,n,nij,njm)
amshift.f:                         wij2(9,n,ni,nj)=wij2(9,n,nij,njm)
amshift.f:               wij0(  n,ni,nj)=wij0(  n,nij,njm) + xab1*wij0(  n,ni,njm)
amshift.f:               wij2(1,n,ni,nj)=wij2(1,n,nij,njm) + xab1*wij2(1,n,ni,njm)
amshift.f:               wij2(2,n,ni,nj)=wij2(2,n,nij,njm) + xab1*wij2(2,n,ni,njm)
amshift.f:               wij2(3,n,ni,nj)=wij2(3,n,nij,njm) + xab1*wij2(3,n,ni,njm)
amshift.f:               wij2(4,n,ni,nj)=wij2(4,n,nij,njm) + xab1*wij2(4,n,ni,njm)
amshift.f:               wij2(5,n,ni,nj)=wij2(5,n,nij,njm) + xab1*wij2(5,n,ni,njm)
amshift.f:               wij2(6,n,ni,nj)=wij2(6,n,nij,njm) + xab1*wij2(6,n,ni,njm)
amshift.f:               wij2(7,n,ni,nj)=wij2(7,n,nij,njm) + xab1*wij2(7,n,ni,njm)
amshift.f:               wij2(8,n,ni,nj)=wij2(8,n,nij,njm) + xab1*wij2(8,n,ni,njm)
amshift.f:               wij2(9,n,ni,nj)=wij2(9,n,nij,njm) + xab1*wij2(9,n,ni,njm)
amshift.f:                      wij2(k32,n,ni,nj)=wij2(k32,n,ni,nj)+wij0(n,ni,njm)
amshift.f:                      wij2(k31,n,ni,nj)=wij2(k31,n,ni,nj)-wij0(n,ni,njm)
amshift.f:                   nij=npxyz(kcr,ni)
amshift.f:                         xij0(  n,ni,nj)=wij0(  n,nij,njm)
amshift.f:                         xij2(1,n,ni,nj)=wij2(1,n,nij,njm)
amshift.f:                         xij2(2,n,ni,nj)=wij2(2,n,nij,njm)
amshift.f:                         xij2(3,n,ni,nj)=wij2(3,n,nij,njm)
amshift.f:                         xij2(4,n,ni,nj)=wij2(4,n,nij,njm)
amshift.f:                         xij2(5,n,ni,nj)=wij2(5,n,nij,njm)
amshift.f:                         xij2(6,n,ni,nj)=wij2(6,n,nij,njm)
amshift.f:                         xij2(7,n,ni,nj)=wij2(7,n,nij,njm)
amshift.f:                         xij2(8,n,ni,nj)=wij2(8,n,nij,njm)
amshift.f:                         xij2(9,n,ni,nj)=wij2(9,n,nij,njm)
amshift.f:               xij0(  n,ni,nj)=wij0(  n,nij,njm) + xab1*wij0(  n,ni,njm)
amshift.f:               xij2(1,n,ni,nj)=wij2(1,n,nij,njm) + xab1*wij2(1,n,ni,njm)
amshift.f:               xij2(2,n,ni,nj)=wij2(2,n,nij,njm) + xab1*wij2(2,n,ni,njm)
amshift.f:               xij2(3,n,ni,nj)=wij2(3,n,nij,njm) + xab1*wij2(3,n,ni,njm)
amshift.f:               xij2(4,n,ni,nj)=wij2(4,n,nij,njm) + xab1*wij2(4,n,ni,njm)
amshift.f:               xij2(5,n,ni,nj)=wij2(5,n,nij,njm) + xab1*wij2(5,n,ni,njm)
amshift.f:               xij2(6,n,ni,nj)=wij2(6,n,nij,njm) + xab1*wij2(6,n,ni,njm)
amshift.f:               xij2(7,n,ni,nj)=wij2(7,n,nij,njm) + xab1*wij2(7,n,ni,njm)
amshift.f:               xij2(8,n,ni,nj)=wij2(8,n,nij,njm) + xab1*wij2(8,n,ni,njm)
amshift.f:               xij2(9,n,ni,nj)=wij2(9,n,nij,njm) + xab1*wij2(9,n,ni,njm)
amshift.f:                      xij2(k32,n,ni,nj)=xij2(k32,n,ni,nj)+wij0(n,ni,njm)
amshift.f:                      xij2(k31,n,ni,nj)=xij2(k31,n,ni,nj)-wij0(n,ni,njm)
amshift.f:      subroutine horiz34_der1(wij0,wij,lw1,lw2,xab,nbls,nqi,nqj,nsij1,
amshift.f:      dimension wij0(nbls,lw1,lw2),wij(9,nbls,lw1,lw2),xab(9,nbls,3)
amshift.f:c  wij(1),wij(2),wij(3),wij(4),wij(5),wij(6),wij(7),wij(8),wij(9)
amshift.f:            do 220 i=nsij1-j,nqi,-1
amshift.f:                  nij=npxyz(kcr,ni)
amshift.f:                     wij0(n,ni,nj)=wij0(n,nij,njm)
amshift.f:                     wij(1,n,ni,nj)=wij(1,n,nij,njm)
amshift.f:                     wij(2,n,ni,nj)=wij(2,n,nij,njm)
amshift.f:                     wij(3,n,ni,nj)=wij(3,n,nij,njm)
amshift.f:                     wij(4,n,ni,nj)=wij(4,n,nij,njm)
amshift.f:                     wij(5,n,ni,nj)=wij(5,n,nij,njm)
amshift.f:                     wij(6,n,ni,nj)=wij(6,n,nij,njm)
amshift.f:                     wij(7,n,ni,nj)=wij(7,n,nij,njm)
amshift.f:                     wij(8,n,ni,nj)=wij(8,n,nij,njm)
amshift.f:                     wij(9,n,ni,nj)=wij(9,n,nij,njm)
amshift.f:                    wij0(n,ni,nj)=wij0(n,nij,njm) + xab1*wij0(n,ni,njm)
amshift.f:                    wij(1,n,ni,nj)=wij(1,n,nij,njm)+xab1*wij(1,n,ni,njm)
amshift.f:                    wij(2,n,ni,nj)=wij(2,n,nij,njm)+xab1*wij(2,n,ni,njm)
amshift.f:                    wij(3,n,ni,nj)=wij(3,n,nij,njm)+xab1*wij(3,n,ni,njm)
amshift.f:                    wij(4,n,ni,nj)=wij(4,n,nij,njm)+xab1*wij(4,n,ni,njm)
amshift.f:                    wij(5,n,ni,nj)=wij(5,n,nij,njm)+xab1*wij(5,n,ni,njm)
amshift.f:                    wij(6,n,ni,nj)=wij(6,n,nij,njm)+xab1*wij(6,n,ni,njm)
amshift.f:                    wij(7,n,ni,nj)=wij(7,n,nij,njm)+xab1*wij(7,n,ni,njm)
amshift.f:                    wij(8,n,ni,nj)=wij(8,n,nij,njm)+xab1*wij(8,n,ni,njm)
amshift.f:                    wij(9,n,ni,nj)=wij(9,n,nij,njm)+xab1*wij(9,n,ni,njm)
amshift.f:                    wij(kc3,n,ni,nj)=wij(kc3,n,ni,nj) + wij0(n,ni,njm)
amshift.f:     *                   wij,wij1,wij0,lt3,lsjl,
amshift.f:     *                   xij,xij1,xij0,lt4,lt5,lt6,mnbls,nbls,
amshift.f:      common/shell/lshellt,lshelij,lshelkl,lhelp,lcas2(4),lcas3(4)
amshift.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,mmax,
amshift.f:     * nqi,nqj,nqk,nql,nsij,nskl,
amshift.f:     * nqij,nqij1,nsij1,nqkl,nqkl1,nskl1,ijbex,klbex
amshift.f:      dimension buf0(nbls,lt1,lt2),wij0(nbls,lt3,lsjl)
amshift.f:      dimension buf1(9*nbls,lt1,lt2),wij1(9*nbls,lt3,lsjl)
amshift.f:      dimension buf2(mnbls,lt1,lt2),wij(mnbls,lt3,lsjl)
amshift.f:      dimension xij(mnbls,lt4,lt5,lt6),xij1(9*nbls,lt4,lt5,lt6),
amshift.f:     *                                 xij0(  nbls,lt4,lt5,lt6)
amshift.f:           do 102 nij=nfu(nqix)+1,nfu(nsij+1)
amshift.f:           call tfer(buf2(1,nij,nkl),wij(1,nij,1),mnbls)
amshift.f:           call tfer(buf1(1,nij,nkl),wij1(1,nij,1),nbls9)
amshift.f:           call tfer(buf0(1,nij,nkl),wij0(1,nij,1),nbls)
amshift.f:           call horiz12_der2(wij0,wij1,wij,
amshift.f:     *                       lt3,lsjl,xab, nbls,nqi,nqj,nsij1)
amshift.f:           call tfer(wij(1,ni,nj),xij(1,ni,nj,nkl),mnbls)
amshift.f:           call tfer(wij1(1,ni,nj),xij1(1,ni,nj,nkl),nbls9)
amshift.f:           call tfer(wij0(1,ni,nj),xij0(1,ni,nj,nkl),nbls)
amshift.f:c        call tfer( xij(1,ni,nj,nkl), wij(1,nkl,1),mnbls)
amshift.f:c        call tfer(xij1(1,ni,nj,nkl),wij1(1,nkl,1),nbls9)
amshift.f:c        call tfer(xij0(1,ni,nj,nkl),wij0(1,nkl,1), nbls)
amshift.f:         call dcopy(mnbls,xij(1,ni,nj,nkl),1,wij(1,nkl,1),1)
amshift.f:         call dcopy(nbls9,xij1(1,ni,nj,nkl),1,wij1(1,nkl,1),1)
amshift.f:         call dcopy(nbls,xij0(1,ni,nj,nkl),1,wij0(1,nkl,1),1)
amshift.f:         call horiz34_der2(wij0,wij1,wij,
amshift.f:cold  call tfer(wij(1,nk,nl),buf(1,indx),mnbls)
amshift.f:cold  call dcopy(mnbls,wij(1,nk,nl),1,buf(1,indx),1)  ! only 2ed der.
amshift.f:      call dcopy(nbls9,wij1(1,nk,nl),1,buf(1,indx),1) ! 1st-der
amshift.f:      call dcopy(mnbls, wij(1,nk,nl),1,buh(1,indx),1) ! 2ed-der
amshift.f:      subroutine horiz12_der2(wij0,wij1,wij2,
amshift.f:     *                        lw1,lw2,xab,nbls,nqi,nqj,nsij1)
amshift.f:      dimension wij0(nbls,lw1,lw2)
amshift.f:      dimension wij1(9,nbls,lw1,lw2)
amshift.f:      dimension wij2(45,nbls,lw1,lw2),xab(45,nbls,3)
amshift.f:                do 120 i=nsij1-j,nqi,-1
amshift.f:                      nij=npxyz(kcr,ni)
amshift.f:      wij0(n,ni,nj)=wij0(n,nij,njm) + xab(1,n,kcr)*wij0(n,ni,njm)
amshift.f:      wij1(m,n,ni,nj)=wij1(m,n,nij,njm) + xab(1,n,kcr)*wij1(m,n,ni,njm)
amshift.f:      wij2(m,n,ni,nj)=wij2(m,n,nij,njm) + xab(1,n,kcr)*wij2(m,n,ni,njm)
amshift.f:             wij1(1,n,ni,nj)=wij1(1,n,ni,nj) + wij0(n,ni,njm)
amshift.f:             wij1(2,n,ni,nj)=wij1(2,n,ni,nj) - wij0(n,ni,njm)
amshift.f:             wij1(4,n,ni,nj)=wij1(4,n,ni,nj) + wij0(n,ni,njm)
amshift.f:             wij1(5,n,ni,nj)=wij1(5,n,ni,nj) - wij0(n,ni,njm)
amshift.f:             wij1(7,n,ni,nj)=wij1(7,n,ni,nj) + wij0(n,ni,njm)
amshift.f:             wij1(8,n,ni,nj)=wij1(8,n,ni,nj) - wij0(n,ni,njm)
amshift.f:             wij2(1,n,ni,nj)=wij2(1,n,ni,nj) + wij1(1,n,ni,njm)*2.d0
amshift.f:             wij2(2,n,ni,nj)=wij2(2,n,ni,nj) + wij1(4,n,ni,njm)
amshift.f:             wij2(3,n,ni,nj)=wij2(3,n,ni,nj) + wij1(7,n,ni,njm)
amshift.f:             wij2(7,n,ni,nj) =wij2(7,n,ni,nj) - wij1(1,n,ni,njm)
amshift.f:     *                                        + wij1(2,n,ni,njm)
amshift.f:             wij2(8,n,ni,nj) =wij2(8,n,ni,nj) + wij1(5,n,ni,njm)
amshift.f:             wij2(9,n,ni,nj) =wij2(9,n,ni,nj) + wij1(8,n,ni,njm)
amshift.f:             wij2(10,n,ni,nj)=wij2(10,n,ni,nj)- wij1(4,n,ni,njm)
amshift.f:             wij2(13,n,ni,nj)=wij2(13,n,ni,nj)- wij1(7,n,ni,njm)
amshift.f:             wij2(16,n,ni,nj)=wij2(16,n,ni,nj)+ wij1(3,n,ni,njm)
amshift.f:             wij2(17,n,ni,nj)=wij2(17,n,ni,nj)+ wij1(6,n,ni,njm)
amshift.f:             wij2(18,n,ni,nj)=wij2(18,n,ni,nj)+ wij1(9,n,ni,njm)
amshift.f:             wij2(25,n,ni,nj)=wij2(25,n,ni,nj)- wij1(2,n,ni,njm)*2.d0
amshift.f:             wij2(26,n,ni,nj)=wij2(26,n,ni,nj)- wij1(5,n,ni,njm)
amshift.f:             wij2(27,n,ni,nj)=wij2(27,n,ni,nj)- wij1(8,n,ni,njm)
amshift.f:             wij2(31,n,ni,nj)=wij2(31,n,ni,nj)- wij1(3,n,ni,njm)
amshift.f:             wij2(32,n,ni,nj)=wij2(32,n,ni,nj)- wij1(6,n,ni,njm)
amshift.f:             wij2(33,n,ni,nj)=wij2(33,n,ni,nj)- wij1(9,n,ni,njm)
amshift.f:             wij2(2,n,ni,nj)=wij2(2,n,ni,nj) + wij1(1,n,ni,njm)
amshift.f:             wij2(4,n,ni,nj)=wij2(4,n,ni,nj) + wij1(4,n,ni,njm)*2.d0
amshift.f:             wij2(5,n,ni,nj)=wij2(5,n,ni,nj) + wij1(7,n,ni,njm)
amshift.f:             wij2(8,n,ni,nj) =wij2(8,n,ni,nj) - wij1(1,n,ni,njm)
amshift.f:             wij2(10,n,ni,nj)=wij2(10,n,ni,nj)+ wij1(2,n,ni,njm)
amshift.f:             wij2(11,n,ni,nj)=wij2(11,n,ni,nj)- wij1(4,n,ni,njm)
amshift.f:     *                                        + wij1(5,n,ni,njm)
amshift.f:             wij2(12,n,ni,nj)=wij2(12,n,ni,nj)+ wij1(8,n,ni,njm)
amshift.f:             wij2(14,n,ni,nj)=wij2(14,n,ni,nj)- wij1(7,n,ni,njm)
amshift.f:             wij2(19,n,ni,nj)=wij2(19,n,ni,nj)+ wij1(3,n,ni,njm)
amshift.f:             wij2(20,n,ni,nj)=wij2(20,n,ni,nj)+ wij1(6,n,ni,njm)
amshift.f:             wij2(21,n,ni,nj)=wij2(21,n,ni,nj)+ wij1(9,n,ni,njm)
amshift.f:             wij2(26,n,ni,nj)=wij2(26,n,ni,nj)- wij1(2,n,ni,njm)
amshift.f:             wij2(28,n,ni,nj)=wij2(28,n,ni,nj)- wij1(5,n,ni,njm)*2.d0
amshift.f:             wij2(29,n,ni,nj)=wij2(29,n,ni,nj)- wij1(8,n,ni,njm)
amshift.f:             wij2(34,n,ni,nj)=wij2(34,n,ni,nj)- wij1(3,n,ni,njm)
amshift.f:             wij2(35,n,ni,nj)=wij2(35,n,ni,nj)- wij1(6,n,ni,njm)
amshift.f:             wij2(36,n,ni,nj)=wij2(36,n,ni,nj)- wij1(9,n,ni,njm)
amshift.f:             wij2(3,n,ni,nj)=wij2(3,n,ni,nj) + wij1(1,n,ni,njm)
amshift.f:             wij2(5,n,ni,nj)=wij2(5,n,ni,nj) + wij1(4,n,ni,njm)
amshift.f:             wij2(6,n,ni,nj)=wij2(6,n,ni,nj) + wij1(7,n,ni,njm)*2.d0
amshift.f:             wij2(9,n,ni,nj) =wij2(9,n,ni,nj) - wij1(1,n,ni,njm)
amshift.f:             wij2(12,n,ni,nj)=wij2(12,n,ni,nj)- wij1(4,n,ni,njm)
amshift.f:             wij2(13,n,ni,nj)=wij2(13,n,ni,nj)+ wij1(2,n,ni,njm)
amshift.f:             wij2(14,n,ni,nj)=wij2(14,n,ni,nj)+ wij1(5,n,ni,njm)
amshift.f:             wij2(15,n,ni,nj)=wij2(15,n,ni,nj)- wij1(7,n,ni,njm)
amshift.f:     *                                        + wij1(8,n,ni,njm)
amshift.f:             wij2(22,n,ni,nj)=wij2(22,n,ni,nj)+ wij1(3,n,ni,njm)
amshift.f:             wij2(23,n,ni,nj)=wij2(23,n,ni,nj)+ wij1(6,n,ni,njm)
amshift.f:             wij2(24,n,ni,nj)=wij2(24,n,ni,nj)+ wij1(9,n,ni,njm)
amshift.f:             wij2(27,n,ni,nj)=wij2(27,n,ni,nj)- wij1(2,n,ni,njm)
amshift.f:             wij2(29,n,ni,nj)=wij2(29,n,ni,nj)- wij1(5,n,ni,njm)
amshift.f:             wij2(30,n,ni,nj)=wij2(30,n,ni,nj)- wij1(8,n,ni,njm)*2.d0
amshift.f:             wij2(37,n,ni,nj)=wij2(37,n,ni,nj)- wij1(3,n,ni,njm)
amshift.f:             wij2(38,n,ni,nj)=wij2(38,n,ni,nj)- wij1(6,n,ni,njm)
amshift.f:             wij2(39,n,ni,nj)=wij2(39,n,ni,nj)- wij1(9,n,ni,njm)
amshift.f:      subroutine horiz34_der2(wij0,wij1,wij2,
amshift.f:     *                        lw1,lw2,xab,nbls,nqi,nqj,nsij1)
amshift.f:      dimension wij0(nbls,lw1,lw2)
amshift.f:      dimension wij1(9,nbls,lw1,lw2)
amshift.f:      dimension wij2(45,nbls,lw1,lw2),xab(45,nbls,3)
amshift.f:                do 120 i=nsij1-j,nqi,-1
amshift.f:                      nij=npxyz(kcr,ni)
amshift.f:      wij0(n,ni,nj)=wij0(n,nij,njm) + xab(1,n,kcr)*wij0(n,ni,njm)
amshift.f:      wij1(m,n,ni,nj)=wij1(m,n,nij,njm) + xab(1,n,kcr)*wij1(m,n,ni,njm)
amshift.f:      wij2(m,n,ni,nj)=wij2(m,n,nij,njm) + xab(1,n,kcr)*wij2(m,n,ni,njm)
amshift.f:         wij1(3,n,ni,nj)=wij1(3,n,ni,nj) + wij0(n,ni,njm)
amshift.f:         wij1(6,n,ni,nj)=wij1(6,n,ni,nj) + wij0(n,ni,njm)
amshift.f:         wij1(9,n,ni,nj)=wij1(9,n,ni,nj) + wij0(n,ni,njm)
amshift.f:             wij2(16,n,ni,nj)=wij2(16,n,ni,nj)+ wij1(1,n,ni,njm)
amshift.f:             wij2(19,n,ni,nj)=wij2(19,n,ni,nj)+ wij1(4,n,ni,njm)
amshift.f:             wij2(22,n,ni,nj)=wij2(22,n,ni,nj)+ wij1(7,n,ni,njm)
amshift.f:             wij2(31,n,ni,nj)=wij2(31,n,ni,nj)+ wij1(2,n,ni,njm)
amshift.f:             wij2(34,n,ni,nj)=wij2(34,n,ni,nj)+ wij1(5,n,ni,njm)
amshift.f:             wij2(37,n,ni,nj)=wij2(37,n,ni,nj)+ wij1(8,n,ni,njm)
amshift.f:             wij2(40,n,ni,nj)=wij2(40,n,ni,nj)+ wij1(3,n,ni,njm)*2.d0
amshift.f:             wij2(41,n,ni,nj)=wij2(41,n,ni,nj)+ wij1(6,n,ni,njm)
amshift.f:             wij2(42,n,ni,nj)=wij2(42,n,ni,nj)+ wij1(9,n,ni,njm)
amshift.f:             wij2(17,n,ni,nj)=wij2(17,n,ni,nj)+ wij1(1,n,ni,njm)
amshift.f:             wij2(20,n,ni,nj)=wij2(20,n,ni,nj)+ wij1(4,n,ni,njm)
amshift.f:             wij2(23,n,ni,nj)=wij2(23,n,ni,nj)+ wij1(7,n,ni,njm)
amshift.f:             wij2(32,n,ni,nj)=wij2(32,n,ni,nj)+ wij1(2,n,ni,njm)
amshift.f:             wij2(35,n,ni,nj)=wij2(35,n,ni,nj)+ wij1(5,n,ni,njm)
amshift.f:             wij2(38,n,ni,nj)=wij2(38,n,ni,nj)+ wij1(8,n,ni,njm)
amshift.f:             wij2(41,n,ni,nj)=wij2(41,n,ni,nj)+ wij1(3,n,ni,njm)
amshift.f:             wij2(43,n,ni,nj)=wij2(43,n,ni,nj)+ wij1(6,n,ni,njm)*2.d0
amshift.f:             wij2(44,n,ni,nj)=wij2(44,n,ni,nj)+ wij1(9,n,ni,njm)
amshift.f:             wij2(18,n,ni,nj)=wij2(18,n,ni,nj)+ wij1(1,n,ni,njm)
amshift.f:             wij2(21,n,ni,nj)=wij2(21,n,ni,nj)+ wij1(4,n,ni,njm)
amshift.f:             wij2(24,n,ni,nj)=wij2(24,n,ni,nj)+ wij1(7,n,ni,njm)
amshift.f:             wij2(33,n,ni,nj)=wij2(33,n,ni,nj)+ wij1(2,n,ni,njm)
amshift.f:             wij2(36,n,ni,nj)=wij2(36,n,ni,nj)+ wij1(5,n,ni,njm)
amshift.f:             wij2(39,n,ni,nj)=wij2(39,n,ni,nj)+ wij1(8,n,ni,njm)
amshift.f:             wij2(42,n,ni,nj)=wij2(42,n,ni,nj)+ wij1(3,n,ni,njm)
amshift.f:             wij2(44,n,ni,nj)=wij2(44,n,ni,nj)+ wij1(6,n,ni,njm)
amshift.f:             wij2(45,n,ni,nj)=wij2(45,n,ni,nj)+ wij1(9,n,ni,njm)*2.d0
amshift.f:      subroutine convr3_forc(bl,m,nbls,npij,npkl,idx1,idx2,
amshift.f:      dimension xab(npij,3),xcd(npkl,3)
amshift.f:      ijklnmr=0
amshift.f:      do 100 ijkl=1,nbls
amshift.f:      ijpar=idx1(ijkl)
amshift.f:      klpar=idx2(ijkl)
amshift.f:      xab1=xab(ijpar,1)
amshift.f:      xab2=xab(ijpar,2)
amshift.f:      xab3=xab(ijpar,3)
amshift.f:         ixab_e0_vec(1,ixab_e0(1))=ijkl
amshift.f:         ixab_n0_vec(1,ixab_n0(1))=ijkl
amshift.f:         ixab_e0_vec(2,ixab_e0(2))=ijkl
amshift.f:         ixab_n0_vec(2,ixab_n0(2))=ijkl
amshift.f:         ixab_e0_vec(3,ixab_e0(3))=ijkl
amshift.f:         ixab_n0_vec(3,ixab_n0(3))=ijkl
amshift.f:         ixcd_e0_vec(1,ixcd_e0(1))=ijkl
amshift.f:         ixcd_n0_vec(1,ixcd_n0(1))=ijkl
amshift.f:         ixcd_e0_vec(2,ixcd_e0(2))=ijkl
amshift.f:         ixcd_n0_vec(2,ixcd_n0(2))=ijkl
amshift.f:         ixcd_e0_vec(3,ixcd_e0(3))=ijkl
amshift.f:         ixcd_n0_vec(3,ixcd_n0(3))=ijkl
amshift.f:        ijklnmr=ijklnmr+1
amshift.f:        bl(ixab1+ijklnmr)      =xab1
amshift.f:        bl(ixab1+ijklnmr+nbls1)=xab2
amshift.f:        bl(ixab1+ijklnmr+nbls2)=xab3
amshift.f:        bl(ixcd1+ijklnmr)      =xcd1
amshift.f:        bl(ixcd1+ijklnmr+nbls1)=xcd2
amshift.f:        bl(ixcd1+ijklnmr+nbls2)=xcd3
assemblx.f:     *                    lci,lcj,lck,lcl,lcij,lckl,npij,npkl)
assemblx.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,MMAX,
assemblx.f:     * NQIJ,NQIJ1,NSIJ1,NQKL,NQKL1,NSKL1,ijbeg,klbeg
assemblx.f:     * ibfij1,ibfij2,ibfkl1,ibfkl2,
assemblx.f:     * ibf2l1,ibf2l2,ibf2l3,ibf2l4,ibfij3,ibfkl3,
assemblx.f:     * ixij,iyij,izij, iwij,ivij,iuij,isij
assemblx.f:     * ixab,ixp,ixpn,ixpp,iabnia,iapb,i1apb,ifij,icij,isab,
assemblx.f:     *                   lci,lcj,lck,lcl,lcij,lckl,npij,npkl)
assemblx.f:     *                   lci,lcj,lck,lcl,lcij,lckl)
assemblx.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,MMAX,
assemblx.f:     * NQIJ,NQIJ1,NSIJ1,NQKL,NQKL1,NSKL1,ijbeg,klbeg
assemblx.f:        ijs=nfu(nqij)+1
assemblx.f:           DO 501 ij=ijs,LNIJ
assemblx.f:           ijkl=indx(i)
assemblx.f:           BUF2(ijkl,IJ,KL)=XT1(i,IJ,KL)
assemblx.f:           DO 601 ij=ijs,LNIJ
assemblx.f:           ijkl=indx(i)
assemblx.f:           BUF2(ijkl,IJ,KL)=BUF2(ijkl,IJ,KL)+XT1(i,IJ,KL)
assemblx.f:        ijs=nfu(nqij)+1
assemblx.f:        lnijx=nfu(nsij)
assemblx.f:           DO 551 ij=ijs,nfu(nsij)
assemblx.f:           ijkl=indx(i)
assemblx.f:           BUF2(ijkl,IJ,KL)=XT1(i,IJ,KL)
assemblx.f:           DO 552 ij=nfu(nsij)+1,nfu(nsij+1)
assemblx.f:           ijkl=indx(i)
assemblx.f:           BUF2(ijkl,IJ,KL)=XT1(i,IJ,KL)
assemblx.f:           DO 553 ij=nfu(nqij)+1,nfu(nsij)
assemblx.f:           ijkl=indx(i)
assemblx.f:           BUF2(ijkl,IJ,KL)=XT1(i,IJ,KL)
assemblx.f:           DO 651 ij=ijs,lnijx
assemblx.f:           ijkl=indx(i)
assemblx.f:           BUF2(ijkl,IJ,KL)=buf2(ijkl,ij,kl)+XT1(i,IJ,KL)
assemblx.f:           DO 652 ij=nfu(nsij)+1,nfu(nsij+1)
assemblx.f:           ijkl=indx(i)
assemblx.f:           BUF2(ijkl,IJ,KL)=buf2(ijkl,ij,kl)+XT1(i,IJ,KL)
assemblx.f:           DO 653 ij=nfu(nqij)+1,nfu(nsij)
assemblx.f:           ijkl=indx(i)
assemblx.f:           BUF2(ijkl,IJ,KL)=buf2(ijkl,ij,kl)+XT1(i,IJ,KL)
assemblx.f:c    do ij=nfu(nqij)+1,nfu(nsij)
assemblx.f:c       buf2(1,ijkl,ij,kl)=xt1(i,ij,kl)        <-- ordinary integrals
assemblx.f:c       buf2(2,ijkl,ij,kl)=xt1(i,ij,kl)*aax(i) <---int.rescaled by 2*a_exp
assemblx.f:c       buf2(3,ijkl,ij,kl)=xt1(i,ij,kl)*bbx(i) <---int.rescaled by 2*b_exp
assemblx.f:c       buf2(4,ijkl,ij,kl)=xt1(i,ij,kl)*ccx(i) <---integ.rescaled by 2*c_exp
assemblx.f:c    do ij=nfu(nqij)+1,nfu(nsij)
assemblx.f:c       buf2(4,ijkl,ij,kl)=xt1(i,ij,kl)*ccx(i) <---integ.rescaled by 2*c_exp
assemblx.f:c    do ij=nfu(nsij)+1,nfu(nsij+1)
assemblx.f:c       buf2(2,ijkl,ij,kl)=xt1(i,ij,kl)*aax(i) <---int.rescaled by 2*a_exp
assemblx.f:c       buf2(3,ijkl,ij,kl)=xt1(i,ij,kl)*bbx(i) <---int.rescaled by 2*b_exp
assemblx.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,MMAX,
assemblx.f:     * NQIJ,NQIJ1,NSIJ1,NQKL,NQKL1,NSKL1,ijbeg,klbeg
assemblx.f:            do ij=nfu(nqij)+1,nfu(nsij)
assemblx.f:                  ijkl=indx(i)
assemblx.f:                  buf2(ijkl,ij,kl,1)=xt1(i,ij,kl)
assemblx.f:                  buf2(ijkl,ij,kl,2)=xt1(i,ij,kl)*aax(i)
assemblx.f:                  buf2(ijkl,ij,kl,3)=xt1(i,ij,kl)*bbx(i)
assemblx.f:                  buf2(ijkl,ij,kl,4)=xt1(i,ij,kl)*ccx(i)
assemblx.f:                  ijkl=idxnot(i)
assemblx.f:                  buf2(ijkl,ij,kl,1)=zero
assemblx.f:                  buf2(ijkl,ij,kl,2)=zero
assemblx.f:                  buf2(ijkl,ij,kl,3)=zero
assemblx.f:                  buf2(ijkl,ij,kl,4)=zero
assemblx.f:            do ij=nfu(nqij)+1,nfu(nsij)
assemblx.f:                  ijkl=indx(i)
assemblx.f:                  buf2(ijkl,ij,kl,4)=xt1(i,ij,kl)*ccx(i)
assemblx.f:                  ijkl=idxnot(i)
assemblx.f:                  buf2(ijkl,ij,kl,4)=zero
assemblx.f:            do ij=nfu(nsij)+1,nfu(nsij+1)
assemblx.f:                  ijkl=indx(i)
assemblx.f:                  buf2(ijkl,ij,kl,2)=xt1(i,ij,kl)*aax(i)
assemblx.f:                  buf2(ijkl,ij,kl,3)=xt1(i,ij,kl)*bbx(i)
assemblx.f:                  ijkl=idxnot(i)
assemblx.f:                  buf2(ijkl,ij,kl,2)=zero
assemblx.f:                  buf2(ijkl,ij,kl,3)=zero
assemblx.f:c    do ij=nfu(nqij)+1,nfu(nsij)
assemblx.f:c       buf2(1,ijkl,ij,kl)=xt1(i,ij,kl)        <-- ordinary integrals
assemblx.f:c       buf2(2,ijkl,ij,kl)=xt1(i,ij,kl)*aax(i) <---int.rescaled by 2*a_exp
assemblx.f:c       buf2(3,ijkl,ij,kl)=xt1(i,ij,kl)*bbx(i) <---int.rescaled by 2*b_exp
assemblx.f:c       buf2(4,ijkl,ij,kl)=xt1(i,ij,kl)*ccx(i) <---integ.rescaled by 2*c_exp
assemblx.f:c    do ij=nfu(nqij)+1,nfu(nsij)
assemblx.f:c       buf2(4,ijkl,ij,kl)=xt1(i,ij,kl)*ccx(i) <---integ.rescaled by 2*c_exp
assemblx.f:c    do ij=nfu(nsij)+1,nfu(nsij+1)
assemblx.f:c       buf2(2,ijkl,ij,kl)=xt1(i,ij,kl)*aax(i) <---int.rescaled by 2*a_exp
assemblx.f:c       buf2(3,ijkl,ij,kl)=xt1(i,ij,kl)*bbx(i) <---int.rescaled by 2*b_exp
assemblx.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,MMAX,
assemblx.f:     * NQIJ,NQIJ1,NSIJ1,NQKL,NQKL1,NSKL1,ijbeg,klbeg
assemblx.f:            do ij=nfu(nqij)+1,nfu(nsij)
assemblx.f:               ijkl=indx(i)
assemblx.f:               buf2(ijkl,ij,kl,1)=buf2(ijkl,ij,kl,1)+xt1(i,ij,kl)
assemblx.f:               buf2(ijkl,ij,kl,2)=buf2(ijkl,ij,kl,2)+xt1(i,ij,kl)*aax(i)
assemblx.f:               buf2(ijkl,ij,kl,3)=buf2(ijkl,ij,kl,3)+xt1(i,ij,kl)*bbx(i)
assemblx.f:               buf2(ijkl,ij,kl,4)=buf2(ijkl,ij,kl,4)+xt1(i,ij,kl)*ccx(i)
assemblx.f:            do ij=nfu(nqij)+1,nfu(nsij)
assemblx.f:               ijkl=indx(i)
assemblx.f:               buf2(ijkl,ij,kl,4)=buf2(ijkl,ij,kl,4)+xt1(i,ij,kl)*ccx(i)
assemblx.f:            do ij=nfu(nsij)+1,nfu(nsij+1)
assemblx.f:               ijkl=indx(i)
assemblx.f:               buf2(ijkl,ij,kl,2)=buf2(ijkl,ij,kl,2)+xt1(i,ij,kl)*aax(i)
assemblx.f:               buf2(ijkl,ij,kl,3)=buf2(ijkl,ij,kl,3)+xt1(i,ij,kl)*bbx(i)
assemblx.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,MMAX,
assemblx.f:     * NQIJ,NQIJ1,NSIJ1,NQKL,NQKL1,NSKL1,ijbeg,klbeg
assemblx.f:            do ij=nfu(nqij)+1,nfu(nsij)
assemblx.f:               buf2(i,ij,kl,1)=xt1(i,ij,kl)
assemblx.f:               buf2(i,ij,kl,2)=xt1(i,ij,kl)*aax(i)
assemblx.f:               buf2(i,ij,kl,3)=xt1(i,ij,kl)*bbx(i)
assemblx.f:               buf2(i,ij,kl,4)=xt1(i,ij,kl)*ccx(i)
assemblx.f:            do ij=nfu(nqij)+1,nfu(nsij)
assemblx.f:               buf2(i,ij,kl,4)=xt1(i,ij,kl)*ccx(i)
assemblx.f:            do ij=nfu(nsij)+1,nfu(nsij+1)
assemblx.f:               buf2(i,ij,kl,2)=xt1(i,ij,kl)*aax(i)
assemblx.f:               buf2(i,ij,kl,3)=xt1(i,ij,kl)*bbx(i)
assemblx.f:            do ij=nfu(nqij)+1,nfu(nsij)
assemblx.f:               buf2(i,ij,kl,1)=buf2(i,ij,kl,1)+xt1(i,ij,kl)
assemblx.f:               buf2(i,ij,kl,2)=buf2(i,ij,kl,2)+xt1(i,ij,kl)*aax(i)
assemblx.f:               buf2(i,ij,kl,3)=buf2(i,ij,kl,3)+xt1(i,ij,kl)*bbx(i)
assemblx.f:               buf2(i,ij,kl,4)=buf2(i,ij,kl,4)+xt1(i,ij,kl)*ccx(i)
assemblx.f:            do ij=nfu(nqij)+1,nfu(nsij)
assemblx.f:               buf2(i,ij,kl,4)=buf2(i,ij,kl,4)+xt1(i,ij,kl)*ccx(i)
assemblx.f:            do ij=nfu(nsij)+1,nfu(nsij+1)
assemblx.f:               buf2(i,ij,kl,2)=buf2(i,ij,kl,2)+xt1(i,ij,kl)*aax(i)
assemblx.f:               buf2(i,ij,kl,3)=buf2(i,ij,kl,3)+xt1(i,ij,kl)*bbx(i)
assemblx.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,MMAX,
assemblx.f:     * NQIJ,NQIJ1,NSIJ1,NQKL,NQKL1,NSKL1,ijbeg,klbeg
assemblx.f:        ij1=nfu(nqij)
assemblx.f:        ij2=nfu(nsij-1)
assemblx.f:        ij3=nfu(nsij)
assemblx.f:        ij4=nfu(nsij+1)
assemblx.f:              do ij=ij1+1,ij2
assemblx.f:                 ijkl=indx(i)
assemblx.f:                 buf2(ijkl,IJ,KL,1)=XT1(i,IJ,KL)
assemblx.f:                 buf2(ijkl,IJ,KL,2)=XT1(i,IJ,KL)*aax(i)
assemblx.f:                 buf2(ijkl,IJ,KL,3)=XT1(i,IJ,KL)*bbx(i)
assemblx.f:                 buf2(ijkl,IJ,KL,4)=XT1(i,IJ,KL)*ccx(i)
assemblx.f:                 buf2(ijkl,IJ,KL,5)=XT1(i,IJ,KL)*expo(i,1)
assemblx.f:                 buf2(ijkl,IJ,KL,6)=XT1(i,IJ,KL)*expo(i,2)
assemblx.f:                 buf2(ijkl,IJ,KL,7)=XT1(i,IJ,KL)*expo(i,3)
assemblx.f:                 buf2(ijkl,IJ,KL,8)=XT1(i,IJ,KL)*expo(i,4)
assemblx.f:                 buf2(ijkl,IJ,KL,9)=XT1(i,IJ,KL)*expo(i,5)
assemblx.f:                 buf2(ijkl,IJ,KL,10)=XT1(i,IJ,KL)*expo(i,6)
assemblx.f:                 ijkl=idxnot(i)
assemblx.f:                    buf2(ijkl,IJ,KL,ii)= zero
assemblx.f:              do ij=ij2+1,ij3
assemblx.f:                 ijkl=indx(i)
assemblx.f:                 buf2(ijkl,IJ,KL,2)=XT1(i,IJ,KL)*aax(i)
assemblx.f:                 buf2(ijkl,IJ,KL,3)=XT1(i,IJ,KL)*bbx(i)
assemblx.f:                 buf2(ijkl,IJ,KL,5)=XT1(i,IJ,KL)*expo(i,1)
assemblx.f:                 buf2(ijkl,IJ,KL,6)=XT1(i,IJ,KL)*expo(i,2)
assemblx.f:                 buf2(ijkl,IJ,KL,7)=XT1(i,IJ,KL)*expo(i,3)
assemblx.f:                 buf2(ijkl,IJ,KL,8)=XT1(i,IJ,KL)*expo(i,4)
assemblx.f:                 buf2(ijkl,IJ,KL,9)=XT1(i,IJ,KL)*expo(i,5)
assemblx.f:                 ijkl=idxnot(i)
assemblx.f:                    buf2(ijkl,IJ,KL,ii)= zero
assemblx.f:              do ij=ij3+1,ij4
assemblx.f:                 ijkl=indx(i)
assemblx.f:                 buf2(ijkl,IJ,KL,5)=XT1(i,IJ,KL)*expo(i,1)
assemblx.f:                 buf2(ijkl,IJ,KL,8)=XT1(i,IJ,KL)*expo(i,4)
assemblx.f:                 buf2(ijkl,IJ,KL,9)=XT1(i,IJ,KL)*expo(i,5)
assemblx.f:                 ijkl=idxnot(i)
assemblx.f:                    buf2(ijkl,IJ,KL,ii)= zero
assemblx.f:              do ij=ij1+1,ij2
assemblx.f:                 ijkl=indx(i)
assemblx.f:                 buf2(ijkl,IJ,KL,4)=XT1(i,IJ,KL)*ccx(i)
assemblx.f:                 buf2(ijkl,IJ,KL,6)=XT1(i,IJ,KL)*expo(i,2)
assemblx.f:                 buf2(ijkl,IJ,KL,7)=XT1(i,IJ,KL)*expo(i,3)
assemblx.f:                 buf2(ijkl,IJ,KL,10)=XT1(i,IJ,KL)*expo(i,6)
assemblx.f:                 ijkl=idxnot(i)
assemblx.f:                    buf2(ijkl,IJ,KL,ii)= zero
assemblx.f:              do ij=ij2+1,ij3
assemblx.f:                 ijkl=indx(i)
assemblx.f:                 buf2(ijkl,IJ,KL,6)=XT1(i,IJ,KL)*expo(i,2)
assemblx.f:                 buf2(ijkl,IJ,KL,7)=XT1(i,IJ,KL)*expo(i,3)
assemblx.f:                 ijkl=idxnot(i)
assemblx.f:                    buf2(ijkl,IJ,KL,ii)= zero
assemblx.f:              do ij=ij1+1,ij2
assemblx.f:                 ijkl=indx(i)
assemblx.f:                 buf2(ijkl,IJ,KL,10)=XT1(i,IJ,KL)*expo(i,6)
assemblx.f:                 ijkl=idxnot(i)
assemblx.f:                    buf2(ijkl,IJ,KL,ii)= zero
assemblx.f:              do ij=ij1+1,ij2
assemblx.f:                 ijkl=indx(i)
assemblx.f:           buf2(ijkl,IJ,KL,1)=buf2(ijkl,ij,kl,1)+XT1(i,IJ,KL)
assemblx.f:           buf2(ijkl,IJ,KL,2)=buf2(ijkl,ij,kl,2)+XT1(i,IJ,KL)*aax(i)
assemblx.f:           buf2(ijkl,IJ,KL,3)=buf2(ijkl,ij,kl,3)+XT1(i,IJ,KL)*bbx(i)
assemblx.f:           buf2(ijkl,IJ,KL,4)=buf2(ijkl,ij,kl,4)+XT1(i,IJ,KL)*ccx(i)
assemblx.f:           buf2(ijkl,IJ,KL,5)=buf2(ijkl,ij,kl,5)+XT1(i,IJ,KL)*expo(i,1)
assemblx.f:           buf2(ijkl,IJ,KL,6)=buf2(ijkl,ij,kl,6)+XT1(i,IJ,KL)*expo(i,2)
assemblx.f:           buf2(ijkl,IJ,KL,7)=buf2(ijkl,ij,kl,7)+XT1(i,IJ,KL)*expo(i,3)
assemblx.f:           buf2(ijkl,IJ,KL,8)=buf2(ijkl,ij,kl,8)+XT1(i,IJ,KL)*expo(i,4)
assemblx.f:           buf2(ijkl,IJ,KL,9)=buf2(ijkl,ij,kl,9)+XT1(i,IJ,KL)*expo(i,5)
assemblx.f:          buf2(ijkl,IJ,KL,10)=buf2(ijkl,ij,kl,10)+XT1(i,IJ,KL)*expo(i,6)
assemblx.f:              do ij=ij2+1,ij3
assemblx.f:                 ijkl=indx(i)
assemblx.f:           buf2(ijkl,IJ,KL,2)=buf2(ijkl,ij,kl,2)+XT1(i,IJ,KL)*aax(i)
assemblx.f:           buf2(ijkl,IJ,KL,3)=buf2(ijkl,ij,kl,3)+XT1(i,IJ,KL)*bbx(i)
assemblx.f:           buf2(ijkl,IJ,KL,5)=buf2(ijkl,ij,kl,5)+XT1(i,IJ,KL)*expo(i,1)
assemblx.f:           buf2(ijkl,IJ,KL,6)=buf2(ijkl,ij,kl,6)+XT1(i,IJ,KL)*expo(i,2)
assemblx.f:           buf2(ijkl,IJ,KL,7)=buf2(ijkl,ij,kl,7)+XT1(i,IJ,KL)*expo(i,3)
assemblx.f:           buf2(ijkl,IJ,KL,8)=buf2(ijkl,ij,kl,8)+XT1(i,IJ,KL)*expo(i,4)
assemblx.f:           buf2(ijkl,IJ,KL,9)=buf2(ijkl,ij,kl,9)+XT1(i,IJ,KL)*expo(i,5)
assemblx.f:              do ij=ij3+1,ij4
assemblx.f:                 ijkl=indx(i)
assemblx.f:           buf2(ijkl,IJ,KL,5)=buf2(ijkl,ij,kl,5)+XT1(i,IJ,KL)*expo(i,1)
assemblx.f:           buf2(ijkl,IJ,KL,8)=buf2(ijkl,ij,kl,8)+XT1(i,IJ,KL)*expo(i,4)
assemblx.f:           buf2(ijkl,IJ,KL,9)=buf2(ijkl,ij,kl,9)+XT1(i,IJ,KL)*expo(i,5)
assemblx.f:              do ij=ij1+1,ij2
assemblx.f:                 ijkl=indx(i)
assemblx.f:           buf2(ijkl,IJ,KL,4)=buf2(ijkl,ij,kl,4)+XT1(i,IJ,KL)*ccx(i)
assemblx.f:           buf2(ijkl,IJ,KL,6)=buf2(ijkl,ij,kl,6)+XT1(i,IJ,KL)*expo(i,2)
assemblx.f:           buf2(ijkl,IJ,KL,7)=buf2(ijkl,ij,kl,7)+XT1(i,IJ,KL)*expo(i,3)
assemblx.f:          buf2(ijkl,IJ,KL,10)=buf2(ijkl,ij,kl,10)+XT1(i,IJ,KL)*expo(i,6)
assemblx.f:              do ij=ij2+1,ij3
assemblx.f:                 ijkl=indx(i)
assemblx.f:           buf2(ijkl,IJ,KL,6)=buf2(ijkl,ij,kl,6)+XT1(i,IJ,KL)*expo(i,2)
assemblx.f:           buf2(ijkl,IJ,KL,7)=buf2(ijkl,ij,kl,7)+XT1(i,IJ,KL)*expo(i,3)
assemblx.f:              do ij=ij1+1,ij2
assemblx.f:                 ijkl=indx(i)
assemblx.f:          buf2(ijkl,IJ,KL,10)=buf2(ijkl,ij,kl,10)+XT1(i,IJ,KL)*expo(i,6)
assemblx.f:     * ibfij1,ibfij2,ibfkl1,ibfkl2,
assemblx.f:     * ibf2l1,ibf2l2,ibf2l3,ibf2l4,ibfij3,ibfkl3,
assemblx.f:     * ixij,iyij,izij, iwij,ivij,iuij,isij
assemblx.f:     * ixab,ixp,ixpn,ixpp,iabnia,iapb,i1apb,ifij,icij,isab,
assemblx.f:     *                 icfg,jcfg,kcfg,lcfg, igcij,igckl
assemblx.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,MMAX,
assemblx.f:     * NQIJ,NQIJ1,NSIJ1,NQKL,NQKL1,NSKL1,ijbeg,klbeg
assemblx.f:      ijs=nfu(nqij)+1
assemblx.f:        DO 501 ij=ijs,LNIJ
assemblx.f:        ijkl=indx(i)
assemblx.f:        xint=xt1(i,ij,kl)
assemblx.f:          but2(iqu,ijkl,ij,kl)=xint*gcoef(iqu,ijkl)
assemblx.f:          but2(iqu,ijkl,ij,kl)=0.d0
assemblx.f:        DO 601 ij=ijs,LNIJ
assemblx.f:        ijkl=indx(i)
assemblx.f:        xint=xt1(i,ij,kl)
assemblx.f:          but2(iqu,ijkl,ij,kl)=but2(iqu,ijkl,ij,kl)+xint*gcoef(iqu,ijkl)
assemblx.f:         ijkl=indx(i)
assemblx.f:            gc_ax(iqu,ijkl)=gcoef(iqu,ijkl)*aaxi
assemblx.f:            gc_bx(iqu,ijkl)=gcoef(iqu,ijkl)*bbxi
assemblx.f:            gc_cx(iqu,ijkl)=gcoef(iqu,ijkl)*ccxi
assemblx.f:         ijkl=indx(i)
assemblx.f:            gc_ax(iqu,ijkl)=gcoef(iqu,ijkl)*aaxi
assemblx.f:            gc_bx(iqu,ijkl)=gcoef(iqu,ijkl)*bbxi
assemblx.f:            gc_cx(iqu,ijkl)=gcoef(iqu,ijkl)*ccxi
assemblx.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,MMAX,
assemblx.f:     * NQIJ,NQIJ1,NSIJ1,NQKL,NQKL1,NSKL1,ijbeg,klbeg
assemblx.f:      ijs=nfu(nqij)+1
assemblx.f:           do ij=ijs,lnij
assemblx.f:                 ijkl=indx(i)
assemblx.f:                 xint=xt1(i,ij,kl)
assemblx.f:                       but2(iqu,1,ijkl,ij,kl)=xint*gcoef(iqu,ijkl)
assemblx.f:                       but2(iqu,2,ijkl,ij,kl)=xint*gc_ax(iqu,ijkl)
assemblx.f:                       but2(iqu,3,ijkl,ij,kl)=xint*gc_bx(iqu,ijkl)
assemblx.f:                       but2(iqu,4,ijkl,ij,kl)=xint*gc_cx(iqu,ijkl)
assemblx.f:                       but2(iqu,1,ijkl,ij,kl)=zero
assemblx.f:                       but2(iqu,2,ijkl,ij,kl)=zero
assemblx.f:                       but2(iqu,3,ijkl,ij,kl)=zero
assemblx.f:                       but2(iqu,4,ijkl,ij,kl)=zero
assemblx.f:           do ij=ijs,nfu(nsij)
assemblx.f:                 ijkl=indx(i)
assemblx.f:                 xint=xt1(i,ij,kl)
assemblx.f:                       but2(iqu,1,ijkl,ij,kl)=but2(iqu,1,ijkl,ij,kl)
assemblx.f:     *                                        + xint*gcoef(iqu,ijkl)
assemblx.f:                       but2(iqu,2,ijkl,ij,kl)=but2(iqu,2,ijkl,ij,kl)
assemblx.f:     *                                        + xint*gc_ax(iqu,ijkl)
assemblx.f:                       but2(iqu,3,ijkl,ij,kl)=but2(iqu,3,ijkl,ij,kl)
assemblx.f:     *                                        + xint*gc_bx(iqu,ijkl)
assemblx.f:                       but2(iqu,4,ijkl,ij,kl)=but2(iqu,4,ijkl,ij,kl)
assemblx.f:     *                                        + xint*gc_cx(iqu,ijkl)
assemblx.f:           do ij=ijs,nfu(nsij)
assemblx.f:                 ijkl=indx(i)
assemblx.f:                 xint=xt1(i,ij,kl)
assemblx.f:                       but2(iqu,4,ijkl,ij,kl)=but2(iqu,4,ijkl,ij,kl)
assemblx.f:     *                                        + xint*gc_cx(iqu,ijkl)
assemblx.f:           do ij=nfu(nsij)+1,nfu(nsij+1)
assemblx.f:                 ijkl=indx(i)
assemblx.f:                 xint=xt1(i,ij,kl)
assemblx.f:                       but2(iqu,2,ijkl,ij,kl)=but2(iqu,2,ijkl,ij,kl)
assemblx.f:     *                                        + xint*gc_ax(iqu,ijkl)
assemblx.f:                       but2(iqu,3,ijkl,ij,kl)=but2(iqu,3,ijkl,ij,kl)
assemblx.f:     *                                        + xint*gc_bx(iqu,ijkl)
assemblx.f:     *                     lci,lcj,lck,lcl,lcij,lckl,npij,npkl)
assemblx.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,MMAX,
assemblx.f:     * NQIJ,NQIJ1,NSIJ1,NQKL,NQKL1,NSKL1,ijbeg,klbeg
assemblx.f:     * ibfij1,ibfij2,ibfkl1,ibfkl2,
assemblx.f:     * ibf2l1,ibf2l2,ibf2l3,ibf2l4,ibfij3,ibfkl3,
assemblx.f:     * ixij,iyij,izij, iwij,ivij,iuij,isij
assemblx.f:     * ixab,ixp,ixpn,ixpp,iabnia,iapb,i1apb,ifij,icij,isab,
assemblx.f:      common /dimasse/ lqij,lqkl,lqmx,lij3,lkl3,l3l,lsss
assemblx.f:        nqijr=nqij
assemblx.f:        nqijr=nqij1
assemblx.f:      if(lshelij.eq.1 .or. lshelij.eq.3) then
assemblx.f:c-                     --- for bfij1 s from -> lx/yz ---
assemblx.f:                ijenx=nfu(nqijr+1)
assemblx.f:                if(nqijr.eq.nsij) then
assemblx.f:                   ijenx=1
assemblx.f:                   if(where.eq.'shif') ijenx=nfu(nqij+1)
assemblx.f:        call conijkl1(bl,firstx,nbls,nbls1,bl(iwt0), l01,l02,
assemblx.f:     *           bl(ibfij1),lqij,lnkl, bl(icis),npij,lci,
assemblx.f:     *           bl(idx1),bl(indx), ijenx,klenx)
assemblx.f:      if(lshelij.eq.2 .or. lshelij.eq.3) then
assemblx.f:c-                        --- for bfij2 s from xl/yz ---
assemblx.f:                ijenx=nfu(nqijr+1)
assemblx.f:                if(nqijr.eq.nsij) then
assemblx.f:                   ijenx=1
assemblx.f:                   if(where.eq.'shif') ijenx=nfu(nqij+1)
assemblx.f:        call conijkl1(bl,firstx,nbls,nbls1,bl(iwt0), l01,l02,
assemblx.f:     *           bl(ibfij2),lqij,lnkl, bl(icjs),npij,lcj,
assemblx.f:     *           bl(idx1),bl(indx), ijenx,klenx)
assemblx.f:                ijenx=lnij
assemblx.f:        call conijkl1(bl,firstx,nbls,nbls1,bl(iwt0), l01,l02,
assemblx.f:     *           bl(ibfkl1),lnij,lqkl, bl(icks),npkl,lck,
assemblx.f:     *           bl(idx2),bl(indx), ijenx,klenx)
assemblx.f:                ijenx=lnij
assemblx.f:        call conijkl1(bl,firstx,nbls,nbls1,bl(iwt0), l01,l02,
assemblx.f:     *           bl(ibfkl2),lnij,lqkl,  bl(icls),npkl,lcl,
assemblx.f:     *           bl(idx2),bl(indx), ijenx,klenx)
assemblx.f:      if(lshelij.eq.3) then
assemblx.f:c-                          --- for bfij3  ss from ll/xy ---
assemblx.f:                ij3b=1
assemblx.f:        call conijkl3 (bl,firstx,nbls,nbls1,bl(iwt0),l01,l02,
assemblx.f:     *                 bl(ibfij3),lij3,lnkl, bl(ifij),npij,lcij,
assemblx.f:     *                 bl(idx1),bl(indx),ij3b,kl3b)
assemblx.f:                ij3b=ijbeg
assemblx.f:        call conijkl3 (bl,firstx,nbls,nbls1,bl(iwt0),l01,l02,
assemblx.f:     *                 bl(ibfkl3),lnij,lkl3, bl(ifkl),npkl,lckl,
assemblx.f:     *                 bl(idx2),bl(indx), ij3b,kl3b)
assemblx.f:     *               bl(ibf2l1),lqij,lqkl,
assemblx.f:     *               bl(icis),bl(icks),npij,npkl,lci,lck,
assemblx.f:     *               bl(ibf2l2),lqij,lqkl,
assemblx.f:     *               bl(icis),bl(icls),npij,npkl,lci,lcl,
assemblx.f:     *               bl(ibf2l3),lqij,lqkl,
assemblx.f:     *               bl(icjs),bl(icks),npij,npkl,lcj,lck,
assemblx.f:     *               bl(ibf2l4),lqij,lqkl,
assemblx.f:     *               bl(icjs),bl(icls),npij,npkl,lcj,lcl,
assemblx.f:     *               bl(icks),bl(ifij),  bl(ibf3l1),l3l,lqmx,
assemblx.f:     *               lck,lcij,npij,npkl,bl(idx1),bl(idx2),bl(indx))
assemblx.f:     *               bl(icls),bl(ifij),  bl(ibf3l2),l3l,lqmx,
assemblx.f:     *               lcl,lcij,npij,npkl,bl(idx1),bl(idx2),bl(indx))
assemblx.f:     *               lci,lckl,npij,npkl,bl(idx1),bl(idx2),bl(indx))
assemblx.f:     *               lcj,lckl,npij,npkl,bl(idx1),bl(idx2),bl(indx))
assemblx.f:     *                bl(ifij),bl(ifkl), bl(issss),lsss ,
assemblx.f:     *                lcij,lckl,npij,npkl,bl(idx1),bl(idx2),bl(indx))
assemblx.f:      subroutine conijkl1(bl,firstc,nbls,nbls1,xt1,lt1,lt2,
assemblx.f:     *                    bfij1,lt3,lt4, facti,npij,lci,
assemblx.f:     *                    idx1,indx, ijenx,klenx)
assemblx.f:      dimension bfij1(nbls,lt3,lt4)
assemblx.f:      dimension facti(npij,*)
assemblx.f:      call convr1(bl,nbls1,ifni,facti,lci,npij,idx1,indx)
assemblx.f:     *            bl(ifni),  bfij1,lt3,lt4, indx,nbls1, ijenx,klenx)
assemblx.f:     *            facti, bfij1,lt3,lt4, indx,nbls1, ijenx,klenx)
assemblx.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,MMAX,
assemblx.f:     * NQIJ,NQIJ1,NSIJ1,NQKL,NQKL1,NSKL1,ijbeg,klbeg
assemblx.f:      dimension bfij1(nbls,lt3,lt4)
assemblx.f:              DO 504 IJ=IJBEG,ijenx
assemblx.f:              ijkl=indx(i)
assemblx.f:              BFIJ1(ijkl,IJ,KL)=XT1(i,IJ,KL)*FACTI(i)
assemblx.f:              DO 604 IJ=IJBEG,ijenx
assemblx.f:              ijkl=indx(i)
assemblx.f:              BFIJ1(ijkl,IJ,KL)=BFIJ1(ijkl,IJ,KL)+XT1(i,IJ,KL)*FACTI(i)
assemblx.f:      subroutine conijkl3(bl,firstc,nbls,nbls1,xt1,lt1,lt2,
assemblx.f:     *                    bfij3,lt3,lt4,  factij,npij,lcij,
assemblx.f:     *                    idx1,indx, ij3b,kl3b)
assemblx.f:      dimension bfij3(nbls,lt3,lt4)
assemblx.f:      dimension factij(npij,*)
assemblx.f:      call convr1(bl,nbls1,ifnij,factij,lcij, npij,idx1,indx)
assemblx.f:     *             bfij3,lt3,lt4, bl(ifnij), indx, ij3b,kl3b)
assemblx.f:     *                    bfij3,lt3,lt4, factij, indx, ij3b,kl3b)
assemblx.f:      dimension bfij3(nbls,lt3,lt4)
assemblx.f:      dimension factij(*)
assemblx.f:              do 502 ij=ij3b,lt3
assemblx.f:                 ijkl=indx(i)
assemblx.f:                 BFIJ3(ijkl,ij,kl)=XT1(i,ij,KL)*FACTIJ(i)
assemblx.f:              do 602 ij=ij3b,lt3
assemblx.f:              ijkl=indx(i)
assemblx.f:              BFIJ3(ijkl,ij,kl)=bfij3(ijkl,ij,kl)+XT1(i,ij,KL)*FACTIJ(i)
assemblx.f:     *                   facti,factk,npij,npkl,
assemblx.f:      dimension facti(npij,*),factk(npkl,*)
assemblx.f:c     call convr1(bl,nbls1,ifni,facti,lci, npij,idx1,indx)
assemblx.f:      call convr2(bl,nbls1,ifni ,facti ,lci ,npij,idx1,
assemblx.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,MMAX,
assemblx.f:     * NQIJ,NQIJ1,NSIJ1,NQKL,NQKL1,NSKL1,ijbeg,klbeg
assemblx.f:                ijenx=nfu(nqij1+1)
assemblx.f:                if(nqij1.eq.nsij) ijenx=nfu(nqij+1)
assemblx.f:                ijenx=nfu(nqij+1)
assemblx.f:                if(nqij.eq.nsij) ijenx=1
assemblx.f:              DO 504 IJ=IJBEG,ijenx
assemblx.f:                 ijkl=indx(i)
assemblx.f:                 BF2L1(ijkl,ij,kl)=xij1*FACTK(i)
assemblx.f:              DO 604 IJ=IJBEG,ijenx
assemblx.f:                 ijkl=indx(i)
assemblx.f:                 BF2L1(ijkl,ij,kl)=BF2l1(ijkl,ij,kl)+xij1*FACTK(i)
assemblx.f:     *                   factk,factij, bf3l,lt5,lt6,
assemblx.f:     *                   lck,lcij,npij,npkl,idx1,idx2,indx)
assemblx.f:      dimension factk(npkl,*), factij(npij,*)
assemblx.f:     *                  ifnij,factij,lcij,npij,idx1,indx)
assemblx.f:     *             bl(ifnk),bl(ifnij), bf3l,lt5,lt6,  indx)
assemblx.f:     *                   factk,factij, bf3l,lt5,lt6, indx)
assemblx.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,MMAX,
assemblx.f:     * NQIJ,NQIJ1,NSIJ1,NQKL,NQKL1,NSKL1,ijbeg,klbeg
assemblx.f:      dimension factk(*),factij(*)
assemblx.f:cccccc          ijenx=nfu(nqij1+1)
assemblx.f:c--------nie->  if(nqij1.eq.nsij) ijenx=1
assemblx.f:c WHAT ?        if(nqkl1.eq.nskl) klenx=nfu(nqij+1)
assemblx.f:cccccc          ijenx=nfu(nqij+1)
assemblx.f:c--------nie->  if(nqij.eq.nsij) ijenx=1
assemblx.f:              do 503 ij=1,lt5
assemblx.f:                 ijkl=indx(i)
assemblx.f:                 XIJ3=XT1(i,ij,KL)*FACTIJ(i)
assemblx.f:                 BF3L(ijkl,ij,KL)=xij3*FACTK(i)
assemblx.f:            do 603 ij=1,lt5
assemblx.f:               ijkl=indx(i)
assemblx.f:               XIJ3=XT1(i,ij,KL)*FACTIJ(i)
assemblx.f:               BF3L(ijkl,ij,KL)=bf3l(ijkl,ij,kl)+xij3*FACTK(i)
assemblx.f:     *                   lci,lckl,npij,npkl,idx1,idx2,indx)
assemblx.f:      dimension facti(npij,*),factkl(npkl,*)
assemblx.f:      call convr2(bl,nbls1,ifni ,facti ,lci ,npij,idx1,
assemblx.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,MMAX,
assemblx.f:     * NQIJ,NQIJ1,NSIJ1,NQKL,NQKL1,NSKL1,ijbeg,klbeg
assemblx.f:                ijenx=nfu(nqij1+1)
assemblx.f:                if(nqij1.eq.nsij) ijenx=nfu(nqij+1)
assemblx.f:                ijenx=nfu(nqij+1)
assemblx.f:                if(nqij.eq.nsij) ijenx=1
assemblx.f:              DO 511 IJ=IJBEG,ijenx
assemblx.f:                 ijkl=indx(i)
assemblx.f:                 BF3L(ijkl,IJ,kl)=xKL3*FACTI(i)
assemblx.f:              DO 611 IJ=IJBEG,ijenx
assemblx.f:              ijkl=indx(i)
assemblx.f:                 BF3L(ijkl,IJ,kl)=BF3L(ijkl,IJ,kl)+xkl3*FACTI(i)
assemblx.f:     *                    factij,factkl, ssss,isdim,
assemblx.f:     *                    lcij,lckl,npij,npkl,idx1,idx2,indx)
assemblx.f:      dimension factij(npij,*),factkl(npkl,*)
assemblx.f:      call convr2(bl,nbls1,ifnij,factij,lcij,npij,idx1,
assemblx.f:     *            bl(ifnij),bl(ifnkl), ssss,isdim, indx)
assemblx.f:     *                  factij,factkl, ssss,isdim,indx)
assemblx.f:      dimension factij(*),factkl(*)
assemblx.f:              do 507 ij=1,isdim
assemblx.f:              ijkl=indx(i)
assemblx.f:              ssss(ijkl,ij,kl)= XT1(i,ij,kl)*FACTIJ(i)*FACTKL(i)
assemblx.f:              do 607 ij=1,isdim
assemblx.f:              ijkl=indx(i)
assemblx.f:              ssss(ijkl,ij,kl)=ssss(ijkl,ij,kl)+
assemblx.f:     *                         XT1(i,ij,kl)*FACTIJ(i)*FACTKL(i)
assemblx.f:      subroutine convr1(bl,nbls,ifni,facti,lci,npij,idx1,indx)
assemblx.f:      dimension facti(npij,*)
assemblx.f:       ijkl=indx(i)
assemblx.f:       ijpar=idx1(ijkl)
assemblx.f:       bl(ifni1+i)=facti(ijpar,lci)
assemblx.f:     *                  ifnij,factij,lcij,npij,idx1,indx)
assemblx.f:      dimension factk(npkl,*),factij(npij,*)
assemblx.f:          call getmem(nbls,ifnij)
assemblx.f:       ifnij1=ifnij-1
assemblx.f:       ijkl=indx(i)
assemblx.f:       ijpar=idx1(ijkl)
assemblx.f:       klpar=idx2(ijkl)
assemblx.f:       bl(ifnij1+i)=factij(ijpar,lcij)
assemblx.f:     *                     lci,lcj,lck,lcl,lcij,lckl)
assemblx.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,MMAX,
assemblx.f:     * NQIJ,NQIJ1,NSIJ1,NQKL,NQKL1,NSKL1,ijbeg,klbeg
assemblx.f:     * ibfij1,ibfij2,ibfkl1,ibfkl2,
assemblx.f:     * ibf2l1,ibf2l2,ibf2l3,ibf2l4,ibfij3,ibfkl3,
assemblx.f:     * ixij,iyij,izij, iwij,ivij,iuij,isij
assemblx.f:     * ixab,ixp,ixpn,ixpp,iabnia,iapb,i1apb,ifij,icij,isab,
assemblx.f:      common /dimasse/ lqij,lqkl,lqmx,lij3,lkl3,l3l,lsss
assemblx.f:        nqijr=nqij
assemblx.f:        nqijr=nqij1
assemblx.f:      if(lshelij.eq.1 .or. lshelij.eq.3) then
assemblx.f:c-                     --- for bfij1 s from -> lx/yz ---
assemblx.f:                ijenx=nfu(nqijr+1)
assemblx.f:                if(nqijr.eq.nsij) then
assemblx.f:                   ijenx=1
assemblx.f:                   if(where.eq.'shif') ijenx=nfu(nqij+1)
assemblx.f:        call conijkl1_2(bl,firstx,nbls,nbls1,bl(iwt0), l01,l02,
assemblx.f:     *                  bl(ibfij1),lqij,lnkl, bl(icis),lci,
assemblx.f:     *                  bl(indx), ijenx,klenx)
assemblx.f:      if(lshelij.eq.2 .or. lshelij.eq.3) then
assemblx.f:c-                        --- for bfij2 s from xl/yz ---
assemblx.f:                ijenx=nfu(nqijr+1)
assemblx.f:                if(nqijr.eq.nsij) then
assemblx.f:                   ijenx=1
assemblx.f:                   if(where.eq.'shif') ijenx=nfu(nqij+1)
assemblx.f:        call conijkl1_2(bl,firstx,nbls,nbls1,bl(iwt0), l01,l02,
assemblx.f:     *                  bl(ibfij2),lqij,lnkl, bl(icjs),lcj,
assemblx.f:     *                  bl(indx), ijenx,klenx)
assemblx.f:                ijenx=lnij
assemblx.f:        call conijkl1_2(bl,firstx,nbls,nbls1,bl(iwt0), l01,l02,
assemblx.f:     *                  bl(ibfkl1),lnij,lqkl, bl(icks),lck,
assemblx.f:     *                  bl(indx), ijenx,klenx)
assemblx.f:                ijenx=lnij
assemblx.f:        call conijkl1_2(bl,firstx,nbls,nbls1,bl(iwt0), l01,l02,
assemblx.f:     *                  bl(ibfkl2),lnij,lqkl,  bl(icls),lcl,
assemblx.f:     *                  bl(indx), ijenx,klenx)
assemblx.f:      if(lshelij.eq.3) then
assemblx.f:c-                          --- for bfij3  ss from ll/xy ---
assemblx.f:                ij3b=1
assemblx.f:        call conijkl3_2(bl,firstx,nbls,nbls1,bl(iwt0),l01,l02,
assemblx.f:     *                  bl(ibfij3),lij3,lnkl, bl(ifij),lcij,
assemblx.f:     *                  bl(indx),ij3b,kl3b)
assemblx.f:                ij3b=ijbeg
assemblx.f:        call conijkl3_2(bl,firstx,nbls,nbls1,bl(iwt0),l01,l02,
assemblx.f:     *                  bl(ibfkl3),lnij,lkl3, bl(ifkl),lckl,
assemblx.f:     *                  bl(indx), ij3b,kl3b)
assemblx.f:     *                 bl(ibf2l1),lqij,lqkl,
assemblx.f:     *                 bl(ibf2l2),lqij,lqkl,
assemblx.f:     *                 bl(ibf2l3),lqij,lqkl,
assemblx.f:     *                 bl(ibf2l4),lqij,lqkl,
assemblx.f:     *                 bl(icks),bl(ifij),  bl(ibf3l1),l3l,lqmx,
assemblx.f:     *                 lck,lcij,bl(indx))
assemblx.f:     *                 bl(icls),bl(ifij),  bl(ibf3l2),l3l,lqmx,
assemblx.f:     *                 lcl,lcij,bl(indx))
assemblx.f:     *                 bl(ifij),bl(ifkl), bl(issss),lsss ,
assemblx.f:     *                 lcij,lckl,bl(indx))
assemblx.f:      subroutine conijkl1_2(bl,firstc,nbls,nbls1,xt1,lt1,lt2,
assemblx.f:     *                      bfij1,lt3,lt4, facti,lci,
assemblx.f:     *                      indx, ijenx,klenx)
assemblx.f:      dimension bfij1(nbls,lt3,lt4)
assemblx.f:     *           facti(lci),bfij1,lt3,lt4, indx,nbls1, ijenx,klenx)
assemblx.f:     *            facti, bfij1,lt3,lt4, indx,nbls1, ijenx,klenx)
assemblx.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,MMAX,
assemblx.f:     * NQIJ,NQIJ1,NSIJ1,NQKL,NQKL1,NSKL1,ijbeg,klbeg
assemblx.f:      dimension bfij1(nbls,lt3,lt4)
assemblx.f:              DO 504 IJ=IJBEG,ijenx
assemblx.f:              ijkl=indx(i)
assemblx.f:              bfij1(ijkl,ij,kl)=xt1(i,ij,kl)*facti1
assemblx.f:              DO 604 IJ=IJBEG,ijenx
assemblx.f:              ijkl=indx(i)
assemblx.f:              bfij1(ijkl,ij,kl)=bfij1(ijkl,ij,kl)+xt1(i,ij,kl)*facti1
assemblx.f:      subroutine conijkl3_2(bl,firstc,nbls,nbls1,xt1,lt1,lt2,
assemblx.f:     *                      bfij3,lt3,lt4,  factij,lcij,
assemblx.f:     *                      indx, ij3b,kl3b)
assemblx.f:      dimension bfij3(nbls,lt3,lt4)
assemblx.f:      dimension factij(*)
assemblx.f:     *         bfij3,lt3,lt4,factij(lcij), indx, ij3b,kl3b)
assemblx.f:     *                    bfij3,lt3,lt4, factij, indx, ij3b,kl3b)
assemblx.f:      dimension bfij3(nbls,lt3,lt4)
assemblx.f:ccccc dimension factij(*)
assemblx.f:              factij1=factij
assemblx.f:              do 502 ij=ij3b,lt3
assemblx.f:                 ijkl=indx(i)
assemblx.f:                 bfij3(ijkl,ij,kl)=xt1(i,ij,kl)*factij1
assemblx.f:              do 602 ij=ij3b,lt3
assemblx.f:              ijkl=indx(i)
assemblx.f:              bfij3(ijkl,ij,kl)=bfij3(ijkl,ij,kl)+xt1(i,ij,kl)*factij1
assemblx.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,MMAX,
assemblx.f:     * NQIJ,NQIJ1,NSIJ1,NQKL,NQKL1,NSKL1,ijbeg,klbeg
assemblx.f:                ijenx=nfu(nqij1+1)
assemblx.f:                if(nqij1.eq.nsij) ijenx=nfu(nqij+1)
assemblx.f:                ijenx=nfu(nqij+1)
assemblx.f:                if(nqij.eq.nsij) ijenx=1
assemblx.f:              DO 504 IJ=IJBEG,ijenx
assemblx.f:                 ijkl=indx(i)
assemblx.f:                 bf2l1(ijkl,ij,kl)=xt1(i,ij,kl)*factik1
assemblx.f:              DO 604 IJ=IJBEG,ijenx
assemblx.f:                 ijkl=indx(i)
assemblx.f:              bf2l1(ijkl,ij,kl)=bf2l1(ijkl,ij,kl)+xt1(i,ij,kl)*factik1
assemblx.f:     *                     factk,factij, bf3l,lt5,lt6,
assemblx.f:     *                     lck,lcij,indx)
assemblx.f:      dimension factk(*), factij(*)
assemblx.f:     *             factk(lck),factij(lcij), bf3l,lt5,lt6,  indx)
assemblx.f:     *                   factk,factij, bf3l,lt5,lt6, indx)
assemblx.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,MMAX,
assemblx.f:     * NQIJ,NQIJ1,NSIJ1,NQKL,NQKL1,NSKL1,ijbeg,klbeg
assemblx.f:cccc  dimension factk(*),factij(*)
assemblx.f:cccccc          ijenx=nfu(nqij1+1)
assemblx.f:c--------nie->  if(nqij1.eq.nsij) ijenx=1
assemblx.f:c WHAT ??       if(nqkl1.eq.nskl) klenx=nfu(nqij+1)
assemblx.f:cccccc          ijenx=nfu(nqij+1)
assemblx.f:c--------nie->  if(nqij.eq.nsij) ijenx=1
assemblx.f:             factijk=factij*factk
assemblx.f:              do 503 ij=1,lt5
assemblx.f:                 ijkl=indx(i)
assemblx.f:                 bf3l(ijkl,ij,kl)=xt1(i,ij,kl)*factijk
assemblx.f:            do 603 ij=1,lt5
assemblx.f:               ijkl=indx(i)
assemblx.f:               bf3l(ijkl,ij,kl)=bf3l(ijkl,ij,kl)+xt1(i,ij,kl)*factijk
assemblx.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,MMAX,
assemblx.f:     * NQIJ,NQIJ1,NSIJ1,NQKL,NQKL1,NSKL1,ijbeg,klbeg
assemblx.f:                ijenx=nfu(nqij1+1)
assemblx.f:                if(nqij1.eq.nsij) ijenx=nfu(nqij+1)
assemblx.f:                ijenx=nfu(nqij+1)
assemblx.f:                if(nqij.eq.nsij) ijenx=1
assemblx.f:              DO 511 IJ=IJBEG,ijenx
assemblx.f:                 ijkl=indx(i)
assemblx.f:                 bf3l(ijkl,ij,kl)=xt1(i,ij,kl)*factkli
assemblx.f:              DO 611 IJ=IJBEG,ijenx
assemblx.f:              ijkl=indx(i)
assemblx.f:                 bf3l(ijkl,ij,kl)=bf3l(ijkl,ij,kl)+xt1(i,ij,kl)*factkli
assemblx.f:     *                     factij,factkl, ssss,isdim,
assemblx.f:     *                     lcij,lckl,indx)
assemblx.f:      dimension factij(*),factkl(*)
assemblx.f:     *            factij(lcij),factkl(lckl), ssss,isdim, indx)
assemblx.f:     *                  factij,factkl, ssss,isdim,indx)
assemblx.f:cccc  dimension factij(*),factkl(*)
assemblx.f:              fijkl=factij*factkl
assemblx.f:              do 507 ij=1,isdim
assemblx.f:              ijkl=indx(i)
assemblx.f:              ssss(ijkl,ij,kl)= xt1(i,ij,kl)*fijkl
assemblx.f:              do 607 ij=1,isdim
assemblx.f:              ijkl=indx(i)
assemblx.f:              ssss(ijkl,ij,kl)=ssss(ijkl,ij,kl)+xt1(i,ij,kl)*fijkl
assemblx.f:c    do ij=nfu(nqij)+1,nfu(nsij)
assemblx.f:c       buf2(1,ijkl,ij,kl)=xt1(i,ij,kl)        <-- ordinary integrals
assemblx.f:c       buf2(2,ijkl,ij,kl)=xt1(i,ij,kl)*aax <---int.rescaled by 2*a_exp
assemblx.f:c       buf2(3,ijkl,ij,kl)=xt1(i,ij,kl)*bbx <---int.rescaled by 2*b_exp
assemblx.f:c       buf2(4,ijkl,ij,kl)=xt1(i,ij,kl)*ccx <---integ.rescaled by 2*c_exp
assemblx.f:c    do ij=nfu(nqij)+1,nfu(nsij)
assemblx.f:c       buf2(4,ijkl,ij,kl)=xt1(i,ij,kl)*ccx <---integ.rescaled by 2*c_exp
assemblx.f:c    do ij=nfu(nsij)+1,nfu(nsij+1)
assemblx.f:c       buf2(2,ijkl,ij,kl)=xt1(i,ij,kl)*aax <---int.rescaled by 2*a_exp
assemblx.f:c       buf2(3,ijkl,ij,kl)=xt1(i,ij,kl)*bbx <---int.rescaled by 2*b_exp
assemblx.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,MMAX,
assemblx.f:     * NQIJ,NQIJ1,NSIJ1,NQKL,NQKL1,NSKL1,ijbeg,klbeg
assemblx.f:            do ij=nfu(nqij)+1,nfu(nsij)
assemblx.f:               ijkl=indx(i)
assemblx.f:               buf2(ijkl,ij,kl,1)=buf2(ijkl,ij,kl,1)+xt1(i,ij,kl)
assemblx.f:               buf2(ijkl,ij,kl,2)=buf2(ijkl,ij,kl,2)+xt1(i,ij,kl)*aax1
assemblx.f:               buf2(ijkl,ij,kl,3)=buf2(ijkl,ij,kl,3)+xt1(i,ij,kl)*bbx1
assemblx.f:               buf2(ijkl,ij,kl,4)=buf2(ijkl,ij,kl,4)+xt1(i,ij,kl)*ccx1
assemblx.f:            do ij=nfu(nsij)+1,nfu(nsij+1)
assemblx.f:               ijkl=indx(i)
assemblx.f:               buf2(ijkl,ij,kl,2)=buf2(ijkl,ij,kl,2)+xt1(i,ij,kl)*aax1
assemblx.f:               buf2(ijkl,ij,kl,3)=buf2(ijkl,ij,kl,3)+xt1(i,ij,kl)*bbx1
assemblx.f:            do ij=nfu(nqij)+1,nfu(nsij)
assemblx.f:               ijkl=indx(i)
assemblx.f:               buf2(ijkl,ij,kl,4)=buf2(ijkl,ij,kl,4)+xt1(i,ij,kl)*ccx1
assemblx.f:c    do ij=nfu(nqij)+1,nfu(nsij)
assemblx.f:c       buf2(1,ijkl,ij,kl)=xt1(i,ij,kl)        <-- ordinary integrals
assemblx.f:c       buf2(2,ijkl,ij,kl)=xt1(i,ij,kl)*aax <---int.rescaled by 2*a_exp
assemblx.f:c       buf2(3,ijkl,ij,kl)=xt1(i,ij,kl)*bbx <---int.rescaled by 2*b_exp
assemblx.f:c       buf2(4,ijkl,ij,kl)=xt1(i,ij,kl)*ccx <---integ.rescaled by 2*c_exp
assemblx.f:c    do ij=nfu(nqij)+1,nfu(nsij)
assemblx.f:c       buf2(4,ijkl,ij,kl)=xt1(i,ij,kl)*ccx <---integ.rescaled by 2*c_exp
assemblx.f:c    do ij=nfu(nsij)+1,nfu(nsij+1)
assemblx.f:c       buf2(2,ijkl,ij,kl)=xt1(i,ij,kl)*aax <---int.rescaled by 2*a_exp
assemblx.f:c       buf2(3,ijkl,ij,kl)=xt1(i,ij,kl)*bbx <---int.rescaled by 2*b_exp
assemblx.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,MMAX,
assemblx.f:     * NQIJ,NQIJ1,NSIJ1,NQKL,NQKL1,NSKL1,ijbeg,klbeg
assemblx.f:            do ij=nfu(nqij)+1,nfu(nsij)
assemblx.f:                  ijkl=indx(i)
assemblx.f:                  buf2(ijkl,ij,kl,1)=xt1(i,ij,kl)
assemblx.f:                  buf2(ijkl,ij,kl,2)=xt1(i,ij,kl)*aax1
assemblx.f:                  buf2(ijkl,ij,kl,3)=xt1(i,ij,kl)*bbx1
assemblx.f:                  buf2(ijkl,ij,kl,4)=xt1(i,ij,kl)*ccx1
assemblx.f:                  ijkl=idxnot(i)
assemblx.f:                  buf2(ijkl,ij,kl,1)=zero
assemblx.f:                  buf2(ijkl,ij,kl,2)=zero
assemblx.f:                  buf2(ijkl,ij,kl,3)=zero
assemblx.f:                  buf2(ijkl,ij,kl,4)=zero
assemblx.f:            do ij=nfu(nsij)+1,nfu(nsij+1)
assemblx.f:                  ijkl=indx(i)
assemblx.f:                  buf2(ijkl,ij,kl,2)=xt1(i,ij,kl)*aax1
assemblx.f:                  buf2(ijkl,ij,kl,3)=xt1(i,ij,kl)*bbx1
assemblx.f:                  ijkl=idxnot(i)
assemblx.f:                  buf2(ijkl,ij,kl,2)=zero
assemblx.f:                  buf2(ijkl,ij,kl,3)=zero
assemblx.f:            do ij=nfu(nqij)+1,nfu(nsij)
assemblx.f:                  ijkl=indx(i)
assemblx.f:                  buf2(ijkl,ij,kl,4)=xt1(i,ij,kl)*ccx1
assemblx.f:                  ijkl=idxnot(i)
assemblx.f:                  buf2(ijkl,ij,kl,4)=zero
assemblx.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,MMAX,
assemblx.f:     * NQIJ,NQIJ1,NSIJ1,NQKL,NQKL1,NSKL1,ijbeg,klbeg
assemblx.f:        ij1=nfu(nqij)
assemblx.f:        ij2=nfu(nsij-1)
assemblx.f:        ij3=nfu(nsij)
assemblx.f:        ij4=nfu(nsij+1)
assemblx.f:              do ij=ij1+1,ij2
assemblx.f:                 ijkl=indx(i)
assemblx.f:                 buf2(ijkl,IJ,KL,1)=XT1(i,IJ,KL)
assemblx.f:                 buf2(ijkl,IJ,KL,2)=XT1(i,IJ,KL)*aax1
assemblx.f:                 buf2(ijkl,IJ,KL,3)=XT1(i,IJ,KL)*bbx1
assemblx.f:                 buf2(ijkl,IJ,KL,4)=XT1(i,IJ,KL)*ccx1
assemblx.f:                 buf2(ijkl,IJ,KL,5)=XT1(i,IJ,KL)*expo(1)
assemblx.f:                 buf2(ijkl,IJ,KL,6)=XT1(i,IJ,KL)*expo(2)
assemblx.f:                 buf2(ijkl,IJ,KL,7)=XT1(i,IJ,KL)*expo(3)
assemblx.f:                 buf2(ijkl,IJ,KL,8)=XT1(i,IJ,KL)*expo(4)
assemblx.f:                 buf2(ijkl,IJ,KL,9)=XT1(i,IJ,KL)*expo(5)
assemblx.f:                 buf2(ijkl,IJ,KL,10)=XT1(i,IJ,KL)*expo(6)
assemblx.f:                 ijkl=idxnot(i)
assemblx.f:                    buf2(ijkl,IJ,KL,ii)= zero
assemblx.f:              do ij=ij2+1,ij3
assemblx.f:                 ijkl=indx(i)
assemblx.f:                 buf2(ijkl,IJ,KL,2)=XT1(i,IJ,KL)*aax1
assemblx.f:                 buf2(ijkl,IJ,KL,3)=XT1(i,IJ,KL)*bbx1
assemblx.f:                 buf2(ijkl,IJ,KL,5)=XT1(i,IJ,KL)*expo(1)
assemblx.f:                 buf2(ijkl,IJ,KL,6)=XT1(i,IJ,KL)*expo(2)
assemblx.f:                 buf2(ijkl,IJ,KL,7)=XT1(i,IJ,KL)*expo(3)
assemblx.f:                 buf2(ijkl,IJ,KL,8)=XT1(i,IJ,KL)*expo(4)
assemblx.f:                 buf2(ijkl,IJ,KL,9)=XT1(i,IJ,KL)*expo(5)
assemblx.f:                 ijkl=idxnot(i)
assemblx.f:                    buf2(ijkl,IJ,KL,ii)= zero
assemblx.f:              do ij=ij3+1,ij4
assemblx.f:                 ijkl=indx(i)
assemblx.f:                 buf2(ijkl,IJ,KL,5)=XT1(i,IJ,KL)*expo(1)
assemblx.f:                 buf2(ijkl,IJ,KL,8)=XT1(i,IJ,KL)*expo(4)
assemblx.f:                 buf2(ijkl,IJ,KL,9)=XT1(i,IJ,KL)*expo(5)
assemblx.f:                 ijkl=idxnot(i)
assemblx.f:                    buf2(ijkl,IJ,KL,ii)= zero
assemblx.f:              do ij=ij1+1,ij2
assemblx.f:                 ijkl=indx(i)
assemblx.f:                 buf2(ijkl,IJ,KL,4)=XT1(i,IJ,KL)*ccx1
assemblx.f:                 buf2(ijkl,IJ,KL,6)=XT1(i,IJ,KL)*expo(2)
assemblx.f:                 buf2(ijkl,IJ,KL,7)=XT1(i,IJ,KL)*expo(3)
assemblx.f:                 buf2(ijkl,IJ,KL,10)=XT1(i,IJ,KL)*expo(6)
assemblx.f:                 ijkl=idxnot(i)
assemblx.f:                    buf2(ijkl,IJ,KL,ii)= zero
assemblx.f:              do ij=ij2+1,ij3
assemblx.f:                 ijkl=indx(i)
assemblx.f:                 buf2(ijkl,IJ,KL,6)=XT1(i,IJ,KL)*expo(2)
assemblx.f:                 buf2(ijkl,IJ,KL,7)=XT1(i,IJ,KL)*expo(3)
assemblx.f:                 ijkl=idxnot(i)
assemblx.f:                    buf2(ijkl,IJ,KL,ii)= zero
assemblx.f:              do ij=ij1+1,ij2
assemblx.f:                 ijkl=indx(i)
assemblx.f:                 buf2(ijkl,IJ,KL,10)=XT1(i,IJ,KL)*expo(6)
assemblx.f:                 ijkl=idxnot(i)
assemblx.f:                    buf2(ijkl,IJ,KL,ii)= zero
assemblx.f:              do ij=ij1+1,ij2
assemblx.f:                 ijkl=indx(i)
assemblx.f:           buf2(ijkl,IJ,KL,1)=buf2(ijkl,ij,kl,1)+XT1(i,IJ,KL)
assemblx.f:           buf2(ijkl,IJ,KL,2)=buf2(ijkl,ij,kl,2)+XT1(i,IJ,KL)*aax1
assemblx.f:           buf2(ijkl,IJ,KL,3)=buf2(ijkl,ij,kl,3)+XT1(i,IJ,KL)*bbx1
assemblx.f:           buf2(ijkl,IJ,KL,4)=buf2(ijkl,ij,kl,4)+XT1(i,IJ,KL)*ccx1
assemblx.f:           buf2(ijkl,IJ,KL,5)=buf2(ijkl,ij,kl,5)+XT1(i,IJ,KL)*expo(1)
assemblx.f:           buf2(ijkl,IJ,KL,6)=buf2(ijkl,ij,kl,6)+XT1(i,IJ,KL)*expo(2)
assemblx.f:           buf2(ijkl,IJ,KL,7)=buf2(ijkl,ij,kl,7)+XT1(i,IJ,KL)*expo(3)
assemblx.f:           buf2(ijkl,IJ,KL,8)=buf2(ijkl,ij,kl,8)+XT1(i,IJ,KL)*expo(4)
assemblx.f:           buf2(ijkl,IJ,KL,9)=buf2(ijkl,ij,kl,9)+XT1(i,IJ,KL)*expo(5)
assemblx.f:          buf2(ijkl,IJ,KL,10)=buf2(ijkl,ij,kl,10)+XT1(i,IJ,KL)*expo(6)
assemblx.f:              do ij=ij2+1,ij3
assemblx.f:                 ijkl=indx(i)
assemblx.f:           buf2(ijkl,IJ,KL,2)=buf2(ijkl,ij,kl,2)+XT1(i,IJ,KL)*aax1
assemblx.f:           buf2(ijkl,IJ,KL,3)=buf2(ijkl,ij,kl,3)+XT1(i,IJ,KL)*bbx1
assemblx.f:           buf2(ijkl,IJ,KL,5)=buf2(ijkl,ij,kl,5)+XT1(i,IJ,KL)*expo(1)
assemblx.f:           buf2(ijkl,IJ,KL,6)=buf2(ijkl,ij,kl,6)+XT1(i,IJ,KL)*expo(2)
assemblx.f:           buf2(ijkl,IJ,KL,7)=buf2(ijkl,ij,kl,7)+XT1(i,IJ,KL)*expo(3)
assemblx.f:           buf2(ijkl,IJ,KL,8)=buf2(ijkl,ij,kl,8)+XT1(i,IJ,KL)*expo(4)
assemblx.f:           buf2(ijkl,IJ,KL,9)=buf2(ijkl,ij,kl,9)+XT1(i,IJ,KL)*expo(5)
assemblx.f:              do ij=ij3+1,ij4
assemblx.f:                 ijkl=indx(i)
assemblx.f:           buf2(ijkl,IJ,KL,5)=buf2(ijkl,ij,kl,5)+XT1(i,IJ,KL)*expo(1)
assemblx.f:           buf2(ijkl,IJ,KL,8)=buf2(ijkl,ij,kl,8)+XT1(i,IJ,KL)*expo(4)
assemblx.f:           buf2(ijkl,IJ,KL,9)=buf2(ijkl,ij,kl,9)+XT1(i,IJ,KL)*expo(5)
assemblx.f:              do ij=ij1+1,ij2
assemblx.f:                 ijkl=indx(i)
assemblx.f:           buf2(ijkl,IJ,KL,4)=buf2(ijkl,ij,kl,4)+XT1(i,IJ,KL)*ccx1
assemblx.f:           buf2(ijkl,IJ,KL,6)=buf2(ijkl,ij,kl,6)+XT1(i,IJ,KL)*expo(2)
assemblx.f:           buf2(ijkl,IJ,KL,7)=buf2(ijkl,ij,kl,7)+XT1(i,IJ,KL)*expo(3)
assemblx.f:          buf2(ijkl,IJ,KL,10)=buf2(ijkl,ij,kl,10)+XT1(i,IJ,KL)*expo(6)
assemblx.f:              do ij=ij2+1,ij3
assemblx.f:                 ijkl=indx(i)
assemblx.f:           buf2(ijkl,IJ,KL,6)=buf2(ijkl,ij,kl,6)+XT1(i,IJ,KL)*expo(2)
assemblx.f:           buf2(ijkl,IJ,KL,7)=buf2(ijkl,ij,kl,7)+XT1(i,IJ,KL)*expo(3)
assemblx.f:              do ij=ij1+1,ij2
assemblx.f:                 ijkl=indx(i)
assemblx.f:          buf2(ijkl,IJ,KL,10)=buf2(ijkl,ij,kl,10)+XT1(i,IJ,KL)*expo(6)
assemblx.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,MMAX,
assemblx.f:     * NQIJ,NQIJ1,NSIJ1,NQKL,NQKL1,NSKL1,ijbeg,klbeg
assemblx.f:            do ij=nfu(nqij)+1,nfu(nsij)
assemblx.f:               buf2(i,ij,kl,1)=xt1(i,ij,kl)
assemblx.f:               buf2(i,ij,kl,2)=xt1(i,ij,kl)*aax1
assemblx.f:               buf2(i,ij,kl,3)=xt1(i,ij,kl)*bbx1
assemblx.f:               buf2(i,ij,kl,4)=xt1(i,ij,kl)*ccx1
assemblx.f:            do ij=nfu(nsij)+1,nfu(nsij+1)
assemblx.f:               buf2(i,ij,kl,2)=xt1(i,ij,kl)*aax1
assemblx.f:               buf2(i,ij,kl,3)=xt1(i,ij,kl)*bbx1
assemblx.f:            do ij=nfu(nqij)+1,nfu(nsij)
assemblx.f:               buf2(i,ij,kl,4)=xt1(i,ij,kl)*ccx1
assemblx.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,MMAX,
assemblx.f:     * NQIJ,NQIJ1,NSIJ1,NQKL,NQKL1,NSKL1,ijbeg,klbeg
assemblx.f:            do ij=nfu(nqij)+1,nfu(nsij)
assemblx.f:               buf2(i,ij,kl,1)=buf2(i,ij,kl,1) + xt1(i,ij,kl)
assemblx.f:               buf2(i,ij,kl,2)=buf2(i,ij,kl,2) + xt1(i,ij,kl)*aax1
assemblx.f:               buf2(i,ij,kl,3)=buf2(i,ij,kl,3) + xt1(i,ij,kl)*bbx1
assemblx.f:               buf2(i,ij,kl,4)=buf2(i,ij,kl,4) + xt1(i,ij,kl)*ccx1
assemblx.f:            do ij=nfu(nsij)+1,nfu(nsij+1)
assemblx.f:               buf2(i,ij,kl,2)=buf2(i,ij,kl,2) + xt1(i,ij,kl)*aax1
assemblx.f:               buf2(i,ij,kl,3)=buf2(i,ij,kl,3) + xt1(i,ij,kl)*bbx1
assemblx.f:            do ij=nfu(nqij)+1,nfu(nsij)
assemblx.f:               buf2(i,ij,kl,4)=buf2(i,ij,kl,4) + xt1(i,ij,kl)*ccx1
assemblx.f:         ijkl=indx(i)
assemblx.f:            gcexp(iqu, 1,ijkl)=gcoef(iqu,ijkl)
assemblx.f:            gcexp(iqu, 2,ijkl)=gcoef(iqu,ijkl)*axi
assemblx.f:            gcexp(iqu, 3,ijkl)=gcoef(iqu,ijkl)*bxi
assemblx.f:            gcexp(iqu, 4,ijkl)=gcoef(iqu,ijkl)*cxi
assemblx.f:            gcexp(iqu, 5,ijkl)=gcoef(iqu,ijkl)*abxi
assemblx.f:            gcexp(iqu, 6,ijkl)=gcoef(iqu,ijkl)*acxi
assemblx.f:            gcexp(iqu, 7,ijkl)=gcoef(iqu,ijkl)*bcxi
assemblx.f:            gcexp(iqu, 8,ijkl)=gcoef(iqu,ijkl)*aaxi
assemblx.f:            gcexp(iqu, 9,ijkl)=gcoef(iqu,ijkl)*bbxi
assemblx.f:            gcexp(iqu,10,ijkl)=gcoef(iqu,ijkl)*ccxi
assemblx.f:         ijkl=indx(i)
assemblx.f:            gcexp(iqu, 1,ijkl)=gcoef(iqu,ijkl)
assemblx.f:            gcexp(iqu, 2,ijkl)=gcoef(iqu,ijkl)*axi
assemblx.f:            gcexp(iqu, 3,ijkl)=gcoef(iqu,ijkl)*bxi
assemblx.f:            gcexp(iqu, 4,ijkl)=gcoef(iqu,ijkl)*cxi
assemblx.f:            gcexp(iqu, 5,ijkl)=gcoef(iqu,ijkl)*abxi
assemblx.f:            gcexp(iqu, 6,ijkl)=gcoef(iqu,ijkl)*acxi
assemblx.f:            gcexp(iqu, 7,ijkl)=gcoef(iqu,ijkl)*bcxi
assemblx.f:            gcexp(iqu, 8,ijkl)=gcoef(iqu,ijkl)*aaxi
assemblx.f:            gcexp(iqu, 9,ijkl)=gcoef(iqu,ijkl)*bbxi
assemblx.f:            gcexp(iqu,10,ijkl)=gcoef(iqu,ijkl)*ccxi
assemblx.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,MMAX,
assemblx.f:     * NQIJ,NQIJ1,NSIJ1,NQKL,NQKL1,NSKL1,ijbeg,klbeg
assemblx.f:           DO 551 ij=nfu(nqij)+1,nfu(nsij)
assemblx.f:              ijkl=indx(i)
assemblx.f:                    but2(iqu,ist,ijkl,IJ,KL)=xint*gcexp(iqu,ist,ijkl)
assemblx.f:           DO 552 ij=nfu(nsij)+1,nfu(nsij+1)
assemblx.f:              ijkl=indx(i)
assemblx.f:                    but2(iqu,ist,ijkl,IJ,KL)=xint*gcexp(iqu,ist,ijkl)
assemblx.f:                    but2(iqu,ist,ijkl,IJ,KL)=xint*gcexp(iqu,ist,ijkl)
assemblx.f:           DO 553 ij=nfu(nqij)+1,nfu(nsij)
assemblx.f:              ijkl=indx(i)
assemblx.f:                    but2(iqu,ist,ijkl,IJ,KL)=xint*gcexp(iqu,ist,ijkl)
assemblx.f:           DO 651 ij=nfu(nqij)+1,nfu(nsij)
assemblx.f:              ijkl=indx(i)
assemblx.f:                    but2(iqu,ist,ijkl,IJ,KL)=but2(iqu,ist,ijkl,IJ,KL)
assemblx.f:     *                                      +xint*gcexp(iqu,ist,ijkl)
assemblx.f:           DO 652 ij=nfu(nsij)+1,nfu(nsij+1)
assemblx.f:              ijkl=indx(i)
assemblx.f:                    but2(iqu,ist,ijkl,IJ,KL)=but2(iqu,ist,ijkl,IJ,KL)
assemblx.f:     *                                      +xint*gcexp(iqu,ist,ijkl)
assemblx.f:                    but2(iqu,ist,ijkl,IJ,KL)=but2(iqu,ist,ijkl,IJ,KL)
assemblx.f:     *                                      +xint*gcexp(iqu,ist,ijkl)
assemblx.f:           DO 653 ij=nfu(nqij)+1,nfu(nsij)
assemblx.f:              ijkl=indx(i)
assemblx.f:                    but2(iqu,ist,ijkl,IJ,KL)=but2(iqu,ist,ijkl,IJ,KL)
assemblx.f:     *                                      +xint*gcexp(iqu,ist,ijkl)
assemblx.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,MMAX,
assemblx.f:     * NQIJ,NQIJ1,NSIJ1,NQKL,NQKL1,NSKL1,ijbeg,klbeg
assemblx.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,MMAX,
assemblx.f:     * NQIJ,NQIJ1,NSIJ1,NQKL,NQKL1,NSKL1,ijbeg,klbeg
assemblx.f:        ij1=nfu(nqij)
assemblx.f:        ij2=nfu(nsij-1)
assemblx.f:        ij3=nfu(nsij)
assemblx.f:        ij4=nfu(nsij+1)
assemblx.f:              do ij=ij1+1,ij2
assemblx.f:                 ijkl=indx(i)
assemblx.f:                 buf2(ijkl,IJ,KL,1)=XT1(i,IJ,KL)
assemblx.f:                 buf2(ijkl,IJ,KL,2)=XT1(i,IJ,KL)*aax1
assemblx.f:                 buf2(ijkl,IJ,KL,3)=XT1(i,IJ,KL)*bbx1
assemblx.f:                 buf2(ijkl,IJ,KL,4)=XT1(i,IJ,KL)*ccx1
assemblx.f:                 ijkl=idxnot(i)
assemblx.f:                    buf2(ijkl,IJ,KL,ii)= zero
assemblx.f:              do ij=ij2+1,ij3
assemblx.f:                 ijkl=indx(i)
assemblx.f:                 buf2(ijkl,IJ,KL,2)=XT1(i,IJ,KL)*aax1
assemblx.f:                 buf2(ijkl,IJ,KL,3)=XT1(i,IJ,KL)*bbx1
assemblx.f:                 ijkl=idxnot(i)
assemblx.f:                    buf2(ijkl,IJ,KL,ii)= zero
assemblx.f:              do ij=ij3+1,ij4
assemblx.f:                 ijkl=idxnot(i)
assemblx.f:                    buf2(ijkl,IJ,KL,ii)= zero
assemblx.f:              do ij=ij1+1,ij2
assemblx.f:                 ijkl=indx(i)
assemblx.f:                 buf2(ijkl,IJ,KL,4)=XT1(i,IJ,KL)*ccx1
assemblx.f:                 ijkl=idxnot(i)
assemblx.f:                    buf2(ijkl,IJ,KL,ii)= zero
assemblx.f:              do ij=ij2+1,ij3
assemblx.f:                 ijkl=idxnot(i)
assemblx.f:                    buf2(ijkl,IJ,KL,ii)= zero
assemblx.f:              do ij=ij1+1,ij2
assemblx.f:                 ijkl=idxnot(i)
assemblx.f:                    buf2(ijkl,IJ,KL,ii)= zero
assemblx.f:              do ij=ij1+1,ij2
assemblx.f:                 ijkl=indx(i)
assemblx.f:           buf2(ijkl,IJ,KL,1)=buf2(ijkl,ij,kl,1)+XT1(i,IJ,KL)
assemblx.f:           buf2(ijkl,IJ,KL,2)=buf2(ijkl,ij,kl,2)+XT1(i,IJ,KL)*aax1
assemblx.f:           buf2(ijkl,IJ,KL,3)=buf2(ijkl,ij,kl,3)+XT1(i,IJ,KL)*bbx1
assemblx.f:           buf2(ijkl,IJ,KL,4)=buf2(ijkl,ij,kl,4)+XT1(i,IJ,KL)*ccx1
assemblx.f:              do ij=ij2+1,ij3
assemblx.f:                 ijkl=indx(i)
assemblx.f:           buf2(ijkl,IJ,KL,2)=buf2(ijkl,ij,kl,2)+XT1(i,IJ,KL)*aax1
assemblx.f:           buf2(ijkl,IJ,KL,3)=buf2(ijkl,ij,kl,3)+XT1(i,IJ,KL)*bbx1
assemblx.f:              do ij=ij1+1,ij2
assemblx.f:                 ijkl=indx(i)
assemblx.f:           buf2(ijkl,IJ,KL,4)=buf2(ijkl,ij,kl,4)+XT1(i,IJ,KL)*ccx1
assemblx.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,MMAX,
assemblx.f:     * NQIJ,NQIJ1,NSIJ1,NQKL,NQKL1,NSKL1,ijbeg,klbeg
assemblx.f:        ij1=nfu(nqij)
assemblx.f:        ij2=nfu(nsij-1)
assemblx.f:        ij3=nfu(nsij)
assemblx.f:        ij4=nfu(nsij+1)
assemblx.f:              do ij=ij1+1,ij2
assemblx.f:                 ijkl=indx(i)
assemblx.f:                 buf2(ijkl,IJ,KL,5)=XT1(i,IJ,KL)*expo(1)
assemblx.f:                 buf2(ijkl,IJ,KL,6)=XT1(i,IJ,KL)*expo(2)
assemblx.f:                 buf2(ijkl,IJ,KL,7)=XT1(i,IJ,KL)*expo(3)
assemblx.f:                 buf2(ijkl,IJ,KL,8)=XT1(i,IJ,KL)*expo(4)
assemblx.f:                 buf2(ijkl,IJ,KL,9)=XT1(i,IJ,KL)*expo(5)
assemblx.f:                 buf2(ijkl,IJ,KL,10)=XT1(i,IJ,KL)*expo(6)
assemblx.f:                 ijkl=idxnot(i)
assemblx.f:                    buf2(ijkl,IJ,KL,ii)= zero
assemblx.f:              do ij=ij2+1,ij3
assemblx.f:                 ijkl=indx(i)
assemblx.f:                 buf2(ijkl,IJ,KL,5)=XT1(i,IJ,KL)*expo(1)
assemblx.f:                 buf2(ijkl,IJ,KL,6)=XT1(i,IJ,KL)*expo(2)
assemblx.f:                 buf2(ijkl,IJ,KL,7)=XT1(i,IJ,KL)*expo(3)
assemblx.f:                 buf2(ijkl,IJ,KL,8)=XT1(i,IJ,KL)*expo(4)
assemblx.f:                 buf2(ijkl,IJ,KL,9)=XT1(i,IJ,KL)*expo(5)
assemblx.f:                 ijkl=idxnot(i)
assemblx.f:                    buf2(ijkl,IJ,KL,ii)= zero
assemblx.f:              do ij=ij3+1,ij4
assemblx.f:                 ijkl=indx(i)
assemblx.f:                 buf2(ijkl,IJ,KL,5)=XT1(i,IJ,KL)*expo(1)
assemblx.f:                 buf2(ijkl,IJ,KL,8)=XT1(i,IJ,KL)*expo(4)
assemblx.f:                 buf2(ijkl,IJ,KL,9)=XT1(i,IJ,KL)*expo(5)
assemblx.f:                 ijkl=idxnot(i)
assemblx.f:                    buf2(ijkl,IJ,KL,ii)= zero
assemblx.f:              do ij=ij1+1,ij2
assemblx.f:                 ijkl=indx(i)
assemblx.f:                 buf2(ijkl,IJ,KL,6)=XT1(i,IJ,KL)*expo(2)
assemblx.f:                 buf2(ijkl,IJ,KL,7)=XT1(i,IJ,KL)*expo(3)
assemblx.f:                 buf2(ijkl,IJ,KL,10)=XT1(i,IJ,KL)*expo(6)
assemblx.f:                 ijkl=idxnot(i)
assemblx.f:                    buf2(ijkl,IJ,KL,ii)= zero
assemblx.f:              do ij=ij2+1,ij3
assemblx.f:                 ijkl=indx(i)
assemblx.f:                 buf2(ijkl,IJ,KL,6)=XT1(i,IJ,KL)*expo(2)
assemblx.f:                 buf2(ijkl,IJ,KL,7)=XT1(i,IJ,KL)*expo(3)
assemblx.f:                 ijkl=idxnot(i)
assemblx.f:                    buf2(ijkl,IJ,KL,ii)= zero
assemblx.f:              do ij=ij1+1,ij2
assemblx.f:                 ijkl=indx(i)
assemblx.f:                 buf2(ijkl,IJ,KL,10)=XT1(i,IJ,KL)*expo(6)
assemblx.f:                 ijkl=idxnot(i)
assemblx.f:                    buf2(ijkl,IJ,KL,ii)= zero
assemblx.f:              do ij=ij1+1,ij2
assemblx.f:                 ijkl=indx(i)
assemblx.f:           buf2(ijkl,IJ,KL,5)=buf2(ijkl,ij,kl,5)+XT1(i,IJ,KL)*expo(1)
assemblx.f:           buf2(ijkl,IJ,KL,6)=buf2(ijkl,ij,kl,6)+XT1(i,IJ,KL)*expo(2)
assemblx.f:           buf2(ijkl,IJ,KL,7)=buf2(ijkl,ij,kl,7)+XT1(i,IJ,KL)*expo(3)
assemblx.f:           buf2(ijkl,IJ,KL,8)=buf2(ijkl,ij,kl,8)+XT1(i,IJ,KL)*expo(4)
assemblx.f:           buf2(ijkl,IJ,KL,9)=buf2(ijkl,ij,kl,9)+XT1(i,IJ,KL)*expo(5)
assemblx.f:          buf2(ijkl,IJ,KL,10)=buf2(ijkl,ij,kl,10)+XT1(i,IJ,KL)*expo(6)
assemblx.f:              do ij=ij2+1,ij3
assemblx.f:                 ijkl=indx(i)
assemblx.f:           buf2(ijkl,IJ,KL,5)=buf2(ijkl,ij,kl,5)+XT1(i,IJ,KL)*expo(1)
assemblx.f:           buf2(ijkl,IJ,KL,6)=buf2(ijkl,ij,kl,6)+XT1(i,IJ,KL)*expo(2)
assemblx.f:           buf2(ijkl,IJ,KL,7)=buf2(ijkl,ij,kl,7)+XT1(i,IJ,KL)*expo(3)
assemblx.f:           buf2(ijkl,IJ,KL,8)=buf2(ijkl,ij,kl,8)+XT1(i,IJ,KL)*expo(4)
assemblx.f:           buf2(ijkl,IJ,KL,9)=buf2(ijkl,ij,kl,9)+XT1(i,IJ,KL)*expo(5)
assemblx.f:              do ij=ij3+1,ij4
assemblx.f:                 ijkl=indx(i)
assemblx.f:           buf2(ijkl,IJ,KL,5)=buf2(ijkl,ij,kl,5)+XT1(i,IJ,KL)*expo(1)
assemblx.f:           buf2(ijkl,IJ,KL,8)=buf2(ijkl,ij,kl,8)+XT1(i,IJ,KL)*expo(4)
assemblx.f:           buf2(ijkl,IJ,KL,9)=buf2(ijkl,ij,kl,9)+XT1(i,IJ,KL)*expo(5)
assemblx.f:              do ij=ij1+1,ij2
assemblx.f:                 ijkl=indx(i)
assemblx.f:           buf2(ijkl,IJ,KL,6)=buf2(ijkl,ij,kl,6)+XT1(i,IJ,KL)*expo(2)
assemblx.f:           buf2(ijkl,IJ,KL,7)=buf2(ijkl,ij,kl,7)+XT1(i,IJ,KL)*expo(3)
assemblx.f:          buf2(ijkl,IJ,KL,10)=buf2(ijkl,ij,kl,10)+XT1(i,IJ,KL)*expo(6)
assemblx.f:              do ij=ij2+1,ij3
assemblx.f:                 ijkl=indx(i)
assemblx.f:           buf2(ijkl,IJ,KL,6)=buf2(ijkl,ij,kl,6)+XT1(i,IJ,KL)*expo(2)
assemblx.f:           buf2(ijkl,IJ,KL,7)=buf2(ijkl,ij,kl,7)+XT1(i,IJ,KL)*expo(3)
assemblx.f:              do ij=ij1+1,ij2
assemblx.f:                 ijkl=indx(i)
assemblx.f:          buf2(ijkl,IJ,KL,10)=buf2(ijkl,ij,kl,10)+XT1(i,IJ,KL)*expo(6)
atomdens.f:cc        write(6,*) ' S-loop  I:',ii,' J:',jj,z(ij)
atomdens.f:cc        write(6,*) ' P-loop  I:',ii,' J:',jj,z(ij)/3.0d0
atomdens.f:cc        write(6,*) ' D-loop  I:',i,' J:',j,z(ij)/5.0d0
atomdens.f:cc        write(6,*) ' F-loop  I:',i,' J:',j,z(ij)/7.0d0
atomdens.f:      ijstep = 0
atomdens.f:      ijbas = 0
atomdens.f:                  ij = ijstep + (i-ijbas-1)*(i-ijbas)/2
atomdens.f:                     jj = j - ijbas
atomdens.f:                        sumc = sumc + cont(i)*cont(j)*ffc(ij+jj)
atomdens.f:                        sumc = sumc + 2.0d0*cont(i)*cont(j)*ffc(ij+jj)
atomdens.f:                        sumc = sumc + cont(i)*cont(j)*ffc(ij+jj)
atomdens.f:         ijstep = ijstep + nbas(l)*(nbas(l)+1)/2
atomdens.f:         ijbas = ijbas + nbas(l)
blocking.f:      common /memor1/ iisd,jjsd,ijbld
blocking.f:      common /memor1c/ map_ij_bl2
blocking.f:      common /memors/ nsym,ijshp,isymm
blocking.f:c allocate memory for iis(ijcs)--> ics  & jjs(ijcs)-->jcs arrays
blocking.f:c allocate memory for map_ij_bl2(ijcs)-->ijbl2
blocking.f:      call getint(ncsp,map_ij_bl2)
blocking.f:c Store these addresses in the  common /memor1/ iisd,jjsd,ijbld
blocking.f:c                               common /memor1c/ map_ij_bl2
blocking.f:c npar, ijbl and nsupb
blocking.f:     *                nbl2,nsupb,npard,ijbld, mxsize,map_ij_bl2,
blocking.f:c  output : arrays' addresses : nsupb, npar, ijbl and  mxsize )
blocking.f:         call getint(nsym*ncsp, ijshp)
blocking.f:         call parsym(ncs,bl(ifp1),bl(iisd),bl(jjsd),bl(ijshp),nsym)
blocking.f:      call price(inx,bl(iisd),bl(jjsd),bl(ijbld),bl(npard),
blocking.f:c  pairs ijcs are given by ics=iis(ijcs) and jcs=jjs(ijcs)
blocking.f:c  which pairs belong to this block : ijcs=ijbl(ibl,1-npar)
blocking.f:     *                     nbl2,nsupb,npard,ijbld,mxsize,map_ij_bl2,
blocking.f:c and setup iis(ijcs) & jjs(ijcs) arrays :
blocking.f:      call getint(nbl2*maxpar,ijbld)
blocking.f:c output : addresses : npard,ijbld & mxsize
blocking.f:      call blk_pairs_make(nbl1,bl(nblock1),nbl2,bl(npard),bl(ijbld),
blocking.f:     *                    bl(map_ij_bl2) )
blocking.f:      call blkmemor(bl,nbl2,bl(ijbld),bl(npard),
blocking.f:      call blksizer(bl,bl(nsupb),nbl2,bl(ijbld),bl(npard),
blocking.f:      ijcs=0
blocking.f:        ijcs=ijcs+1
blocking.f:        iis(ijcs)=ics
blocking.f:        jjs(ijcs)=jcs
blocking.f:      ijbl=0             !    blocks counter (with limit)
blocking.f:            ijbl=ijbl+1
blocking.f:            ijpar=0
blocking.f:                  if(ijpar.ge.limpair) then
blocking.f:                     ijbl=ijbl+1
blocking.f:                     ijpar=0
blocking.f:                  ijpar=ijpar+1
blocking.f:ccccccccccccccc   npar(ijbl)=ijpar     ccccccccccccccccccccccc
blocking.f:                  if(ijpar.gt.maxpar) maxpar=ijpar
blocking.f:      nbl2=ijbl   ! number of pair-blocks with the limit limpair
blocking.f:      subroutine blk_pairs_make(nbl1,nblock1,nbl2,npar,ijbl,map_ij_bl2)
blocking.f:      dimension ijbl(nbl2,*)                  ! output
blocking.f:      dimension map_ij_bl2(*)                 ! output (ncsp)
blocking.f:      ijblock=0             !    blocks counter
blocking.f:            ijblock=ijblock+1
blocking.f:            ijpar=0
blocking.f:                  ijcs=iics+jcs
blocking.f:                  if(ijpar.ge.limpair) then
blocking.f:                     ijblock=ijblock+1
blocking.f:                     ijpar=0
blocking.f:                  ijpar=ijpar+1
blocking.f:                  npar(ijblock)=ijpar
blocking.f:                  ijbl(ijblock,ijpar)=ijcs
blocking.f:                  map_ij_bl2(ijcs)=ijblock
blocking.f:      last_big2=ijblock
blocking.f:      call setival('last_big2',ijblock)
blocking.f:      call setival('last_mid2',ijblock)
blocking.f:c     write(6,*)' nbl2=',nbl2,' ijblock=',ijblock
blocking.f:c     ijpar_sum=0
blocking.f:c     ijpar=npar(ibl)
blocking.f:c     write(ioutput,502) ibl,ijpar
blocking.f:c     ijpar_sum=ijpar_sum+ijpar
blocking.f:c     write(6,*)'total number of pairs=',ijpar_sum
blocking.f:      subroutine blksizer(bl,nsupb ,nbl2,ijbl,npar,iis,jjs,inx,
blocking.f:      dimension npar(*),ijbl(nbl2,*)
blocking.f:      ijpar=npar(ibl)
blocking.f:      ijcs1=ijbl(ibl,1)
blocking.f:      ics1=iis(ijcs1)
blocking.f:      jcs1=jjs(ijcs1)
blocking.f:         call check_exp(ibl,inx,ijbl,nbl2,ijpar,iis,jjs,bl(ibas),
blocking.f:      nfij=lenn(itype1)*lenn(jtype1)
blocking.f:      ngcij=(ngci+1)*(ngcj+1)
blocking.f:      klcs1=ijbl(kbl,1)
blocking.f:            call check_exp(kbl,inx,ijbl,nbl2,klpar,iis,jjs,bl(ibas),
blocking.f:      nfijkl=nfij*nfkl
blocking.f:         call blksize1(ibl,kbl,ijpar,klpar,itype1,jtype1,ktype1,ltype1,
blocking.f:     *                 memor2,memor2ij,memor2kl,memor4,ifor)
blocking.f:         call blksize2(ibl,kbl,ijpar,klpar,itype1,jtype1,ktype1,ltype1,
blocking.f:     *                 memor2,memor2ij,memor2kl,memor4,ifor)
blocking.f:c           memor2,memor2ij,memor2kl,memor4
blocking.f:      call get_max_am(itype1,jtype1,ktype1,ltype1,mmax,nsij,nskl,nqmax)
blocking.f:      call get_limit(mmax,icache,nfijkl,ifor,ibl,kbl,
blocking.f:         call num_stab(mmax,nsij,nskl,nqmax,
blocking.f:      nquart=ijpar*klpar
blocking.f:      if(ibl.eq.kbl) nquart=ijpar*(ijpar+1)/2
blocking.f:      call count_small(intsize,ibl,kbl,maxsize,nquart,ijpar,klpar,
blocking.f:     *                 memor2,memor2ij,memor2kl,memor4,
blocking.f:c           limxmem=mem_con+npij*memor2ij+npkl*memor2kl+nq*memor4
blocking.f:c           assuming npij=npij, npkl=1, nq=npij
blocking.f:            xmaxsize=xmaxsize/dble(memor2ij+memor4)
blocking.f:      indxsiz1=maxqrt*ngcij*ngckl
blocking.f:      ibufsize=indxsiz1*nfijkl
blocking.f:      subroutine count_small(intsize,ibl,kbl,maxsize,nquart,ijpar,klpar,
blocking.f:     *                       memor2,memor2ij,memor2kl,memor4,
blocking.f:c     write(6,*)' maxsize=',maxsize,' pairs=',ijpar,klpar,
blocking.f:          memory=ijpar*memor2ij+klpar*memor2kl+ nquart*memor4
blocking.f:          ijsize=ijpar
blocking.f:          ijsize=ijpar
blocking.f:          ijdev=1
blocking.f:          ijrem=0
blocking.f:          if( ijpar.gt.maxsize.and.klpar.gt.maxsize) then
blocking.f:             ijsize=maxsize
blocking.f:             ijdev=ijpar/ijsize
blocking.f:             ijrem=mod(ijpar,ijsize)
blocking.f:          if( ijpar.gt.maxsize.and.klpar.le.maxsize) then
blocking.f:             ijsize=maxsize
blocking.f:             ijdev=ijpar/ijsize
blocking.f:             ijrem=mod(ijpar,ijsize)
blocking.f:          if( ijpar.le.maxsize.and.klpar.gt.maxsize) then
blocking.f:             klsize=maxsize/ijpar
blocking.f:          if( ijpar.le.maxsize.and.klpar.le.maxsize) then
blocking.f:CKWOL        if(ijpar.lt.klpar) then
blocking.f:CKWOL          ijsize=maxsize/klpar
blocking.f:CKWOL          ijdev=ijpar/ijsize
blocking.f:CKWOL          ijrem=mod(ijpar,ijsize)
blocking.f:               klsize=maxsize/ijpar
blocking.f:            ijsize=1
blocking.f:            ijdev=ijpar
blocking.f:            ijrem=0
blocking.f:          ikbl=ikbl+ijdev*kldev             ! blocks of ijsize x klsize
blocking.f:          if(ijrem.gt.0) ikbl=ikbl+kldev    ! blocks ijrem x klsize
blocking.f:          if(klrem.gt.0) ikbl=ikbl+ijdev    ! blocks ijsize x klrem
blocking.f:          if(ijrem.gt.0 .and. klrem.gt.0) ikbl=ikbl+1
blocking.f:          nprij1=ijsize
blocking.f:          nprij2=ijrem
blocking.f:          nprij3=ijsize
blocking.f:          nprij4=ijrem
blocking.f:          nqrt1=ijsize*klsize
blocking.f:          nqrt2=ijrem*klsize
blocking.f:          nqrt3=ijsize*klrem
blocking.f:          nqrt4=ijrem*klrem
blocking.f:          memreq1=nprij1*memor2ij+nprkl1*memor2kl+nqrt1*memor4
blocking.f:          memreq2=nprij2*memor2ij+nprkl2*memor2kl+nqrt2*memor4
blocking.f:          memreq3=nprij3*memor2ij+nprkl3*memor2kl+nqrt3*memor4
blocking.f:          memreq4=nprij4*memor2ij+nprkl4*memor2kl+nqrt4*memor4
blocking.f:              memory=ijpar*memor2ij+klpar*memor2kl+ nquart*memor4
blocking.f:              ijsize=ijpar
blocking.f:              ijsize=sqrt( dble(maxsize) )
blocking.f:              ndev=ijpar/ijsize
blocking.f:              nrem=mod(ijpar,ijsize)
blocking.f:                 nqrtd=ijsize*(ijsize+1)/2
blocking.f:                 memory=((3*ijsize+1)*memor2ij)/2 +nqrtd*memor4
blocking.f:                 nqrtn=ijsize*ijsize
blocking.f:                 memory=2*ijsize*memor2ij +nqrtn*memor4
blocking.f:                 nqrtr=nrem*ijsize
blocking.f:                 memory=(nrem+ijsize)*memor2ij+nqrtr*memor4
blocking.f:                 nn=(n-1)*ijsize
blocking.f:                     memory=(nrem+n*ijsize)*memor2ij+nqrtrem*memor4
blocking.f:                 memory=((3*nrem+1)*memor2ij)/2+ nqrtl*memor4
blocking.f:c In addition to it there is memory allocation in prec2ij & prec2kl
blocking.f:      subroutine blksize1(ibl,kbl,ijpar,klpar,ityp,jtyp,ktyp,ltyp,
blocking.f:     *                    memory2,memor2ij,memor2kl,memory4,ifor)
blocking.f:c   1) prec2ij and prec2kl (called for each super-block)
blocking.f:c   2) memory needed for ONE pair ij  - memor2ij
blocking.f:      common /contr/ ngci,ngcj,ngck,ngcl,lci,lcj,lck,lcl,lcij,lckl
blocking.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,MMAX,
blocking.f:     * NQIJ,NQIJ1,NSIJ1,NQKL,NQKL1,NSKL1,ijbeg,klbeg
blocking.f:        nsij=nsij+1
blocking.f:        nsij=nsij+2
blocking.f:       lcij=lci*lcj
blocking.f:      ngcij=(ngci+1)*(ngcj+1)
blocking.f:      ngcd =ngcij*ngckl
blocking.f:c Memory reserved for the WHOLE super-block in prec2ij,prec2kl :
blocking.f:      mem2ij=3*ijpar*lcij
blocking.f:         memory2=mem2ij+mem2kl
blocking.f:         memory2=mem2ij
blocking.f:c Memory for ONE pair ij, ONE pair kl and ONE quartet IJKL in a S-block
blocking.f:      ijpar1=1
blocking.f:      if(nsij.ge.nskl) then
blocking.f:         nfha=nfumax*ijpar1*lcij
blocking.f:      call in5a(ijpar1,mmax1, memprij)
blocking.f:        if(nsij.ge.nskl) then
blocking.f:           memprij=memprij + nfha*3
blocking.f:      memor2ij=memprij
blocking.f:         memor2ij=memor2ij+3
blocking.f:      if(ngcd.gt.1) memasse=memasse+(ngcij+ngckl+ngcd*lnij*lnkl)
blocking.f:c     memor2ij=  mem. for one ij-pair
blocking.f:c   memory=memory2 + nparij*memor2ij + nparkl*memor2kl+ nqrt*memor4
blocking.f:      subroutine blksize2(ibl,kbl,ijpar,klpar,ityp,jtyp,ktyp,ltyp,
blocking.f:     *                    memory2,memor2ij,memor2kl,memory4,ifor)
blocking.f:c   1) prec2ij and prec2kl (called for each super-block)
blocking.f:c   2) memory needed for ONE pair ij  - memor2ij
blocking.f:      common /contr/ ngci,ngcj,ngck,ngcl,lci,lcj,lck,lcl,lcij,lckl
blocking.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,MMAX,
blocking.f:     * NQIJ,NQIJ1,NSIJ1,NQKL,NQKL1,NSKL1,ijbeg,klbeg
blocking.f:      lcij=lci*lcj
blocking.f:        nsij=nsij+1
blocking.f:        nsij=nsij+2
blocking.f:      ngcij=(ngci+1)*(ngcj+1)
blocking.f:      ngcd =ngcij*ngckl
blocking.f:c Memory reserved for the WHOLE super-block in prec2ij,prec2kl :
blocking.f:      mem2ij=(ijpar+2)*lcij
blocking.f:         memory2=mem2ij+mem2kl
blocking.f:         memory2=mem2ij
blocking.f:c Memory for the ONE pair ij,kl and ONE quartet in a Super-block is :
blocking.f:      memprij=3+13*lcij
blocking.f:         memprij=memprij+lci+lcj
blocking.f:      memcoij=lci+lcj+lcij + mmax1*lcij
blocking.f:        memcoij=memcoij+ngcij*lcij
blocking.f:      memcons=memcoij+memcokl
blocking.f:      memor2ij=memprij
blocking.f:         memor2ij=memor2ij+3
blocking.f:      nfha=nfumax*max(lcij,lckl)
blocking.f:      if(ngcd.gt.1) memasse=memasse+(ngcij+ngckl+ngcd*lnij*lnkl)
blocking.f:c     memor2ij=  mem. for one ij-pair
blocking.f:c   memory=memory2 + nparij*memor2ij + nparkl*memor2kl+ nqrt*memor4
blocking.f:      common /contr/ ngci,ngcj,ngck,ngcl,lci,lcj,lck,lcl,lcij,lckl
blocking.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,MMAX,
blocking.f:     * NQIJ,NQIJ1,NSIJ1,NQKL,NQKL1,NSKL1,ijbeg,klbeg
blocking.f:      mem0=lnij*lnkl
blocking.f:      ngcijkl=(ngci+1)*(ngcj+1)*(ngck+1)*(ngcl+1)
blocking.f:      nblsg=nbls*ngcijkl
blocking.f:        memasse=nblsg*(lnijkl + mem0)
blocking.f:        memasse=nblsg*(7*lnijkl + mem0+6*nfu(nsij)*nfu(nskl)  )
blocking.f:change  memasse=nblsg*(9*lnijkl +4*mem0+10*nfu(nsij)*nfu(nskl)  )
blocking.f:        memasse=nblsg*max(9*lnijkl,4*mem0)
blocking.f:        memasse=memasse + 10*nfu(nsij)*nfu(nskl)
blocking.f:ccc     memasse=nblsg*max(45*lnijkl,10*mem0)  ! only second returned
blocking.f:        memasse=nblsg*max(54*lnijkl,10*mem0)  ! first & second returned
blocking.f:        memasse=memasse + 55*nfu(nsij)*nfu(nskl)
blocking.f:           mbfkl12=lnij*nfu(nqkl+1)*nbls
blocking.f:           mbfij12=nfu(nqij+1)*lnkl*nbls
blocking.f:           mbfkl12=lnij*nfu(nqkl1+1)*nbls + 6*nfu(nsij)*nfu(nqkl+1)*nbls
blocking.f:           mbfij12=nfu(nqij1+1)*lnkl*nbls + 6*nfu(nqij+1)*nfu(nskl)*nbls
blocking.f:           mbfkl12= 4*lnij*nfu(nqkl1+1)*nbls
blocking.f:     *            +10*nfu(nsij)*nfu(nqkl+1)*nbls
blocking.f:           mbfij12= 4*nfu(nqij1+1)*lnkl*nbls
blocking.f:     *            +10*nfu(nqij+1)*nfu(nskl)*nbls
blocking.f:            memasse=memasse+2*(mbfij12+mbfkl12)
blocking.f:            memasse=memasse+(mbfij12+mbfkl12)
blocking.f:          mbf2l =nfu(nqij+1)*nfu(nqkl+1)*nbls
blocking.f:          mbfkl3=lnij*nbls
blocking.f:          mbfij3=lnkl*nbls
blocking.f:            mbf2l=nfu(nqij1+1)*nfu(nqkl1+1)*nbls
blocking.f:     *         +6*nfu(nqij +1)*nfu(nqkl +1)*nbls
blocking.f:            mbfkl3=lnij*4*nbls + 6*nfu(nsij)*nbls
blocking.f:            mbfij3=4*lnkl*nbls + 6*nfu(nskl)*nbls
blocking.f:            mbf2l=4*nfu(nqij1+1)*nfu(nqkl1+1)*nbls
blocking.f:     *         +10*nfu(nqij +1)*nfu(nqkl +1)*nbls
blocking.f:            mbfkl3=4*lnij*4*nbls +10*nfu(nsij)*nbls
blocking.f:            mbfij3=4*4*lnkl*nbls +10*nfu(nskl)*nbls
blocking.f:            memasse=memasse+(mbfij3+mbfkl3)
blocking.f:            mbf3l0=max( nfu(nqij +1),nfu(nqkl +1) )
blocking.f:            mbf3l1=max( nfu(nqij1+1),nfu(nqkl1+1) )
blocking.f:            mbf3l0=max( nfu(nqij +1),nfu(nqkl +1) )
blocking.f:            mbf3l1=max( nfu(nqij1+1),nfu(nqkl1+1) )
blocking.f:            mbf3l0=max( nfu(nqij +1),nfu(nqkl +1) )
blocking.f:      if(nsij.ge.nskl) then
blocking.f:        do 10 ijstep=mmax,nsij,-1
blocking.f:        ijdim=lensm(ijstep)
blocking.f:        ijkld=ijdim*kldim
blocking.f:        mem2=mem2+ijkld
blocking.f:        ijstep=0
blocking.f:        ijstep=ijstep+1
blocking.f:        ijdim=lensm(ijstep)
blocking.f:        ijkld=ijdim*kldim
blocking.f:        mem2=mem2+ijkld
blocking.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,MMAX,
blocking.f:     * NQIJ,NQIJ1,NSIJ1,NQKL,NQKL1,NSKL1,ijbeg,klbeg
blocking.f:            mwvus=max(lnij,lnkl)*max(nfu(nqj+1),nfu(nql+1))
blocking.f:            mxij=nfu(nqi+1)*nfu(nqij+1)*lnkl
blocking.f:            mwij=mwvus
blocking.f:            mwij=mwij*nbls
blocking.f:            mxij=mxij*nbls
blocking.f:            mwij=6*mwij
blocking.f:            mxij=6*mxij
blocking.f:            mwij=10*mwij
blocking.f:            mxij=10*mxij
blocking.f:            memamsh=mwij+mxij
blocking.f:            mbf2l=nfu(nqij+1)*nfu(nqkl+1) *nbls
blocking.f:      subroutine in5a(npij,mmax1, memory)
blocking.f:      common /contr/ ngci,ngcj,ngck,ngcl,lci,lcj,lck,lcl,lcij,lckl
blocking.f:      ijpar=npij
blocking.f:       ndi=   ijpar*lci
blocking.f:       ndj=   ijpar*lcj
blocking.f:      memory=2*(ndi+ndj) + 3*ijpar
blocking.f:       ndij =ndi*lcj
blocking.f:       ndij3=ndij*3
blocking.f:      memory=memory+3*ndij3
blocking.f:      memory=memory+2*ndij
blocking.f:      memory=memory+ndij3
blocking.f:      ndijm=ndij*mmax1
blocking.f:      memory=memory+ndijm
blocking.f:      common /contr/ ngci,ngcj,ngck,ngcl,lci,lcj,lck,lcl,lcij,lckl
blocking.f:      common /contr/ ngci,ngcj,ngck,ngcl,lci,lcj,lck,lcl,lcij,lckl
blocking.f:c reserve memory for quartets ijkl
blocking.f:      subroutine parsym(ncs,inx,iis,jjs,ijshp,nsym)
blocking.f:      dimension iis(*),jjs(*),ijshp(nsym,*)
blocking.f:      do 100 ijcs=1,ncsp
blocking.f:         ics=iis(ijcs)
blocking.f:         jcs=jjs(ijcs)
blocking.f:c find images of ijcs for each symm. oper.
blocking.f:             ijshp(ns,ijcs)=icsi*(icsi-1)/2 + jcsi
blocking.f:c            write(8,80) ijcs,ics,jcs, ns,ijshp(ns,ijcs),ics0,jcs0
blocking.f:c       do 250 ijcs=1,ncsp
blocking.f:c       write(8,90) ijcs,(ijshp(ns,ijcs),ns=1,nsym)
blocking.f:      subroutine price(inx,iis,jjs,ijbl,npar,nsupb,nbl2,nprint,
blocking.f:      dimension inx(12,*),iis(*),jjs(*),ijbl(nbl2,*),npar(*)
blocking.f:      ijcs1=ijbl(ibl,1)
blocking.f:      ics1=iis(ijcs1)
blocking.f:      jcs1=jjs(ijcs1)
blocking.f:c     ijnt=int*jnt
blocking.f:      icont=inx(5,iis(ijcs1))-inx(1,iis(ijcs1))
blocking.f:      jcont=inx(5,jjs(ijcs1))-inx(1,jjs(ijcs1))
blocking.f:      ijcont=icont*jcont
blocking.f:      nparij=npar(ibl)
blocking.f:      nfij  =lenn(itype1)*lenn(jtype1)
blocking.f:      ngcij =ngci1*ngcj1
blocking.f:         klcs1=ijbl(kbl,1)
blocking.f:         nquart=nparij*nparkl
blocking.f:         if(kbl.eq.ibl) nquart=nparij*(nparij+1)/2
blocking.f:         nfijkl=nfij*lenn(ktype1)*lenn(ltype1)
blocking.f:         nfun=nquart*nfijkl
blocking.f:         ijklc=ijcont*kcont*lcont
blocking.f:         ngcd=ngcij*ngck1*ngcl1
blocking.f:         nsij=nqi+nqj-1
blocking.f:         lnij=lensm(nsij)
blocking.f:         nqij=nqi
blocking.f:         if(nqj.gt.nqi) nqij=nqj
blocking.f:         mmax=nsij+nskl-1
blocking.f:           nqxx=nqij
blocking.f:           if(nskl.gt.nsij) then
blocking.f:             nsxx=nsij
blocking.f:           nassem=(lnkl-nfu(nqkl))*(lnij-nfu(nqij))
blocking.f:         nprice=nprice*ijklc
blocking.f:         if(nqij.eq.nsij .and. nqkl.eq.nskl) then
blocking.f:            do 853 i=nsij+1-j,nq2,-1
blocking.f:        nprice=nprice/nfijkl
blocking.f:     *                icont,jcont,kcont,lcont,nfijkl,nquart,nfun,
blocking.f:      common /memor1/ iisd,jjsd,ijbld
blocking.f:      common /memor2/ nqrtd, nibld,nkbld, nijbd,nijed, nklbd,nkled
blocking.f:      common /memors/ nsym,ijshp,isymm
blocking.f:c  set up vectors : nqrt,nibl,nkbl, nijb,nije, nklb,nkle
blocking.f:      call blockqur(isbl,ibl,kbl,nbloks,maxqrt,nbl2,bl(ijbld),bl(npard),
blocking.f:     *bl(nqrtd),bl(nibld),bl(nkbld),bl(nijbd),bl(nijed),
blocking.f:      subroutine blockqur(isbl,ibl,kbl,nbloks,maxqrt,nbl2,ijbl,npar,
blocking.f:     * nqrt,nibl,nkbl, nijb,nije,nklb,nkle,iis,jjs,inx,mxsize)
blocking.f:      dimension npar(*),ijbl(nbl2,*)
blocking.f:      dimension nibl(*),nkbl(*),nijb(*),nije(*),nklb(*),nkle(*)
blocking.f:c ijbl(ibl,ijp)-> ijcs pair of contr.shells
blocking.f:         call nondiax(nbls,nqrt,ikbl,ibl,kbl,ijbl,nbl2,npar,
blocking.f:     *                nibl,nkbl, nijb,nije,nklb,nkle)
blocking.f:         call diagonx(nbls,nqrt,ikbl,ibl,kbl,ijbl,nbl2,npar,
blocking.f:     *                nibl,nkbl, nijb,nije,nklb,nkle)
blocking.f:c          nijb(iix)=0
blocking.f:c          nije(iix)=0
blocking.f:      subroutine nondiax(nbls,nqrt,ikbl,ibl,kbl,ijbl,nbl2,npar,
blocking.f:     *nibl,nkbl, nijb,nije,nklb,nkle)
blocking.f:      dimension npar(*),ijbl(nbl2,*)
blocking.f:      dimension nijb(*),nije(*),nklb(*),nkle(*)
blocking.f:      ijpar=npar(ibl)
blocking.f:      nquart=ijpar*klpar
blocking.f:          ijsize=ijpar
blocking.f:          ijdev=1
blocking.f:          ijrem=0
blocking.f:          if( ijpar.gt.maxsize.and.klpar.gt.maxsize) then
blocking.f:             ijsize=maxsize
blocking.f:             ijdev=ijpar/ijsize
blocking.f:             ijrem=mod(ijpar,ijsize)
blocking.f:          if( ijpar.gt.maxsize.and.klpar.le.maxsize) then
blocking.f:             ijsize=maxsize
blocking.f:             ijdev=ijpar/ijsize
blocking.f:             ijrem=mod(ijpar,ijsize)
blocking.f:          if( ijpar.le.maxsize.and.klpar.gt.maxsize) then
blocking.f:             klsize=maxsize/ijpar
blocking.f:          if( ijpar.le.maxsize.and.klpar.le.maxsize) then
blocking.f:c            if(ijpar.lt.klpar) then
blocking.f:c              ijsize=maxsize/klpar
blocking.f:c              ijdev=ijpar/ijsize
blocking.f:c              ijrem=mod(ijpar,ijsize)
blocking.f:c              klsize=maxsize/ijpar
blocking.f:               klsize=maxsize/ijpar
blocking.f:            ijsize=1
blocking.f:            ijdev=ijpar
blocking.f:            ijrem=0
blocking.f:          nqrt1=ijsize*klsize
blocking.f:          nqrt2=ijrem*klsize
blocking.f:          nqrt3=ijsize*klrem
blocking.f:          nqrt4=ijrem*klrem
blocking.f:          ijds=ijdev*ijsize
blocking.f:          do 100 ij=1,ijdev
blocking.f:          ij1=(ij-1)*ijsize
blocking.f:             nijb(ikbl)=ij1+1
blocking.f:             nije(ikbl)=ij1+ijsize
blocking.f:                nijb(ikbl)=ij1+1
blocking.f:                nije(ikbl)=ij1+ijsize
blocking.f:           if(ijrem.gt.0) then
blocking.f:             nijb(ikbl)=ijds+1
blocking.f:             nije(ikbl)=ijpar
blocking.f:ckw          do 300 ij=1,ijdev
blocking.f:ckw          ij1=(ij-1)*ijsize
blocking.f:ckw          nijb(ikbl)=ij1+1
blocking.f:ckw          nije(ikbl)=ij1+ijsize
blocking.f:             nijb(ikbl)=ijds+1
blocking.f:             nije(ikbl)=ijpar
blocking.f:      subroutine diagonx(nbls,nqrt,ikbl,ibl,kbl,ijbl,nbl2,npar,
blocking.f:     *nibl,nkbl, nijb,nije,nklb,nkle)
blocking.f:      dimension npar(*),ijbl(nbl2,*)
blocking.f:      dimension nijb(*),nije(*),nklb(*),nkle(*)
blocking.f:      ijpar=npar(ibl)
blocking.f:      nquart=ijpar*(ijpar+1)/2
blocking.f:         nijb(ikbl)=1
blocking.f:         nije(ikbl)=ijpar
blocking.f:c        ijkl=0
blocking.f:c        do 100 ijp=1,ijpar
blocking.f:c        ijcs=ijbl(ibl,ijp)
blocking.f:c        do 100 klp=1,ijp
blocking.f:c        klcs=ijbl(kbl,klp)
blocking.f:c        ijkl=ijkl+1
blocking.f:         ijsize=sqrt( dble(nbls) )
blocking.f:         ndev=ijpar/ijsize
blocking.f:         nrem=mod(ijpar,ijsize)
blocking.f:c  ijpar=ndev*ijsize+nrem
blocking.f:         nqrtd=ijsize*(ijsize+1)/2
blocking.f:         nqrtn=ijsize*ijsize
blocking.f:         nn=(n-1)*ijsize
blocking.f:         nijb(ikbl)=nn+1
blocking.f:         nije(ikbl)=nn+ijsize
blocking.f:c            ijkl=0
blocking.f:c            do 250 ijp=nn+1,nn+ijsize
blocking.f:c            ijcs=ijbl(ibl,ijp)
blocking.f:c            do 250 klp=nn+1,ijp
blocking.f:c            klcs=ijbl(kbl,klp)
blocking.f:c            ijkl=ijkl+1
blocking.f:         nn1=(n1-1)*ijsize
blocking.f:         nn2=(n2-1)*ijsize
blocking.f:         nijb(ikbl)=nn1+1
blocking.f:         nije(ikbl)=nn1+ijsize
blocking.f:         nkle(ikbl)=nn2+ijsize
blocking.f:c            ijkl=0
blocking.f:c            do 350 ijp=nn1+1,nn1+ijsize
blocking.f:c            ijcs=ijbl(ibl,ijp)
blocking.f:c            do 350 klp=nn2+1,nn2+ijsize
blocking.f:c            klcs=ijbl(kbl,klp)
blocking.f:c            ijkl=ijkl+1
blocking.f:c  non-diagonal rectangle blocks ( ndev blocks nrem*ijsize )
blocking.f:             nqrtr=nrem*ijsize
blocking.f:             nijb(ikbl)=ndev*ijsize+1
blocking.f:             nije(ikbl)=ndev*ijsize+nrem
blocking.f:             nkle(ikbl)=ijsize
blocking.f:c               ijkl=0
blocking.f:c               do 451 ijp=ndev*ijsize+1,ndev*ijsize+nrem
blocking.f:c               ijcs=ijbl(ibl,ijp)
blocking.f:c               do 451 klp=1,ijsize
blocking.f:c               klcs=ijbl(kbl,klp)
blocking.f:c               ijkl=ijkl+1
blocking.f:             nn=(n-1)*ijsize
blocking.f:c            ijkl=nqrt(ikbl)
blocking.f:             nkle(ikbl)=nn+ijsize
blocking.f:c            ijkl=0
blocking.f:             nijb(ikbl)=ndev*ijsize+1
blocking.f:             nije(ikbl)=ndev*ijsize+nrem
blocking.f:             nkle(ikbl)=nn+ijsize
blocking.f:c               do 450 ijp=ndev*ijsize+1,ndev*ijsize+nrem
blocking.f:c               ijcs=ijbl(ibl,ijp)
blocking.f:c               do 450 klp=nn+1,nn+ijsize
blocking.f:c               klcs=ijbl(kbl,klp)
blocking.f:c               ijkl=ijkl+1
blocking.f:c            nqrt(ikbl)=ijkl
blocking.f:              nijb(ikbl)=ndev*ijsize+1
blocking.f:              nije(ikbl)=ndev*ijsize+nrem
blocking.f:              nklb(ikbl)=ndev*ijsize+1
blocking.f:              ijkl=0
blocking.f:c               do 500 ijp=ndev*ijsize+1,ndev*ijsize+nrem
blocking.f:c               ijcs=ijbl(ibl,ijp)
blocking.f:c               do 500 klp=ndev*ijsize+1,ijp
blocking.f:c               klcs=ijbl(kbl,klp)
blocking.f:c               ijkl=ijkl+1
blocking.f:      subroutine block1(ikbl,nibl,nkbl,nijb,nije,nklb,nkle,ijbl,nbl2,
blocking.f:      dimension nibl(*),nkbl(*),nijb(*),nije(*),nklb(*),nkle(*)
blocking.f:      dimension ijbl(nbl2,*)
blocking.f:      ijbeg=nijb(ikbl)
blocking.f:      ijend=nije(ikbl)
blocking.f:      ijkl=0
blocking.f:         do ijp=ijbeg,ijend
blocking.f:            ijcs=ijbl(ibl,ijp)
blocking.f:               klcs=ijbl(kbl,klp)
blocking.f:               ijkl=ijkl+1
blocking.f:               nblok1(1,ijkl)=ijcs
blocking.f:               nblok1(2,ijkl)=klcs
blocking.f:         do ijp=ijbeg,ijend
blocking.f:            ijcs=ijbl(ibl,ijp)
blocking.f:            do klp=klbeg,ijp
blocking.f:               klcs=ijbl(kbl,klp)
blocking.f:               ijkl=ijkl+1
blocking.f:               nblok1(1,ijkl)=ijcs
blocking.f:               nblok1(2,ijkl)=klcs
blocking.f:      nqrt(ikbl)=ijkl
blocking.f:      subroutine onesym(ibl,kbl,ijbl,nbl2,ijbeg,ijend,klbeg,klend,
blocking.f:     *                  ijshp,nsym,isymm,nblsym )
blocking.f:      dimension ijbl(nbl2,*),ijshp(nsym,*),isymm(*)
blocking.f:      dimension imij(8),imkl(8)
blocking.f:      ijkls=0
blocking.f:      ijkl =0
blocking.f:      do 900 ijp=ijbeg,ijend
blocking.f:         ijcs=ijbl(ibl,ijp)
blocking.f:         if(klend.eq.0) klendx=ijp
blocking.f:            klcs=ijbl(kbl,klp)
blocking.f:            ijkl=ijkl+1
blocking.f:         if(isymm(ijkl).eq.0) go to 900
blocking.f:         ij0=max0(ijcs,klcs)
blocking.f:         kl0=min0(ijcs,klcs)
blocking.f:c find the latest among images of ijcs,klcs for each symm.oper. :
blocking.f:         ijcs1=ijshp(1,ijcs)
blocking.f:         klcs1=ijshp(1,klcs)
blocking.f:         ij1=max0(ijcs1,klcs1)
blocking.f:         kl1=min0(ijcs1,klcs1)
blocking.f:         imij(1)=ij1
blocking.f:            ijcsi=ijshp(ns,ijcs)
blocking.f:            klcsi=ijshp(ns,klcs)
blocking.f:            iji=max0(ijcsi,klcsi)
blocking.f:            kli=min0(ijcsi,klcsi)
blocking.f:            imij(ns)=iji
blocking.f:            if(iji.gt.ij1) then
blocking.f:               ij1=iji
blocking.f:            if(iji.eq.ij1 .and. kli.gt.kl1) then
blocking.f:               ij1=iji
blocking.f:         if( ij1.lt.ij0 ) then
blocking.f:            ijkls=ijkls+1
blocking.f:cold        isymm(ijkl)=1
blocking.f:            isymm(ijkl)=-1
blocking.f:         if( ij1.eq.ij0 .and. kl1.le.kl0) then
blocking.f:            ijkls=ijkls+1
blocking.f:cold        isymm(ijkl)=1
blocking.f:            isymm(ijkl)=-1
blocking.f:         if(isymm(ijkl).eq.-1) then
blocking.f:            call distinct(nsym,imij,imkl,ij0,kl0,ndist)
blocking.f:            isymm(ijkl)=ndist
blocking.f:            isymm(ijkl)=0
blocking.f:      nblsym=ijkls
blocking.f:      subroutine distinct(nsym,imij,imkl,ij0,kl0,ndist)
blocking.f:      dimension imij(*),imkl(*)
blocking.f:      dimension ijkl(9)
blocking.f:      ij1=imij(1)
blocking.f:        if(ij1.ne.ij0 .or. kl1.ne.kl0) ndist=2
blocking.f:      ijkl(1)=ij0*(ij0-1)/2+kl0
blocking.f:        ij=imij(ns-1)
blocking.f:        ijkl(ns)=ij*(ij-1)/2+kl
blocking.f:      call findif(ijkl,nsym+1,ndist)
blocking.f:      subroutine findif(ijkl,ndim,ndist)
blocking.f:      dimension ijkl(ndim)
blocking.f:      i0=ijkl(i)
blocking.f:      i1=ijkl(i+1)
blocking.f:        ijkl(i)=i1
blocking.f:        ijkl(i+1)=i0
blocking.f:      i0=ijkl(i)
blocking.f:      i1=ijkl(i+1)
blocking.f:      subroutine print_pairs(ibl,kbl,ijbl,nbl2,nparij,nparkl)
blocking.f:      dimension ijbl(nbl2,*)
blocking.f:      do ijpar=1,nparij
blocking.f:      ijcs=ijbl(ibl,ijpar)
blocking.f:      write(8,*)' ij-pairs :',ijcs
blocking.f:      klcs=ijbl(kbl,klpar)
blocking.f:      common /memor1/ iisd,jjsd,ijbld
blocking.f:      common /memor1c/ map_ij_bl2
blocking.f:      common /memors/ nsym,ijshp,isymm
blocking.f:c allocate memory for iis(ijcs)--> ics  & jjs(ijcs)-->jcs arrays
blocking.f:c allocate memory for map_ij_bl2(ijcs)-->ijbl2
blocking.f:      call getint(ncsp,map_ij_bl2)
blocking.f:c Store these addresses in the  common /memor1/ iisd,jjsd,ijbld
blocking.f:c                               common /memor1c/ map_ij_bl2
blocking.f:c npar, ijbl and nsupb
blocking.f:     *                nbl2,nsupb,npard,ijbld, mxsize,map_ij_bl2,
blocking.f:c  output : arrays' addresses : nsupb, npar, ijbl and  mxsize )
blocking.f:         call getint(nsym*ncsp, ijshp)
blocking.f:         call parsym(ncs,bl(ifp1),bl(iisd),bl(jjsd),bl(ijshp),nsym)
blocking.f:      call price(inx,bl(iisd),bl(jjsd),bl(ijbld),bl(npard),
blocking.f:c  pairs ijcs are given by ics=iis(ijcs) and jcs=jjs(ijcs)
blocking.f:c  which pairs belong to this block : ijcs=ijbl(ibl,1-npar)
blocking.f:     *                     nbl2,nsupb,npard,ijbld,mxsize,map_ij_bl2,
blocking.f:c and setup iis(ijcs) & jjs(ijcs) arrays :
blocking.f:      call getint(nbl2*maxpar,ijbld)
blocking.f:c output : addresses : npard,ijbld & mxsize
blocking.f:c333  call blk_pairs_mak3(nbl1,bl(nblock1),nbl2,bl(npard),bl(ijbld),
blocking.f:c333 *                    bl(map_ij_bl2) ,ncs,schwarz)
blocking.f:c222  call blk_pairs_mak2(nbl1,bl(nblock1),nbl2,bl(npard),bl(ijbld),
blocking.f:c222 *                    bl(map_ij_bl2) ,ncs,schwarz)
blocking.f:      call blk_pairs_mak1(nbl1,bl(nblock1),nbl2,bl(npard),bl(ijbld),
blocking.f:     *                    bl(map_ij_bl2) ,ncs,schwarz)
blocking.f:      call blk_pairs_reor(ncs,schwarz,nbl2,nbl2,bl(npard),bl(ijbld))
blocking.f:      call blksizer(bl,bl(nsupb),nbl2,bl(ijbld),bl(npard),
blocking.f:cc     call print2cd(ncs,schwarz,nbl2,bl(npard),bl(ijbld),bl(iftc0))
blocking.f:       call ftc_bl4(ncs,nbl2,bl(ijbld),bl(iftc0),iccdd,
blocking.f:c (1) big    schwarz int. :              (ij|ij) >= sqrt(eps)
blocking.f:c (2) midium schwarz int. :  sqrt(eps) > (ij|ij) >= eps*sqrt(eps)
blocking.f:c (3) small  schwarz int. :  eps*sqrt()> (ij|ij) > eps**2
blocking.f:c  all pairs with (ij|ij) < 10**-20 are removed
blocking.f:      ijbl=0                    !    block's counter (with limit)
blocking.f:c First make pair blocks containing pairs with big (ij|ij) > 10**-5
blocking.f:c make pair blocks with big schwraz integ. : (ij|ij) >= eps5
blocking.f:            ijbl=ijbl+1
blocking.f:            ijpar_big=0
blocking.f:                  x_ij_ij=schwarz(ics,jcs)
blocking.f:c................ if(x_ij_ij.GE.eps20) then
blocking.f:                     if(x_ij_ij.GE.eps5) then
blocking.f:                        if(ijpar_big.ge.limpair) then
blocking.f:                           ijbl=ijbl+1
blocking.f:                           ijpar_big=0
blocking.f:                        ijpar_big=ijpar_big+1
blocking.f:                        maxpar=max(maxpar,ijpar_big)
blocking.f:            if(.not.present) ijbl=ijbl-1
blocking.f:      ijbl_big=ijbl
blocking.f:c make pair blocks with midium schwraz integ.: 10-5 > (ij|ij) >= 10-10
blocking.f:            ijbl=ijbl+1
blocking.f:            ijpar_mid=0
blocking.f:                  x_ij_ij=schwarz(ics,jcs)
blocking.f:                  if(x_ij_ij.GE.eps10) then
blocking.f:                     if(x_ij_ij.LT.eps5) then
blocking.f:                        if(ijpar_mid.ge.limpair) then
blocking.f:                           ijbl=ijbl+1
blocking.f:                           ijpar_mid=0
blocking.f:                        ijpar_mid=ijpar_mid+1
blocking.f:                        maxpar=max(maxpar,ijpar_mid)
blocking.f:            if(.not.present) ijbl=ijbl-1
blocking.f:      ijbl_mid=ijbl-ijbl_big
blocking.f:c make pair blocks with small schwraz integ. : eps10> (ij|ij) >= eps20
blocking.f:            ijbl=ijbl+1
blocking.f:            ijpar_sml=0
blocking.f:                  x_ij_ij=schwarz(ics,jcs)
blocking.f:ccccc?????        if(x_ij_ij.GE.eps20) then
blocking.f:                  if(x_ij_ij.GE.eps15) then
blocking.f:                     if(x_ij_ij.LT.eps10) then
blocking.f:                        if(ijpar_sml.ge.limpair) then
blocking.f:                           ijbl=ijbl+1
blocking.f:                           ijpar_sml=0
blocking.f:                        ijpar_sml=ijpar_sml+1
blocking.f:                        maxpar=max(maxpar,ijpar_sml)
blocking.f:            if(.not.present) ijbl=ijbl-1
blocking.f:      nbl2=ijbl   ! number of pair-blocks with the limit limpair
blocking.f:      ijbl_sml=ijbl-ijbl_big-ijbl_mid
blocking.f:      write(ioutput,495) nbl2,ijbl_big,ijbl_mid,ijbl_sml,
blocking.f:      subroutine blk_pairs_mak3(nbl1,nblock1,nbl2,npar,ijbl,map_ij_bl2,
blocking.f:      dimension ijbl(nbl2,*)                  ! output
blocking.f:      dimension map_ij_bl2(*)                 ! output (ncsp)
blocking.f:      ijblock=0             !    blocks counter
blocking.f:c make pair blocks with big schwraz integ. : (ij|ij) >= eps5
blocking.f:            ijblock=ijblock+1
blocking.f:            ijpar_big=0
blocking.f:                  ijcs=iics+jcs
blocking.f:                  x_ij_ij=schwarz(ics,jcs)
blocking.f:c................ if(x_ij_ij.GE.eps20) then
blocking.f:cok                  if(x_ij_ij.GE.eps) then
blocking.f:                     if(x_ij_ij.GE.eps5) then
blocking.f:                        if(ijpar_big.ge.limpair) then
blocking.f:                           ijblock=ijblock+1
blocking.f:                           ijpar_big=0
blocking.f:                        ijpar_big=ijpar_big+1
blocking.f:                        npar(ijblock)=ijpar_big
blocking.f:                        ijbl(ijblock,ijpar_big)=ijcs
blocking.f:                        map_ij_bl2(ijcs)=ijblock
blocking.f:            if(.not.present) ijblock=ijblock-1
blocking.f:      last_big2=ijblock
blocking.f:      call setival('last_big2',ijblock)
blocking.f:c make pair blocks with midium schwraz integ.: 10-5> (ij|ij) >=10-10
blocking.f:            ijblock=ijblock+1
blocking.f:            ijpar_mid=0
blocking.f:                  ijcs=iics+jcs
blocking.f:                  x_ij_ij=schwarz(ics,jcs)
blocking.f:                  if(x_ij_ij.GE.eps10) then
blocking.f:                     if(x_ij_ij.LT.eps5) then
blocking.f:                        if(ijpar_mid.ge.limpair) then
blocking.f:                           ijblock=ijblock+1
blocking.f:                           ijpar_mid=0
blocking.f:                        ijpar_mid=ijpar_mid+1
blocking.f:                        npar(ijblock)=ijpar_mid
blocking.f:                        ijbl(ijblock,ijpar_mid)=ijcs
blocking.f:                        map_ij_bl2(ijcs)=ijblock
blocking.f:            if(.not.present) ijblock=ijblock-1
blocking.f:      last_mid2=ijblock
blocking.f:      call setival('last_mid2',ijblock)
blocking.f:c make pair blocks with small schwraz integ. : eps10> (ij|ij) >= eps20
blocking.f:            ijblock=ijblock+1
blocking.f:            ijpar_sml=0
blocking.f:                  ijcs=iics+jcs
blocking.f:                  x_ij_ij=schwarz(ics,jcs)
blocking.f:cccc??????        if(x_ij_ij.GE.eps20) then
blocking.f:                  if(x_ij_ij.GE.eps15) then
blocking.f:                     if(x_ij_ij.LT.eps10) then
blocking.f:                        if(ijpar_sml.ge.limpair) then
blocking.f:                           ijblock=ijblock+1
blocking.f:                           ijpar_sml=0
blocking.f:                        ijpar_sml=ijpar_sml+1
blocking.f:                        npar(ijblock)=ijpar_sml
blocking.f:                        ijbl(ijblock,ijpar_sml)=ijcs
blocking.f:                        map_ij_bl2(ijcs)=ijblock
blocking.f:            if(.not.present) ijblock=ijblock-1
blocking.f:      ijpar_big=0
blocking.f:         ijpar=npar(ibl)
blocking.f:         ijpar_big= ijpar_big + ijpar
blocking.f:      ijpar_mid=0
blocking.f:         ijpar=npar(ibl)
blocking.f:         ijpar_mid= ijpar_mid + ijpar
blocking.f:      ijpar_sml=0
blocking.f:         ijpar=npar(ibl)
blocking.f:         ijpar_sml= ijpar_sml + ijpar
blocking.f:      ijpar_tot=ijpar_big+ijpar_mid+ijpar_sml
blocking.f:      write(ioutput,495) ijpar_big,ijpar_mid,ijpar_sml,ijpar_tot
blocking.f:c     write(6,*)' nbl2=',nbl2,' ijblock=',ijblock
blocking.f:c     ijpar_sum=0
blocking.f:c     ijpar=npar(ibl)
blocking.f:c     write(ioutput,502) ibl,ijpar
blocking.f:c     write(ioutput,503) (ijbl(ibl,ij),ij=1,ijpar)
blocking.f:c     ijpar_sum=ijpar_sum+ijpar
blocking.f:c     write(ioutput,*)'total number of pairs=',ijpar_sum
blocking.f:     *                      nsij,nskl,nqmax)
blocking.f:c returns total angular momentum for (ij,kl) quartet
blocking.f:         nsij=nqi+nqj-1
blocking.f:         mmax=nsij+nskl-1
blocking.f:      subroutine get_limit(mmax,icache,nfijkl,ifor,ibl,kbl,
blocking.f:c   mmax  - total angular momentum (+1) for (ij|kl)
blocking.f:c  nfijkl - number of functions (integrals) in (ij|kl)
blocking.f:      functf=dble(nfunct)/dble(nfijkl)
blocking.f:c (1) big    schwarz int. :              (ij|ij) >= eps
blocking.f:c (2) small  schwarz int. :        eps > (ij|ij) >= eps**2
blocking.f:c  all pairs with (ij|ij) < 10**-20 are removed
blocking.f:      ijbl=0                    !    block's counter (with limit)
blocking.f:c make pair blocks with big schwraz integ. : (ij|ij) >= eps10
blocking.f:            ijbl=ijbl+1
blocking.f:            ijpar_big=0
blocking.f:                  x_ij_ij=schwarz(ics,jcs)
blocking.f:                  if(x_ij_ij.GE.eps10) then
blocking.f:c15               if(x_ij_ij.GE.eps15) then
blocking.f:                     if(ijpar_big.ge.limpair) then
blocking.f:                        ijbl=ijbl+1
blocking.f:                        ijpar_big=0
blocking.f:                     ijpar_big=ijpar_big+1
blocking.f:                     maxpar=max(maxpar,ijpar_big)
blocking.f:            if(.not.present) ijbl=ijbl-1
blocking.f:      ijbl_big=ijbl
blocking.f:c make pair blocks with small schwraz integ. : eps10> (ij|ij) >= eps20
blocking.f:            ijbl=ijbl+1
blocking.f:            ijpar_sml=0
blocking.f:                  x_ij_ij=schwarz(ics,jcs)
blocking.f:                  if(x_ij_ij.GE.eps20) then
blocking.f:                     if(x_ij_ij.LT.eps10) then
blocking.f:c15                  if(x_ij_ij.LT.eps15) then
blocking.f:                        if(ijpar_sml.ge.limpair) then
blocking.f:                           ijbl=ijbl+1
blocking.f:                           ijpar_sml=0
blocking.f:                        ijpar_sml=ijpar_sml+1
blocking.f:                        maxpar=max(maxpar,ijpar_sml)
blocking.f:            if(.not.present) ijbl=ijbl-1
blocking.f:      nbl2=ijbl   ! number of pair-blocks with the limit limpair
blocking.f:      ijbl_sml=ijbl-ijbl_big
blocking.f:      write(ioutput,495) nbl2,ijbl_big,ijbl_sml,
blocking.f:      subroutine blk_pairs_mak2(nbl1,nblock1,nbl2,npar,ijbl,map_ij_bl2,
blocking.f:      dimension ijbl(nbl2,*)                  ! output
blocking.f:      dimension map_ij_bl2(*)                 ! output (ncsp)
blocking.f:      ijblock=0             !    blocks counter
blocking.f:c make pair blocks with big schwraz integ. : (ij|ij) >= eps10
blocking.f:            ijblock=ijblock+1
blocking.f:            ijpar_big=0
blocking.f:                  ijcs=iics+jcs
blocking.f:                  x_ij_ij=schwarz(ics,jcs)
blocking.f:                  if(x_ij_ij.GE.eps10) then
blocking.f:c15               if(x_ij_ij.GE.eps15) then
blocking.f:                     if(ijpar_big.ge.limpair) then
blocking.f:                        ijblock=ijblock+1
blocking.f:                        ijpar_big=0
blocking.f:                     ijpar_big=ijpar_big+1
blocking.f:                     npar(ijblock)=ijpar_big
blocking.f:                     ijbl(ijblock,ijpar_big)=ijcs
blocking.f:                     map_ij_bl2(ijcs)=ijblock
blocking.f:            if(.not.present) ijblock=ijblock-1
blocking.f:      last_big2=ijblock
blocking.f:      call setival('last_big2',ijblock)
blocking.f:      call setival('last_mid2',ijblock)  ! needed in get_limits
blocking.f:c make pair blocks with small schwraz integ. : eps10> (ij|ij) >= eps20
blocking.f:            ijblock=ijblock+1
blocking.f:            ijpar_sml=0
blocking.f:                  ijcs=iics+jcs
blocking.f:                  x_ij_ij=schwarz(ics,jcs)
blocking.f:                  if(x_ij_ij.GE.eps20) then
blocking.f:                     if(x_ij_ij.LT.eps10) then
blocking.f:c15                  if(x_ij_ij.LT.eps15) then
blocking.f:                        if(ijpar_sml.ge.limpair) then
blocking.f:                           ijblock=ijblock+1
blocking.f:                           ijpar_sml=0
blocking.f:                        ijpar_sml=ijpar_sml+1
blocking.f:                        npar(ijblock)=ijpar_sml
blocking.f:                        ijbl(ijblock,ijpar_sml)=ijcs
blocking.f:                        map_ij_bl2(ijcs)=ijblock
blocking.f:            if(.not.present) ijblock=ijblock-1
blocking.f:      ijpar_big=0
blocking.f:         ijpar=npar(ibl)
blocking.f:         ijpar_big= ijpar_big + ijpar
blocking.f:      ijpar_sml=0
blocking.f:         ijpar=npar(ibl)
blocking.f:         ijpar_sml= ijpar_sml + ijpar
blocking.f:      ijpar_tot=ijpar_big+ijpar_sml
blocking.f:      write(ioutput,495) ijpar_big,ijpar_sml,ijpar_tot
blocking.f:c     write(6,*)' nbl2=',nbl2,' ijblock=',ijblock
blocking.f:c     ijpar_sum=0
blocking.f:c     ijpar=npar(ibl)
blocking.f:c     write(ioutput,502) ibl,ijpar
blocking.f:c     write(ioutput,503) (ijbl(ibl,ij),ij=1,ijpar)
blocking.f:c     ijpar_sum=ijpar_sum+ijpar
blocking.f:c     write(ioutput,*)'total number of pairs=',ijpar_sum
blocking.f:c                 (ij|ij) < 10**-20
blocking.f:      ijbl=0                    !    block's counter (with limit)
blocking.f:c make pair blocks ; include only pairs wih : (ij|ij) >= eps20
blocking.f:            ijbl=ijbl+1
blocking.f:            ijpar_big=0
blocking.f:                  x_ij_ij=schwarz(ics,jcs)
blocking.f:                  if(x_ij_ij.GE.eps20) then
blocking.f:                     if(ijpar_big.ge.limpair) then
blocking.f:                        ijbl=ijbl+1
blocking.f:                        ijpar_big=0
blocking.f:                     ijpar_big=ijpar_big+1
blocking.f:                     maxpar=max(maxpar,ijpar_big)
blocking.f:            if(.not.present) ijbl=ijbl-1
blocking.f:      nbl2=ijbl   ! number of pair-blocks with the limit limpair
blocking.f:     *        ' (those with (ij|ij) >= eps**2, where eps =',1pe11.4,')'/
blocking.f:      subroutine blk_pairs_mak1(nbl1,nblock1,nbl2,npar,ijbl,map_ij_bl2,
blocking.f:      dimension ijbl(nbl2,*)                  ! output
blocking.f:      dimension map_ij_bl2(*)                 ! output (ncsp)
blocking.f:      ijblock=0             !    blocks counter
blocking.f:c make pair blocks with schwraz integ. : (ij|ij) >= eps20
blocking.f:            ijblock=ijblock+1
blocking.f:            ijpar_big=0
blocking.f:                  ijcs=iics+jcs
blocking.f:                  x_ij_ij=schwarz(ics,jcs)
blocking.f:                  if(x_ij_ij.GE.eps20) then
blocking.f:                     if(ijpar_big.ge.limpair) then
blocking.f:                        ijblock=ijblock+1
blocking.f:                        ijpar_big=0
blocking.f:                     ijpar_big=ijpar_big+1
blocking.f:                     npar(ijblock)=ijpar_big
blocking.f:                     ijbl(ijblock,ijpar_big)=ijcs
blocking.f:                     map_ij_bl2(ijcs)=ijblock
blocking.f:            if(.not.present) ijblock=ijblock-1
blocking.f:      last_big2=ijblock
blocking.f:      call setival('last_big2',ijblock)
blocking.f:      call setival('last_mid2',ijblock)  ! needed in get_limits
blocking.f:c     write(6,*)' nbl2=',nbl2,' ijblock=',ijblock
blocking.f:c     ijpar_sum=0
blocking.f:c     ijpar=npar(ibl)
blocking.f:c     write(ioutput,502) ibl,ijpar
blocking.f:c     write(ioutput,503) (ijbl(ibl,ij),ij=1,ijpar)
blocking.f:c     ijpar_sum=ijpar_sum+ijpar
blocking.f:c     write(ioutput,*)'total number of pairs=',ijpar_sum
blocking.f:      subroutine check_exp(ibl,inx,ijbl,nbl2,ijpar,iis,jjs,datbas,
blocking.f:      dimension inx(12,*),iis(*),jjs(*),ijbl(nbl2,*)
blocking.f:      do ijpax=1,ijpar
blocking.f:         ijcs=ijbl(ibl,ijpax)
blocking.f:         ics=iis(ijcs)
blocking.f:         jcs=jjs(ijcs)
blocking.f:      subroutine num_stab(mmax,nsij,nskl,nqmax,
blocking.f:      nshifts=min(nsij,nskl)-1
blocking.f:      if(nsij.ge.nskl) then
blocking.f:      if(nsij.lt.nskl) then
blocking.f:      subroutine blkmemor(bl,nbl2,ijbl,npar,iis,jjs,inx,
blocking.f:      dimension npar(*),ijbl(nbl2,*)
blocking.f:      ijpar=npar(ibl)
blocking.f:      ijcs1=ijbl(ibl,1)
blocking.f:      ics1=iis(ijcs1)
blocking.f:      jcs1=jjs(ijcs1)
blocking.f:      nfij=lenn(itype1)*lenn(jtype1)
blocking.f:      ngcij=(ngci+1)*(ngcj+1)
blocking.f:      klcs1=ijbl(kbl,1)
blocking.f:      nfijkl=nfij*nfkl
blocking.f:         call blksize1(ibl,kbl,ijpar,klpar,itype1,jtype1,ktype1,ltype1,
blocking.f:     *                 memor2,memor2ij,memor2kl,memor4,ifor)
blocking.f:         call blksize2(ibl,kbl,ijpar,klpar,itype1,jtype1,ktype1,ltype1,
blocking.f:     *                 memor2,memor2ij,memor2kl,memor4,ifor)
blocking.f:c           memor2,memor2ij,memor2kl,memor4
blocking.f:c i.e. one quartet, one ij- & one kl-pair :
blocking.f:      mqrt1=memor2ij+memor2kl+memor4
blocking.f:      mqrt1=mqrt1+memor2  ! memor2 is an amount allocated in prec2ij,kl
blocking.f:c      write(6,*)' functions=', nfij, nfkl
blocking.f:      subroutine print2cd(ncs,schwarz,nbl2,npar,ijbl,iftc0)
blocking.f:      dimension ijbl(nbl2,*)
blocking.f:         ijpar=npar(ibl)
blocking.f:cc         write(6,*) '      pair-block no=',ibl,' pairs=',ijpar
blocking.f:         do ij=1,ijpar
blocking.f:            ijcs=ijbl(ibl,ij)
blocking.f:            call get_ij_half(ijcs, ics, jcs)
blocking.f:            ijcd=iftc0(ics)+iftc0(jcs)
blocking.f:            write(6,66) ijcs,ics,jcs,ijcd,schwarz(ics,jcs)
blocking.f:      subroutine ftc_bl4(ncs,nbl2,ijbl,iftc0,iccdd,nftcbl4,nbl4ftc)
blocking.f:      dimension ijbl(nbl2,*)
blocking.f:         ijcs1=ijbl(ibl,1)
blocking.f:         call get_ij_half(ijcs1, ics1, jcs1)
blocking.f:         ijcd1=iftc0(ics1)+iftc0(jcs1)
blocking.f:         if(iccdd.eq.0 .and. ijcd1.eq.0 ) then
blocking.f:            klcs1=ijbl(kbl,1)
blocking.f:            call get_ij_half(klcs1, kcs1, lcs1)
blocking.f:            if(ijcd1+klcd1.GE.2) then
blocking_new.f:c            pairs  ( can be 'ijpairs' or 'klpairs' )
blocking_new.f:c nparx, ijblx
blocking_new.f:c  pairs ijcs are given by ics=iis(ijcs) and jcs=jjs(ijcs)
blocking_new.f:c  which pairs belong to this block : ijcs=ijblx(ibl,1-npar)
blocking_new.f:      call getint(nbl2_pred*maxpar,ijblx)
blocking_new.f:      call getint(npartot,map_ij_blx)
blocking_new.f:c       ijblx(nbl2,*) , nparx(nbl2) and map_ij_blx(*)
blocking_new.f:     *                    bl(nparx),bl(ijblx),bl(map_ij_blx))
blocking_new.f:     *                    bl(nparx),bl(ijblx))
blocking_new.f:      if(called4.eq.'ijpairs') then
blocking_new.f:         call setival('ijblx',ijblx)
blocking_new.f:         call setival('mapijblx',map_ij_blx)
blocking_new.f:         call setival('blocksij',nbl2)
blocking_new.f:         call setival('blpredij',nbl2_pred)
blocking_new.f:         call setival('ijbly',ijblx)
blocking_new.f:         call setival('mapijbly',map_ij_blx)
blocking_new.f:      ijpar_sum=0
blocking_new.f:      ijblock=0             !    blocks counter
blocking_new.f:            ijblock=ijblock+1
blocking_new.f:            ijpar=0
blocking_new.f:                     ijcs=iics+jcs
blocking_new.f:                     ijcs=jcs*(jcs-1)/2 +ics
blocking_new.f:c2001             if(ijpar.ge.limpair) then
blocking_new.f:                  if(ijpar.ge.limit2 ) then
blocking_new.f:                     ijblock=ijblock+1
blocking_new.f:                     ijpar=0
blocking_new.f:                  ijpar_sum=ijpar_sum + 1
blocking_new.f:                  ijpar=ijpar+1
blocking_new.f:                  if(ijpar.gt.maxpar) maxpar=ijpar
blocking_new.f:      nbl2=ijblock
blocking_new.f:      npartot=ijpar_sum
blocking_new.f:     *                          npar,ijbl,map_ij_bl2)
blocking_new.f:      dimension ijbl(nbl2_pred,*)                  ! output
blocking_new.f:      dimension map_ij_bl2(*)                      ! output (ncspairs)
blocking_new.f:c ijbl(nbl2_pred,*) - shows pairs belonging to a given pair-blocks
blocking_new.f:c                     ijbl(ijblock,ijpar)-> ijcs (=ics*(ics-1)/2+jcs)
blocking_new.f:c map_ij_bl2(*) - mapping from ijcs to ijblock
blocking_new.f:      ijpar_sum=0
blocking_new.f:         ijblock=0             !    blocks counter
blocking_new.f:                  ijblock=ijblock+1
blocking_new.f:     *                            ijblock,ibl,ibeg,iend,jbl,jbeg,jend,
blocking_new.f:     *                         limit2 ,nbl2_pred,npar,ijbl,map_ij_bl2)
blocking_new.f:c2001                          limpair,nbl2_pred,npar,ijbl,map_ij_bl2)
blocking_new.f:                  ijpar_sum=ijpar_sum+ npar(ijblock)
blocking_new.f:                  ijblock=ijblock+1
blocking_new.f:     *                            ijblock, ibl2,i2beg,i2end,
blocking_new.f:     *                         limit2 ,nbl2_pred,npar,ijbl,map_ij_bl2)
blocking_new.f:c2001*                         limpair,nbl2_pred,npar,ijbl,map_ij_bl2)
blocking_new.f:                  ijpar_sum=ijpar_sum+ npar(ijblock)
blocking_new.f:                  ijblock=ijblock+1
blocking_new.f:     *                            ijblock, ibl1,i1beg,i1end,
blocking_new.f:     *                         limit2 ,nbl2_pred,npar,ijbl,map_ij_bl2)
blocking_new.f:c2001*                         limpair,nbl2_pred,npar,ijbl,map_ij_bl2)
blocking_new.f:                  ijpar_sum=ijpar_sum+ npar(ijblock)
blocking_new.f:                  ijblock=ijblock+1
blocking_new.f:     *                            ijblock, ibl ,ipa_beg,ipa_end,
blocking_new.f:     *                         limit2 ,nbl2_pred,npar,ijbl,map_ij_bl2)
blocking_new.f:c2001*                         limpair,nbl2_pred,npar,ijbl,map_ij_bl2)
blocking_new.f:                  ijpar_sum=ijpar_sum+ npar(ijblock)
blocking_new.f:               ijblock=ijblock+1
blocking_new.f:     *                         ijblock,ibl,ibeg,iend, jbl,jbeg,jend,
blocking_new.f:     *                      limit2 ,nbl2_pred,npar,ijbl,map_ij_bl2)
blocking_new.f:c2001*                      limpair,nbl2_pred,npar,ijbl,map_ij_bl2)
blocking_new.f:               ijpar_sum=ijpar_sum+ npar(ijblock)
blocking_new.f:         ijblock=0
blocking_new.f:                  ijblock=ijblock+1
blocking_new.f:     *                            ijblock,ibl,ibeg,iend,jbl,jbeg,jend,
blocking_new.f:     *                         limit2 ,nbl2_pred,npar,ijbl,map_ij_bl2)
blocking_new.f:c2001*                         limpair,nbl2_pred,npar,ijbl,map_ij_bl2)
blocking_new.f:                  ijpar_sum=ijpar_sum+ npar(ijblock)
blocking_new.f:                  ijblock=ijblock+1
blocking_new.f:     *                            ijblock, ibl2,i2beg,i2end,
blocking_new.f:     *                         limit2 ,nbl2_pred,npar,ijbl,map_ij_bl2)
blocking_new.f:c2001*                         limpair,nbl2_pred,npar,ijbl,map_ij_bl2)
blocking_new.f:                  ijpar_sum=ijpar_sum+ npar(ijblock)
blocking_new.f:                  ijblock=ijblock+1
blocking_new.f:     *                            ijblock, ibl1,i1beg,i1end,
blocking_new.f:     *                         limit2 ,nbl2_pred,npar,ijbl,map_ij_bl2)
blocking_new.f:c2001*                         limpair,nbl2_pred,npar,ijbl,map_ij_bl2)
blocking_new.f:                  ijpar_sum=ijpar_sum+ npar(ijblock)
blocking_new.f:                  ijblock=ijblock+1
blocking_new.f:     *                            ijblock, ibl ,ipa_beg,ipa_end,
blocking_new.f:     *                         limit2 ,nbl2_pred,npar,ijbl,map_ij_bl2)
blocking_new.f:c2001*                         limpair,nbl2_pred,npar,ijbl,map_ij_bl2)
blocking_new.f:                  ijpar_sum=ijpar_sum+ npar(ijblock)
blocking_new.f:               ijblock=ijblock+1
blocking_new.f:     *                         ijblock,ibl,ibeg,iend, jbl,jbeg,jend,
blocking_new.f:     *                         limit2 ,nbl2_pred,npar,ijbl,map_ij_bl2)
blocking_new.f:c2001*                         limpair,nbl2_pred,npar,ijbl,map_ij_bl2)
blocking_new.f:               ijpar_sum=ijpar_sum+ npar(ijblock)
blocking_new.f:      nbl2=ijblock
blocking_new.f:c     do ijblock=1,nbl2
blocking_new.f:c        ijpar=npar(ijblock)
blocking_new.f:c    *   ' Block of Shell-pairs no=',ijblock,' npairs=',ijpar
blocking_new.f:c        do ijp=1,ijpar
blocking_new.f:c           ijcs=ijbl(ijblock,ijp)
blocking_new.f:c           call get_ij_half(ijcs,ics,jcs)
blocking_new.f:c           write(ioutput,*) '  shell-pairs :',ijcs,' shells=',ics,jcs
blocking_new.f:c     write(ioutput,*)' Total number of shell pairs=',ijpar_sum
blocking_new.f:     *                        ijblock,ibl,ibeg,iend, jbl,jbeg,jend,
blocking_new.f:     *                        limpair,nbl2,npar,ijbl,map_ij_bl2)
blocking_new.f:      dimension ijbl(nbl2,*)                  ! output
blocking_new.f:      dimension map_ij_bl2(*)                 ! output (ncspairs)
blocking_new.f:               ijpar=0
blocking_new.f:                     x_ij_ij=schwarz(ics,jcs)*dble(ipresent)
blocking_new.f:                     if(x_ij_ij.GE.EPS2) then
blocking_new.f:                        call count_subs(ics,jcs,ijblock,ijpar,limpair,
blocking_new.f:     *                                  nbl2,npar,ijbl,map_ij_bl2)
blocking_new.f:               if(.not.doit) ijblock=ijblock-1
blocking_new.f:               ijpar=0
blocking_new.f:                     x_ij_ij=schwarz(ics,jcs)*dble(ipresent)
blocking_new.f:                     if(x_ij_ij.GE.EPS2) then
blocking_new.f:                        call count_subs(ics,jcs,ijblock,ijpar,limpair,
blocking_new.f:     *                                  nbl2,npar,ijbl,map_ij_bl2)
blocking_new.f:               if(.not.doit) ijblock=ijblock-1
blocking_new.f:               ijpar=0
blocking_new.f:                     x_ij_ij=schwarz(ics,jcs)*dble(ipresent)
blocking_new.f:                     if(x_ij_ij.GE.EPS2) then
blocking_new.f:                        call count_subs(ics,jcs,ijblock,ijpar,limpair,
blocking_new.f:     *                                  nbl2,npar,ijbl,map_ij_bl2)
blocking_new.f:                     x_ij_ij=schwarz(ics,jcs)*dble(ipresent)
blocking_new.f:                     if(x_ij_ij.GE.EPS2) then
blocking_new.f:                        call count_subs(ics,jcs,ijblock,ijpar,limpair,
blocking_new.f:     *                                  nbl2,npar,ijbl,map_ij_bl2)
blocking_new.f:                     x_ij_ij=schwarz(ics,jcs)*dble(ipresent)
blocking_new.f:                     if(x_ij_ij.GE.EPS2) then
blocking_new.f:                        call count_subs(ics,jcs,ijblock,ijpar,limpair,
blocking_new.f:     *                                  nbl2,npar,ijbl,map_ij_bl2)
blocking_new.f:               if(.not.doit) ijblock=ijblock-1
blocking_new.f:               ijpar=0
blocking_new.f:                     x_ij_ij=schwarz(ics,jcs)*dble(ipresent)
blocking_new.f:                     if(x_ij_ij.GE.EPS2) then
blocking_new.f:                        call count_subs(ics,jcs,ijblock,ijpar,limpair,
blocking_new.f:     *                                  nbl2,npar,ijbl,map_ij_bl2)
blocking_new.f:                     x_ij_ij=schwarz(ics,jcs)*dble(ipresent)
blocking_new.f:                     if(x_ij_ij.GE.EPS2) then
blocking_new.f:                        call count_subs(ics,jcs,ijblock,ijpar,limpair,
blocking_new.f:     *                                  nbl2,npar,ijbl,map_ij_bl2)
blocking_new.f:                     x_ij_ij=schwarz(ics,jcs)*dble(ipresent)
blocking_new.f:                     if(x_ij_ij.GE.EPS2) then
blocking_new.f:                        call count_subs(ics,jcs,ijblock,ijpar,limpair,
blocking_new.f:     *                                  nbl2,npar,ijbl,map_ij_bl2)
blocking_new.f:               if(.not.doit) ijblock=ijblock-1
blocking_new.f:               ijpar=0
blocking_new.f:                     x_ij_ij=schwarz(ics,jcs)*dble(ipresent)
blocking_new.f:                     if(x_ij_ij.GE.EPS2) then
blocking_new.f:                        call count_subs(ics,jcs,ijblock,ijpar,limpair,
blocking_new.f:     *                                  nbl2,npar,ijbl,map_ij_bl2)
blocking_new.f:                     x_ij_ij=schwarz(ics,jcs)*dble(ipresent)
blocking_new.f:                     if(x_ij_ij.GE.EPS2) then
blocking_new.f:                        call count_subs(ics,jcs,ijblock,ijpar,limpair,
blocking_new.f:     *                                  nbl2,npar,ijbl,map_ij_bl2)
blocking_new.f:                     x_ij_ij=schwarz(ics,jcs)*dble(ipresent)
blocking_new.f:                     if(x_ij_ij.GE.EPS2) then
blocking_new.f:                        call count_subs(ics,jcs,ijblock,ijpar,limpair,
blocking_new.f:     *                                  nbl2,npar,ijbl,map_ij_bl2)
blocking_new.f:               if(.not.doit) ijblock=ijblock-1
blocking_new.f:               ijpar=0
blocking_new.f:                     x_ij_ij=schwarz(ics,jcs)*dble(ipresent)
blocking_new.f:                     if(x_ij_ij.GE.EPS2) then
blocking_new.f:                        call count_subs(ics,jcs,ijblock,ijpar,limpair,
blocking_new.f:     *                                  nbl2,npar,ijbl,map_ij_bl2)
blocking_new.f:                     x_ij_ij=schwarz(ics,jcs)*dble(ipresent)
blocking_new.f:                     if(x_ij_ij.GE.EPS2) then
blocking_new.f:                        call count_subs(ics,jcs,ijblock,ijpar,limpair,
blocking_new.f:     *                                  nbl2,npar,ijbl,map_ij_bl2)
blocking_new.f:                     x_ij_ij=schwarz(ics,jcs)*dble(ipresent)
blocking_new.f:                     if(x_ij_ij.GE.EPS2) then
blocking_new.f:                        call count_subs(ics,jcs,ijblock,ijpar,limpair,
blocking_new.f:     *                                  nbl2,npar,ijbl,map_ij_bl2)
blocking_new.f:               if(.not.doit) ijblock=ijblock-1
blocking_new.f:     *                        ijblock,ibl,ibeg,iend, jbl,jbeg,jend,
blocking_new.f:     *                        limpair,nbl2,npar,ijbl,map_ij_bl2)
blocking_new.f:      dimension ijbl(nbl2,*)                  ! output
blocking_new.f:      dimension map_ij_bl2(*)                 ! output (ncspairs)
blocking_new.f:               ijpar=0
blocking_new.f:                     x_ij_ij=schwarz(ics,jcs)*dshell(ics)
blocking_new.f:                     if(x_ij_ij.GE.EPS2) then
blocking_new.f:                        call count_subs(ics,jcs,ijblock,ijpar,limpair,
blocking_new.f:     *                                  nbl2,npar,ijbl,map_ij_bl2)
blocking_new.f:               if(.not.doit) ijblock=ijblock-1
blocking_new.f:               ijpar=0
blocking_new.f:                     x_ij_ij=schwarz(ics,jcs)*dshell(ics)
blocking_new.f:                     if(x_ij_ij.GE.EPS2) then
blocking_new.f:                        call count_subs(ics,jcs,ijblock,ijpar,limpair,
blocking_new.f:     *                                  nbl2,npar,ijbl,map_ij_bl2)
blocking_new.f:               if(.not.doit) ijblock=ijblock-1
blocking_new.f:               ijpar=0
blocking_new.f:                     x_ij_ij=schwarz(ics,jcs)*dshell(ics)
blocking_new.f:                     if(x_ij_ij.GE.EPS2) then
blocking_new.f:                        call count_subs(ics,jcs,ijblock,ijpar,limpair,
blocking_new.f:     *                                  nbl2,npar,ijbl,map_ij_bl2)
blocking_new.f:                     x_ij_ij=schwarz(ics,jcs)*dshell(ics)
blocking_new.f:                     if(x_ij_ij.GE.EPS2) then
blocking_new.f:                        call count_subs(ics,jcs,ijblock,ijpar,limpair,
blocking_new.f:     *                                  nbl2,npar,ijbl,map_ij_bl2)
blocking_new.f:                     x_ij_ij=schwarz(ics,jcs)*dshell(ics)
blocking_new.f:                     if(x_ij_ij.GE.EPS2) then
blocking_new.f:                        call count_subs(ics,jcs,ijblock,ijpar,limpair,
blocking_new.f:     *                                  nbl2,npar,ijbl,map_ij_bl2)
blocking_new.f:               if(.not.doit) ijblock=ijblock-1
blocking_new.f:               ijpar=0
blocking_new.f:                     x_ij_ij=schwarz(ics,jcs)*dshell(ics)
blocking_new.f:                     if(x_ij_ij.GE.EPS2) then
blocking_new.f:                        call count_subs(ics,jcs,ijblock,ijpar,limpair,
blocking_new.f:     *                                  nbl2,npar,ijbl,map_ij_bl2)
blocking_new.f:                     x_ij_ij=schwarz(ics,jcs)*dshell(ics)
blocking_new.f:                     if(x_ij_ij.GE.EPS2) then
blocking_new.f:                        call count_subs(ics,jcs,ijblock,ijpar,limpair,
blocking_new.f:     *                                  nbl2,npar,ijbl,map_ij_bl2)
blocking_new.f:                     x_ij_ij=schwarz(ics,jcs)*dshell(ics)
blocking_new.f:                     if(x_ij_ij.GE.EPS2) then
blocking_new.f:                        call count_subs(ics,jcs,ijblock,ijpar,limpair,
blocking_new.f:     *                                  nbl2,npar,ijbl,map_ij_bl2)
blocking_new.f:               if(.not.doit) ijblock=ijblock-1
blocking_new.f:               ijpar=0
blocking_new.f:                     x_ij_ij=schwarz(ics,jcs)*dshell(ics)
blocking_new.f:                     if(x_ij_ij.GE.EPS2) then
blocking_new.f:                        call count_subs(ics,jcs,ijblock,ijpar,limpair,
blocking_new.f:     *                                  nbl2,npar,ijbl,map_ij_bl2)
blocking_new.f:                     x_ij_ij=schwarz(ics,jcs)*dshell(ics)
blocking_new.f:                     if(x_ij_ij.GE.EPS2) then
blocking_new.f:                        call count_subs(ics,jcs,ijblock,ijpar,limpair,
blocking_new.f:     *                                  nbl2,npar,ijbl,map_ij_bl2)
blocking_new.f:                     x_ij_ij=schwarz(ics,jcs)*dshell(ics)
blocking_new.f:                     if(x_ij_ij.GE.EPS2) then
blocking_new.f:                        call count_subs(ics,jcs,ijblock,ijpar,limpair,
blocking_new.f:     *                                  nbl2,npar,ijbl,map_ij_bl2)
blocking_new.f:               if(.not.doit) ijblock=ijblock-1
blocking_new.f:               ijpar=0
blocking_new.f:                     x_ij_ij=schwarz(ics,jcs)*dshell(ics)
blocking_new.f:                     if(x_ij_ij.GE.EPS2) then
blocking_new.f:                        call count_subs(ics,jcs,ijblock,ijpar,limpair,
blocking_new.f:     *                                  nbl2,npar,ijbl,map_ij_bl2)
blocking_new.f:                     x_ij_ij=schwarz(ics,jcs)*dshell(ics)
blocking_new.f:                     if(x_ij_ij.GE.EPS2) then
blocking_new.f:                        call count_subs(ics,jcs,ijblock,ijpar,limpair,
blocking_new.f:     *                                  nbl2,npar,ijbl,map_ij_bl2)
blocking_new.f:                     x_ij_ij=schwarz(ics,jcs)*dshell(ics)
blocking_new.f:                     if(x_ij_ij.GE.EPS2) then
blocking_new.f:                        call count_subs(ics,jcs,ijblock,ijpar,limpair,
blocking_new.f:     *                                  nbl2,npar,ijbl,map_ij_bl2)
blocking_new.f:               if(.not.doit) ijblock=ijblock-1
blocking_new.f:     *                        ijblock,ibl,ibeg,iend, jbl,jbeg,jend,
blocking_new.f:     *                        limpair,nbl2,npar,ijbl,map_ij_bl2)
blocking_new.f:      dimension ijbl(nbl2,*)                  ! output
blocking_new.f:      dimension map_ij_bl2(*)                 ! output (ncspairs)
blocking_new.f:               ijpar=0
blocking_new.f:                     x_ij_ij=schwarz(ics,jcs)*dshell(jcs)
blocking_new.f:                     if(x_ij_ij.GE.EPS2) then
blocking_new.f:                        call count_subs(ics,jcs,ijblock,ijpar,limpair,
blocking_new.f:     *                                  nbl2,npar,ijbl,map_ij_bl2)
blocking_new.f:               if(.not.doit) ijblock=ijblock-1
blocking_new.f:               ijpar=0
blocking_new.f:                     x_ij_ij=schwarz(ics,jcs)*dshell(jcs)
blocking_new.f:                     if(x_ij_ij.GE.EPS2) then
blocking_new.f:                        call count_subs(ics,jcs,ijblock,ijpar,limpair,
blocking_new.f:     *                                  nbl2,npar,ijbl,map_ij_bl2)
blocking_new.f:               if(.not.doit) ijblock=ijblock-1
blocking_new.f:               ijpar=0
blocking_new.f:                     x_ij_ij=schwarz(ics,jcs)*dshell(jcs)
blocking_new.f:                     if(x_ij_ij.GE.EPS2) then
blocking_new.f:                        call count_subs(ics,jcs,ijblock,ijpar,limpair,
blocking_new.f:     *                                  nbl2,npar,ijbl,map_ij_bl2)
blocking_new.f:                     x_ij_ij=schwarz(ics,jcs)*dshell(jcs)
blocking_new.f:                     if(x_ij_ij.GE.EPS2) then
blocking_new.f:                        call count_subs(ics,jcs,ijblock,ijpar,limpair,
blocking_new.f:     *                                  nbl2,npar,ijbl,map_ij_bl2)
blocking_new.f:                     x_ij_ij=schwarz(ics,jcs)*dshell(jcs)
blocking_new.f:                     if(x_ij_ij.GE.EPS2) then
blocking_new.f:                        call count_subs(ics,jcs,ijblock,ijpar,limpair,
blocking_new.f:     *                                  nbl2,npar,ijbl,map_ij_bl2)
blocking_new.f:               if(.not.doit) ijblock=ijblock-1
blocking_new.f:               ijpar=0
blocking_new.f:                     x_ij_ij=schwarz(ics,jcs)*dshell(jcs)
blocking_new.f:                     if(x_ij_ij.GE.EPS2) then
blocking_new.f:                        call count_subs(ics,jcs,ijblock,ijpar,limpair,
blocking_new.f:     *                                  nbl2,npar,ijbl,map_ij_bl2)
blocking_new.f:                     x_ij_ij=schwarz(ics,jcs)*dshell(jcs)
blocking_new.f:                     if(x_ij_ij.GE.EPS2) then
blocking_new.f:                        call count_subs(ics,jcs,ijblock,ijpar,limpair,
blocking_new.f:     *                                  nbl2,npar,ijbl,map_ij_bl2)
blocking_new.f:                     x_ij_ij=schwarz(ics,jcs)*dshell(jcs)
blocking_new.f:                     if(x_ij_ij.GE.EPS2) then
blocking_new.f:                        call count_subs(ics,jcs,ijblock,ijpar,limpair,
blocking_new.f:     *                                  nbl2,npar,ijbl,map_ij_bl2)
blocking_new.f:               if(.not.doit) ijblock=ijblock-1
blocking_new.f:               ijpar=0
blocking_new.f:                     x_ij_ij=schwarz(ics,jcs)*dshell(jcs)
blocking_new.f:                     if(x_ij_ij.GE.EPS2) then
blocking_new.f:                        call count_subs(ics,jcs,ijblock,ijpar,limpair,
blocking_new.f:     *                                  nbl2,npar,ijbl,map_ij_bl2)
blocking_new.f:                     x_ij_ij=schwarz(ics,jcs)*dshell(jcs)
blocking_new.f:                     if(x_ij_ij.GE.EPS2) then
blocking_new.f:                        call count_subs(ics,jcs,ijblock,ijpar,limpair,
blocking_new.f:     *                                  nbl2,npar,ijbl,map_ij_bl2)
blocking_new.f:                     x_ij_ij=schwarz(ics,jcs)*dshell(jcs)
blocking_new.f:                     if(x_ij_ij.GE.EPS2) then
blocking_new.f:                        call count_subs(ics,jcs,ijblock,ijpar,limpair,
blocking_new.f:     *                                  nbl2,npar,ijbl,map_ij_bl2)
blocking_new.f:               if(.not.doit) ijblock=ijblock-1
blocking_new.f:               ijpar=0
blocking_new.f:                     x_ij_ij=schwarz(ics,jcs)*dshell(jcs)
blocking_new.f:                     if(x_ij_ij.GE.EPS2) then
blocking_new.f:                        call count_subs(ics,jcs,ijblock,ijpar,limpair,
blocking_new.f:     *                                  nbl2,npar,ijbl,map_ij_bl2)
blocking_new.f:                     x_ij_ij=schwarz(ics,jcs)*dshell(jcs)
blocking_new.f:                     if(x_ij_ij.GE.EPS2) then
blocking_new.f:                        call count_subs(ics,jcs,ijblock,ijpar,limpair,
blocking_new.f:     *                                  nbl2,npar,ijbl,map_ij_bl2)
blocking_new.f:                     x_ij_ij=schwarz(ics,jcs)*dshell(jcs)
blocking_new.f:                     if(x_ij_ij.GE.EPS2) then
blocking_new.f:                        call count_subs(ics,jcs,ijblock,ijpar,limpair,
blocking_new.f:     *                                  nbl2,npar,ijbl,map_ij_bl2)
blocking_new.f:               if(.not.doit) ijblock=ijblock-1
blocking_new.f:      subroutine count_subs(ics,jcs,ijblock,ijpar,limpair,
blocking_new.f:     *                      nbl2,npar,ijbl,map_ij_bl2)
blocking_new.f:      dimension ijbl(nbl2,*)                  ! output
blocking_new.f:      dimension map_ij_bl2(*)                 ! output (ncspairs)
blocking_new.f:                        ijcs=ics*(ics-1)/2 +jcs
blocking_new.f:                        ijcs=jcs*(jcs-1)/2 +ics
blocking_new.f:                     if(ijpar.ge.limpair) then
blocking_new.f:                        ijblock=ijblock+1
blocking_new.f:                        ijpar=0
blocking_new.f:                     ijpar=ijpar+1
blocking_new.f:                     npar(ijblock)=ijpar
blocking_new.f:                     ijbl(ijblock,ijpar)=ijcs
blocking_new.f:                     map_ij_bl2(ijcs)=ijblock
blocking_new.f:      subroutine blksizer_new(ijbl,nbl2_ijd,nbl2_ij,npar_ij,inx_i,inx_j,
blocking_new.f:c ijbl(nbl2_ijd,*) - an array showing pairs of cont.shells making
blocking_new.f:c                    a given ijblok (of pairs):
blocking_new.f:c                    ijbl(ijblock,ijpar)->ijcs  (=ics*(ics-1)/2+jcs)
blocking_new.f:c nbl2_ijd        - predicted number of left side pair-blocks IJ
blocking_new.f:c nbl2_ij         - real      number of left side pair-blocks IJ
blocking_new.f:c npar_ij(*)      - an array showing number of pairs in
blocking_new.f:c                   a given pair-block : npar_ij(ijblock)->nparij
blocking_new.f:c                 nblock4(1,ijklblock)-> ijblock
blocking_new.f:c                 nblock4(2,ijklblock)-> klblock
blocking_new.f:c nbl2_ij & _kl are real numbers of pair-blokcs
blocking_new.f:c nbl2_ijd & _kld  are predicted ones needed here for dimensions
blocking_new.f:      logical ij_same_kl, ij1_same_kl1, ij2_same_kl2,ij1_same_kl2
blocking_new.f:c     dimension npar(*),ijbl(nbl2,*)
blocking_new.f:      dimension ijbl(nbl2_ijd,*),npar_ij(nbl2_ijd)
blocking_new.f:c  if(nbl2_ij.GE.nbl2_kl)              if(nbl2_ij.LT.nbl2_kl)
blocking_new.f:c        write(91,*)' blksizer: nbl2_ij &_kl=',nbl2_ij,nbl2_kl
blocking_new.f:      if( nbl2_ij.eq.1 .or. nbl2_kl.eq.1 ) then
blocking_new.f:         do ibl=1,nbl2_ij
blocking_new.f:            ijpar=npar_ij(ibl)
blocking_new.f:               call arebl2same(ibl,ijbl,nbl2_ijd,ijpar,
blocking_new.f:     *                         ij_same_kl)
blocking_new.f:               if(ij_same_kl) then
blocking_new.f:c......           nquart=ijpar*(ijpar+1)/2
blocking_new.f:c......           nquart=ijpar*klpar
blocking_new.f:      if(nbl2_ij.GE.nbl2_kl) then
blocking_new.f:         iloop2_e=nbl2_ij
blocking_new.f:         iloop1_e=nbl2_ij
blocking_new.f:         iloop2_e=nbl2_ij
blocking_new.f:         kloop2_b=nbl2_ij+1
blocking_new.f:         ijpar=npar_ij(ibl)
blocking_new.f:            call arebl2same(ibl,ijbl,nbl2_ijd,ijpar,
blocking_new.f:     *                      ij_same_kl)
blocking_new.f:               if(ij_same_kl) then
blocking_new.f:c......           nquart=ijpar*(ijpar+1)/2
blocking_new.f:c......           nquart=ijpar*klpar
blocking_new.f:c              do we need ij2-kl1 only or ij1-kl2 as well ?
blocking_new.f:c              compare ij1 with kl1 and ij2 with kl2 :
blocking_new.f:               ijpar_1=npar_ij(kbl)
blocking_new.f:               call arebl2same(ibl_1,ijbl,nbl2_ijd,ijpar_1,
blocking_new.f:     *                         ij1_same_kl1)
blocking_new.f:               ijpar_2=ijpar
blocking_new.f:               call arebl2same(ibl_2,ijbl,nbl2_ijd,ijpar_2,
blocking_new.f:     *                         ij2_same_kl2)
blocking_new.f:c              we always need ij2-kl1 :
blocking_new.f:               if(ij_same_kl) then
blocking_new.f:c......           nquart_21=ijpar*(ijpar+1)/2
blocking_new.f:c......           nquart_21=ijpar*klpar
blocking_new.f:               if(ij1_same_kl1 .and. ij2_same_kl2) then
blocking_new.f:c                 we need only ij2-kl1
blocking_new.f:c                 we need ij1-kl2 also
blocking_new.f:                  call arebl2same(ibl_1,ijbl,nbl2_ijd,ijpar_1,
blocking_new.f:     *                            ij1_same_kl2)
blocking_new.f:                  if(ij1_same_kl2) then
blocking_new.f:c......              nquart_12=ijpar_1*(ijpar_1+1)/2
blocking_new.f:c......              nquart_12=ijpar_1*klpar_2
blocking_new.f:         ijpar=npar_ij(ibl)
blocking_new.f:            call arebl2same(ibl,ijbl,nbl2_ijd,ijpar,
blocking_new.f:     *                      ij_same_kl)
blocking_new.f:            if(ij_same_kl) then
blocking_new.f:c......        nquart=ijpar*(ijpar+1)/2
blocking_new.f:c......        nquart=ijpar*klpar
blocking_new.f:c        write(91,*)' blksizer: nbl2_ij &_kl=',nbl2_ij,nbl2_kl
blocking_new.f:            ijpar=npar_ij(ibl)
blocking_new.f:            nquart=ijpar*(ijpar+1)/2
blocking_new.f:c    *      ' ijpar=',ijpar
blocking_new.f:            ijpar=npar_ij(ibl)
blocking_new.f:            nquart=ijpar*klpar
blocking_new.f:c    *      ' ijpar,klpar=',ijpar,klpar
blocking_new.f:         call get_nij_data(ijbl(ibl,1),inx_i,inx_j,nfij,ngcij)
blocking_new.f:         call get_nij_data(klbl(kbl,1),inx_k,inx_l,nfkl,ngckl)
blocking_new.f:         labsize=4*nquart*ngcij*ngckl + nquart +4
blocking_new.f:         maxibuf=max(maxibuf, labsize*nfij*nfkl)
blocking_new.f:c        write(6,*)' blksizer: nbl2_ij &_kl=',nbl2_ij,nbl2_kl
blocking_new.f:      subroutine arebl2same(ijblock,ijbl,nbl2_ijd,ijpar,
blocking_new.f:     *                      ij_same_kl)
blocking_new.f:c ijblock - left-side IJ block number
blocking_new.f:c ijbl(nbl2_ijd,*) - see routine blksizer_new for description
blocking_new.f:c nbl2_ijd         -       ---"------
blocking_new.f:c ijpar            - number of pairs in ijblock
blocking_new.f:c logical ij_same_kl
blocking_new.f:      logical ij_same_kl
blocking_new.f:      dimension ijbl(nbl2_ijd,*)
blocking_new.f:      ijcs1=ijbl(ijblock,1)       !  first pair
blocking_new.f:      ijcs2=ijbl(ijblock,ijpar)   !  last pair
blocking_new.f:            ij_same_kl=.false.
blocking_new.f:            if(ijpar.eq.klpar) then
blocking_new.f:               if(ijcs1.eq.klcs1 .and. ijcs2.eq.klcs2) then
blocking_new.f:                  ij_same_kl=.true.
blocking_new.f:      subroutine get_nij_data(ijcs1,inx_i,inx_j,nfij,ngcij)
blocking_new.f:            call get_ij_half(ijcs1,ics1,jcs1)
blocking_new.f:            nfij=lenn(itype1)*lenn(jtype1)
blocking_new.f:            ngcij=(ngci+1)*(ngcj+1)
blocking_new.f:      common /memor2/ nqrtd, nibld,nkbld, nijbd,nijed, nklbd,nkled
blocking_new.f:      common /memors/ nsym,ijshp,isymm
blocking_new.f:c  set up vectors : nqrt,nibl,nkbl, nijb,nije, nklb,nkle
blocking_new.f:      call getival('nparx',npar_ij)
blocking_new.f:      call blockqur_n(isbl,maxqrt,bl(npar_ij),bl(npar_kl),
blocking_new.f:     *                bl(nqrtd),bl(nibld),bl(nkbld),bl(nijbd),bl(nijed),
blocking_new.f:      subroutine blockqur_n(isbl,maxqrt,  npar_ij,npar_kl,
blocking_new.f:     *                      nqrt,nibl,nkbl, nijb,nije,nklb,nkle)
blocking_new.f:      dimension npar_ij(*), npar_kl(*)
blocking_new.f:      dimension nibl(*),nkbl(*),nijb(*),nije(*),nklb(*),nkle(*)
blocking_new.f:c nibl(*),nkbl(*),nijb(*),nije(*),nklb(*),nkle(*),nqrt(*)
blocking_new.f:         ijpar=npar_ij(ibl)
blocking_new.f:         nquart=ijpar*(ijpar+1)/2
blocking_new.f:         nijb(ikbl)=1
blocking_new.f:         nije(ikbl)=ijpar
blocking_new.f:         ijpar=npar_ij(ibl)
blocking_new.f:         nquart=ijpar*klpar
blocking_new.f:         nijb(ikbl)=1
blocking_new.f:         nije(ikbl)=ijpar
blocking_new.f:      subroutine blk_pairs_reor(ncs,schwarz,nbl2_pred,nbl2,npar,ijbl)
blocking_new.f:      dimension ijbl(nbl2_pred,*)                  ! input/output
blocking_new.f:      do ijblock=1,nbl2
blocking_new.f:         ijpar=npar(ijblock)
blocking_new.f:       do ijp1=1,ijpar-1
blocking_new.f:          ijcs1=ijbl(ijblock,ijp1)
blocking_new.f:          call get_ij_half(ijcs1,ics,jcs)
blocking_new.f:          xij1=schwarz(ics,jcs)
blocking_new.f:          ijp2=ijp1+1
blocking_new.f:          ijcs2=ijbl(ijblock,ijp2)
blocking_new.f:          call get_ij_half(ijcs2,ics,jcs)
blocking_new.f:          xij2=schwarz(ics,jcs)
blocking_new.f:            if(xij2.gt.xij1) then
blocking_new.f:             ijbl(ijblock,ijp1)=ijcs2
blocking_new.f:             ijbl(ijblock,ijp2)=ijcs1
blocking_new.f:c     do ijblock=1,nbl2
blocking_new.f:c        ijpar=npar(ijblock)
blocking_new.f:c        do ijp=1,ijpar
blocking_new.f:c           ijcs=ijbl(ijblock,ijp)
blocking_new.f:c           call get_ij_half(ijcs,ics,jcs)
blocking_new.f:c           xij=schwarz(ics,jcs)
blocking_new.f:c           write(91,*)' ijblk=',ijblock,' ijpar=',ijp,' sch=',xij
blocking_new.f:c     ngcij=max(ngci,ngcj)
blocking_new.f:      ijmax=max(itype,jtype)
blocking_new.f:      ijmin=min(itype,jtype)
blocking_new.f:      if(ijmax.gt.7) then
blocking_new.f:         if(ijmin.eq.1) limit2=min(limpair,4)
blocking_new.f:         if(ijmin.eq.2) limit2=min(limpair,3)
blocking_new.f:         if(ijmin.ge.3) limit2=min(limpair,2)
blocking_new.f:      if(ijmax.ge.6) then
blocking_new.f:         if(ijmin.eq.1) limit2=min(limpair,4)
blocking_new.f:         if(ijmin.eq.2) limit2=min(limpair,3)
blocking_new.f:         if(ijmin.ge.3) limit2=min(limpair,2)
blocking_new.f:      if(boamax.gt.31622.8d0 .and. ijmax.ge.4) limit2=1 ! d and higher
calc_dft.f:      common /dftpnt/ ird,iaij,idst,iixx,iiwt,ipre,iexp,
calc_dft.f:      call getmem(na*na,iaij)              ! for grid
calc_dft.f:c -- calculate inverse atomic distances, Becke aij parameters
calc_dft.f:     $           bl(idst),bl(ird),bl(iaij),bl(iixx),bl(iiwt))
calcint.f:c which ij- and kl-pair blocks made a given requested big block.
calcint.f:      common /memor1/ iisd,jjsd,ijbld
calcint.f:        call blockint1(bl,nbl2,inx,bl(iisd),bl(jjsd),bl(ijbld),
calcint.f:      subroutine blockint1(bl,nbl2,inx,iis,jjs,ijbl,
calcint.f:      common /howmany/ ntotal,noijkl,nopres,nohalf,nrimtot,nrimret
calcint.f:      dimension bl(*), inx(12,*),iis(*),jjs(*), ijbl(nbl2,*)
calcint.f:      call get_ij_half(isupb_r, ibl_r, kbl_r)
calcint.f:            call prec2ij(ibl_r, bl,inx,bl(npard),nbl2, iis,jjs,ijbl)
calcint.f:            call prec2kl(kbl_r, bl,inx,bl(npard),nbl2, iis,jjs,ijbl)
calcint.f:     *               nbl2, iis,jjs,ijbl,isto,ibls,ibf2,where,
calcint.f:c release memory reserved in prec2ij  WHEN a given super-block is finished
calcint.f:     *                     nbl2, iis,jjs,ijbl,isto,ibls,ibf2,where,
calcint.f:      common /ijcsfl/ ijblokp,ijprevf,ijprevl,ijtprev,maxprev,ngcprev
calcint.f:      common /memor2/ nqrtd, nibld,nkbld, nijbd,nijed, nklbd,nkled
calcint.f:      dimension bl(*), inx(12,*),iis(*),jjs(*), ijbl(nbl2,*)
calcint.f:         ijblokp=0
calcint.f:         ijprevf=0
calcint.f:         ijprevl=0
calcint.f:         ijtprev=0
calcint.f:     *                   bl(nijbd),bl(nijed),bl(nklbd),bl(nkled),
calcint.f:     *                   iis,jjs,ijbl,nbl2,inx,
calcint.f:      subroutine oneblock(isupb,ikbl,bl,nibl,nkbl, nijb,nije,nklb,nkle,
calcint.f:     *                    iis,jjs,ijbl,nbl2,inx,
calcint.f:      common /howmany/ ntotal,noijkl,nopres,nohalf,nrimtot,nrimret
calcint.f:      common /contr/ ngci,ngcj,ngck,ngcl,lci,lcj,lck,lcl,lcij,lckl
calcint.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,mmax,
calcint.f:     * nqi,nqj,nqk,nql,nsij,nskl,
calcint.f:     * nqij,nqij1,nsij1,nqkl,nqkl1,nskl1,ijbeg,klbeg
calcint.f:      common/shell/lshellt,lshelij,lshelkl,lhelp,lcas2(4),lcas3(4)
calcint.f:     * ibfij1,ibfij2,ibfkl1,ibfkl2,
calcint.f:     * ibf2l1,ibf2l2,ibf2l3,ibf2l4,ibfij3,ibfkl3,
calcint.f:     * ixij,iyij,izij, iwij,ivij,iuij,isij
calcint.f:     * ixab,ixp,ixpn,ixpp,iabnia,iapb,i1apb,ifij,icij,isab,
calcint.f:     *                 icfg,jcfg,kcfg,lcfg, igcij,igckl
calcint.f:      common /memors/ nsym,ijshp,isymm
calcint.f:      dimension bl(*), inx(12,*),iis(*),jjs(*), ijbl(nbl2,*)
calcint.f:      dimension nibl(*),nkbl(*),nijb(*),nije(*),nklb(*),nkle(*)
calcint.f:c  number of ij and kl pairs (npij,npkl)
calcint.f:      nijbeg=nijb(ikbl)
calcint.f:      nijend=nije(ikbl)
calcint.f:      npij=nijend-nijbeg+1
calcint.f:c     ijcs1=nblok1(1,1)
calcint.f:      ijcs1=ijbl(ibl,nijbeg)
calcint.f:      klcs1=ijbl(kbl,nklbeg)
calcint.f:         call smblock_neg(bl(ischwarz),ncs, ijcs1,klcs1,skip_sb)
calcint.f:      call shells(inx,iis,jjs,ijcs1,klcs1)
calcint.f:      if(npkl.eq.0) npklx=npij
calcint.f:         call memo5a_1(npij ,mmax1)
calcint.f:         call memo5c_1(nbls,mmax1,npij,npklx,nfha,nfumax)
calcint.f:         call memo5a_2(npij ,mmax1)
calcint.f:         call memo5c_2(nbls,mmax1,npij,npklx,nfumax)
calcint.f:     *                 inx,iis,jjs,ijbl,nblok1,
calcint.f:     *                 ibl,nijbeg,nijend,npij,
calcint.f:     *                   inx,iis,jjs,ijbl,nblok1,
calcint.f:     *                   ibl,nijbeg,nijend,npij,
calcint.f:         call memo6(npij,npklx)        !   2 calls of getmem
calcint.f:         call getmem(npij ,ijcent)
calcint.f:         call precal2d(bl(inuc),iis,jjs,inx, npij,npklx,npkl,
calcint.f:     *           ibl,kbl,ijbl,nbl2,nijbeg,nijend,nklbeg,nklend,
calcint.f:     *           bl(isymm),bl(ijcent),bl(klcent) )
calcint.f:            call getmem(npij ,ijcent)
calcint.f:            call onecentr(iis,jjs,inx, npij,npklx,npkl,
calcint.f:     *              ibl,kbl,ijbl,nbl2,nijbeg,nijend,nklbeg,nklend,
calcint.f:     *              bl(isymm),bl(ijcent),bl(klcent) )
calcint.f:         call schw_quarts(iis,jjs,ibl,ijbl,nbl2,nijbeg,nijend,
calcint.f:c isym(ijkl)=0 or 1 , 0 means that ijkl quartet is neglected.
calcint.f:         call schw_neg(nbls,ncs, npij,npklx,npkl, nijbeg,nklbeg,
calcint.f:     *                     nbl2,ibl,kbl,ijbl,iis,jjs, denspar,
calcint.f:           call onesym(ibl,kbl,ijbl,nbl2,nijbeg,nijend,nklbeg,nklend,
calcint.f:     *                  bl(ijshp),nsym,bl(isymm),nblsym )
calcint.f:            noijkl=noijkl+nblsym
calcint.f:            noijkl=noijkl+nbls
calcint.f:c   and constructe indx(ijkl)=ijklp for use in prec4neg & precspc
calcint.f:      call indexp(npij,npklx,npkl,nijbeg,nijend, nklbeg,nklend,
calcint.f:c find cases when for a given ijpair all klpairs
calcint.f:         call getint(npij,jump)
calcint.f:         call symm_jump(bl(isymm),npij,npklx,npkl,bl(jump))
calcint.f:         call getmem(npij*npklx,isymfac)
calcint.f:         call symm_fact(bl(isymm),npij,npklx,npkl,rnsym,bl(isymfac))
calcint.f:c jum(ijpar) and symfac(ijkl) will be used in prec4neg & precspec .
calcint.f:     *           bl,first,nbls,acc,ikbl,npij,npklx,npkl,idnsx)
calcint.f:     *           bl,first,nbls,acc,ikbl,npij,npklx,npkl,idnsx)
calcint.f:      if(nsij.ge.nskl) then
calcint.f:         if(lshelij.gt.0) lobsa=1
calcint.f:         immax=nsij-2
calcint.f:         call erinteg_1(bl,first,nbls,acc, ikbl,npij,npklx,npkl,
calcint.f:         call erinteg_2(bl,first,nbls,acc, ikbl,npij,npklx,npkl,
calcint.f:           nbuf=ibuf+ngcd*nbls*lnijkl
calcint.f:         incrt=mnbls*lnijkl
calcint.f:           nbuf=ibuf+9*ngcd*nbls*lnijkl
calcint.f:           incrt=mnbls*lnijkl
calcint.f:c (2) if(where.eq.'shif'                 in bl(ibuf+nbls*lnijkl*ngcd)
calcint.f:        call destret(ibl,kbl,ijbl,nbl2,nijbeg,nijend,nklbeg,nklend,
calcint.f:      ijklen=ilen*jlen*klen*llen
calcint.f:      icrt=ijklen*nbls
calcint.f:c      write(*,*) 'after destret, ijklen, nbls=',lnijkl,nbls
calcint.f:        if(where.eq.'shif') ibuffx=ibuf+nbls*lnijkl*ngcd
calcint.f:        nintex=lnijkl
calcint.f:      subroutine erinteg_1(bl,first,nbls,acc, ikbl,npij,npklx,npkl,
calcint.f:      common /primij/ iabprim, ijdim ,ijpar1
calcint.f:      common /howmany/ ntotal,noijkl,nopres,nohalf,nrimtot,nrimret
calcint.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,mmax,
calcint.f:     * nqi,nqj,nqk,nql,nsij,nskl,
calcint.f:     * nqij,nqij1,nsij1,nqkl,nqkl1,nskl1,ijbeg,klbeg
calcint.f:      common /memor1/ iisd,jjsd,ijbld
calcint.f:     * ibfij1,ibfij2,ibfkl1,ibfkl2,
calcint.f:     * ibf2l1,ibf2l2,ibf2l3,ibf2l4,ibfij3,ibfkl3,
calcint.f:     * ixij,iyij,izij, iwij,ivij,iuij,isij
calcint.f:     * ixab,ixp,ixpn,ixpp,iabnia,iapb,i1apb,ifij,icij,isab,
calcint.f:     *                 icfg,jcfg,kcfg,lcfg, igcij,igckl
calcint.f:      common /memors/ nsym,ijshp,isymm
calcint.f:      nqijr=nqij
calcint.f:         nqij=nqij-1
calcint.f:         if(nqij.le.0) nqij=1
calcint.f:         nqij=nqij-2
calcint.f:         if(nqij.le.0) nqij=1
calcint.f:        ngcij=ngci1*ngcj1
calcint.f:        call getmem(ngcij*nbls,igcij)
calcint.f:        call getmem(ngcd*nblsx*lnij*lnkl,ibut2)
calcint.f:      lcij=0
calcint.f:         call set_boamax1(bl(iaa),bl(ibb),npij,l1,l2,boa_max)
calcint.f:        call gcparij(nbls, bl(idx1),npij,
calcint.f:     *               l1,l2,ngci1,ngcj1,ngcij,
calcint.f:     *               bl(igci),bl(igcj), bl(igcij))
calcint.f:      lcij=lcij+1
calcint.f:      call prec4neg_1(nbls,npij,npklx,npkl,lcij,lckl,
calcint.f:     1     ijpar1,lc12, klpar1,lc34, bl(idx1),bl(idx2),
calcint.f:     *     bl(iapb),bl(icpd),bl(icij),bl(ickl),
calcint.f:     *                      lnij,lnkl,indx,ngcd,ibut2)
calcint.f:     1                ijpar1,lc12, klpar1,lc34,
calcint.f:     *                lcij,lckl,npij,npklx,
calcint.f:     1                ijpar1,lc12, klpar1,lc34,
calcint.f:     *                lcij,lckl,npij,npklx,
calcint.f:c ij
calcint.f:         call conv1x_1(nbls1,mmax1,npij ,lcij, bl(idx1),bl(indx),
calcint.f:            call conv1der(nbls1,npij,l1,bl(idx1),bl(indx),
calcint.f:            call conv1der(nbls1,npij ,l2,bl(idx1),bl(indx),
calcint.f:         call assemblx(first,nbls,nbls1,lnij,lnkl,
calcint.f:     *                 l1,l2,l3,l4,lcij,lckl,npij,npklx)
calcint.f:         call gcqijkl(nbls,nbls1, bl(indx), npij,npklx,
calcint.f:     *                bl(igcij),ngcij, bl(igckl),ngckl)
calcint.f:         call assemblg(first,nbls,nbls1,lnij,lnkl,
calcint.f:      nqij=nqijr
calcint.f:c transpose but2(ngcd, nbls*lnij*lnkl) into buf2(nbls*lnij*lnkl,ngcd)
calcint.f:        ldb=nbls*lnij*lnkl
calcint.f:      lnijr=lnij
calcint.f:c        return to the original values of nsij,nskl and mmax :
calcint.f:         ijderiv=1
calcint.f:         call iobarb(ijderiv,klderiv)
calcint.f:         call nmrderx(nbls,lnijr,lnklr,npij,npklx,ngcd,
calcint.f:c        return to the original values of nsij,nskl and mmax :
calcint.f:         ijderiv=1
calcint.f:         call iobarb(ijderiv,klderiv)
calcint.f:         call force_der(bl,nbls,lnijr,lnklr,npij,ngcd,idx1,ixab)
calcint.f:c        return to the original values of nsij,nskl and mmax :
calcint.f:         ijderiv=2
calcint.f:         call iobarb(ijderiv,klderiv)
calcint.f:         call hessian_der(bl,nbls,lnijr,lnklr,npij,ngcd,idx1,ixab)
calcint.f:      call amshift(nbls,lnij,lnkl,npij,npklx,ngcd)
calcint.f:      subroutine erintsp_1(bl,first,nbls,acc,ikbl,npij,npklx,npkl,
calcint.f:      common /primij/ iabprim, ijdim ,ijpar1
calcint.f:      common /howmany/ ntotal,noijkl,nopres,nohalf,nrimtot,nrimret
calcint.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,mmax,
calcint.f:     * nqi,nqj,nqk,nql,nsij,nskl,
calcint.f:     * nqij,nqij1,nsij1,nqkl,nqkl1,nskl1,ijbeg,klbeg
calcint.f:      common /memor1/ iisd,jjsd,ijbld
calcint.f:     * ibfij1,ibfij2,ibfkl1,ibfkl2,
calcint.f:     * ibf2l1,ibf2l2,ibf2l3,ibf2l4,ibfij3,ibfkl3,
calcint.f:     * ixij,iyij,izij, iwij,ivij,iuij,isij
calcint.f:     * ixab,ixp,ixpn,ixpp,iabnia,iapb,i1apb,ifij,icij,isab,
calcint.f:     *                 icfg,jcfg,kcfg,lcfg, igcij,igckl
calcint.f:      common /memors/ nsym,ijshp,isymm
calcint.f:        ngcij=ngci1*ngcj1
calcint.f:        call getmem(ngcij*nbls,igcij)
calcint.f:        call getmem(ngcd*nbls*lnijkl,ibut)
calcint.f:      lcij=0
calcint.f:        call gcparij(nbls, bl(idx1),npij,
calcint.f:     *               l1,l2,ngci1,ngcj1,ngcij,
calcint.f:     *               bl(igci),bl(igcj), bl(igcij) )
calcint.f:      lcij=lcij+1
calcint.f:      call precspec_1(nbls,npij,npklx,npkl, lcij,lckl,
calcint.f:     1     ijpar1,lc12, klpar1,lc34,bl(idx1),bl(idx2),
calcint.f:     *     bl(iapb),bl(icpd),bl(icij),bl(ickl),
calcint.f:     *                      lnij,lnkl,indx,ngcd,ibut)
calcint.f:     *          npij,npklx,l1,l2,l3,l4,
calcint.f:         call gcqijkl(nbls,nbls1, bl(indx), npij,npklx,
calcint.f:     *                bl(igcij),ngcij, bl(igckl),ngckl)
calcint.f:     *          ngcd,bl(indgc),bl(igcoef),lnijkl )
calcint.f:         ldb=nbls*lnijkl
calcint.f:      subroutine erinteg_2(bl,first,nbls,acc, ikbl,npij,npklx,npkl,
calcint.f:      common /primij/ iabprim, ijdim ,ijpar1
calcint.f:      common /howmany/ ntotal,noijkl,nopres,nohalf,nrimtot,nrimret
calcint.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,mmax,
calcint.f:     * nqi,nqj,nqk,nql,nsij,nskl,
calcint.f:     * nqij,nqij1,nsij1,nqkl,nqkl1,nskl1,ijbeg,klbeg
calcint.f:      common /memor1/ iisd,jjsd,ijbld
calcint.f:     * ibfij1,ibfij2,ibfkl1,ibfkl2,
calcint.f:     * ibf2l1,ibf2l2,ibf2l3,ibf2l4,ibfij3,ibfkl3,
calcint.f:     * ixij,iyij,izij, iwij,ivij,iuij,isij
calcint.f:     * ixab,ixp,ixpn,ixpp,iabnia,iapb,i1apb,ifij,icij,isab,
calcint.f:     *                 icfg,jcfg,kcfg,lcfg, igcij,igckl
calcint.f:      common /memors/ nsym,ijshp,isymm
calcint.f:      nqijr=nqij
calcint.f:         nqij=nqij-1
calcint.f:         if(nqij.le.0) nqij=1
calcint.f:         nqij=nqij-2
calcint.f:         if(nqij.le.0) nqij=1
calcint.f:        ngcij=ngci1*ngcj1
calcint.f:        call getmem(ngcij*nbls,igcijx)
calcint.f:        call getmem(ngcd*nblsx*lnij*lnkl,ibut2)
calcint.f:      lcij=0
calcint.f:      lcij=lcij+1
calcint.f:        call gcpairs(nbls,lcij,ngci1,ngcj1,ngcij,
calcint.f:     *               bl(igcij),bl(igcijx))
calcint.f:      call prec4neg_2(nbls,npij,npklx,npkl,lcij,lckl,
calcint.f:     *     bl(iapb),bl(icpd),bl(icij),bl(ickl),
calcint.f:     *                      lnij,lnkl,indx,ngcd,ibut2)
calcint.f:     1               ijpar1,lc12, klpar1,lc34,
calcint.f:     *               lcij,lckl,npij,npklx,
calcint.f:     1               ijpar1,lc12, klpar1,lc34,
calcint.f:     *               lcij,lckl,npij,npklx,
calcint.f:c ij
calcint.f:         call conv1x_2(nbls1,mmax1,npij ,lcij, bl(idx1),bl(indx),
calcint.f:                       iabnix=iabnia+(lcij-1)*mmax1
calcint.f:         call assemblx(first,nbls,nbls1,lnij,lnkl,
calcint.f:     *                 l1,l2,l3,l4,lcij,lckl,npij,npklx)
calcint.f:     *                bl(igcijx),ngcij, bl(igcklx),ngckl,
calcint.f:         call assemblg(first,nbls,nbls1,lnij,lnkl,
calcint.f:      nqij=nqijr
calcint.f:c transpose but2(ngcd, nbls*lnij*lnkl) into buf2(nbls*lnij*lnkl,ngcd)
calcint.f:        ldb=nbls*lnij*lnkl
calcint.f:      lnijr=lnij
calcint.f:c        return to the original values of nsij,nskl and mmax :
calcint.f:         ijderiv=1
calcint.f:         call iobarb(ijderiv,klderiv)
calcint.f:         call nmrderx(nbls,lnijr,lnklr,npij,npklx,ngcd,
calcint.f:c        return to the original values of nsij,nskl and mmax :
calcint.f:         ijderiv=1
calcint.f:         call iobarb(ijderiv,klderiv)
calcint.f:         call force_der(bl,nbls,lnijr,lnklr,npij,ngcd,idx1,ixab)
calcint.f:c        return to the original values of nsij,nskl and mmax :
calcint.f:         ijderiv=2
calcint.f:         call iobarb(ijderiv,klderiv)
calcint.f:         call hessian_der(bl,nbls,lnijr,lnklr,npij,ngcd,idx1,ixab)
calcint.f:      call amshift(nbls,lnij,lnkl,npij,npklx,ngcd)
calcint.f:      subroutine erintsp_2(bl,first,nbls,acc,ikbl,npij,npklx,npkl,idnsx)
calcint.f:      common /primij/ iabprim, ijdim ,ijpar1
calcint.f:      common /howmany/ ntotal,noijkl,nopres,nohalf,nrimtot,nrimret
calcint.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,mmax,
calcint.f:     * nqi,nqj,nqk,nql,nsij,nskl,
calcint.f:     * nqij,nqij1,nsij1,nqkl,nqkl1,nskl1,ijbeg,klbeg
calcint.f:      common /memor1/ iisd,jjsd,ijbld
calcint.f:     * ibfij1,ibfij2,ibfkl1,ibfkl2,
calcint.f:     * ibf2l1,ibf2l2,ibf2l3,ibf2l4,ibfij3,ibfkl3,
calcint.f:     * ixij,iyij,izij, iwij,ivij,iuij,isij
calcint.f:     * ixab,ixp,ixpn,ixpp,iabnia,iapb,i1apb,ifij,icij,isab,
calcint.f:     *                 icfg,jcfg,kcfg,lcfg, igcij,igckl
calcint.f:      common /memors/ nsym,ijshp,isymm
calcint.f:        ngcij=ngci1*ngcj1
calcint.f:        call getmem(ngcij*nbls,igcijx)
calcint.f:        call getmem(ngcd*nbls*lnijkl,ibut)
calcint.f:      lcij=0
calcint.f:      lcij=lcij+1
calcint.f:        call gcpairs(nbls,lcij,ngci1,ngcj1,ngcij,
calcint.f:     *               bl(igcij),bl(igcijx))
calcint.f:     $    nbls,          npij,          npklx,         npkl, 
calcint.f:     $    lcij,          lckl,          lc12,          lc34,
calcint.f:     $    bl(isymfac),   bl(iapb),      bl(icpd),      bl(icij),
calcint.f:     *                      lnij,lnkl,indx,ngcd,ibut)
calcint.f:     *          npij,npklx,l1,l2,l3,l4,
calcint.f:     *                bl(igcijx),ngcij, bl(igcklx),ngckl,
calcint.f:     *          ngcd,bl(indgc),bl(igcoef),lnijkl )
calcint.f:        ldb=nbls*lnijkl
calcint.f:      subroutine dtrans3(nbls,a,buf,ijlen,llen)
calcint.f:c  a(1:nbls,1:llen,1:6,1:ijlen) integrals for nbls shell-quartets
calcint.f:c  buf(1:nbls,1:llen,1:5,1:ijlen)
calcint.f:      dimension a(nbls,llen,6,ijlen),buf(nbls,llen,5,ijlen)
calcint.f:      do ij=1,ijlen
calcint.f:        buf(ibl,l,1,ij)=
calcint.f:     1      sqtw*(two*a(ibl,l,3,ij)-a(ibl,l,1,ij)-a(ibl,l,2,ij))
calcint.f:          buf(ibl,l,2,ij)=half*(a(ibl,l,1,ij)-a(ibl,l,2,ij))
calcint.f:        buf(ibl,l,3,ij)=a(ibl,l,4,ij)
calcint.f:          buf(ibl,l,4,ij)=a(ibl,l,5,ij)
calcint.f:          buf(ibl,l,5,ij)=a(ibl,l,6,ij)
calcint.f:      call tfer(buf(1,1,1,1),a(1,1,1,1),nbls*ijlen*llen*5)
calcint.f:      subroutine dtrans4(nbls,a,buf,ijklen)
calcint.f:c  a(1:nbls,1:6,1:ijklen) integrals for nbls shell-quartets
calcint.f:c  buf(1:nbls,1:5,1:ijklen)
calcint.f:      dimension a(nbls,6,ijklen),buf(nbls,5,ijklen)
calcint.f:      do ijk=1,ijklen
calcint.f:        buf(ibl,1,ijk)=sqtw*(two*a(ibl,3,ijk)-a(ibl,1,ijk)-a(ibl,2,ijk))
calcint.f:          buf(ibl,2,ijk)=half*(a(ibl,1,ijk)-a(ibl,2,ijk))
calcint.f:          buf(ibl,3,ijk)=a(ibl,4,ijk)
calcint.f:          buf(ibl,4,ijk)=a(ibl,5,ijk)
calcint.f:          buf(ibl,5,ijk)=a(ibl,6,ijk)
calcint.f:      call tfer(buf(1,1,1),a(1,1,1),nbls*ijklen*5)
calcint.f:c     ***   <ij,fl>  ***
calcint.f:      ij0=ii0+jj0
calcint.f:      ij7=ii7+jj7
calcint.f:      ind0=ij0+l
calcint.f:      ind7=ij7+l
calcint.f:c     ***   <ij,kf>  ***
calcint.f:      ij0=ii0+jj0
calcint.f:      ij7=ii7+jj7
calcint.f:      ind0=ij0+kk0
calcint.f:      ind7=ij7+kk7
calcint.f:      subroutine gtrans3(nbls,a,buf,ijlen,llen)
calcint.f:c  a(1:nbls,1:llen,1:15,1:ijlen) integrals for nbls shell-quartets
calcint.f:c  buf(1:nbls,1:llen,1:9,1:ijlen)
calcint.f:      dimension a(nbls,llen,15,ijlen),buf(nbls,llen,9,ijlen)
calcint.f:      do ij=1,ijlen
calcint.f:          buf(ibl,l,1,ij)=
calcint.f:     1    xn*(a(ibl,l,1,ij)+a(ibl,l,11,ij)-six*a(ibl,l,4,ij))
calcint.f:          buf(ibl,l,2,ij)=
calcint.f:     1    xn*(a(ibl,l,1,ij)+a(ibl,l,15,ij)-six*a(ibl,l,6,ij))
calcint.f:        buf(ibl,l,3,ij)=
calcint.f:     1      xn*(a(ibl,l,11,ij)+a(ibl,l,15,ij)-six*a(ibl,l,13,ij))
calcint.f:          buf(ibl,l,4,ij)=yn*(a(ibl,l,2,ij)-three*a(ibl,l,9,ij))
calcint.f:          buf(ibl,l,5,ij)=yn*(a(ibl,l,7,ij)-three*a(ibl,l,9,ij))
calcint.f:          buf(ibl,l,6,ij)=yn*(a(ibl,l,3,ij)-three*a(ibl,l,8,ij))
calcint.f:          buf(ibl,l,7,ij)=yn*(a(ibl,l,10,ij)-three*a(ibl,l,8,ij))
calcint.f:          buf(ibl,l,8,ij)=yn*(a(ibl,l,12,ij)-three*a(ibl,l,5,ij))
calcint.f:          buf(ibl,l,9,ij)=yn*(a(ibl,l,14,ij)-three*a(ibl,l,5,ij))
calcint.f:      call tfer(buf(1,1,1,1),a(1,1,1,1),nbls*ijlen*llen*9)
calcint.f:      subroutine gtrans4(nbls,a,buf,ijklen)
calcint.f:c  a(1:nbls,1:15,1:ijklen) integrals for nbls shell-quartets
calcint.f:c  buf(1:nbls,1:9,1:ijklen)
calcint.f:      dimension a(nbls,15,ijklen),buf(nbls,9,ijklen)
calcint.f:      do ijk=1,ijklen
calcint.f:          buf(ibl,1,ijk)=
calcint.f:     1    xn*(a(ibl,1,ijk)+a(ibl,11,ijk)-six*a(ibl,4,ijk))
calcint.f:          buf(ibl,2,ijk)=
calcint.f:     1    xn*(a(ibl,1,ijk)+a(ibl,15,ijk)-six*a(ibl,6,ijk))
calcint.f:          buf(ibl,3,ijk)=
calcint.f:     1    xn*(a(ibl,11,ijk)+a(ibl,15,ijk)-six*a(ibl,13,ijk))
calcint.f:          buf(ibl,4,ijk)=yn*(a(ibl,2,ijk)-three*a(ibl,9,ijk))
calcint.f:          buf(ibl,5,ijk)=yn*(a(ibl,7,ijk)-three*a(ibl,9,ijk))
calcint.f:          buf(ibl,6,ijk)=yn*(a(ibl,3,ijk)-three*a(ibl,8,ijk))
calcint.f:          buf(ibl,7,ijk)=yn*(a(ibl,10,ijk)-three*a(ibl,8,ijk))
calcint.f:          buf(ibl,8,ijk)=yn*(a(ibl,12,ijk)-three*a(ibl,5,ijk))
calcint.f:          buf(ibl,9,ijk)=yn*(a(ibl,14,ijk)-three*a(ibl,5,ijk))
calcint.f:      call tfer(buf(1,1,1),a(1,1,1),nbls*ijklen*9)
calcint.f:      subroutine htrans3(nbls,a,buf,ijlen,llen)
calcint.f:c  a(1:nbls,1:llen,1:21,1:ijlen) integrals for nbls shell-quartets
calcint.f:c  buf(1:nbls,1:llen,1:11,1:ijlen)
calcint.f:      dimension a(nbls,llen,21,ijlen),buf(nbls,llen,11,ijlen)
calcint.f:      do ij=1,ijlen
calcint.f:          buf(ibl,l,1,ij)=
calcint.f:     1    xn*(a(ibl,l,1,ij)-ten*a(ibl,l,4,ij)+five*a(ibl,l,11,ij))
calcint.f:          buf(ibl,l,2,ij)=
calcint.f:     1    xn*(a(ibl,l,1,ij)-ten*a(ibl,l,6,ij)+five*a(ibl,l,15,ij))
calcint.f:        buf(ibl,l,3,ij)=
calcint.f:     1    xn*(a(ibl,l,16,ij)-ten*a(ibl,l,7,ij)+five*a(ibl,l,2,ij))
calcint.f:          buf(ibl,l,4,ij)=
calcint.f:     1    xn*(a(ibl,l,16,ij)-ten*a(ibl,l,18,ij)+five*a(ibl,l,20,ij))
calcint.f:          buf(ibl,l,5,ij)=
calcint.f:     1      xn*(a(ibl,l,21,ij)-ten*a(ibl,l,10,ij)+five*a(ibl,l,3,ij))
calcint.f:          buf(ibl,l,6,ij)=
calcint.f:     1    xn*(a(ibl,l,21,ij)-ten*a(ibl,l,19,ij)+five*a(ibl,l,17,ij))
calcint.f:          buf(ibl,l,7,ij)=
calcint.f:     1    yn*(a(ibl,l,3,ij)+a(ibl,l,17,ij)-six*a(ibl,l,8,ij))
calcint.f:          buf(ibl,l,8,ij)=
calcint.f:     1    yn*(a(ibl,l,2,ij)+a(ibl,l,20,ij)-six*a(ibl,l,9,ij))
calcint.f:          buf(ibl,l,9,ij)=
calcint.f:     1    yn*(a(ibl,l,11,ij)+a(ibl,l,15,ij)-six*a(ibl,l,13,ij))
calcint.f:          buf(ibl,l,10,ij)=
calcint.f:     1    zn*(a(ibl,l,5,ij)-a(ibl,l,12,ij))
calcint.f:          buf(ibl,l,11,ij)=
calcint.f:     1    sn*(a(ibl,l,5,ij)-two*a(ibl,l,14,ij)+a(ibl,l,12,ij))
calcint.f:      call tfer(buf(1,1,1,1),a(1,1,1,1),nbls*ijlen*llen*11)
calcint.f:      subroutine htrans4(nbls,a,buf,ijklen)
calcint.f:c  a(1:nbls,1:21,1:ijklen) integrals for nbls shell-quartets
calcint.f:c  buf(1:nbls,1:11,1:ijklen)
calcint.f:      dimension a(nbls,21,ijklen),buf(nbls,11,ijklen)
calcint.f:      do ijk=1,ijklen
calcint.f:          buf(ibl,1,ijk)=
calcint.f:     1    xn*(a(ibl,1,ijk)-ten*a(ibl,4,ijk)+five*a(ibl,11,ijk))
calcint.f:          buf(ibl,2,ijk)=
calcint.f:     1    xn*(a(ibl,1,ijk)-ten*a(ibl,6,ijk)+five*a(ibl,15,ijk))
calcint.f:          buf(ibl,3,ijk)=
calcint.f:     1    xn*(a(ibl,16,ijk)-ten*a(ibl,7,ijk)+five*a(ibl,2,ijk))
calcint.f:          buf(ibl,4,ijk)=
calcint.f:     1    xn*(a(ibl,16,ijk)-ten*a(ibl,18,ijk)+five*a(ibl,20,ijk))
calcint.f:          buf(ibl,5,ijk)=
calcint.f:     1    xn*(a(ibl,21,ijk)-ten*a(ibl,10,ijk)+five*a(ibl,3,ijk))
calcint.f:          buf(ibl,6,ijk)=
calcint.f:     1    xn*(a(ibl,21,ijk)-ten*a(ibl,19,ijk)+five*a(ibl,17,ijk))
calcint.f:          buf(ibl,7,ijk)=
calcint.f:     1    yn*(a(ibl,3,ijk)+a(ibl,17,ijk)-six*a(ibl,8,ijk))
calcint.f:          buf(ibl,8,ijk)=
calcint.f:     1    yn*(a(ibl,2,ijk)+a(ibl,20,ijk)-six*a(ibl,9,ijk))
calcint.f:          buf(ibl,9,ijk)=
calcint.f:     1    yn*(a(ibl,11,ijk)+a(ibl,15,ijk)-six*a(ibl,13,ijk))
calcint.f:          buf(ibl,10,ijk)=
calcint.f:     1    zn*(a(ibl,5,ijk)-a(ibl,12,ijk))
calcint.f:          buf(ibl,11,ijk)=
calcint.f:     1    sn*(a(ibl,5,ijk)-two*a(ibl,14,ijk)+a(ibl,12,ijk))
calcint.f:      call tfer(buf(1,1,1),a(1,1,1),nbls*ijklen*11)
calcint.f:      subroutine conv1x_1(nbls1,mmax1,npij,lcij, idx1,indx,
calcint.f:      dimension xpn(npij,3,*)
calcint.f:      dimension abnia(npij,mmax1,*)
calcint.f:      ijkl=indx(i)
calcint.f:      ijpar=idx1(ijkl)
calcint.f:        xpnx(i,1)=xpn(ijpar,1,lcij)
calcint.f:        xpnx(i,2)=xpn(ijpar,2,lcij)
calcint.f:        xpnx(i,3)=xpn(ijpar,3,lcij)
calcint.f:      ijkl=indx(i)
calcint.f:      ijpar=idx1(ijkl)
calcint.f:        abnix(i,m)=abnia(ijpar,m,lcij)
calcint.f:      subroutine conv1x_2(nbls1,mmax1,npij,lcij, idx1,indx,
calcint.f:      dimension xpn(npij,3,*)
calcint.f:      ijkl=indx(i)
calcint.f:      ijpar=idx1(ijkl)
calcint.f:        xpnx(i,1)=xpn(ijpar,1,lcij)
calcint.f:        xpnx(i,2)=xpn(ijpar,2,lcij)
calcint.f:        xpnx(i,3)=xpn(ijpar,3,lcij)
calcint.f:         ijkl=indx(i)
calcint.f:         klpar=idx2(ijkl)
calcint.f:      subroutine conv1der(nbls1,npij,lci,idx1,indx, aa, aax)
calcint.f:      dimension aa(npij,*)
calcint.f:      ijkl=indx(i)
calcint.f:      ijpar=idx1(ijkl)
calcint.f:        aax(i)=aa(ijpar,lci)*2.0d0
calcint.f:      subroutine gcpairs(nbls,lcij,ngci1,ngcj1,ngcij, gcij, gcijx)
calcint.f:      dimension gcij(ngci1,ngcj1,*)
calcint.f:      dimension gcijx(ngcij,nbls)
calcint.f:      do ijkl=1,nbls
calcint.f:         ijpg=0
calcint.f:               ijpg=ijpg+1
calcint.f:               gcijx(ijpg,ijkl)=gcij(igc,jgc,lcij)
calcint.f:     *                   gcij,ngcij,  gckl,ngckl,
calcint.f:      dimension gcoef(ngcd,nbls), gcij(ngcij,nbls),gckl(ngckl,nbls)
calcint.f:      ijpg=ngci1*ngcj1
calcint.f:         ijkl=index(i)
calcint.f:         ijklg=0
calcint.f:         do ijp1=1,ijpg
calcint.f:            gcoefij=gcij(ijp1,ijkl)
calcint.f:               ijklg=ijklg+1
calcint.f:               gcoef(ijklg,ijkl)=gcoefij*gckl(klp1,ijkl)
calcint.f:         indgc(ijkl)=ijklg
calcint.f:      subroutine gcparij(nbls, indxij,npij,
calcint.f:     *                   ii,jj,ngci1,ngcj1,ngcij,
calcint.f:     *                   gci,gcj,gcij)
calcint.f:      dimension indxij(*)
calcint.f:      dimension gci(npij,ngci1,*),gcj(npij,ngcj1,*)
calcint.f:      dimension gcij(ngcij,nbls)
calcint.f:      do 204 ijkl=1,nbls
calcint.f:      ijpar=indxij(ijkl)
calcint.f:             ijpg=0
calcint.f:             coefi=gci(ijpar,igc,ii)
calcint.f:             coefj=gcj(ijpar,jgc,jj)*coefi
calcint.f:             ijpg=ijpg+1
calcint.f:             gcij(ijpg,ijkl)=coefj
calcint.f:      do 204 ijkl=1,nbls
calcint.f:      klpar=indxkl(ijkl)
calcint.f:             gckl(klpg,ijkl)=coefl
calcint.f:      subroutine gcqijkl(nbls,nbls1, index,npij,npkl,
calcint.f:     *                   gcij,ngcij, gckl,ngckl)
calcint.f:      dimension gcij(ngcij,nbls),gckl(ngckl,nbls)
calcint.f:      ijpg=ngci1*ngcj1
calcint.f:         ijkl=index(i)
calcint.f:         ijklg=0
calcint.f:         do 2043 ijp1=1,ijpg
calcint.f:             gcoefij=gcij(ijp1,ijkl)
calcint.f:             ijklg=ijklg+1
calcint.f:             gcoef(ijklg,ijkl)=gcoefij*gckl(klp1,ijkl)
calcint.f:         indgc(ijkl)=ijklg
calcint.f:      subroutine symm_jump(isymm,npij,npklx,npkl,jump)
calcint.f:      logical jump(npij)
calcint.f:         do ijpar=1,npij
calcint.f:            jump(ijpar)=.false.
calcint.f:      ijkl=0
calcint.f:      do ijpar=1,npij
calcint.f:         if(npkl.eq.0) npklend=ijpar
calcint.f:         jump(ijpar)=.true.
calcint.f:            ijkl=ijkl+1
calcint.f:            if(isymm(ijkl).gt.0) then
calcint.f:               jump(ijpar)=.false.
calcint.f:               ijkl=ijkl+(npklend-klpar)
calcint.f:      subroutine symm_fact(isymm,npij,npkl,ndiag,rnsym,symfac)
calcint.f:         ndim=npij*(npij+1)/2
calcint.f:         ndim=npij*npkl
calcint.f:         do ijkl=1,ndim
calcint.f:            ijklsm=isymm(ijkl)
calcint.f:            if(ijklsm.gt.0) symfac(ijkl)=1.d0
calcint.f:         do ijkl=1,ndim
calcint.f:            ijklsm=isymm(ijkl)
calcint.f:            if(ijklsm.gt.0) symfac(ijkl)=rnsym*dble(ijklsm)
calcint.f:      subroutine schw_quarts(iis,jjs,ibl,ijbl,nbl2,nijbeg,nijend,
calcint.f:      dimension iis(*),jjs(*),ijbl(nbl2,*)
calcint.f:      ijkl=0
calcint.f:      do ijp=nijbeg,nijend
calcint.f:        ijcs=ijbl(ibl,ijp)
calcint.f:        ics=iis(ijcs)
calcint.f:        jcs=jjs(ijcs)
calcint.f:           do klp=nijbeg,ijp
calcint.f:              klcs=ijbl(kbl,klp)
calcint.f:              ijkl=ijkl+1
calcint.f:ccccccc          ipres(ijkl)=0
calcint.f:                 ipres(ijkl)=0
calcint.f:      do ijkl=1,nbls
calcint.f:         densmax(ijkl)=xmil
calcint.f:      subroutine set_boamax1(aa,bb,npij,l1,l2,boa_max)
calcint.f:      dimension aa(npij,*),bb(npij,*)  ! contraction length
calcint.f:      do ijpar=1,npij
calcint.f:         a_exp=aa(ijpar,l1)
calcint.f:         b_exp=bb(ijpar,l2)
calcint.f:      subroutine smblock_neg(schwarz,ncs, ijcs1,klcs1,skip_sb)
calcint.f:      call get_ij_half(ijcs1, ics, jcs)
calcint.f:      call get_ij_half(klcs1, kcs, lcs)
calcint.f:      x_ij_ij_max=schwarz(ics,jcs)
calcint.f:      call setrval('x_ij_ij',x_ij_ij_max)
calcint.f:      estim_max=dens_max_el * x_ij_ij_max * x_kl_kl_max
calcint_new.f:      common /memor1/ iisd,jjsd,ijbld
calcint_new.f:        call blockint1_n(bl,nbl2,inx,bl(iisd),bl(jjsd),bl(ijbld),
calcint_new.f:      subroutine blockint1_n(bl,nbl2,inx,iis,jjs,ijbl,
calcint_new.f:      common /howmany/ ntotal,noijkl,nopres,nohalf,nrimtot,nrimret
calcint_new.f:      dimension bl(*), inx(12,*),iis(*),jjs(*), ijbl(nbl2,*)
calcint_new.f:       call prec2ij_new(ibl_r,bl)
calcint_new.f:     *               nbl2, iis,jjs,ijbl,where,
calcint_new.f:c release memory reserved in prec2ij WHEN a given super-block is done
calcint_new.f:     *                     nbl2, iis,jjs,ijbl,where,
calcint_new.f:      common /ijcsfl/ ijblokp,ijprevf,ijprevl,ijtprev,maxprev,ngcprev
calcint_new.f:      common /memor2/ nqrtd, nibld,nkbld, nijbd,nijed, nklbd,nkled
calcint_new.f:      dimension bl(*), inx(12,*),iis(*),jjs(*), ijbl(nbl2,*)
calcint_new.f:      call getival('ijblx',ijblx)
calcint_new.f:c     call getival('mapijblx',map_ij_bl2)
calcint_new.f:c     call getival('blocksij',nbl2_ij)
calcint_new.f:      call getival('blpredij',nbl2_ijd)
calcint_new.f:      call getival('ijbly',ijbly)
calcint_new.f:c     call getival('mapijbly',map_kl_bl2)
calcint_new.f:      ijblokp=0
calcint_new.f:      ijprevf=0
calcint_new.f:      ijprevl=0
calcint_new.f:      ijtprev=0
calcint_new.f:     *                   bl(nijbd),bl(nijed),bl(nklbd),bl(nkled),
calcint_new.f:     *                   iis,jjs,ijbl,nbl2,inx,
calcint_new.f:     *                   bl(ijblx),nbl2_ijd,bl(inx_1),bl(inx_2),
calcint_new.f:     *                   bl(ijbly),nbl2_kld,bl(inx_3),bl(inx_4),
calcint_new.f:     *                      nibl,nkbl,nijb,nije,nklb,nkle,
calcint_new.f:     *                      iis,jjs,ijbl,nbl2,inx,
calcint_new.f:     *                      ijbl_12 ,nbl2_ijd,   inx_1,   inx_2,
calcint_new.f:     *                      ijbl_34 ,nbl2_kld,   inx_3,   inx_4,
calcint_new.f:      common /howmany/ ntotal,noijkl,nopres,nohalf,nrimtot,nrimret
calcint_new.f:      common /contr/ ngci,ngcj,ngck,ngcl,lci,lcj,lck,lcl,lcij,lckl
calcint_new.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,mmax,
calcint_new.f:     * nqi,nqj,nqk,nql,nsij,nskl,
calcint_new.f:     * nqij,nqij1,nsij1,nqkl,nqkl1,nskl1,ijbeg,klbeg
calcint_new.f:      common/shell/lshellt,lshelij,lshelkl,lhelp,lcas2(4),lcas3(4)
calcint_new.f:     * ibfij1,ibfij2,ibfkl1,ibfkl2,
calcint_new.f:     * ibf2l1,ibf2l2,ibf2l3,ibf2l4,ibfij3,ibfkl3,
calcint_new.f:     * ixij,iyij,izij, iwij,ivij,iuij,isij
calcint_new.f:     * ixab,ixp,ixpn,ixpp,iabnia,iapb,i1apb,ifij,icij,isab,
calcint_new.f:     *                 icfg,jcfg,kcfg,lcfg, igcij,igckl
calcint_new.f:      common /memors/ nsym,ijshp,isymm
calcint_new.f:      dimension inx(12,*),iis(*),jjs(*), ijbl(nbl2,*)
calcint_new.f:      dimension nibl(*),nkbl(*),nijb(*),nije(*),nklb(*),nkle(*)
calcint_new.f:      dimension ijbl_12(nbl2_ijd,*),inx_1(12,*),inx_2(12,*)
calcint_new.f:      dimension ijbl_34(nbl2_kld,*),inx_3(12,*),inx_4(12,*)
calcint_new.f:c  number of ij and kl pairs (npij,npkl)
calcint_new.f:      nijbeg=nijb(ikbl)
calcint_new.f:      nijend=nije(ikbl)
calcint_new.f:      npij=nijend-nijbeg+1
calcint_new.f:c     ijcs1=nblok1(1,1)
calcint_new.f:      ijcs1=ijbl_12(ibl,nijbeg)
calcint_new.f:      klcs1=ijbl_34(kbl,nklbeg)
calcint_new.f:c     ijcs1=ijbl(ibl,nijbeg)
calcint_new.f:c     klcs1=ijbl(kbl,nklbeg)
calcint_new.f:      call shells(inx,iis,jjs,ijcs1,klcs1)
calcint_new.f:      if(npkl.eq.0) npklx=npij
calcint_new.f:         call memo5a_1(npij ,mmax1)
calcint_new.f:         call memo5c_1(nbls,mmax1,npij,npklx,nfha,nfumax)
calcint_new.f:         call memo5a_2(npij ,mmax1)
calcint_new.f:         call memo5c_2(nbls,mmax1,npij,npklx,nfumax)
calcint_new.f:     *                       ibl,nijbeg,nijend,npij,
calcint_new.f:     *                       ibl,nijbeg,nijend,npij,
calcint_new.f:         call memo6(npij,npklx)        !   2 calls of getmem
calcint_new.f:         call getmem(npij ,ijcent)
calcint_new.f:         call precal2d(bl(inuc),iis,jjs,inx, npij,npklx,npkl,
calcint_new.f:     *           ibl,kbl,ijbl,nbl2,nijbeg,nijend,nklbeg,nklend,
calcint_new.f:     *           bl(isymm),bl(ijcent),bl(klcent) )
calcint_new.f:            call getmem(npij ,ijcent)
calcint_new.f:            call onecentX(inx_1,inx_2,npij,
calcint_new.f:     *              ijbl_12,nbl2_ijd,ijbl_34,nbl2_kld,
calcint_new.f:     *              nijbeg,nijend,nklbeg,nklend,
calcint_new.f:     *              bl(isymm),bl(ijcent),bl(klcent) )
calcint_new.f:         call schw_quarts(iis,jjs,ibl,ijbl,nbl2,nijbeg,nijend,
calcint_new.f:c isym(ijkl)=0 or 1 , 0 means that ijkl quartet is neglected.
calcint_new.f:     *                     ibl,ijbl_12,nbl2_ijd,nijbeg,npij,
calcint_new.f:     *                     kbl,ijbl_34,nbl2_kld,nklbeg,npklx,npkl,
calcint_new.f:              call onesym(ibl,kbl,ijbl,nbl2,nijbeg,nijend,nklbeg,nklend,
calcint_new.f:     *                     bl(ijshp),nsym,bl(isymm),nblsym )
calcint_new.f:               noijkl=noijkl+nblsym
calcint_new.f:               noijkl=noijkl+nbls
calcint_new.f:c   and constructe indx(ijkl)=ijklp for use in prec4neg & precspc
calcint_new.f:      call indexp(npij,npklx,npkl,nijbeg,nijend, nklbeg,nklend,
calcint_new.f:      call getmem(lcij,iesti2ij)
calcint_new.f:      call setival('esti2ij',iesti2ij)
calcint_new.f:     *                  npij ,lcij,bl(ieab),bl(iesti2ij),
calcint_new.f:c     call setival('esti2ij',iesti2ij)
calcint_new.f:c find cases when for a given ijpair all klpairs
calcint_new.f:         call getint(npij,jump)
calcint_new.f:         call symm_jump(bl(isymm),npij,npklx,npkl,bl(jump))
calcint_new.f:         call getmem(npij*npklx,isymfac)
calcint_new.f:         call symm_fact(bl(isymm),npij,npklx,npkl,rnsym,bl(isymfac))
calcint_new.f:c jum(ijpar) and symfac(ijkl) will be used in prec4neg & precspec .
calcint_new.f:c        allocate memory for list_ij, list_kl (pairs reordering)
calcint_new.f:         call getint(npij ,list_ij)
calcint_new.f:         call setival('list_ij',list_ij)
calcint_new.f:     *           bl,first,nbls,acc,ikbl,npij,npklx,npkl,idnsx)
calcint_new.f:     *           bl,first,nbls,acc,ikbl,npij,npklx,npkl,idnsx)
calcint_new.f:         call retmem(2)   ! release mem. allocated for list_ij,list_kl
calcint_new.f:      if(nsij.ge.nskl) then
calcint_new.f:         if(lshelij.gt.0) lobsa=1
calcint_new.f:         immax=nsij-2
calcint_new.f:c        allocate memory for list_ij, list_kl (pairs reordering)
calcint_new.f:         call getint(npij ,list_ij)
calcint_new.f:         call setival('list_ij',list_ij)
calcint_new.f:         call erinteg_1_n(bl,first,nbls,acc, ikbl,npij,npklx,npkl,
calcint_new.f:         call erinteg_2_n(bl,first,nbls,acc, ikbl,npij,npklx,npkl,
calcint_new.f:         call retmem(2)   ! release mem. allocated for list_ij,list_kl
calcint_new.f:           nbuf=ibuf+ngcd*nbls*lnijkl
calcint_new.f:         incrt=mnbls*lnijkl
calcint_new.f:           nbuf=ibuf+9*ngcd*nbls*lnijkl
calcint_new.f:           incrt=mnbls*lnijkl
calcint_new.f:c (2) if(whwre.eq.'shif'                 in bl(ibuf+nbls*lnijkl*ngcd)
calcint_new.f:        call destret_new(ibl,ijbl_12,nbl2_ijd,inx_1,inx_2,
calcint_new.f:     *                   kbl,ijbl_34,nbl2_kld,inx_3,inx_4,
calcint_new.f:     *                   nijbeg,nijend,nklbeg,nklend,
calcint_new.f:        if(where.eq.'shif') ibuffx=ibuf+nbls*lnijkl*ngcd
calcint_new.f:        nintex=lnijkl
calcint_new.f:      subroutine destret_new(ibl,ijbl_12,nbl2_ijd, inx_1,inx_2,
calcint_new.f:     *                       kbl,ijbl_34,nbl2_kld, inx_3,inx_4,
calcint_new.f:     *                       nijbeg,nijend,nklbeg,nklend,
calcint_new.f:      dimension ijbl_12(nbl2_ijd,*),inx_1(12,*),inx_2(12,*)
calcint_new.f:      dimension ijbl_34(nbl2_kld,*),inx_3(12,*),inx_4(12,*)
calcint_new.f:      ijkl =0
calcint_new.f:      do 100 ijp=nijbeg,nijend
calcint_new.f:         ijcs=ijbl_12(ibl,ijp)
calcint_new.f:         if(nklend.eq.0) nklendx=ijp
calcint_new.f:            klcs=ijbl_34(kbl,klp)
calcint_new.f:            ijkl=ijkl+1
calcint_new.f:            if(ipres(ijkl).eq.0) go to 100
calcint_new.f:            ijklp=indxr(ijkl)
calcint_new.f:            ics=iis(ijcs)               ! contracted shell ICS
calcint_new.f:            jcs=jjs(ijcs)               !     -"-          JCS
calcint_new.f:            lgenct(ijklp)=ngcq
calcint_new.f:               labels(1,iqu,ijklp)=icff
calcint_new.f:               labels(2,iqu,ijklp)=jcff
calcint_new.f:               labels(3,iqu,ijklp)=kcff
calcint_new.f:               labels(4,iqu,ijklp)=lcff
calcint_new.f:      common /contr/ ngci,ngcj,ngck,ngcl,lci,lcj,lck,lcl,lcij,lckl
calcint_new.f:             ijpg=0
calcint_new.f:                  ijpg=ijpg+1
calcint_new.f:                  iix(ijpg)=icf
calcint_new.f:                  jjx(ijpg)=jcf
calcint_new.f:             ijklg=0
calcint_new.f:             do 2045 ijp1=1,ijpg
calcint_new.f:                ijklg=ijklg+1
calcint_new.f:                icfg(ijklg)=iix(ijp1)
calcint_new.f:                jcfg(ijklg)=jjx(ijp1)
calcint_new.f:                kcfg(ijklg)=kkx(klp1)
calcint_new.f:                lcfg(ijklg)=llx(klp1)
calcint_new.f:      ngcq=ijklg
calcint_new.f:      subroutine erinteg_2_n(bl,first,nbls,acc, ikbl,npij,npklx,npkl,
calcint_new.f:      common /primij/ iabprim, ijdim ,ijpar1
calcint_new.f:      common /howmany/ ntotal,noijkl,nopres,nohalf,nrimtot,nrimret
calcint_new.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,mmax,
calcint_new.f:     * nqi,nqj,nqk,nql,nsij,nskl,
calcint_new.f:     * nqij,nqij1,nsij1,nqkl,nqkl1,nskl1,ijbeg,klbeg
calcint_new.f:     * ibfij1,ibfij2,ibfkl1,ibfkl2,
calcint_new.f:     * ibf2l1,ibf2l2,ibf2l3,ibf2l4,ibfij3,ibfkl3,
calcint_new.f:     * ixij,iyij,izij, iwij,ivij,iuij,isij
calcint_new.f:     * ixab,ixp,ixpn,ixpp,iabnia,iapb,i1apb,ifij,icij,isab,
calcint_new.f:     *                 icfg,jcfg,kcfg,lcfg, igcij,igckl
calcint_new.f:      common /memors/ nsym,ijshp,isymm
calcint_new.f:      call getival('esti2ij',iesti2ij)
calcint_new.f:      call getival('list_ij',list_ij)
calcint_new.f:      nqijr=nqij
calcint_new.f:         nqij=nqij-1
calcint_new.f:         if(nqij.le.0) nqij=1
calcint_new.f:         nqij=nqij-2
calcint_new.f:         if(nqij.le.0) nqij=1
calcint_new.f:        ngcij=ngci1*ngcj1
calcint_new.f:        call getmem(ngcij*nbls,igcijx)
calcint_new.f:        call getmem(ngcd*nblsx*lnij*lnkl,ibut2)
calcint_new.f:      lcij=0
calcint_new.f:      lcij=lcij+1
calcint_new.f:        call gcpairs(nbls,lcij,ngci1,ngcj1,ngcij,
calcint_new.f:     *               bl(igcij),bl(igcijx))
calcint_new.f:c     call neg_primitive(bl,nbls,npij,npklx,npkl,lcij,lckl,lc12,lc34,
calcint_new.f:c    *    bl(iapb),bl(icpd),bl(ieab),bl(iecd),bl(iesti2ij),bl(iesti2kl),
calcint_new.f:c    *    bl(list_ij),bl(list_kl),nbls1)
calcint_new.f:      call prec4neg_2_n(nbls,npij,npklx,npkl,lcij,lckl,
calcint_new.f:     *     bl(ieab),bl(iecd),bl(idnsx),bl(iesti2ij),bl(iesti2kl),
calcint_new.f:     *     bl(list_ij),bl(list_kl),
calcint_new.f:     *     bl(iapb),bl(icpd),bl(icij),bl(ickl),
calcint_new.f:     *                      lnij,lnkl,indx,ngcd,ibut2)
calcint_new.f:     1               ijpar1,lc12, klpar1,lc34,
calcint_new.f:     *               lcij,lckl,npij,npklx,
calcint_new.f:     1               ijpar1,lc12, klpar1,lc34,
calcint_new.f:     *               lcij,lckl,npij,npklx,
calcint_new.f:c ij
calcint_new.f:         call conv1x_2(nbls1,mmax1,npij ,lcij, bl(idx1),bl(indx),
calcint_new.f:                       iabnix=iabnia+(lcij-1)*mmax1
calcint_new.f:         call assemblx(first,nbls,nbls1,lnij,lnkl,
calcint_new.f:     *                 l1,l2,l3,l4,lcij,lckl,npij,npklx)
calcint_new.f:     *                bl(igcijx),ngcij, bl(igcklx),ngckl,
calcint_new.f:         call assemblg(first,nbls,nbls1,lnij,lnkl,
calcint_new.f:      nqij=nqijr
calcint_new.f:c transpose but2(ngcd, nbls*lnij*lnkl) into buf2(nbls*lnij*lnkl,ngcd)
calcint_new.f:        ldb=nbls*lnij*lnkl
calcint_new.f:      lnijr=lnij
calcint_new.f:c        return to the original values of nsij,nskl and mmax :
calcint_new.f:         ijderiv=1
calcint_new.f:         call iobarb(ijderiv,klderiv)
calcint_new.f:         call nmrderx(nbls,lnijr,lnklr,npij,npklx,ngcd,
calcint_new.f:c        return to the original values of nsij,nskl and mmax :
calcint_new.f:         ijderiv=1
calcint_new.f:         call iobarb(ijderiv,klderiv)
calcint_new.f:         call force_der(bl,nbls,lnijr,lnklr,npij,ngcd,idx1,ixab)
calcint_new.f:c        return to the original values of nsij,nskl and mmax :
calcint_new.f:         ijderiv=2
calcint_new.f:         call iobarb(ijderiv,klderiv)
calcint_new.f:         call hessian_der(bl,nbls,lnijr,lnklr,npij,ngcd,idx1,ixab)
calcint_new.f:      call amshift(nbls,lnij,lnkl,npij,npklx,ngcd)
calcint_new.f:      subroutine erintsp_2_n(bl,first,nbls,acc,ikbl,npij,npklx,npkl,
calcint_new.f:      common /primij/ iabprim, ijdim ,ijpar1
calcint_new.f:      common /howmany/ ntotal,noijkl,nopres,nohalf,nrimtot,nrimret
calcint_new.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,mmax,
calcint_new.f:     * nqi,nqj,nqk,nql,nsij,nskl,
calcint_new.f:     * nqij,nqij1,nsij1,nqkl,nqkl1,nskl1,ijbeg,klbeg
calcint_new.f:     * ibfij1,ibfij2,ibfkl1,ibfkl2,
calcint_new.f:     * ibf2l1,ibf2l2,ibf2l3,ibf2l4,ibfij3,ibfkl3,
calcint_new.f:     * ixij,iyij,izij, iwij,ivij,iuij,isij
calcint_new.f:     * ixab,ixp,ixpn,ixpp,iabnia,iapb,i1apb,ifij,icij,isab,
calcint_new.f:     *                 icfg,jcfg,kcfg,lcfg, igcij,igckl
calcint_new.f:      common /memors/ nsym,ijshp,isymm
calcint_new.f:      call getival('esti2ij',iesti2ij)
calcint_new.f:      call getival('list_ij',list_ij)
calcint_new.f:        ngcij=ngci1*ngcj1
calcint_new.f:        call getmem(ngcij*nbls,igcijx)
calcint_new.f:        call getmem(ngcd*nbls*lnijkl,ibut)
calcint_new.f:      lcij=0
calcint_new.f:      lcij=lcij+1
calcint_new.f:        call gcpairs(nbls,lcij,ngci1,ngcj1,ngcij,
calcint_new.f:     *               bl(igcij),bl(igcijx))
calcint_new.f:c     call neg_primitive(bl,nbls,npij,npklx,npkl,lcij,lckl,lc12,lc34,
calcint_new.f:c    *    bl(iapb),bl(icpd),bl(ieab),bl(iecd),bl(iesti2ij),bl(iesti2kl),
calcint_new.f:c    *    bl(list_ij),bl(list_kl),nbls1)
calcint_new.f:      call precspec_2_n(nbls,npij,npklx,npkl, lcij,lckl,
calcint_new.f:     *     bl(ieab),bl(iecd),bl(idnsx),bl(iesti2ij),bl(iesti2kl),
calcint_new.f:     *     bl(list_ij),bl(list_kl),
calcint_new.f:     *     bl(iapb),bl(icpd),bl(icij),bl(ickl),
calcint_new.f:     *                      lnij,lnkl,indx,ngcd,ibut)
calcint_new.f:     *          npij,npklx,l1,l2,l3,l4,
calcint_new.f:     *                bl(igcijx),ngcij, bl(igcklx),ngckl,
calcint_new.f:     *          ngcd,bl(indgc),bl(igcoef),lnijkl )
calcint_new.f:        ldb=nbls*lnijkl
calcint_new.f:      subroutine erinteg_1_n(bl,first,nbls,acc, ikbl,npij,npklx,npkl,
calcint_new.f:      common /primij/ iabprim, ijdim ,ijpar1
calcint_new.f:      common /howmany/ ntotal,noijkl,nopres,nohalf,nrimtot,nrimret
calcint_new.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,mmax,
calcint_new.f:     * nqi,nqj,nqk,nql,nsij,nskl,
calcint_new.f:     * nqij,nqij1,nsij1,nqkl,nqkl1,nskl1,ijbeg,klbeg
calcint_new.f:     * ibfij1,ibfij2,ibfkl1,ibfkl2,
calcint_new.f:     * ibf2l1,ibf2l2,ibf2l3,ibf2l4,ibfij3,ibfkl3,
calcint_new.f:     * ixij,iyij,izij, iwij,ivij,iuij,isij
calcint_new.f:     * ixab,ixp,ixpn,ixpp,iabnia,iapb,i1apb,ifij,icij,isab,
calcint_new.f:     *                 icfg,jcfg,kcfg,lcfg, igcij,igckl
calcint_new.f:      common /memors/ nsym,ijshp,isymm
calcint_new.f:      nqijr=nqij
calcint_new.f:         nqij=nqij-1
calcint_new.f:         if(nqij.le.0) nqij=1
calcint_new.f:         nqij=nqij-2
calcint_new.f:         if(nqij.le.0) nqij=1
calcint_new.f:        ngcij=ngci1*ngcj1
calcint_new.f:        call getmem(ngcij*nbls,igcij)
calcint_new.f:        call getmem(ngcd*nblsx*lnij*lnkl,ibut2)
calcint_new.f:      lcij=0
calcint_new.f:         call set_boamax1(bl(iaa),bl(ibb),npij,l1,l2,boa_max)
calcint_new.f:        call gcparij(nbls, bl(idx1),npij,
calcint_new.f:     *               l1,l2,ngci1,ngcj1,ngcij,
calcint_new.f:     *               bl(igci),bl(igcj), bl(igcij))
calcint_new.f:      lcij=lcij+1
calcint_new.f:      call prec4neg_1_n(nbls,npij,npklx,npkl,lcij,lckl,
calcint_new.f:     1     ijpar1,lc12, klpar1,lc34, bl(idx1),bl(idx2),
calcint_new.f:     *     bl(iapb),bl(icpd),bl(icij),bl(ickl),
calcint_new.f:     *                      lnij,lnkl,indx,ngcd,ibut2)
calcint_new.f:     1                ijpar1,lc12, klpar1,lc34,
calcint_new.f:     *                lcij,lckl,npij,npklx,
calcint_new.f:     1                ijpar1,lc12, klpar1,lc34,
calcint_new.f:     *                lcij,lckl,npij,npklx,
calcint_new.f:c ij
calcint_new.f:         call conv1x_1(nbls1,mmax1,npij ,lcij, bl(idx1),bl(indx),
calcint_new.f:            call conv1der(nbls1,npij,l1,bl(idx1),bl(indx),
calcint_new.f:            call conv1der(nbls1,npij ,l2,bl(idx1),bl(indx),
calcint_new.f:         call assemblx(first,nbls,nbls1,lnij,lnkl,
calcint_new.f:     *                 l1,l2,l3,l4,lcij,lckl,npij,npklx)
calcint_new.f:         call gcqijkl(nbls,nbls1, bl(indx), npij,npklx,
calcint_new.f:     *                bl(igcij),ngcij, bl(igckl),ngckl)
calcint_new.f:         call assemblg(first,nbls,nbls1,lnij,lnkl,
calcint_new.f:      nqij=nqijr
calcint_new.f:c transpose but2(ngcd, nbls*lnij*lnkl) into buf2(nbls*lnij*lnkl,ngcd)
calcint_new.f:        ldb=nbls*lnij*lnkl
calcint_new.f:      lnijr=lnij
calcint_new.f:c        return to the original values of nsij,nskl and mmax :
calcint_new.f:         ijderiv=1
calcint_new.f:         call iobarb(ijderiv,klderiv)
calcint_new.f:         call nmrderx(nbls,lnijr,lnklr,npij,npklx,ngcd,
calcint_new.f:c        return to the original values of nsij,nskl and mmax :
calcint_new.f:         ijderiv=1
calcint_new.f:         call iobarb(ijderiv,klderiv)
calcint_new.f:         call force_der(bl,nbls,lnijr,lnklr,npij,ngcd,idx1,ixab)
calcint_new.f:c        return to the original values of nsij,nskl and mmax :
calcint_new.f:         ijderiv=2
calcint_new.f:         call iobarb(ijderiv,klderiv)
calcint_new.f:         call hessian_der(bl,nbls,lnijr,lnklr,npij,ngcd,idx1,ixab)
calcint_new.f:      call amshift(nbls,lnij,lnkl,npij,npklx,ngcd)
calcint_new.f:      subroutine erintsp_1_n(bl,first,nbls,acc,ikbl,npij,npklx,npkl,
calcint_new.f:      common /primij/ iabprim, ijdim ,ijpar1
calcint_new.f:      common /howmany/ ntotal,noijkl,nopres,nohalf,nrimtot,nrimret
calcint_new.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,mmax,
calcint_new.f:     * nqi,nqj,nqk,nql,nsij,nskl,
calcint_new.f:     * nqij,nqij1,nsij1,nqkl,nqkl1,nskl1,ijbeg,klbeg
calcint_new.f:     * ibfij1,ibfij2,ibfkl1,ibfkl2,
calcint_new.f:     * ibf2l1,ibf2l2,ibf2l3,ibf2l4,ibfij3,ibfkl3,
calcint_new.f:     * ixij,iyij,izij, iwij,ivij,iuij,isij
calcint_new.f:     * ixab,ixp,ixpn,ixpp,iabnia,iapb,i1apb,ifij,icij,isab,
calcint_new.f:     *                 icfg,jcfg,kcfg,lcfg, igcij,igckl
calcint_new.f:      common /memors/ nsym,ijshp,isymm
calcint_new.f:        ngcij=ngci1*ngcj1
calcint_new.f:        call getmem(ngcij*nbls,igcij)
calcint_new.f:        call getmem(ngcd*nbls*lnijkl,ibut)
calcint_new.f:      lcij=0
calcint_new.f:        call gcparij(nbls, bl(idx1),npij,
calcint_new.f:     *               l1,l2,ngci1,ngcj1,ngcij,
calcint_new.f:     *               bl(igci),bl(igcj), bl(igcij))
calcint_new.f:      lcij=lcij+1
calcint_new.f:      call precspec_1_n(nbls,npij,npklx,npkl, lcij,lckl,
calcint_new.f:     1     ijpar1,lc12, klpar1,lc34,bl(idx1),bl(idx2),
calcint_new.f:     *     bl(iapb),bl(icpd),bl(icij),bl(ickl),
calcint_new.f:     *                      lnij,lnkl,indx,ngcd,ibut)
calcint_new.f:     *          npij,npklx,l1,l2,l3,l4,
calcint_new.f:         call gcqijkl(nbls,nbls1, bl(indx), npij,npklx,
calcint_new.f:     *                bl(igcij),ngcij, bl(igckl),ngckl)
calcint_new.f:     *          ngcd,bl(indgc),bl(igcoef),lnijkl )
calcint_new.f:         ldb=nbls*lnijkl
calcint_new.f:     *                        npij,lcij,eab,esti2ij,
calcint_new.f:      dimension eab(npij,lcij)
calcint_new.f:      dimension esti2ij(lcij)
calcint_new.f:      do ij=1,lcij
calcint_new.f:         do ijp=1,npij
calcint_new.f:            esti2max=max(eab(ijp,ij),esti2max)
calcint_new.f:         esti2ij(ij)=      esti2max
calcint_new.f:            esti2kl(kl)=ddmax*esti2ij(kl)
calcint_new.f:      subroutine neg_primitive(bl,nbls,npij,npkl,ndiag,ij,kl,lc12,lc34,
calcint_new.f:     *                         apb,cpd,eab,ecd,esti2ij,esti2kl,
calcint_new.f:     *                         list_ij,list_kl,nbls1)
calcint_new.f:      dimension eab(npij,lc12),ecd(npkl,lc34)
calcint_new.f:      dimension esti2ij(lc12), esti2kl(lc34)
calcint_new.f:      dimension list_ij(*),list_kl(*)
calcint_new.f:      data ij_last /0/
calcint_new.f:      save ij_last
calcint_new.f:      abpcd1=apb(ij)+cpd(kl)
calcint_new.f:      estimx=esti2ij(ij)*esti2kl(kl)*abpcdr
calcint_new.f:c......  ij_last=0
calcint_new.f:         if(kl.eq.lc34) ij_last=0
calcint_new.f:         if(ij.ne.ij_last) then
calcint_new.f:            call reorder_primpairs(ij,npij,eab,lc12,list_ij)
calcint_new.f:         ij_last=ij
calcint_new.f:         if(kl.eq.lc34) ij_last=0
calcint_new.f:      subroutine reorder_primpairs(ij,npij,eab,lc12,list_ij)
calcint_new.f:      dimension eab(npij,lc12)
calcint_new.f:      dimension list_ij(*)
calcint_new.f:      do ijpar=1,npij
calcint_new.f:         list_ij(ijpar)=ijpar
calcint_new.f:      do ijpar=1,npij-1
calcint_new.f:         ijpar1=list_ij(ijpar)
calcint_new.f:         ijpar2=list_ij(ijpar+1)
calcint_new.f:         estij1=eab(ijpar1,ij)
calcint_new.f:         estij2=eab(ijpar2,ij)
calcint_new.f:         if(estij2.gt.estij1) then
calcint_new.f:            list_ij(ijpar  )=ijpar2
calcint_new.f:            list_ij(ijpar+1)=ijpar1
Binary file CC.tgz matches
chshift.f:c  SUM(ij){ nij*[ RixRj + (Ri-Rj)xT ] } = minimum
chshift.f:c  nij number of matrix elements a given pair Ri,Rj contributes to.
chshift.f:c  SUM(ij) nij*{ (RixRj)x(Ri-Rj) + [(Ri-Rj)xT]x(Ri-Rj) } = 0
chshift.f:c [ (RixRj)xRij ]x = | Yij**2+Zij**2   -Xij*Yij     -Xij*Zij    | X
chshift.f:c [ (RixRj)xRij ]y =-|    -Xij*Yij   Xij**2+Zij**2  -Yij*Zij    | Y
chshift.f:c [ (RixRj)xRij ]z = |    -Xij*Zij     -Yij*Zij   Xij**2+Yij**2 | Z
chshift.f:c where the SUM(ij)nij  was omited
chshift.f:c  Tij translations.
chshift.f:      subroutine findtrs2(noij,na,datnuc,trans,inx,ncs,ncf,ntrans)
chshift.f:      dimension noij(na,na)
chshift.f:c  Tij translations.
chshift.f:      noij(iat,jat)=0
chshift.f:            ijel=0
chshift.f:               ijel=ijel+1
chshift.f:              noij(iat,jat)=noij(iat,jat)+ijel
chshift.f:              noij(jat,iat)=noij(jat,iat)+ijel
chshift.f:      ntot=ntot+noij(iat,jat)
chshift.f:c     write(8,88) iat,jat, noij(iat,jat)
chshift.f:        nijx=0
chshift.f:        nijy=0
chshift.f:        nijz=0
chshift.f:          nijy=noij(iat,jat)
chshift.f:          nijz=noij(iat,jat)
chshift.f:          nijx=noij(iat,jat)
chshift.f:          nijz=noij(iat,jat)
chshift.f:          nijx=noij(iat,jat)
chshift.f:          nijy=noij(iat,jat)
chshift.f:            nijx=noij(iat,jat)
chshift.f:            nijz=noij(iat,jat)
chshift.f:            nijy=noij(iat,jat)
chshift.f:            nijz=noij(iat,jat)
chshift.f:            nijx=noij(iat,jat)
chshift.f:            nijy=noij(iat,jat)
chshift.f:            nijy=noij(iat,jat)
chshift.f:            nijz=noij(iat,jat)
chshift.f:            nijx=noij(iat,jat)
chshift.f:            nijy=noij(iat,jat)
chshift.f:            nijx=noij(iat,jat)
chshift.f:            nijz=noij(iat,jat)
chshift.f:            nijx=noij(iat,jat)
chshift.f:            nijy=noij(iat,jat)
chshift.f:            nijx=noij(iat,jat)
chshift.f:            nijz=noij(iat,jat)
chshift.f:            nijy=noij(iat,jat)
chshift.f:            nijz=noij(iat,jat)
chshift.f:        ntotx=ntotx+nijx
chshift.f:        ntoty=ntoty+nijy
chshift.f:        ntotz=ntotz+nijz
chshift.f:        eijx=dble(nijx)
chshift.f:        eijy=dble(nijy)
chshift.f:        eijz=dble(nijz)
chshift.f:        trans(1)=trans(1)+tx*eijx
chshift.f:        trans(2)=trans(2)+ty*eijy
chshift.f:        trans(3)=trans(3)+tz*eijz
chshift.f:      subroutine findtrs1(noij,na,datnuc,trans,inx,ncs,ncf,ntrans)
chshift.f:      dimension noij(na,na)
chshift.f:      dimension ri(3),rj(3),rxr(3),rij(3),aij(3),aa(3),bb(3,3)
chshift.f:c  SUM(ij){ nij*[ RixRj + (Ri-Rj)xT ] } = minimum
chshift.f:c  nij number of matrix elements a given pair Ri,Rj contributes to.
chshift.f:c  SUM(ij) nij*{ (RixRj)x(Ri-Rj) + [(Ri-Rj)xT]x(Ri-Rj) } = 0
chshift.f:c [ (RixRj)xRij ]x = | Yij**2+Zij**2   -Xij*Yij     -Xij*Zij    | X
chshift.f:c [ (RixRj)xRij ]y =-|    -Xij*Yij   Xij**2+Zij**2  -Yij*Zij    | Y
chshift.f:c [ (RixRj)xRij ]z = |    -Xij*Zij     -Yij*Zij   Xij**2+Yij**2 | Z
chshift.f:c where the SUM(ij)nij  was omited
chshift.f:      noij(iat,jat)=0
chshift.f:            ijel=0
chshift.f:               ijel=ijel+1
chshift.f:              noij(iat,jat)=noij(iat,jat)+ijel
chshift.f:              noij(jat,iat)=noij(jat,iat)+ijel
chshift.f:      ntot=ntot+noij(iat,jat)
chshift.f:      ntot2=ntot2+noij(iat,jat)*noij(iat,jat)
chshift.f:cccc  write(8,88) iat,jat, noij(iat,jat)
chshift.f:        eij=dble( noij(iat,jat) )
chshift.f:        eij2=eij*eij
chshift.f:        rij(1)=ri(1)-rj(1)
chshift.f:        rij(2)=ri(2)-rj(2)
chshift.f:        rij(3)=ri(3)-rj(3)
chshift.f:c-----> call vecprod(rxr,rij,aij)
chshift.f:        call vecprod(rij,rxr,aij)
chshift.f:        aa(1)=aa(1)+eij2*aij(1)
chshift.f:        aa(2)=aa(2)+eij2*aij(2)
chshift.f:        aa(3)=aa(3)+eij2*aij(3)
chshift.f:        xx=rij(1)*rij(1)
chshift.f:        xy=rij(1)*rij(2)
chshift.f:        xz=rij(1)*rij(3)
chshift.f:        yy=rij(2)*rij(2)
chshift.f:        yz=rij(2)*rij(3)
chshift.f:        zz=rij(3)*rij(3)
chshift.f:        bb(1,1)=bb(1,1)+eij2*(yy+zz)
chshift.f:        bb(2,2)=bb(2,2)+eij2*(xx+zz)
chshift.f:        bb(3,3)=bb(3,3)+eij2*(xx+yy)
chshift.f:        bb(1,2)=bb(1,2)-eij2*xy
chshift.f:        bb(1,3)=bb(1,3)-eij2*xz
chshift.f:        bb(2,3)=bb(2,3)-eij2*yz
cimgen.413:      real(kind=8),dimension(:,:),allocatable::smo1,PAO_tmp,MOSSS,Sij
cimgen.413:      real(kind=8),dimension(:,:),allocatable::smo1,PAO,MOSSS,Sij
cimgen.413:C      allocate(Sij(KB,KB))
cimgen.413:C      call MO_over(Sij,cvs,S4,KB,JF)
cimgen.413:C      write(6,*) Sij
cimgen.413:C      real(kind=8) FIJ(no,no),eps,pii,pjj,pij,p1,p2,RWORK(100)
cimgen.f:      real(kind=8),dimension(:,:),allocatable::smo1,PAO_tmp,MOSSS,Sij
cimgen.f:      real(kind=8),dimension(:,:),allocatable::smo1,PAO,MOSSS,Sij
cimgen.f:C      allocate(Sij(KB,KB))
cimgen.f:C      call MO_over(Sij,cvs,S4,KB,JF)
cimgen.f:C      write(6,*) Sij
cimgen.f:C      real(kind=8) FIJ(no,no),eps,pii,pjj,pij,p1,p2,RWORK(100)
cimgen.f.bak:      real(kind=8),dimension(:,:),allocatable::smo1,PAO_tmp,MOSSS,Sij
cimgen.f.bak:C      allocate(Sij(KB,KB))
cimgen.f.bak:C      Sij=0.0D0
cimgen.f.bak:C                  Sij(j,k)=Sij(j,k)+cvs(l,j)*cvs(m,k)*S4(m,l)
cimgen.f.bak:C               if (Sij(j,k)-1.0D0>1.0D-6) then
cimgen.f.bak:C               if (Sij(k,j)>1.0D-6) then
cimgen.f.bak:C      deallocate(Sij)
cimgen.f.bak:C      real(kind=8) FIJ(no,no),eps,pii,pjj,pij,p1,p2,RWORK(100)
cimlib.f:      integer nbas,i,j,ij
cimlib.f:      ij=0
cimlib.f:            ij=ij+1
cimlib.f:            cnew2(ij)=cnew(i,j)
cimlib.f:      real*8 Sij
cimlib.f:            Sij=-dot_product(C(1:nbas,i),tmp(:,1))
cimlib.f:            C(:,i)=C(:,i)+Sij*C(:,j)
cimlib.f:      integer nbs,nif,noc,i,j,k,ij
cimlib.f:      dm=0.0d0; ij=0
cimlib.f:            ij=ij+1
cimlib.f:            dm(ij)=2.0d0*PP
cimlib.f:      subroutine MO_over(Sij,C,S,nmo,nbas)
cimlib.f:      real*8 Sij(nmo,nmo),C(nbas,nmo),S(nbas,nbas)
cimlib.f:      Sij=0.0D0
cimlib.f:                  Sij(i,j)=Sij(i,j)+C(k,i)*S(k,l)*C(l,j)
cimmp2force.f:      real*8,allocatable::Sij(:,:),SOVER2(:,:)
cimmp2force.f:C  The residia (Tij) in (virtual) MO basis are on disk, opened via unit
cimmp2force.f:C  get filenames for <Tij> <Kov> and <bins> files
cimmp2force.f:      filname1=scrfile(1:len)//'.Tij'
cimmp2force.f:      ndisk1 = 41        ! unit number for <Tij> file
cimmp2force.f:C  open the <Tij>, <Kov> and <bins> files
cimmp2force.f:      ittij=mataddr('Ttilda')
cimmp2force.f:      call matdef('Tij','q',nvir,nvir)
cimmp2force.f:      iatij=mataddr('Tij')
cimmp2force.f:     1              iprint, thresh,bl(iatij),bl(ittij),bl(ibuf),
cimmp2force.f:      call matrem('Tij')
cimmp2force.f:C  for each Tij we store 1 integral (no indices needed here)
cimmp2force.f:c  we have finished with the <Tij> file
cimsub.f:      real*8,allocatable::x_QCMO(:,:,:),tij1_QCMO(:,:,:)
cimsub.f:      real*8,allocatable::x_LMO(:,:,:,:),tij1_LMO(:,:,:,:)
cimsub.f:C      real*8,allocatable::Sij(:,:),SOVER(:,:),tmp(:)
cimsub.f:C      allocate(tmp(127008),Sij(ncf,ncf),SOVER(ncf,ncf))
cimsub.f:C      call inton2(0,natoms,Sij,INX2,INX2,0,0,BASDAT,BASDAT,XC,IAN,
cimsub.f:C      call ReorderFock2(ncf,ncf,Z(1),Sij,SOVER)
cimsub.f:C      allocate(Sij(KB,KB))
cimsub.f:C      Sij=0.0D0
cimsub.f:C      call MO_over(Sij,SMONew,
cimsub.f:C               if (Sij(j,k)-1.0D0>1.0D-6) then
cimsub.f:C               if (Sij(k,j)>1.0D-6) then
cimsub.f:C                  write(io,*) Sij(k,j)
cimsub.f:C      deallocate(Sij)
cimsub.f:c  If gradient: filname3=Tij amplitudes; filname4=Kov amplitudes
cimsub.f:         filname3=scrfile(1:len)//'.Tij'
cimsub.f:      ipmij=0
cimsub.f:c -- also open files for virtual occupied blocks of Kij
cimsub.f:      ttkij=zero
cimsub.f:      allocate(tij1_QCMO(nmo*(nmo+1)/2,nvirt,nvirt))
cimsub.f:     6   trans,       iprnt,      ipmij,      ipairpr,    bl(ixmos),
cimsub.f:     $   ttkij,       tmp2e,      ncore,      igran2pair,ipair2gran,
cimsub.f:     1   igranulesize,ncen,       x_QCMO,     tij1_QCMO)
cimsub.f:     6       trans,       iprnt,      ipmij,      ipairpr,    bl(ixmos),
cimsub.f:     $       ttkij,       tmp2e,      ncore,      igran2pair,ipair2gran,
cimsub.f:     1       igranulesize,ncen,       x_QCMO,     tij1_QCMO)
cimsub.f:      allocate(x_LMO(nmo,nmo,nvirt,nvirt),tij1_LMO(nmo,nmo,nvirt,nvirt))
cimsub.f:      x_LMO=0.0D0; tij1_LMO=0.0D0
cimsub.f:                     ij=ii*(ii-1)/2+j
cimsub.f:                     xqcmo2(ii,j)=x_QCMO(ij,k,l)
cimsub.f:                     tqcmo2(ii,j)=tij1_QCMO(ij,k,l)
cimsub.f:                     ij=j*(j-1)/2+ii
cimsub.f:                     xqcmo2(ii,j)=x_QCMO(ij,l,k)
cimsub.f:                     tqcmo2(ii,j)=tij1_QCMO(ij,l,k)
cimsub.f:     &                 tqcmo2,nmo,0.0D0,tij1_LMO(:,:,k,l),nmo)
cimsub.f:                  tij1=tij1_LMO(i,j,k,l)
cimsub.f:                  energypair_CIM(i,j)=energypair_CIM(i,j)+tij1*x
cimsub.f:      deallocate(x_QCMO,tij1_QCMO,x_LMO,tij1_LMO)
cimsub.f:            write(iout,1010) tmbtr/sixty,ttkij/sixty,tmp2e/sixty
cimsub.f: 1010       format(' Time for saving <Tij> in MO basis:',f8.2,'min',/,
cimsub.f:            write(iout,*) ' <Tij>: ',nxrec,' records written on unit',
cimsub.f:     5   trans,       iprnt,      ipmij,      ipairpr,    xmos,
cimsub.f:     9   ttkij,       tmp2e,      ncore, igran2pair,ipair2gran,
cimsub.f:     $   igrsize,     ncen,       x_QCMO,     tij1_QCMO)
cimsub.f:      real*8 tij1_QCMO(nmo*(nmo+1)/2,nvirt,nvirt)
cimsub.f:         call matdef('kijvo','r',nvirt,nvmo)
cimsub.f:         ikijvo=mataddr('kijvo')
cimsub.f:      ij=0
cimsub.f:         ijstart=igran2pair(1,igran)
cimsub.f:         ijstop =igran2pair(2,igran)
cimsub.f:         do ij=ijstart,ijstop
cimsub.f:            ijind=ij-ijstart
cimsub.f:            call get_ij_half(ij,i,j)
cimsub.f:            call matconn('xmat','q',ncf,ncf,ixmat+ijind*ncf*ncf)
cimsub.f:c -- Kij in AO basis now in xmat
cimsub.f:               call elapsec(tkij1)
cimsub.f:               call SaveKij(ncf,nvmo,nvirt,bl(ikijvo),bl(ibins),
cimsub.f:     1                      bl(ibin1),ij,thresh,lengvo,ndisk5,ncore)
cimsub.f:               call elapsec(tkij2)
cimsub.f:               ttkij=ttkij+tkij2-tkij1
cimsub.f:            call TransVirt(ncf,i,j,iprnt,ipmij,ipairpr,virt)
cimsub.f:            call IntExpr2(ncf,nmo,nvirt,i,j,epsi,xmos,x_QCMO,tij1_QCMO)
cimsub.f:               tmp2e=tmp2e+tt1-tkij2
cimsub.f:               call SaveTij(ncf,    nmo,    nval,   nvirt,  i,
cimsub.f:     2                      xmos,   ndisk3, ij)
cimsub.f:      if (.not.emp2only) call matrem('kijvo')
cimsub.f:            ij=i*(i-1)/2+j
cimsub.f:            tmpint(ij,ia,ib)=xmos(ia,ib)
cimsub.f:      subroutine IntExpr2(ncf,nmo,nvirt,i,j,e,x,x_QCMO,tij1_QCMO)
cimsub.f:      dimension tij1_QCMO(nmo*(nmo+1)/2,nvirt,nvirt)
cimsub.f:            tij1=(x(ia,ib)+x(ia,ib)-x(ib,ia))*rdenom
cimsub.f:            ij=i*(i-1)/2+j
cimsub.f:            x_QCMO(ij,ia,ib)=x(ia,ib)
cimsub.f:            tij1_QCMO(ij,ia,ib)=tij1
cimsub.f:C               tij1_QCMO(j,i,ia,ib)=tij1_QCMO(i,j,ib,ia)
cimsub.f:c testing program for Jij Coulomb integrals 
cimsub.f:      dimension cctimesij(4),cctimes(4) 
cimsub.f:      real*8,allocatable::Sij(:,:)
cimsub.f:C      allocate(Sij(ncf,ncf))
cimsub.f:C      call MO_over(Sij,bl(icano),bl(ioverlap),ncf,ncf)
cimsub.f:C      write(6,*) Sij
cimsub.f:         call dynamic_getmem((nval*nval+1)*8,ijtable)
cimsub.f:         call ijtab_generator(nsym,nval,ichar_count,bl(ichatacters),
cimsub.f:     *                        bl(im_table),bl(iorevtable),bl(ijtable))
cimsub.f:      ij=0
cimsub.f:      ij_unique=0
cimsub.f:c Let us assume that all UNIQUE ij pairs are arranged in row in
cimsub.f:c allocate memory for array which maps ij->ij_unique (from the row
cimsub.f:c described above), or ij->0 if ij is a mirror of any pair
cimsub.f:            ij=ij+1
cimsub.f:            call pair_searcher(i,  j,     iprim, jprim, ijprim,
cimsub.f:     &            write(6,'(A,I2,A,I2,I5)') "Pair: ",i,",",j,ij
cimsub.f:               ij_unique=ij_unique+1
cimsub.f:               call int_array_write(bl(isympairs),ij,ij_unique)
cimsub.f:               call int_array_write(bl(isympairs),ij,0)
cimsub.f:            ival=int_array(bl(ipairimages),ijprim)
cimsub.f:            call int_array_write(bl(ipairimages),ijprim,ival)
cimsub.f:      ij=0 
cimsub.f:     *                     bl(ilist),  nstrong,bl(isympairs), ij_unique,
cimsub.f:     *                  bl(ilist),   nstrong, bl(isympairs), ij_unique,
cimsub.f:     *                     bl(ilist), nstrong, bl(isympairs), ij_unique,
cimsub.f:     *              nsym,  nval,nvirt,        ij_unique,  isympairs,
cimsub.f:      call CreateKijklDisk(nval,kijklndisk,af)
cimsub.f:      call KijklInit(bl(irecadrx),npairs,ndiskx,lbinx,ncf,thresh,
cimsub.f:     *        nfirst,nlast,bl(ifockMO),byt8,nmo,vorb,kijklndisk,af)
cimsub.f:      call Kijk_Vec_Init(bl(irecadrx),npairs,ndiskx,lbinx,ncf,thresh,
cimsub.f:     *                 nfirst,nlast,byt8,nmo,vorb,.false.,kijkndisk,nbf)
cimsub.f:c Space for one K_ij matrix
cimsub.f:      ij=0
cimsub.f:            ij=ij+1
cimsub.f:     *                      sqij,    xmaxele,bl(ilist),bl(ipairimages),
cimsub.f:            square=square+sqij
cimsub.f:     *              nsym,  nval,nvirt,        ij_unique,  isympairs,
cimsub.f:      ij=0
cimsub.f:            ij=ij+1
cimsub.f:            if (int_array(bl(isympairs),ij).ne.0) then
cimsub.f:                  call reader(ndisk_mp3,idimen,ij,bl(iexchAO))
cimsub.f:     &                            bl(iepairr+ij-1),bl(iepair+ij-1),
cimsub.f:     *                      sqij,    xmaxele,bl(ilist),bl(ipairimages),
cimsub.f:               square=square+sqij
cimsub.f:     &                            bl(ixepairr+ij-1),bl(ixepair+ij-1),ncf
cimsub.f:            else !  if (int_array(bl(isympairs),ij).ne.0) then
cimsub.f:               bl(iepair  +ij-1)=0.0d0
cimsub.f:               bl(iepairr +ij-1)=0.0d0
cimsub.f:               bl(ixepair +ij-1)=0.0d0
cimsub.f:               bl(ixepairr+ij-1)=0.0d0
cimsub.f:            endif            !   if (int_array(bl(isympairs),ij).ne.0)
cimsub.f:     *                                       bl(ixepair+ij-1)
cimsub.f:     *                                       bl(iepairr+ij-1)
cimsub.f:            energyr=energyr+bl(iepairr+ij-1)
cimsub.f:     *               *dble(int_array(bl(ipairimages),ij))
cimsub.f:            energy1=energy1+bl(iepair+ij-1)
cimsub.f:     *               *dble(int_array(bl(ipairimages),ij))
cimsub.f:            energy2=energy2+bl(ixepair+ij-1)
cimsub.f:     *               *dble(int_array(bl(ipairimages),ij))
cimsub.f:     *               *dble(int_array(bl(ipairimages),ij))
cimsub.f:     *               *dble(int_array(bl(ipairimages),ij))
cimsub.f:               pairtmp=bl(iepairr+ij-1)
cimsub.f:     &                    *dble(int_array(bl(ipairimages),ij))
cimsub.f:     *              nsym,  nval,nvirt,        ij_unique,  isympairs,
cimsub.f:      write(6,3232) mp2_iter,xxenergy,xdelta,xmaxele,sqij,(et1-et0)/6d1
cimsub.f:      if (dabs(energy2-energy1).gt.Ethresh.or.sqij.gt.Wavethresh) then
cimsub.f:     &                    bl(ivtable),bl(im_table),bl(ijtable),
cimsub.f:     &                    bl(ivrevtable),bl(im_table),bl(ijtable),
cimsub.f:     *                     bl(ilist),  nstrong, bl(isympairs),ij_unique,
cimsub.f:     *                     bl(ilist),nstrong,   bl(isympairs),ij_unique,
cimsub.f:            write(6,'(A)') 'CCalph: ampl:       Kij:     mult:  putres:'
cimsub.f:      ij=0
cimsub.f:     *    call calculate_ij_chunk(ichunk,jchunk,1,idimen,nval)
cimsub.f:            ij=ij+1
cimsub.f:            if (int_array(bl(isympairs),ij).ne.0) then
cimsub.f:               if (cep2) xiterenergy=bl(iepairr+ij-1)
cimsub.f:c  Qgen, iwork1=Qij, iwork2=Qji(T), probably OK, order of en. OK
cimsub.f:c   S*Qij and add to residuum
cimsub.f:c   Read Gij and Gji(T) with part of CCSD
cimsub.f:     *                            bl(iepairr+ij-1),bl(iepair+ij-1),ncf,
cimsub.f:                  if (mp3.and.mp4) call writer(ndisk_mp3,idimen,ij,
cimsub.f:     *                            bl(iepairr+ij-1),bl(iepair+ij-1),ncf,
cimsub.f:                     EPairQCMO(i,j)=bl(iepairr+ij-1)/2.0D0
cimsub.f:                     EPairQCMO(j,i)=bl(iepairr+ij-1)/2.0D0
cimsub.f:                     EPairQCMO(i,j)=bl(iepairr+ij-1)
cimsub.f:                  call CINorm(icoeffAO,xnormij,ncf,equal,nmo,vorb,nbf)
cimsub.f:                  totnorm=totnorm+xnormij
cimsub.f:     *                   sqij,   xmaxele,bl(ilist),bl(ipairimages),
cimsub.f:     *                         bl(ixepairr+ij-1),bl(ixepair+ij-1),ncf,
cimsub.f:            else ! if (int_array(bl(isympairs),ij).ne.0) then
cimsub.f:               bl(iepair  +ij-1)=0.0d0
cimsub.f:               bl(iepairr +ij-1)=0.0d0
cimsub.f:               bl(ixepair +ij-1)=0.0d0
cimsub.f:               bl(ixepairr+ij-1)=0.0d0
cimsub.f:               sqij=0.0d0
cimsub.f:            endif ! if (int_array(bl(isympairs),ij).ne.0) then
cimsub.f:            xlinear_energy=xlinear_energy+bl(ixepair+ij-1)
cimsub.f:     *                           *dble(int_array(bl(ipairimages),ij))
cimsub.f:            energyr=energyr+bl(iepairr+ij-1)
cimsub.f:     *                           *dble(int_array(bl(ipairimages),ij))
cimsub.f:            energy=energy+bl(iepair+ij-1)
cimsub.f:     *                           *dble(int_array(bl(ipairimages),ij))
cimsub.f:            square=square+sqij*dble(int_array(bl(ipairimages),ij))
cimsub.f:     *                               bl(iepairr+ij-1)
cimsub.f:     *                               bl(iepair+ij-1)
cimsub.f:     *              nsym,  nval,nvirt,        ij_unique,  isympairs,
cimsub.f:     *                 ichar_count,bl(ivtable),bl(im_table),bl(ijtable),
cimsub.f:     &                    bl(ivrevtable),bl(im_table),bl(ijtable),
cimsub.src:C        write(6,*) 'main loop over triples ij',i,j
cimsub.src:C        write(6,*) 'main loop over triples ij',i,j
cimsub.src:C        write(6,*) 'main loop over triples ij',i,j
cimsub.src:C        write(6,*) 'main loop over triples ij',i,j
cimsub.src:C        write(6,*) 'main loop over triples ij',i,j
cimsub.src:C        write(6,*) 'main loop over triples ij',i,j
cimsub.src:C        write(6,*) 'main loop over triples ij',i,j
cimsub.src:C        write(6,*) 'main loop over triples ij',i,j
cimsub.src:C        write(6,*) 'main loop over triples ij',i,j
cimsub.src:C        write(6,*) 'main loop over triples ij',i,j
cimsub.src:C        write(6,*) 'main loop over triples ij',i,j
cimsub.src:C        write(6,*) 'main loop over triples ij',i,j
cimsub.src:C        write(6,*) 'main loop over triples ij',i,j
cimsub.src:C        write(6,*) 'main loop over triples ij',i,j
cimsub.src:C     CALL SEQOPN(IM2I, 'M2IFIL','UNKNOWN',.FALSE.,'UNFORMATTED') ! for <ab|ij>
commondata:amshift.f:      common/shell/lshellt,lshelij,lshelkl,lhelp,lcas2(4),lcas3(4)
commondata:amshift.f:      common/shell/lshellt,lshelij,lshelkl,lhelp,lcas2(4),lcas3(4)
commondata:amshift.f:      common/shell/lshellt,lshelij,lshelkl,lhelp,lcas2(4),lcas3(4)
commondata:amshift.f:      common/shell/lshellt,lshelij,lshelkl,lhelp,lcas2(4),lcas3(4)
commondata:amshift.f:      common/shell/lshellt,lshelij,lshelkl,lhelp,lcas2(4),lcas3(4)
commondata:amshift.f:      common/shell/lshellt,lshelij,lshelkl,lhelp,lcas2(4),lcas3(4)
commondata:amshift.f:      common/shell/lshellt,lshelij,lshelkl,lhelp,lcas2(4),lcas3(4)
commondata:amshift.f:      common/shell/lshellt,lshelij,lshelkl,lhelp,lcas2(4),lcas3(4)
commondata:assemblx.f:      common /dimasse/ lqij,lqkl,lqmx,lij3,lkl3,l3l,lsss
commondata:assemblx.f:      common /dimasse/ lqij,lqkl,lqmx,lij3,lkl3,l3l,lsss
commondata:blocking.f:      common /memor1/ iisd,jjsd,ijbld
commondata:blocking.f:      common /memor1c/ map_ij_bl2
commondata:blocking.f:      common /memors/ nsym,ijshp,isymm
commondata:blocking.f:c Store these addresses in the  common /memor1/ iisd,jjsd,ijbld
commondata:blocking.f:c                               common /memor1c/ map_ij_bl2
commondata:blocking.f:      common /contr/ ngci,ngcj,ngck,ngcl,lci,lcj,lck,lcl,lcij,lckl
commondata:blocking.f:      common /contr/ ngci,ngcj,ngck,ngcl,lci,lcj,lck,lcl,lcij,lckl
commondata:blocking.f:      common /contr/ ngci,ngcj,ngck,ngcl,lci,lcj,lck,lcl,lcij,lckl
commondata:blocking.f:      common /contr/ ngci,ngcj,ngck,ngcl,lci,lcj,lck,lcl,lcij,lckl
commondata:blocking.f:      common /contr/ ngci,ngcj,ngck,ngcl,lci,lcj,lck,lcl,lcij,lckl
commondata:blocking.f:      common /contr/ ngci,ngcj,ngck,ngcl,lci,lcj,lck,lcl,lcij,lckl
commondata:blocking.f:      common /memor1/ iisd,jjsd,ijbld
commondata:blocking.f:      common /memor2/ nqrtd, nibld,nkbld, nijbd,nijed, nklbd,nkled
commondata:blocking.f:      common /memors/ nsym,ijshp,isymm
commondata:blocking.f:      common /memor1/ iisd,jjsd,ijbld
commondata:blocking.f:      common /memor1c/ map_ij_bl2
commondata:blocking.f:      common /memors/ nsym,ijshp,isymm
commondata:blocking.f:c Store these addresses in the  common /memor1/ iisd,jjsd,ijbld
commondata:blocking.f:c                               common /memor1c/ map_ij_bl2
commondata:blocking_new.f:      common /memor2/ nqrtd, nibld,nkbld, nijbd,nijed, nklbd,nkled
commondata:blocking_new.f:      common /memors/ nsym,ijshp,isymm
commondata:calc_dft.f:      common /dftpnt/ ird,iaij,idst,iixx,iiwt,ipre,iexp,
commondata:calcint.f:      common /memor1/ iisd,jjsd,ijbld
commondata:calcint.f:      common /howmany/ ntotal,noijkl,nopres,nohalf,nrimtot,nrimret
commondata:calcint.f:      common /ijcsfl/ ijblokp,ijprevf,ijprevl,ijtprev,maxprev,ngcprev
commondata:calcint.f:      common /memor2/ nqrtd, nibld,nkbld, nijbd,nijed, nklbd,nkled
commondata:calcint.f:      common /howmany/ ntotal,noijkl,nopres,nohalf,nrimtot,nrimret
commondata:calcint.f:      common /contr/ ngci,ngcj,ngck,ngcl,lci,lcj,lck,lcl,lcij,lckl
commondata:calcint.f:      common/shell/lshellt,lshelij,lshelkl,lhelp,lcas2(4),lcas3(4)
commondata:calcint.f:      common /memors/ nsym,ijshp,isymm
commondata:calcint.f:      common /primij/ iabprim, ijdim ,ijpar1
commondata:calcint.f:      common /howmany/ ntotal,noijkl,nopres,nohalf,nrimtot,nrimret
commondata:calcint.f:      common /memor1/ iisd,jjsd,ijbld
commondata:calcint.f:      common /memors/ nsym,ijshp,isymm
commondata:calcint.f:      common /primij/ iabprim, ijdim ,ijpar1
commondata:calcint.f:      common /howmany/ ntotal,noijkl,nopres,nohalf,nrimtot,nrimret
commondata:calcint.f:      common /memor1/ iisd,jjsd,ijbld
commondata:calcint.f:      common /memors/ nsym,ijshp,isymm
commondata:calcint.f:      common /primij/ iabprim, ijdim ,ijpar1
commondata:calcint.f:      common /howmany/ ntotal,noijkl,nopres,nohalf,nrimtot,nrimret
commondata:calcint.f:      common /memor1/ iisd,jjsd,ijbld
commondata:calcint.f:      common /memors/ nsym,ijshp,isymm
commondata:calcint.f:      common /primij/ iabprim, ijdim ,ijpar1
commondata:calcint.f:      common /howmany/ ntotal,noijkl,nopres,nohalf,nrimtot,nrimret
commondata:calcint.f:      common /memor1/ iisd,jjsd,ijbld
commondata:calcint.f:      common /memors/ nsym,ijshp,isymm
commondata:calcint_new.f:      common /memor1/ iisd,jjsd,ijbld
commondata:calcint_new.f:      common /howmany/ ntotal,noijkl,nopres,nohalf,nrimtot,nrimret
commondata:calcint_new.f:      common /ijcsfl/ ijblokp,ijprevf,ijprevl,ijtprev,maxprev,ngcprev
commondata:calcint_new.f:      common /memor2/ nqrtd, nibld,nkbld, nijbd,nijed, nklbd,nkled
commondata:calcint_new.f:      common /howmany/ ntotal,noijkl,nopres,nohalf,nrimtot,nrimret
commondata:calcint_new.f:      common /contr/ ngci,ngcj,ngck,ngcl,lci,lcj,lck,lcl,lcij,lckl
commondata:calcint_new.f:      common/shell/lshellt,lshelij,lshelkl,lhelp,lcas2(4),lcas3(4)
commondata:calcint_new.f:      common /memors/ nsym,ijshp,isymm
commondata:calcint_new.f:      common /contr/ ngci,ngcj,ngck,ngcl,lci,lcj,lck,lcl,lcij,lckl
commondata:calcint_new.f:      common /primij/ iabprim, ijdim ,ijpar1
commondata:calcint_new.f:      common /howmany/ ntotal,noijkl,nopres,nohalf,nrimtot,nrimret
commondata:calcint_new.f:      common /memors/ nsym,ijshp,isymm
commondata:calcint_new.f:      common /primij/ iabprim, ijdim ,ijpar1
commondata:calcint_new.f:      common /howmany/ ntotal,noijkl,nopres,nohalf,nrimtot,nrimret
commondata:calcint_new.f:      common /memors/ nsym,ijshp,isymm
commondata:calcint_new.f:      common /primij/ iabprim, ijdim ,ijpar1
commondata:calcint_new.f:      common /howmany/ ntotal,noijkl,nopres,nohalf,nrimtot,nrimret
commondata:calcint_new.f:      common /memors/ nsym,ijshp,isymm
commondata:calcint_new.f:      common /primij/ iabprim, ijdim ,ijpar1
commondata:calcint_new.f:      common /howmany/ ntotal,noijkl,nopres,nohalf,nrimtot,nrimret
commondata:calcint_new.f:      common /memors/ nsym,ijshp,isymm
commondata:cshneg_new.f:      common /memor1/ iisd,jjsd,ijbld
commondata:destiny.f:C???? common /contr/ ngci,ngcj,ngck,ngcl,lci,lcj,lck,lcl,lcij,lckl
commondata:destiny.f:      common /contr/ ngci,ngcj,ngck,ngcl,lci,lcj,lck,lcl,lcij,lckl
commondata:dft_nmr.f:      common /dftpnt/ ird,iaij,idst,iixx,iiwt,ipre,iexp,
commondata:force2.f:      common /dimasse/ lqijr,lqklr,lqmxr,lij3,lkl3,l3l,lsss
commondata:hess2e.f:      common /dimasse/ lqijr,lqklr,lqmxr,lij3,lkl3,l3l,lsss
commondata:int_fock.f:      common /howmany/ ntotal,noijkl,nopres,nohalf,nrimtot,nrimret
commondata:int_fock.f:      common /howmany/ ntotal,noijkl,nopres,nohalf,nrimtot,nrimret
commondata:int_lmp2.f:      common /memor1c/ map_ij_bl2
commondata:int_lmp2.f:      common /memor1c/ map_ij_bl2
commondata:int_mp2d.f:      common /memor1c/ map_ij_bl2
commondata:memoha.f:      common /memor2/ nqrtd, nibld,nkbld, nijbd,nijed, nklbd,nkled
commondata:memoha.f:      common /memors/ nsym,ijshp,isymm
commondata:memoha.f:      common /contr/ ngci,ngcj,ngck,ngcl,lci,lcj,lck,lcl,lcij,lckl
commondata:memoha.f:      common /dimasse/ lqij,lqkl,lqmx,lij3,lkl3,l3l,lsss
commondata:memoha.f:      common /contr/ ngci,ngcj,ngck,ngcl,lci,lcj,lck,lcl,lcij,lckl
commondata:memoha.f:      common /contr/ ngci,ngcj,ngck,ngcl,lci,lcj,lck,lcl,lcij,lckl
commondata:memoha.f:      common /contr/ ngci,ngcj,ngck,ngcl,lci,lcj,lck,lcl,lcij,lckl
commondata:memoha.f:      common /contr/ ngci,ngcj,ngck,ngcl,lci,lcj,lck,lcl,lcij,lckl
commondata:memoha.f:      common /contr/ ngci,ngcj,ngck,ngcl,lci,lcj,lck,lcl,lcij,lckl
commondata:memoha.f:      common /contr/ ngci,ngcj,ngck,ngcl,lci,lcj,lck,lcl,lcij,lckl
commondata:newpara_slave.f:      common /dftpnt/ ird,iaij,idst,iixx,iiwt,ipre,iexp,
commondata:newpara_slave.f:      common /dftpnt/ ird,iaij,idst,iixx,iiwt,ipre,iexp,
commondata:newpara_slave.f:      common /dftpnt/ ird,iaij,idst,iixx,iiwt,ipre,iexp,
commondata:precalc.f:      common /primij/ iabprim, ijdim ,ijpar1
commondata:precalc.f:      common /ijcsfl/ ijblokp,ijprevf,ijprevl,ijtprev,maxprev,ngcprev
commondata:precalc.f:c keep it in common /ijcsfl/ and use it
commondata:precalc.f:c keep it in common /ijcsfl/ and use it in precalc...
commondata:precalc.f:      common /begin/ ijbegin,klbegin
commondata:precalc.f:      common /primij/ iabprim, ijdim ,ijpar1
commondata:precalc.f:      common /contr/ ngci,ngcj,ngck,ngcl,lci,lcj,lck,lcl,lcij,lckl
commondata:precalc.f:      common /begin/ ijbegin,klbegin
commondata:precalc.f:      common /begin/ ijbegin,klbegin
commondata:precalc.f:      common /begin/ ijbegin,klbegin
commondata:precalc.f:      common /begin/ ijbegin,klbegin
commondata:precalc.f:      common /begin/ ijbegin,klbegin
commondata:precalc.f:      common /primij/ iabprim, ijdim ,ijpar1
commondata:precalc.f:      common /contr/ ngci,ngcj,ngck,ngcl,lci,lcj,lck,lcl,lcij,lckl
commondata:precalc.f:c     common /begin/ ijbegin,klbegin
commondata:precalc.f:      common /begin/ ijbegin,klbegin
commondata:precalc.f:      common/shell/lshellt,lshelij,lshelkl,lhelp,lcas2(4),lcas3(4)
commondata:precalc.f:      common/shell/lshellt,lshelij,lshelkl,lhelp,lcas2(4),lcas3(4)
commondata:precalc_new.f:      common /primij/ iabprim, ijdim ,ijpar1
commondata:precalc_new.f:      common /begin/ ijbegin,klbegin
commondata:precalc_new.f:      common /primij/ iabprim, ijdim ,ijpar1
commondata:precalc_new.f:      common /contr/ ngci,ngcj,ngck,ngcl,lci,lcj,lck,lcl,lcij,lckl
commondata:precalc_new.f:      common /begin/ ijbegin,klbegin
commondata:precalc_new.f:      common /primij/ iabprim, ijdim ,ijpar1
commondata:precalc_new.f:      common /contr/ ngci,ngcj,ngck,ngcl,lci,lcj,lck,lcl,lcij,lckl
commondata:precalc_new.f:      common /begin/ ijbegin,klbegin
commondata:precalc_new.f:      common /begin/ ijbegin,klbegin
commondata:prepint2.f:      common /memor1/ iisd,jjsd,ijbld
commondata:prepint2.f:      common /memor2/ nqrtd, nibld,nkbld, nijbd,nijed, nklbd,nkled
commondata:prepint2.f:      common /memors/ nsymx,ijshp,isymm
commondata:rhf5.f:      common /dftpnt/ ird,iaij,idst,iixx,iiwt,ipre,iexp,
commondata:rhf5.f,v:      common /dftpnt/ ird,iaij,idst,iixx,iiwt,ipre,iexp,
commondata:rhf5_OLD.f:      common /dftpnt/ ird,iaij,idst,iixx,iiwt,ipre,iexp,
commondata:run_mode.f:      common /memor1/ iisd,jjsd,ijbld
commondata:run_mode.f:      common /memors/ nsym ,ijshp,isymm
commondata:run_mode.f:      common /memor1/ iisd,jjsd,ijbld
commondata:run_mode.f:      common /memors/ nsym ,ijshp,isymm
commondata:service.f:c extracts indices i & j from a common index ij=i*(i-1)/2 + j
commondata:service.f:c     extracts indices i and j a from common index ij=(i-1)*nj + j
commondata:service.f:      common /memors/ nsymx,ijshp,isymm
commondata:service.f:      common /memors/ nsymx,ijshp,isymm
commondata:shells.f:      common /contr/ ngci,ngcj,ngck,ngcl,lci,lcj,lck,lcl,lcij,lckl
commondata:shells.f:cccc  common /derivat/ ijderiv,klderiv
commondata:shells.f:c     common /derivat/ ijderiv,klderiv
commondata:shift2.f:      common /dimasse/ lqijr,lqklr,lqmxr,lij3,lkl3,l3l,lsss
commondata:uhf4.f:      common /dftpnt/ ird,iaij,idst,iixx,iiwt,ipre,iexp,
commondata:uhf4.f,v:      common /dftpnt/ ird,iaij,idst,iixx,iiwt,ipre,iexp,
commondata:zeroint.f:      common /dimasse/ lqij,lqkl,lqmx,lij3,lkl3,l3l,lsss
cosmo.f:            aij=0.d0
cosmo.f:                  aij=aij+1.d0/sqrt(y1*y1+y2*y2+y3*y3)
cosmo.f:                  aij = aij + 1.0d0/sqrt(aa)
cosmo.f:c                 aij=aij+((dirvec(1,j2)*rj-xx(1))**2+(dirvec(2,j2)*rj
cosmo.f:            aij=aij/nari/narj
cosmo.f:            aij=0.d0
cosmo.f:                 aij=aij+1.d0/bdist
cosmo.f:                 aij=aij+ak00+(bdist/rskj)*(1.d0/rskj-ak00)
cosmo.f:            aij=aij/nari
cosmo.f:               aij=1.d0/sqrt(dist)
cosmo.f:               rsij=(sqrt(ar(ips)/pi)+sqrt(ar(jps)/pi))/2.d0
cosmo.f:               if (dist.gt.rsij) then
cosmo.f:                 aij=1.d0/dist
cosmo.f:                 a00=fdiagr/sqpi/rsij
cosmo.f:                 aij=a00+(dist/rsij)*(1.d0/rsij-a00)
cosmo.f:            a1mat(ia1)=aij
cosmo.f:          a23mat(jps)=aij
cosmo.f:      data alpbet / 'abcdefghijklmnopqrstuvwxyz' /
cosmo_pqs.f:          iij=-1
cosmo_pqs.f:                  iij=iij+1
cosmo_pqs.f:                    ij=ii+jff
cosmo_pqs.f:                    oneint(ij)=bl(is+iij)
cosmo_pqs.f:              ij=0
cosmo_pqs.f:                  ij=ij+1
cosmo_pqs.f:                  ss(j1,i1,jgc,igc)=ss(j1,i1,jgc,igc)+s(ij)*coefi*coefj
cosmo_pqs.f:                  iij=0
cosmo_pqs.f:                     iij=iij+1
cosmo_pqs.f:                     ij=ii+jff
cosmo_pqs.f:                     dij=dn(ij)
cosmo_pqs.f:                     if(iff.ne.jff) dij=2.d0*dij
cosmo_pqs.f:                  iij_icr=iij+(icr-1)*len
cosmo_pqs.f:     *                           -(sa(iij_icr)+sb(iij_icr))*dij*qss
cosmo_pqs.f:                  atfor(icr,iat)=atfor(icr,iat)+sa(iij_icr)*dij*qss
cosmo_pqs.f:                  atfor(icr,jat)=atfor(icr,jat)+sb(iij_icr)*dij*qss
cosmo_pqs.f:      data alpbet / 'abcdefghijklmnopqrstuvwxyz' /
cphfdft.f:C  calculate inverse atomic distances, Becke aij parameters
cphfdft.f:          do ij=1,Nbas*(Nbas+1)/2
cphfdft.f:            ax=df1(1,ib,ij)
cphfdft.f:            ay=df1(2,ib,ij)
cphfdft.f:            az=df1(3,ib,ij)
cphfdft.f:            df1(1,ib,ij)=df1(1,ia,ij)
cphfdft.f:            df1(2,ib,ij)=df1(2,ia,ij)
cphfdft.f:            df1(3,ib,ij)=df1(3,ia,ij)
cphfdft.f:            df1(1,ia,ij)=ax
cphfdft.f:            df1(2,ia,ij)=ay
cphfdft.f:            df1(3,ia,ij)=az
cphfnum.f:c we need also (ix|h0|j)+(i|h0|jx) and S1ij=(i1|j)+(i|j1)
cphf_solvex.f:      ij=0
cphf_solvex.f:            ij=ij+1
cphf_solvex.f:            hfc(ij)     =hfc(ij)      - half*sux
cphf_solvex.f:            hfc(ntri+ij)=hfc(ntri+ij) - half*suy
cphf_solvex.f:            hfc(ntr2+ij)=hfc(ntr2+ij) - half*suz
cphf_solvex.f:      ij=0
cphf_solvex.f:            ij=ij+1
cphf_solvex.f:            hfc(ij)     =hfc(ij)      -halfx*sux
cphf_solvex.f:            hfc(ntri+ij)=hfc(ntri+ij) -halfx*suy
cphf_solvex.f:            hfc(ntr2+ij)=hfc(ntr2+ij) -halfx*suz
cphf_solvex.f:      ij=0
cphf_solvex.f:            ij=ij+1
cphf_solvex.f:            d1c(ij)=d1c(ij)-w1(j,i)
cphf_solvex.f:         ij=0
cphf_solvex.f:               ij=ij+1
cphf_solvex.f:               hfc(ij)=hfc(ij) - fact*sux
cphf_solvex.f:               ij=ii+j
cphf_solvex.f:               if(j.gt.i) ij=lind(j)+i
cphf_solvex.f:               sux=sux+vec(ja+j)*(foc(ij)-ej*ove(ij))
cphf_solvex.f:               ij=ii+j
cphf_solvex.f:               if(j.gt.i) ij=lind(j)+i
cphf_solvex.f:               dn1(ij)      =dn1(ij)       + cvx
cphf_solvex.f:               ij=ii+j
cphf_solvex.f:               if(j.gt.i) ij=lind(j)+i
cphf_solvex.f:               sux=sux + vec(ja+j)*foc(ij)
cphf_solvex.f:               ij=ii+j
cphf_solvex.f:               if(j.gt.i) ij=lind(j)+i
cphf_solvex.f:               dn1(ij)      =dn1(ij)       + cvx
cphf_solvex.f:      ij=0
cphf_solvex.f:          ij=ij+1
cphf_solvex.f:          b(ij)=a(i,j)+a(j,i)
cshneg.f:      subroutine schw_neg(nbls,ncs, npij,npkl,npkl0, nijbeg,nklbeg,
cshneg.f:     *                    nbl2,ibl,kbl,ijbl,iis,jjs, denspar,
cshneg.f:c according to the Schwarz inequality (ij|kl)**2 <(ij|ij)*(kl|kl)
cshneg.f:      dimension iis(*),jjs(*),ijbl(nbl2,*)
cshneg.f:c find  maximum of (ij|ij) & (kl|kl)
cshneg.f:      call getrval('x_ij_ij',x_ij_ij_max)
cshneg.f:         call schw_neq_fock(nbls,ncs,npij,npkl,npkl0,
cshneg.f:     *              nijbeg,nklbeg, nbl2,ibl,kbl,ijbl,iis,jjs,
cshneg.f:     *              denspar,bl(ischwarz),x_ij_ij_max,x_kl_kl_max,
cshneg.f:         call schw_neq_coul(nbls,ncs,npij,npkl,npkl0,
cshneg.f:     *              nijbeg,nklbeg, nbl2,ibl,kbl,ijbl,iis,jjs,
cshneg.f:     *              denspar,bl(ischwarz),x_ij_ij_max,x_kl_kl_max,
cshneg.f:         call schw_neq_forc(nbls,ncs,npij,npkl,npkl0,
cshneg.f:     *              nijbeg,nklbeg, nbl2,ibl,kbl,ijbl,iis,jjs,
cshneg.f:     *              denspar,bl(ischwarz),x_ij_ij_max,x_kl_kl_max,
cshneg.f:         call schw_neq_shif(nbls,ncs,npij,npkl,npkl0,
cshneg.f:     *              nijbeg,nklbeg, nbl2,ibl,kbl,ijbl,iis,jjs,
cshneg.f:     *              denspar,bl(ischwarz),x_ij_ij_max,x_kl_kl_max,
cshneg.f:         call schw_neq_giao(nbls,ncs,npij,npkl,npkl0,
cshneg.f:     *              nijbeg,nklbeg, nbl2,ibl,kbl,ijbl,iis,jjs,
cshneg.f:     *              denspar,bl(ischwarz),x_ij_ij_max,x_kl_kl_max,
cshneg.f:         call schw_neq_cphf(nbls,ncs,npij,npkl,npkl0,
cshneg.f:     *              nijbeg,nklbeg, nbl2,ibl,kbl,ijbl,iis,jjs,
cshneg.f:     *              denspar,bl(ischwarz),x_ij_ij_max,x_kl_kl_max,
cshneg.f:         call schw_neq_cph2(nbls,ncs,npij,npkl,npkl0,
cshneg.f:     *              nijbeg,nklbeg, nbl2,ibl,kbl,ijbl,iis,jjs,
cshneg.f:     *              denspar,bl(ischwarz),x_ij_ij_max,x_kl_kl_max,
cshneg.f:         call schw_neq_2pde(nbls,ncs,npij,npkl,npkl0,
cshneg.f:     *              nijbeg,nklbeg, nbl2,ibl,kbl,ijbl,iis,jjs,
cshneg.f:     *              denspar,bl(ischwarz),x_ij_ij_max,x_kl_kl_max,
cshneg.f:         call schw_neq_2pd1(nbls,ncs,npij,npkl,npkl0,
cshneg.f:     *              nijbeg,nklbeg, nbl2,ibl,kbl,ijbl,iis,jjs,
cshneg.f:     *              denspar,bl(ischwarz),x_ij_ij_max,x_kl_kl_max,
cshneg.f:c on return the Ipres(ijkl) has a value of 0 if it is to be neglect.
cshneg.f:      subroutine schw_finder(ncs,npij,ijbegin,nbl2,ibl,ijbl,iis,jjs,
cshneg.f:     *                       schwarz, x_ij_ij_max)
cshneg.f:      dimension iis(*),jjs(*),ijbl(nbl2,*)
cshneg.f:      ijpar=ijbegin
cshneg.f:      ijcs=ijbl(ibl,ijpar)
cshneg.f:      ics=iis(ijcs)
cshneg.f:      jcs=jjs(ijcs)
cshneg.f:      x_ij_ij_max=schwarz(ics,jcs)
cshneg.f:c     x_ij_ij_max=zero
cshneg.f:c     do ijc=1,npij
cshneg.f:c        ijpar=ijbegin-1+ijc
cshneg.f:c        ijcs=ijbl(ibl,ijpar)
cshneg.f:c        ics=iis(ijcs)
cshneg.f:c        jcs=jjs(ijcs)
cshneg.f:c        if(xschw.gt.x_ij_ij_max) x_ij_ij_max=xschw
cshneg.f:      subroutine schw_neq_fock(nbls,ncs,npij,npkl,npkl0,
cshneg.f:     *                  nijbeg,nklbeg,nbl2,ibl,kbl,ijbl,iis,jjs,
cshneg.f:     *                  denspar,schwarz, x_ij_ij_max, x_kl_kl_max,
cshneg.f:c npij     : number of IJcs pairs in this block of quartets
cshneg.f:c x_ij_ij_max : maximum of (ij|ij) in the current block
cshneg.f:c densmax(ijkl) will be used in prec4neg & precspec
cshneg.f:c               ONLY if ipres(ijkl)>0
cshneg.f:      dimension iis(*),jjs(*),ijbl(nbl2,*)
cshneg.f:      do ijc=1,npij
cshneg.f:         ijpar=nijbeg-1+ijc
cshneg.f:         ijcs=ijbl(ibl,ijpar)
cshneg.f:         ics=iis(ijcs)
cshneg.f:         jcs=jjs(ijcs)
cshneg.f:         dij=denspar(ics,jcs)
cshneg.f:            npkl_e=ijc
cshneg.f:            ijij=ijc*(ijc-1)/2
cshneg.f:            ijij=(ijc-1)*npkl
cshneg.f:         x_ij_ij=schwarz(ics,jcs)
cshneg.f:         dens1mx_ij=dens1max * x_ij_ij
cshneg.f:         estim_max=dens1mx_ij * x_kl_kl_max
cshneg.f:c           all next ijpairs will have x_ij_ij even smaller so
cshneg.f:            do iqrt=ijij+1,nbls
cshneg.f:            nblsp=nblsp-(nbls-ijij)
cshneg.f:               klcs=ijbl(kbl,klpar)
cshneg.f:               ijkl=ijij+klc
cshneg.f:               if(ipres(ijkl).eq.0) then
cshneg.f:               estim_max=dens1mx_ij * x_kl_kl
cshneg.f:                     ipres(ijij+iqrt)=0
cshneg.f:                  call get_dmx_fock(dij,dik,dil,djk,djl,dkl,dmx)
cshneg.f:                  estim_max=dmx*x_ij_ij * x_kl_kl
cshneg.f:                     ipres(ijkl)=0
cshneg.f:                     densmax(ijkl)=dmx
cshneg.f:         endif                      ! (estim_max.LT.eps2) ij
cshneg.f:      enddo                         ! ijc=1,npij
cshneg.f:      subroutine get_dmx_fock(dij,dik,dil,djk,djl,dkl,dmx)
cshneg.f:         dmx=max(4.d0*dij,dik,dil,djk,djl,4.d0*dkl)
cshneg.f:      subroutine schw_neq_coul(nbls,ncs,npij,npkl,npkl0,
cshneg.f:     *                  nijbeg,nklbeg,nbl2,ibl,kbl,ijbl,iis,jjs,
cshneg.f:     *                  denspar,schwarz, x_ij_ij_max, x_kl_kl_max,
cshneg.f:c npij     : number of IJcs pairs in this block of quartets
cshneg.f:c x_ij_ij_max : maximum of (ij|ij) in the current block
cshneg.f:c densmax(ijkl) will be used in prec4neg & precspec
cshneg.f:c               ONLY if ipres(ijkl)>0
cshneg.f:      dimension iis(*),jjs(*),ijbl(nbl2,*)
cshneg.f:      do ijc=1,npij
cshneg.f:         ijpar=nijbeg-1+ijc
cshneg.f:         ijcs=ijbl(ibl,ijpar)
cshneg.f:         ics=iis(ijcs)
cshneg.f:         jcs=jjs(ijcs)
cshneg.f:         dij=denspar(ics,jcs)
cshneg.f:            npkl_e=ijc
cshneg.f:            ijij=ijc*(ijc-1)/2
cshneg.f:            ijij=(ijc-1)*npkl
cshneg.f:         x_ij_ij=schwarz(ics,jcs)
cshneg.f:         dens1mx_ij=dens1max * x_ij_ij
cshneg.f:         estim_max=dens1mx_ij * x_kl_kl_max
cshneg.f:c           all next ijpairs will have x_ij_ij even smaller so
cshneg.f:            do iqrt=ijij+1,nbls
cshneg.f:            nblsp=nblsp-(nbls-ijij)
cshneg.f:               klcs=ijbl(kbl,klpar)
cshneg.f:               ijkl=ijij+klc
cshneg.f:               if(ipres(ijkl).eq.0) then
cshneg.f:               estim_max=dens1mx_ij * x_kl_kl
cshneg.f:                     ipres(ijij+iqrt)=0
cshneg.f:                  call get_dmx_coul(dij,dkl,dmx)
cshneg.f:                  estim_max=dmx*x_ij_ij * x_kl_kl
cshneg.f:                     ipres(ijkl)=0
cshneg.f:                     densmax(ijkl)=dmx
cshneg.f:         endif                      ! (estim_max.LT.eps2) ij
cshneg.f:      enddo                         ! ijc=1,npij
cshneg.f:      subroutine get_dmx_coul(dij,dkl,dmx)
cshneg.f:         dmx = 4.0d0*max(dij,dkl)    ! ** NEW  JB **
cshneg.f:      subroutine schw_neq_forc(nbls,ncs,npij,npkl,npkl0,
cshneg.f:     *                  nijbeg,nklbeg,nbl2,ibl,kbl,ijbl,iis,jjs,
cshneg.f:     *                  denspar,schwarz, x_ij_ij_max, x_kl_kl_max,
cshneg.f:c npij     : number of IJcs pairs in this block of quartets
cshneg.f:c x_ij_ij_max : maximum of (ij|ij) in the current block
cshneg.f:c densmax(ijkl) will be used in prec4neg & precspec
cshneg.f:c               ONLY if ipres(ijkl)>0
cshneg.f:      dimension iis(*),jjs(*),ijbl(nbl2,*)
cshneg.f:      do ijc=1,npij
cshneg.f:         ijpar=nijbeg-1+ijc
cshneg.f:         ijcs=ijbl(ibl,ijpar)
cshneg.f:         ics=iis(ijcs)
cshneg.f:         jcs=jjs(ijcs)
cshneg.f:         dij=denspar(ics,jcs)
cshneg.f:            npkl_e=ijc
cshneg.f:            ijij=ijc*(ijc-1)/2
cshneg.f:            ijij=(ijc-1)*npkl
cshneg.f:         x_ij_ij=schwarz(ics,jcs)
cshneg.f:         dens1mx_ij=dens1max * x_ij_ij
cshneg.f:         estim_max=dens1mx_ij * x_kl_kl_max
cshneg.f:c           all next ijpairs will have x_ij_ij even smaller so
cshneg.f:            do iqrt=ijij+1,nbls
cshneg.f:            nblsp=nblsp-(nbls-ijij)
cshneg.f:               klcs=ijbl(kbl,klpar)
cshneg.f:               ijkl=ijij+klc
cshneg.f:               if(ipres(ijkl).eq.0) then
cshneg.f:               estim_max=dens1mx_ij * x_kl_kl
cshneg.f:                     ipres(ijij+iqrt)=0
cshneg.f:                  call get_dmx_forc(dij,dik,dil,djk,djl,dkl,dmx)
cshneg.f:                  estim_max=dmx*x_ij_ij * x_kl_kl
cshneg.f:                     ipres(ijkl)=0
cshneg.f:                     densmax(ijkl)=dmx
cshneg.f:         endif                      ! (estim_max.LT.eps2) ij
cshneg.f:      enddo                         ! ijc=1,npij
cshneg.f:      subroutine get_dmx_forc(dij,dik,dil,djk,djl,dkl,dmx)
cshneg.f:         dmx=4.d0*dij*dkl + dik*djl + dil*djk
cshneg.f:      subroutine schw_neq_shif(nbls,ncs,npij,npkl,npkl0,
cshneg.f:     *                  nijbeg,nklbeg,nbl2,ibl,kbl,ijbl,iis,jjs,
cshneg.f:     *                  denspar,schwarz, x_ij_ij_max, x_kl_kl_max,
cshneg.f:c npij     : number of IJcs pairs in this block of quartets
cshneg.f:c x_ij_ij_max : maximum of (ij|ij) in the current block
cshneg.f:c densmax(ijkl) will be used in prec4neg & precspec
cshneg.f:c               ONLY if ipres(ijkl)>0
cshneg.f:      dimension iis(*),jjs(*),ijbl(nbl2,*)
cshneg.f:      do ijc=1,npij
cshneg.f:         ijpar=nijbeg-1+ijc
cshneg.f:         ijcs=ijbl(ibl,ijpar)
cshneg.f:         ics=iis(ijcs)
cshneg.f:         jcs=jjs(ijcs)
cshneg.f:         dij=denspar(ics,jcs)
cshneg.f:            npkl_e=ijc
cshneg.f:            ijij=ijc*(ijc-1)/2
cshneg.f:            ijij=(ijc-1)*npkl
cshneg.f:         x_ij_ij=schwarz(ics,jcs)
cshneg.f:         dens1mx_ij=dens1max * x_ij_ij
cshneg.f:         estim_max=dens1mx_ij * x_kl_kl_max
cshneg.f:c           all next ijpairs will have x_ij_ij even smaller so
cshneg.f:            do iqrt=ijij+1,nbls
cshneg.f:            nblsp=nblsp-(nbls-ijij)
cshneg.f:               klcs=ijbl(kbl,klpar)
cshneg.f:               ijkl=ijij+klc
cshneg.f:               if(ipres(ijkl).eq.0) then
cshneg.f:               estim_max=dens1mx_ij * x_kl_kl
cshneg.f:                     ipres(ijij+iqrt)=0
cshneg.f:                  call get_dmx_shif(dij,dik,dil,djk,djl,dkl,dmx)
cshneg.f:                  estim_max=dmx*x_ij_ij * x_kl_kl
cshneg.f:                     ipres(ijkl)=0
cshneg.f:                     densmax(ijkl)=dmx
cshneg.f:         endif                      ! (estim_max.LT.eps2) ij
cshneg.f:      enddo                         ! ijc=1,npij
cshneg.f:      subroutine get_dmx_shif(dij,dik,dil,djk,djl,dkl,dmx)
cshneg.f:         dmx1=max(dij,dkl)
cshneg.f:      subroutine schw_neq_cphf(nbls,ncs,npij,npkl,npkl0,
cshneg.f:     *                  nijbeg,nklbeg,nbl2,ibl,kbl,ijbl,iis,jjs,
cshneg.f:     *                  denspar,schwarz, x_ij_ij_max, x_kl_kl_max,
cshneg.f:c npij     : number of IJcs pairs in this block of quartets
cshneg.f:c x_ij_ij_max : maximum of (ij|ij) in the current block
cshneg.f:c densmax(ijkl) will be used in prec4neg & precspec
cshneg.f:c               ONLY if ipres(ijkl)>0
cshneg.f:      dimension iis(*),jjs(*),ijbl(nbl2,*)
cshneg.f:      do ijc=1,npij
cshneg.f:         ijpar=nijbeg-1+ijc
cshneg.f:         ijcs=ijbl(ibl,ijpar)
cshneg.f:         ics=iis(ijcs)
cshneg.f:         jcs=jjs(ijcs)
cshneg.f:            npkl_e=ijc
cshneg.f:            ijij=ijc*(ijc-1)/2
cshneg.f:            ijij=(ijc-1)*npkl
cshneg.f:         x_ij_ij=schwarz(ics,jcs)
cshneg.f:         dens1mx_ij=dens1max * x_ij_ij
cshneg.f:         estim_max=dens1mx_ij * x_kl_kl_max
cshneg.f:c           all next ijpairs will have x_ij_ij even smaller so
cshneg.f:            do iqrt=ijij+1,nbls
cshneg.f:            nblsp=nblsp-(nbls-ijij)
cshneg.f:               klcs=ijbl(kbl,klpar)
cshneg.f:               ijkl=ijij+klc
cshneg.f:               if(ipres(ijkl).eq.0) then
cshneg.f:               estim_max=dens1mx_ij * x_kl_kl
cshneg.f:                     ipres(ijij+iqrt)=0
cshneg.f:                  estim_max=dmx*x_ij_ij * x_kl_kl
cshneg.f:                     ipres(ijkl)=0
cshneg.f:                     densmax(ijkl)=dmx
cshneg.f:         endif                      ! (estim_max.LT.eps2) ij
cshneg.f:      enddo                         ! ijc=1,npij
cshneg.f:      subroutine schw_neq_2pde_old(nbls,ncs,npij,npkl,npkl0,
cshneg.f:     *                  nijbeg,nklbeg,nbl2,ibl,kbl,ijbl,iis,jjs,
cshneg.f:     *                  denspar,schwarz, x_ij_ij_max, x_kl_kl_max,
cshneg.f:c npij     : number of IJcs pairs in this block of quartets
cshneg.f:c x_ij_ij_max : maximum of (ij|ij) in the current block
cshneg.f:c densmax(ijkl) will be used in prec4neg & precspec
cshneg.f:c               ONLY if ipres(ijkl)>0
cshneg.f:      dimension iis(*),jjs(*),ijbl(nbl2,*)
cshneg.f:      do ijc=1,npij
cshneg.f:         ijpar=nijbeg-1+ijc
cshneg.f:         ijcs=ijbl(ibl,ijpar)
cshneg.f:         ics=iis(ijcs)
cshneg.f:         jcs=jjs(ijcs)
cshneg.f:         d1ij=denspar(ics,jcs,1)
cshneg.f:         d2ij=denspar(ics,jcs,2)
cshneg.f:            npkl_e=ijc
cshneg.f:            ijij=ijc*(ijc-1)/2
cshneg.f:            ijij=(ijc-1)*npkl
cshneg.f:         x_ij_ij=schwarz(ics,jcs)
cshneg.f:         dens1mx_ij=dens1max * x_ij_ij
cshneg.f:         estim_max=dens1mx_ij * x_kl_kl_max
cshneg.f:c           all next ijpairs will have x_ij_ij even smaller so
cshneg.f:            do iqrt=ijij+1,nbls
cshneg.f:            nblsp=nblsp-(nbls-ijij)
cshneg.f:               klcs=ijbl(kbl,klpar)
cshneg.f:               ijkl=ijij+klc
cshneg.f:               if(ipres(ijkl).eq.0) then
cshneg.f:               estim_max=dens1mx_ij * x_kl_kl
cshneg.f:                     ipres(ijij+iqrt)=0
cshneg.f:                  call get_dmx_2pde(d1ij,d1ik,d1il,d1jk,d1jl,d1kl,
cshneg.f:     *                              d2ij,d2ik,d2il,d2jk,d2jl,d2kl,dmx)
cshneg.f:                  estim_max=dmx*x_ij_ij * x_kl_kl
cshneg.f:                     ipres(ijkl)=0
cshneg.f:                     densmax(ijkl)=dmx
cshneg.f:         endif                      ! (estim_max.LT.eps2) ij
cshneg.f:      enddo                         ! ijc=1,npij
cshneg.f:      subroutine schw_neq_2pde(nbls,ncs,npij,npkl,npkl0,
cshneg.f:     *                  nijbeg,nklbeg,nbl2,ibl,kbl,ijbl,iis,jjs,
cshneg.f:     *                  denspar,schwarz, x_ij_ij_max, x_kl_kl_max,
cshneg.f:c npij     : number of IJcs pairs in this block of quartets
cshneg.f:c x_ij_ij_max : maximum of (ij|ij) in the current block
cshneg.f:c densmax(ijkl) will be used in prec4neg & precspec
cshneg.f:c               ONLY if ipres(ijkl)>0
cshneg.f:      dimension iis(*),jjs(*),ijbl(nbl2,*)
cshneg.f:      do ijc=1,npij
cshneg.f:         ijpar=nijbeg-1+ijc
cshneg.f:         ijcs=ijbl(ibl,ijpar)
cshneg.f:         ics=iis(ijcs)
cshneg.f:         jcs=jjs(ijcs)
cshneg.f:         d2ij=denspar(ics,jcs,2)
cshneg.f:            npkl_e=ijc
cshneg.f:            ijij=ijc*(ijc-1)/2
cshneg.f:            ijij=(ijc-1)*npkl
cshneg.f:         x_ij_ij=schwarz(ics,jcs)
cshneg.f:         dens1mx_ij=dens1max * x_ij_ij
cshneg.f:         estim_max=dens1mx_ij * x_kl_kl_max
cshneg.f:c           all next ijpairs will have x_ij_ij even smaller so
cshneg.f:            do iqrt=ijij+1,nbls
cshneg.f:            nblsp=nblsp-(nbls-ijij)
cshneg.f:               klcs=ijbl(kbl,klpar)
cshneg.f:               ijkl=ijij+klc
cshneg.f:               if(ipres(ijkl).eq.0) then
cshneg.f:               estim_max=dens1mx_ij * x_kl_kl
cshneg.f:                     ipres(ijij+iqrt)=0
cshneg.f:                  call get_dmx_2pde(d1jk, d1kl, d2ij, d2il,dmx)
cshneg.f:                  estim_max=dmx*x_ij_ij * x_kl_kl
cshneg.f:                     ipres(ijkl)=0
cshneg.f:                     densmax(ijkl)=dmx
cshneg.f:         endif                      ! (estim_max.LT.eps2) ij
cshneg.f:      enddo                         ! ijc=1,npij
cshneg.f:      subroutine get_dmx_2pde_old(d1ij,d1ik,d1il,d1jk,d1jl,d1kl,
cshneg.f:     *                        d2ij,d2ik,d2il,d2jk,d2jl,d2kl,dmx)
cshneg.f:         dijkl12=d1ij*d2kl
cshneg.f:         dijkl21=d2ij*d1kl
cshneg.f:         dmx12=4.d0*dijkl12 + dikjl12 + diljk12
cshneg.f:         dmx21=4.d0*dijkl21 + dikjl21 + diljk21
cshneg.f:      subroutine get_dmx_2pde(d1jk,d1kl, d2ij,d2il, dmx)
cshneg.f:c where matrix Dij = Ci * Cj/(e_o - e_v) so
cshneg.f:c s_ov= SUM_ij[ Dij*G(D1,g0)ij]= SUM_ijkl{ Dij*D1kl*g0ijkl }
cshneg.f:         dijkl21=d2ij*d1kl
cshneg.f:         dmx21=dijkl21 + 0.5d0*diljk21
cshneg.f:      subroutine schw_neq_cph2(nbls,ncs,npij,npkl,npkl0,
cshneg.f:     *                  nijbeg,nklbeg,nbl2,ibl,kbl,ijbl,iis,jjs,
cshneg.f:     *                  denspar,schwarz, x_ij_ij_max, x_kl_kl_max,
cshneg.f:c npij     : number of IJcs pairs in this block of quartets
cshneg.f:c x_ij_ij_max : maximum of (ij|ij) in the current block
cshneg.f:c densmax(ijkl) will be used in prec4neg & precspec
cshneg.f:c               ONLY if ipres(ijkl)>0
cshneg.f:      dimension iis(*),jjs(*),ijbl(nbl2,*)
cshneg.f:      do ijc=1,npij
cshneg.f:         ijpar=nijbeg-1+ijc
cshneg.f:         ijcs=ijbl(ibl,ijpar)
cshneg.f:         ics=iis(ijcs)
cshneg.f:         jcs=jjs(ijcs)
cshneg.f:            npkl_e=ijc
cshneg.f:            ijij=ijc*(ijc-1)/2
cshneg.f:            ijij=(ijc-1)*npkl
cshneg.f:         x_ij_ij=schwarz(ics,jcs)
cshneg.f:         dens1mx_ij=dens1max * x_ij_ij
cshneg.f:         estim_max=dens1mx_ij * x_kl_kl_max
cshneg.f:c           all next ijpairs will have x_ij_ij even smaller so
cshneg.f:            do iqrt=ijij+1,nbls
cshneg.f:            nblsp=nblsp-(nbls-ijij)
cshneg.f:               klcs=ijbl(kbl,klpar)
cshneg.f:               ijkl=ijij+klc
cshneg.f:               if(ipres(ijkl).eq.0) then
cshneg.f:               estim_max=dens1mx_ij * x_kl_kl
cshneg.f:                     ipres(ijij+iqrt)=0
cshneg.f:                  estim_max=dmx*x_ij_ij * x_kl_kl
cshneg.f:                     ipres(ijkl)=0
cshneg.f:                     densmax(ijkl)=dmx
cshneg.f:         endif                      ! (estim_max.LT.eps2) ij
cshneg.f:      enddo                         ! ijc=1,npij
cshneg.f:      subroutine schw_neq_giao(nbls,ncs,npij,npkl,npkl0,
cshneg.f:     *                  nijbeg,nklbeg,nbl2,ibl,kbl,ijbl,iis,jjs,
cshneg.f:     *                  denspar,schwarz, x_ij_ij_max, x_kl_kl_max,
cshneg.f:c npij     : number of IJcs pairs in this block of quartets
cshneg.f:c x_ij_ij_max : maximum of (ij|ij) in the current block
cshneg.f:c densmax(ijkl) will be used in prec4neg & precspec
cshneg.f:c               ONLY if ipres(ijkl)>0
cshneg.f:      dimension iis(*),jjs(*),ijbl(nbl2,*)
cshneg.f:      do ijc=1,npij
cshneg.f:         ijpar=nijbeg-1+ijc
cshneg.f:         ijcs=ijbl(ibl,ijpar)
cshneg.f:         ics=iis(ijcs)
cshneg.f:         jcs=jjs(ijcs)
cshneg.f:         d1ij=denspar(ics,jcs,1)
cshneg.f:         d2ij=denspar(ics,jcs,2)
cshneg.f:            npkl_e=ijc
cshneg.f:            ijij=ijc*(ijc-1)/2
cshneg.f:            ijij=(ijc-1)*npkl
cshneg.f:         x_ij_ij=schwarz(ics,jcs)
cshneg.f:         dens1mx_ij=dens1max * x_ij_ij
cshneg.f:         estim_max=dens1mx_ij * x_kl_kl_max
cshneg.f:c           all next ijpairs will have x_ij_ij even smaller so
cshneg.f:            do iqrt=ijij+1,nbls
cshneg.f:            nblsp=nblsp-(nbls-ijij)
cshneg.f:               klcs=ijbl(kbl,klpar)
cshneg.f:               ijkl=ijij+klc
cshneg.f:               if(ipres(ijkl).eq.0) then
cshneg.f:               estim_max=dens1mx_ij * x_kl_kl
cshneg.f:                     ipres(ijij+iqrt)=0
cshneg.f:                  call get_dmx_giao(d1ij,d1ik,d1il,d1jk,d1jl,d1kl,
cshneg.f:     *                              d2ij,d2ik,d2il,d2jk,d2jl,d2kl,dmx)
cshneg.f:                  estim_max=dmx*x_ij_ij * x_kl_kl
cshneg.f:                     ipres(ijkl)=0
cshneg.f:                     densmax(ijkl)=dmx
cshneg.f:         endif                      ! (estim_max.LT.eps2) ij
cshneg.f:      enddo                         ! ijc=1,npij
cshneg.f:      subroutine get_dmx_giao(d1ij,d1ik,d1il,d1jk,d1jl,d1kl,
cshneg.f:     *                        d2ij,d2ik,d2il,d2jk,d2jl,d2kl,dmx)
cshneg.f:c        dmx=max(dij,dik_h,dil_h,djk_h,djl_h,dkl)
cshneg.f:c        dmx1=max(dij,dkl)
cshneg.f:         dmx1=4.d0*d1ij*d2kl + d1ik*d2jl + d1il*d2jk
cshneg.f:         dmx2=4.d0*d2ij*d1kl + d2ik*d1jl + d2il*d1jk
cshneg.f:      subroutine schw_neq_2pd1(nbls,ncs,npij,npkl,npkl0,
cshneg.f:     *                  nijbeg,nklbeg,nbl2,ibl,kbl,ijbl,iis,jjs,
cshneg.f:     *                  denspar,schwarz, x_ij_ij_max, x_kl_kl_max,
cshneg.f:c npij     : number of IJcs pairs in this block of quartets
cshneg.f:c x_ij_ij_max : maximum of (ij|ij) in the current block
cshneg.f:c densmax(ijkl) will be used in prec4neg & precspec
cshneg.f:c               ONLY if ipres(ijkl)>0
cshneg.f:      dimension iis(*),jjs(*),ijbl(nbl2,*)
cshneg.f:      do ijc=1,npij
cshneg.f:         ijpar=nijbeg-1+ijc
cshneg.f:         ijcs=ijbl(ibl,ijpar)
cshneg.f:         ics=iis(ijcs)
cshneg.f:         jcs=jjs(ijcs)
cshneg.f:         dij=denspar(ics,jcs)
cshneg.f:            npkl_e=ijc
cshneg.f:            ijij=ijc*(ijc-1)/2
cshneg.f:            ijij=(ijc-1)*npkl
cshneg.f:         x_ij_ij=schwarz(ics,jcs)
cshneg.f:         dens1mx_ij=dens1max * x_ij_ij
cshneg.f:         estim_max=dens1mx_ij * x_kl_kl_max
cshneg.f:c           all next ijpairs will have x_ij_ij even smaller so
cshneg.f:            do iqrt=ijij+1,nbls
cshneg.f:            nblsp=nblsp-(nbls-ijij)
cshneg.f:               klcs=ijbl(kbl,klpar)
cshneg.f:               ijkl=ijij+klc
cshneg.f:               if(ipres(ijkl).eq.0) then
cshneg.f:               estim_max=dens1mx_ij * x_kl_kl
cshneg.f:                     ipres(ijij+iqrt)=0
cshneg.f:                  call get_dmx_2pd1(dij,dik,dil,djk,djl,dkl,dmx)
cshneg.f:                  estim_max=dmx*x_ij_ij * x_kl_kl
cshneg.f:                     ipres(ijkl)=0
cshneg.f:                     densmax(ijkl)=dmx
cshneg.f:         endif                      ! (estim_max.LT.eps2) ij
cshneg.f:      enddo                         ! ijc=1,npij
cshneg.f:      subroutine get_dmx_2pd1(dij,dik,dil,djk,djl,dkl,dmx)
cshneg.f:      dijkl=dij*dkl
cshneg.f:      dmx=4.d0*dijkl + dikjl + diljk
cshneg_new.f:     *                        ibl,ijbl,nbl2_ijd,nijbeg,npij,
cshneg_new.f:c according to the Schwarz inequality (ij|kl)**2 <(ij|ij)*(kl|kl)
cshneg_new.f:      dimension ijbl(nbl2_ijd,*)
cshneg_new.f:c find  maximum of (ij|ij) & (kl|kl) for this block
cshneg_new.f:      call schw_finder(ncs,npij,nijbeg,nbl2_ijd,ibl,ijbl,iis,jjs,
cshneg_new.f:     *                 bl(ischwarz),x_ij_ij_max )
cshneg_new.f:         x_kl_kl_max=x_ij_ij_max
cshneg_new.f:     *                  ibl,ijbl,nbl2_ijd,nijbeg,npij,
cshneg_new.f:     *              denspar,bl(ischwarz),x_ij_ij_max,x_kl_kl_max,
cshneg_new.f:c on return the Ipres(ijkl) has a value of 0 if it is to be neglect.
cshneg_new.f:     *                        ibl,ijbl,nbl2_ijd,nijbeg,npij,
cshneg_new.f:     *                  denspar,schwarz, x_ij_ij_max, x_kl_kl_max,
cshneg_new.f:c npij     : number of IJcs pairs in this block of quartets
cshneg_new.f:c x_ij_ij_max : maximum of (ij|ij) in the current block
cshneg_new.f:c densmax(ijkl) will be used in prec4neg & precspec
cshneg_new.f:c               ONLY if ipres(ijkl)>0
cshneg_new.f:      dimension ijbl(nbl2_ijd,*)
cshneg_new.f:      estim_max=dens1max * x_ij_ij_max * x_kl_kl_max
cshneg_new.f:         do ijkl=1,nbls
cshneg_new.f:            ipres(ijkl)=0
cshneg_new.f:      do ijc=1,npij
cshneg_new.f:         ijpar=nijbeg-1+ijc
cshneg_new.f:         ijcs=ijbl(ibl,ijpar)
cshneg_new.f:         ics=iis(ijcs)
cshneg_new.f:         jcs=jjs(ijcs)
cshneg_new.f:            npkl_e=ijc
cshneg_new.f:            ijij=ijc*(ijc-1)/2
cshneg_new.f:            ijij=(ijc-1)*npkl
cshneg_new.f:         x_ij_ij=schwarz(ics,jcs)
cshneg_new.f:         dens1mx_ij=dens1max * x_ij_ij
cshneg_new.f:         estim_max=dens1mx_ij * x_kl_kl_max
cshneg_new.f:c           neglect quatrtets from this ijcs pair and ALL klcs pairs
cshneg_new.f:            do ijc1=ijc,npij
cshneg_new.f:                  npkl_e1=ijc1
cshneg_new.f:                  ijij1=ijc1*(ijc1-1)/2
cshneg_new.f:                  ijij1=(ijc1-1)*npkl
cshneg_new.f:                  ipres(ijij1+iqrt)=0
cshneg_new.f:            go to 7777      ! exit ij loop
cshneg_new.f:               ijkl=ijij+klc
cshneg_new.f:               if(ipres(ijkl).eq.0) go to 9999  ! already 0  ????
cshneg_new.f:               estim_max=dens1mx_ij * x_kl_kl
cshneg_new.f:                      ipres(ijij+iqrt)=0
cshneg_new.f:                  estim_max=dmx*x_ij_ij * x_kl_kl
cshneg_new.f:                     ipres(ijkl)=0
cshneg_new.f:                     densmax(ijkl)=dmx
cshneg_new.f:         endif                      ! (estim_max.LT.eps2) ij
cshneg_new.f:      enddo                         ! ijc=1,npij
cshneg_new.f:      common /memor1/ iisd,jjsd,ijbld
cshneg_new.f:         call getival('nparx',npar_ij)
cshneg_new.f:         call getival('ijblx',ijbl)
cshneg_new.f:c....... call getival('mapijblx',map_ij_bl2_ij)
cshneg_new.f:         call getival('blocksij',nbl2_ij)
cshneg_new.f:         call getival('blpredij',nbl2_ijd)
cshneg_new.f:         call getival('ijbly',klbl)
cshneg_new.f:c....... call getival('mapijbly',map_ij_bl2_kl)
cshneg_new.f:     *                       ibl,bl(ijbl),nbl2_ijd,bl(npar_ij),
cshneg_new.f:     *                      dij,dik,dil,djk,djl,dkl)
cshneg_new.f:         call dmax_finder_n(ncs,denspar,'allijkl',
cshneg_new.f:     *                      dij,dik,dil,djk,djl,dkl)
cshneg_new.f:c        dij,dik,dil,djk,djl,dkl are NOT yet squared
cshneg_new.f:         dmx=4.d0*dij*dkl + dik*djl + dil*djk
cshneg_new.f:c        dij,dik,dil,djk,djl,dkl are already squared
cshneg_new.f:         dij_16=dij*16.d0      ! 16 is 4**2
cshneg_new.f:         dmx=max(dij_16,dik,dil,djk,djl,dkl_16)
cshneg_new.f:         dmx = max(dij*16.0d0,dkl*16.0d0)    ! ** NEW  JB **
cshneg_new.f:         dmx=max(dij,dik_h,dil_h,djk_h,djl_h,dkl)
cshneg_new.f:         dmx=max(dij,dik,dil,djk,djl,dkl)
cshneg_new.f:     *                             ibl,ijbl,nbl2_ijd,npar_ij,
cshneg_new.f:      dimension ijbl(nbl2_ijd,*), npar_ij(*)
cshneg_new.f:      nparij=npar_ij(ibl)
cshneg_new.f:      nijbeg=1
cshneg_new.f:      call shel_finder_n(nparij,nijbeg,nbl2_ijd,ibl,ijbl,iis,jjs,
cshneg_new.f:      subroutine shel_finder_n(npij,ijbegin,nbl2,ibl,ijbl,iis,jjs,
cshneg_new.f:      dimension iis(*),jjs(*),ijbl(nbl2,*)
cshneg_new.f:      ijpar_b=ijbegin
cshneg_new.f:      ijpar_e=ijbegin-1+npij
cshneg_new.f:      call minimax_ij(ibl,ijbl,nbl2,ijpar_b,ijpar_e,iis,jjs,
cshneg_new.f:      subroutine minimax_ij(ibl,ijbl,nbl2,ijpar_b,ijpar_e,iis,jjs,
cshneg_new.f:      dimension iis(*),jjs(*),ijbl(nbl2,*)
cshneg_new.f:      do ijpar=ijpar_b,ijpar_e
cshneg_new.f:         ijcs=ijbl(ibl,ijpar)
cshneg_new.f:         ics=iis(ijcs)
cshneg_new.f:         jcs=jjs(ijcs)
cshneg_new.f:     *             dij_max,dik_max,dil_max,djk_max,djl_max,dkl_max)
cshneg_new.f:c it can be : 'allijkl' ,
cshneg_new.f:c             'dij_max', 'dik_max', 'dil_max',
cshneg_new.f:      dij_max=zero
cshneg_new.f:      IF(WHAT2FIND.EQ.'allijkl') THEN
cshneg_new.f:c          ij,ik,il :
cshneg_new.f:               dij=denspar(ics,jcs)
cshneg_new.f:               if(dij.gt.dij_max) dij_max=dij
cshneg_new.f:      ENDIF          !       IF(WHAT2FIND.EQ.'allijkl') THEN
cshneg_new.f:      IF(WHAT2FIND.EQ.'dij_max') THEN
cshneg_new.f:c        ij :
cshneg_new.f:               dij=denspar(ics,jcs)
cshneg_new.f:               if(dij.gt.dij_max) dij_max=dij
cshneg_new.f:      ENDIF          !       IF(WHAT2FIND.EQ.'dij_max') THEN
cshneg_new.f:         dij=denspar(ics,jcs)
cshneg_new.f:         dij_16=dij*16.d0      ! 16 is 4**2
cshneg_new.f:         dmx=max(dij_16,dik,dil,djk,djl,dkl_16)
cshneg_new.f:         dij=denspar(ics,jcs)
cshneg_new.f:         dmx=4.d0*dij*dkl + dik*djl + dil*djk
cshneg_new.f:         dij = denspar(ics,jcs)
cshneg_new.f:         dmx = max(dij,dkl)*16.0d0
cshneg_new.f:         dij=denspar(ics,jcs)
cshneg_new.f:         dmx=max(dij,dik_h,dil_h,djk_h,djl_h,dkl)
cshneg_new.f:         dij=denspar(ics,jcs)
cshneg_new.f:         dmx=max(dij,dik,dil,djk,djl,dkl)
cshneg_OLD.f:      subroutine schw_neg(nbls,ncs, npij,npkl,npkl0, nijbeg,nklbeg,
cshneg_OLD.f:     *                    nbl2,ibl,kbl,ijbl,iis,jjs, denspar,
cshneg_OLD.f:c according to the Schwarz inequality (ij|kl)**2 <(ij|ij)*(kl|kl)
cshneg_OLD.f:      dimension iis(*),jjs(*),ijbl(nbl2,*)
cshneg_OLD.f:c find  maximum of (ij|ij) & (kl|kl)
cshneg_OLD.f:      call getrval('x_ij_ij',x_ij_ij_max)
cshneg_OLD.f:         call schw_neq_fock(nbls,ncs,npij,npkl,npkl0,
cshneg_OLD.f:     *              nijbeg,nklbeg, nbl2,ibl,kbl,ijbl,iis,jjs,
cshneg_OLD.f:     *              denspar,bl(ischwarz),x_ij_ij_max,x_kl_kl_max,
cshneg_OLD.f:         call schw_neq_coul(nbls,ncs,npij,npkl,npkl0,
cshneg_OLD.f:     *              nijbeg,nklbeg, nbl2,ibl,kbl,ijbl,iis,jjs,
cshneg_OLD.f:     *              denspar,bl(ischwarz),x_ij_ij_max,x_kl_kl_max,
cshneg_OLD.f:         call schw_neq_forc(nbls,ncs,npij,npkl,npkl0,
cshneg_OLD.f:     *              nijbeg,nklbeg, nbl2,ibl,kbl,ijbl,iis,jjs,
cshneg_OLD.f:     *              denspar,bl(ischwarz),x_ij_ij_max,x_kl_kl_max,
cshneg_OLD.f:         call schw_neq_shif(nbls,ncs,npij,npkl,npkl0,
cshneg_OLD.f:     *              nijbeg,nklbeg, nbl2,ibl,kbl,ijbl,iis,jjs,
cshneg_OLD.f:     *              denspar,bl(ischwarz),x_ij_ij_max,x_kl_kl_max,
cshneg_OLD.f:         call schw_neq_giao(nbls,ncs,npij,npkl,npkl0,
cshneg_OLD.f:     *              nijbeg,nklbeg, nbl2,ibl,kbl,ijbl,iis,jjs,
cshneg_OLD.f:     *              denspar,bl(ischwarz),x_ij_ij_max,x_kl_kl_max,
cshneg_OLD.f:         call schw_neq_cphf(nbls,ncs,npij,npkl,npkl0,
cshneg_OLD.f:     *              nijbeg,nklbeg, nbl2,ibl,kbl,ijbl,iis,jjs,
cshneg_OLD.f:     *              denspar,bl(ischwarz),x_ij_ij_max,x_kl_kl_max,
cshneg_OLD.f:         call schw_neq_cph2(nbls,ncs,npij,npkl,npkl0,
cshneg_OLD.f:     *              nijbeg,nklbeg, nbl2,ibl,kbl,ijbl,iis,jjs,
cshneg_OLD.f:     *              denspar,bl(ischwarz),x_ij_ij_max,x_kl_kl_max,
cshneg_OLD.f:         call schw_neq_2pde(nbls,ncs,npij,npkl,npkl0,
cshneg_OLD.f:     *              nijbeg,nklbeg, nbl2,ibl,kbl,ijbl,iis,jjs,
cshneg_OLD.f:     *              denspar,bl(ischwarz),x_ij_ij_max,x_kl_kl_max,
cshneg_OLD.f:         call schw_neq_2pd1(nbls,ncs,npij,npkl,npkl0,
cshneg_OLD.f:     *              nijbeg,nklbeg, nbl2,ibl,kbl,ijbl,iis,jjs,
cshneg_OLD.f:     *              denspar,bl(ischwarz),x_ij_ij_max,x_kl_kl_max,
cshneg_OLD.f:c on return the Ipres(ijkl) has a value of 0 if it is to be neglect.
cshneg_OLD.f:      subroutine schw_finder(ncs,npij,ijbegin,nbl2,ibl,ijbl,iis,jjs,
cshneg_OLD.f:     *                       schwarz, x_ij_ij_max)
cshneg_OLD.f:      dimension iis(*),jjs(*),ijbl(nbl2,*)
cshneg_OLD.f:      ijpar=ijbegin
cshneg_OLD.f:      ijcs=ijbl(ibl,ijpar)
cshneg_OLD.f:      ics=iis(ijcs)
cshneg_OLD.f:      jcs=jjs(ijcs)
cshneg_OLD.f:      x_ij_ij_max=schwarz(ics,jcs)
cshneg_OLD.f:c     x_ij_ij_max=zero
cshneg_OLD.f:c     do ijc=1,npij
cshneg_OLD.f:c        ijpar=ijbegin-1+ijc
cshneg_OLD.f:c        ijcs=ijbl(ibl,ijpar)
cshneg_OLD.f:c        ics=iis(ijcs)
cshneg_OLD.f:c        jcs=jjs(ijcs)
cshneg_OLD.f:c        if(xschw.gt.x_ij_ij_max) x_ij_ij_max=xschw
cshneg_OLD.f:      subroutine get_dijkl(screen,dij,dik,dil,djk,djl,dkl,dmx)
cshneg_OLD.f:         dij_16=dij*16.d0      ! 16 is 4**2
cshneg_OLD.f:         dmx=max(dij_16,dik,dil,djk,djl,dkl_16)
cshneg_OLD.f:         dmx = max(dij*16.0d0,dkl*16.0d0)    ! ** NEW  JB **
cshneg_OLD.f:         dmx=4.d0*dij*dkl + dik*djl + dil*djk
cshneg_OLD.f:         dmx=max(dij,dik_h,dil_h,djk_h,djl_h,dkl)
cshneg_OLD.f:         dijkl=sqrt(dij*dkl)
cshneg_OLD.f:         dmx=4.d0*dijkl + dikjl + diljk
cshneg_OLD.f:         dij_16=dij*16.d0      ! 16 is 4**2
cshneg_OLD.f:         dmx=16.d0*dij*dkl + dik*djl + dil*djk
cshneg_OLD.f:      subroutine schw_neq_fock(nbls,ncs,npij,npkl,npkl0,
cshneg_OLD.f:     *                  nijbeg,nklbeg,nbl2,ibl,kbl,ijbl,iis,jjs,
cshneg_OLD.f:     *                  denspar,schwarz, x_ij_ij_max, x_kl_kl_max,
cshneg_OLD.f:c npij     : number of IJcs pairs in this block of quartets
cshneg_OLD.f:c x_ij_ij_max : maximum of (ij|ij) in the current block
cshneg_OLD.f:c densmax(ijkl) will be used in prec4neg & precspec
cshneg_OLD.f:c               ONLY if ipres(ijkl)>0
cshneg_OLD.f:      dimension iis(*),jjs(*),ijbl(nbl2,*)
cshneg_OLD.f:      do ijc=1,npij
cshneg_OLD.f:         ijpar=nijbeg-1+ijc
cshneg_OLD.f:         ijcs=ijbl(ibl,ijpar)
cshneg_OLD.f:         ics=iis(ijcs)
cshneg_OLD.f:         jcs=jjs(ijcs)
cshneg_OLD.f:         dij=denspar(ics,jcs)
cshneg_OLD.f:            npkl_e=ijc
cshneg_OLD.f:            ijij=ijc*(ijc-1)/2
cshneg_OLD.f:            ijij=(ijc-1)*npkl
cshneg_OLD.f:         x_ij_ij=schwarz(ics,jcs)
cshneg_OLD.f:         dens1mx_ij=dens1max * x_ij_ij
cshneg_OLD.f:         estim_max=dens1mx_ij * x_kl_kl_max
cshneg_OLD.f:c           all next ijpairs will have x_ij_ij even smaller so
cshneg_OLD.f:            do iqrt=ijij+1,nbls
cshneg_OLD.f:            nblsp=nblsp-(nbls-ijij)
cshneg_OLD.f:               klcs=ijbl(kbl,klpar)
cshneg_OLD.f:               ijkl=ijij+klc
cshneg_OLD.f:               if(ipres(ijkl).eq.0) then
cshneg_OLD.f:               estim_max=dens1mx_ij * x_kl_kl
cshneg_OLD.f:                     ipres(ijij+iqrt)=0
cshneg_OLD.f:                  call get_dmx_fock(dij,dik,dil,djk,djl,dkl,dmx)
cshneg_OLD.f:                  estim_max=dmx*x_ij_ij * x_kl_kl
cshneg_OLD.f:                     ipres(ijkl)=0
cshneg_OLD.f:                     densmax(ijkl)=dmx
cshneg_OLD.f:         endif                      ! (estim_max.LT.eps2) ij
cshneg_OLD.f:      enddo                         ! ijc=1,npij
cshneg_OLD.f:      subroutine get_dmx_fock(dij,dik,dil,djk,djl,dkl,dmx)
cshneg_OLD.f:         dmx=max(4.d0*dij,dik,dil,djk,djl,4.d0*dkl)
cshneg_OLD.f:      subroutine schw_neq_coul(nbls,ncs,npij,npkl,npkl0,
cshneg_OLD.f:     *                  nijbeg,nklbeg,nbl2,ibl,kbl,ijbl,iis,jjs,
cshneg_OLD.f:     *                  denspar,schwarz, x_ij_ij_max, x_kl_kl_max,
cshneg_OLD.f:c npij     : number of IJcs pairs in this block of quartets
cshneg_OLD.f:c x_ij_ij_max : maximum of (ij|ij) in the current block
cshneg_OLD.f:c densmax(ijkl) will be used in prec4neg & precspec
cshneg_OLD.f:c               ONLY if ipres(ijkl)>0
cshneg_OLD.f:      dimension iis(*),jjs(*),ijbl(nbl2,*)
cshneg_OLD.f:      do ijc=1,npij
cshneg_OLD.f:         ijpar=nijbeg-1+ijc
cshneg_OLD.f:         ijcs=ijbl(ibl,ijpar)
cshneg_OLD.f:         ics=iis(ijcs)
cshneg_OLD.f:         jcs=jjs(ijcs)
cshneg_OLD.f:         dij=denspar(ics,jcs)
cshneg_OLD.f:            npkl_e=ijc
cshneg_OLD.f:            ijij=ijc*(ijc-1)/2
cshneg_OLD.f:            ijij=(ijc-1)*npkl
cshneg_OLD.f:         x_ij_ij=schwarz(ics,jcs)
cshneg_OLD.f:         dens1mx_ij=dens1max * x_ij_ij
cshneg_OLD.f:         estim_max=dens1mx_ij * x_kl_kl_max
cshneg_OLD.f:c           all next ijpairs will have x_ij_ij even smaller so
cshneg_OLD.f:            do iqrt=ijij+1,nbls
cshneg_OLD.f:            nblsp=nblsp-(nbls-ijij)
cshneg_OLD.f:               klcs=ijbl(kbl,klpar)
cshneg_OLD.f:               ijkl=ijij+klc
cshneg_OLD.f:               if(ipres(ijkl).eq.0) then
cshneg_OLD.f:               estim_max=dens1mx_ij * x_kl_kl
cshneg_OLD.f:                     ipres(ijij+iqrt)=0
cshneg_OLD.f:                  call get_dmx_coul(dij,dkl,dmx)
cshneg_OLD.f:                  estim_max=dmx*x_ij_ij * x_kl_kl
cshneg_OLD.f:                     ipres(ijkl)=0
cshneg_OLD.f:                     densmax(ijkl)=dmx
cshneg_OLD.f:         endif                      ! (estim_max.LT.eps2) ij
cshneg_OLD.f:      enddo                         ! ijc=1,npij
cshneg_OLD.f:      subroutine get_dmx_coul(dij,dkl,dmx)
cshneg_OLD.f:         dmx = 4.0d0*max(dij,dkl)    ! ** NEW  JB **
cshneg_OLD.f:      subroutine schw_neq_forc(nbls,ncs,npij,npkl,npkl0,
cshneg_OLD.f:     *                  nijbeg,nklbeg,nbl2,ibl,kbl,ijbl,iis,jjs,
cshneg_OLD.f:     *                  denspar,schwarz, x_ij_ij_max, x_kl_kl_max,
cshneg_OLD.f:c npij     : number of IJcs pairs in this block of quartets
cshneg_OLD.f:c x_ij_ij_max : maximum of (ij|ij) in the current block
cshneg_OLD.f:c densmax(ijkl) will be used in prec4neg & precspec
cshneg_OLD.f:c               ONLY if ipres(ijkl)>0
cshneg_OLD.f:      dimension iis(*),jjs(*),ijbl(nbl2,*)
cshneg_OLD.f:      do ijc=1,npij
cshneg_OLD.f:         ijpar=nijbeg-1+ijc
cshneg_OLD.f:         ijcs=ijbl(ibl,ijpar)
cshneg_OLD.f:         ics=iis(ijcs)
cshneg_OLD.f:         jcs=jjs(ijcs)
cshneg_OLD.f:         dij=denspar(ics,jcs)
cshneg_OLD.f:            npkl_e=ijc
cshneg_OLD.f:            ijij=ijc*(ijc-1)/2
cshneg_OLD.f:            ijij=(ijc-1)*npkl
cshneg_OLD.f:         x_ij_ij=schwarz(ics,jcs)
cshneg_OLD.f:         dens1mx_ij=dens1max * x_ij_ij
cshneg_OLD.f:         estim_max=dens1mx_ij * x_kl_kl_max
cshneg_OLD.f:c           all next ijpairs will have x_ij_ij even smaller so
cshneg_OLD.f:            do iqrt=ijij+1,nbls
cshneg_OLD.f:            nblsp=nblsp-(nbls-ijij)
cshneg_OLD.f:               klcs=ijbl(kbl,klpar)
cshneg_OLD.f:               ijkl=ijij+klc
cshneg_OLD.f:               if(ipres(ijkl).eq.0) then
cshneg_OLD.f:               estim_max=dens1mx_ij * x_kl_kl
cshneg_OLD.f:                     ipres(ijij+iqrt)=0
cshneg_OLD.f:                  call get_dmx_forc(dij,dik,dil,djk,djl,dkl,dmx)
cshneg_OLD.f:                  estim_max=dmx*x_ij_ij * x_kl_kl
cshneg_OLD.f:                     ipres(ijkl)=0
cshneg_OLD.f:                     densmax(ijkl)=dmx
cshneg_OLD.f:         endif                      ! (estim_max.LT.eps2) ij
cshneg_OLD.f:      enddo                         ! ijc=1,npij
cshneg_OLD.f:      subroutine get_dmx_forc(dij,dik,dil,djk,djl,dkl,dmx)
cshneg_OLD.f:         dmx=4.d0*dij*dkl + dik*djl + dil*djk
cshneg_OLD.f:      subroutine schw_neq_shif(nbls,ncs,npij,npkl,npkl0,
cshneg_OLD.f:     *                  nijbeg,nklbeg,nbl2,ibl,kbl,ijbl,iis,jjs,
cshneg_OLD.f:     *                  denspar,schwarz, x_ij_ij_max, x_kl_kl_max,
cshneg_OLD.f:c npij     : number of IJcs pairs in this block of quartets
cshneg_OLD.f:c x_ij_ij_max : maximum of (ij|ij) in the current block
cshneg_OLD.f:c densmax(ijkl) will be used in prec4neg & precspec
cshneg_OLD.f:c               ONLY if ipres(ijkl)>0
cshneg_OLD.f:      dimension iis(*),jjs(*),ijbl(nbl2,*)
cshneg_OLD.f:      do ijc=1,npij
cshneg_OLD.f:         ijpar=nijbeg-1+ijc
cshneg_OLD.f:         ijcs=ijbl(ibl,ijpar)
cshneg_OLD.f:         ics=iis(ijcs)
cshneg_OLD.f:         jcs=jjs(ijcs)
cshneg_OLD.f:         dij=denspar(ics,jcs)
cshneg_OLD.f:            npkl_e=ijc
cshneg_OLD.f:            ijij=ijc*(ijc-1)/2
cshneg_OLD.f:            ijij=(ijc-1)*npkl
cshneg_OLD.f:         x_ij_ij=schwarz(ics,jcs)
cshneg_OLD.f:         dens1mx_ij=dens1max * x_ij_ij
cshneg_OLD.f:         estim_max=dens1mx_ij * x_kl_kl_max
cshneg_OLD.f:c           all next ijpairs will have x_ij_ij even smaller so
cshneg_OLD.f:            do iqrt=ijij+1,nbls
cshneg_OLD.f:            nblsp=nblsp-(nbls-ijij)
cshneg_OLD.f:               klcs=ijbl(kbl,klpar)
cshneg_OLD.f:               ijkl=ijij+klc
cshneg_OLD.f:               if(ipres(ijkl).eq.0) then
cshneg_OLD.f:               estim_max=dens1mx_ij * x_kl_kl
cshneg_OLD.f:                     ipres(ijij+iqrt)=0
cshneg_OLD.f:                  call get_dmx_shif(dij,dik,dil,djk,djl,dkl,dmx)
cshneg_OLD.f:                  estim_max=dmx*x_ij_ij * x_kl_kl
cshneg_OLD.f:                     ipres(ijkl)=0
cshneg_OLD.f:                     densmax(ijkl)=dmx
cshneg_OLD.f:         endif                      ! (estim_max.LT.eps2) ij
cshneg_OLD.f:      enddo                         ! ijc=1,npij
cshneg_OLD.f:      subroutine get_dmx_shif(dij,dik,dil,djk,djl,dkl,dmx)
cshneg_OLD.f:         dmx1=max(dij,dkl)
cshneg_OLD.f:      subroutine schw_neq_cphf(nbls,ncs,npij,npkl,npkl0,
cshneg_OLD.f:     *                  nijbeg,nklbeg,nbl2,ibl,kbl,ijbl,iis,jjs,
cshneg_OLD.f:     *                  denspar,schwarz, x_ij_ij_max, x_kl_kl_max,
cshneg_OLD.f:c npij     : number of IJcs pairs in this block of quartets
cshneg_OLD.f:c x_ij_ij_max : maximum of (ij|ij) in the current block
cshneg_OLD.f:c densmax(ijkl) will be used in prec4neg & precspec
cshneg_OLD.f:c               ONLY if ipres(ijkl)>0
cshneg_OLD.f:      dimension iis(*),jjs(*),ijbl(nbl2,*)
cshneg_OLD.f:      do ijc=1,npij
cshneg_OLD.f:         ijpar=nijbeg-1+ijc
cshneg_OLD.f:         ijcs=ijbl(ibl,ijpar)
cshneg_OLD.f:         ics=iis(ijcs)
cshneg_OLD.f:         jcs=jjs(ijcs)
cshneg_OLD.f:            npkl_e=ijc
cshneg_OLD.f:            ijij=ijc*(ijc-1)/2
cshneg_OLD.f:            ijij=(ijc-1)*npkl
cshneg_OLD.f:         x_ij_ij=schwarz(ics,jcs)
cshneg_OLD.f:         dens1mx_ij=dens1max * x_ij_ij
cshneg_OLD.f:         estim_max=dens1mx_ij * x_kl_kl_max
cshneg_OLD.f:c           all next ijpairs will have x_ij_ij even smaller so
cshneg_OLD.f:            do iqrt=ijij+1,nbls
cshneg_OLD.f:            nblsp=nblsp-(nbls-ijij)
cshneg_OLD.f:               klcs=ijbl(kbl,klpar)
cshneg_OLD.f:               ijkl=ijij+klc
cshneg_OLD.f:               if(ipres(ijkl).eq.0) then
cshneg_OLD.f:               estim_max=dens1mx_ij * x_kl_kl
cshneg_OLD.f:                     ipres(ijij+iqrt)=0
cshneg_OLD.f:                  estim_max=dmx*x_ij_ij * x_kl_kl
cshneg_OLD.f:                     ipres(ijkl)=0
cshneg_OLD.f:                     densmax(ijkl)=dmx
cshneg_OLD.f:         endif                      ! (estim_max.LT.eps2) ij
cshneg_OLD.f:      enddo                         ! ijc=1,npij
cshneg_OLD.f:      subroutine schw_neq_2pde(nbls,ncs,npij,npkl,npkl0,
cshneg_OLD.f:     *                  nijbeg,nklbeg,nbl2,ibl,kbl,ijbl,iis,jjs,
cshneg_OLD.f:     *                  denspar,schwarz, x_ij_ij_max, x_kl_kl_max,
cshneg_OLD.f:c npij     : number of IJcs pairs in this block of quartets
cshneg_OLD.f:c x_ij_ij_max : maximum of (ij|ij) in the current block
cshneg_OLD.f:c densmax(ijkl) will be used in prec4neg & precspec
cshneg_OLD.f:c               ONLY if ipres(ijkl)>0
cshneg_OLD.f:      dimension iis(*),jjs(*),ijbl(nbl2,*)
cshneg_OLD.f:      do ijc=1,npij
cshneg_OLD.f:         ijpar=nijbeg-1+ijc
cshneg_OLD.f:         ijcs=ijbl(ibl,ijpar)
cshneg_OLD.f:         ics=iis(ijcs)
cshneg_OLD.f:         jcs=jjs(ijcs)
cshneg_OLD.f:         d1ij=denspar(ics,jcs,1)
cshneg_OLD.f:         d2ij=denspar(ics,jcs,2)
cshneg_OLD.f:            npkl_e=ijc
cshneg_OLD.f:            ijij=ijc*(ijc-1)/2
cshneg_OLD.f:            ijij=(ijc-1)*npkl
cshneg_OLD.f:         x_ij_ij=schwarz(ics,jcs)
cshneg_OLD.f:         dens1mx_ij=dens1max * x_ij_ij
cshneg_OLD.f:         estim_max=dens1mx_ij * x_kl_kl_max
cshneg_OLD.f:c           all next ijpairs will have x_ij_ij even smaller so
cshneg_OLD.f:            do iqrt=ijij+1,nbls
cshneg_OLD.f:            nblsp=nblsp-(nbls-ijij)
cshneg_OLD.f:               klcs=ijbl(kbl,klpar)
cshneg_OLD.f:               ijkl=ijij+klc
cshneg_OLD.f:               if(ipres(ijkl).eq.0) then
cshneg_OLD.f:               estim_max=dens1mx_ij * x_kl_kl
cshneg_OLD.f:                     ipres(ijij+iqrt)=0
cshneg_OLD.f:                  call get_dmx_2pde(d1ij,d1ik,d1il,d1jk,d1jl,d1kl,
cshneg_OLD.f:     *                              d2ij,d2ik,d2il,d2jk,d2jl,d2kl,dmx)
cshneg_OLD.f:                  estim_max=dmx*x_ij_ij * x_kl_kl
cshneg_OLD.f:                     ipres(ijkl)=0
cshneg_OLD.f:                     densmax(ijkl)=dmx
cshneg_OLD.f:         endif                      ! (estim_max.LT.eps2) ij
cshneg_OLD.f:      enddo                         ! ijc=1,npij
cshneg_OLD.f:      subroutine get_dmx_2pde(d1ij,d1ik,d1il,d1jk,d1jl,d1kl,
cshneg_OLD.f:     *                        d2ij,d2ik,d2il,d2jk,d2jl,d2kl,dmx)
cshneg_OLD.f:         dijkl12=d1ij*d2kl
cshneg_OLD.f:         dijkl21=d2ij*d1kl
cshneg_OLD.f:         dmx12=4.d0*dijkl12 + dikjl12 + diljk12
cshneg_OLD.f:         dmx21=4.d0*dijkl21 + dikjl21 + diljk21
cshneg_OLD.f:      subroutine schw_neq_cph2(nbls,ncs,npij,npkl,npkl0,
cshneg_OLD.f:     *                  nijbeg,nklbeg,nbl2,ibl,kbl,ijbl,iis,jjs,
cshneg_OLD.f:     *                  denspar,schwarz, x_ij_ij_max, x_kl_kl_max,
cshneg_OLD.f:c npij     : number of IJcs pairs in this block of quartets
cshneg_OLD.f:c x_ij_ij_max : maximum of (ij|ij) in the current block
cshneg_OLD.f:c densmax(ijkl) will be used in prec4neg & precspec
cshneg_OLD.f:c               ONLY if ipres(ijkl)>0
cshneg_OLD.f:      dimension iis(*),jjs(*),ijbl(nbl2,*)
cshneg_OLD.f:      do ijc=1,npij
cshneg_OLD.f:         ijpar=nijbeg-1+ijc
cshneg_OLD.f:         ijcs=ijbl(ibl,ijpar)
cshneg_OLD.f:         ics=iis(ijcs)
cshneg_OLD.f:         jcs=jjs(ijcs)
cshneg_OLD.f:            npkl_e=ijc
cshneg_OLD.f:            ijij=ijc*(ijc-1)/2
cshneg_OLD.f:            ijij=(ijc-1)*npkl
cshneg_OLD.f:         x_ij_ij=schwarz(ics,jcs)
cshneg_OLD.f:         dens1mx_ij=dens1max * x_ij_ij
cshneg_OLD.f:         estim_max=dens1mx_ij * x_kl_kl_max
cshneg_OLD.f:c           all next ijpairs will have x_ij_ij even smaller so
cshneg_OLD.f:            do iqrt=ijij+1,nbls
cshneg_OLD.f:            nblsp=nblsp-(nbls-ijij)
cshneg_OLD.f:               klcs=ijbl(kbl,klpar)
cshneg_OLD.f:               ijkl=ijij+klc
cshneg_OLD.f:               if(ipres(ijkl).eq.0) then
cshneg_OLD.f:               estim_max=dens1mx_ij * x_kl_kl
cshneg_OLD.f:                     ipres(ijij+iqrt)=0
cshneg_OLD.f:                  estim_max=dmx*x_ij_ij * x_kl_kl
cshneg_OLD.f:                     ipres(ijkl)=0
cshneg_OLD.f:                     densmax(ijkl)=dmx
cshneg_OLD.f:         endif                      ! (estim_max.LT.eps2) ij
cshneg_OLD.f:      enddo                         ! ijc=1,npij
cshneg_OLD.f:      subroutine schw_neq_giao(nbls,ncs,npij,npkl,npkl0,
cshneg_OLD.f:     *                  nijbeg,nklbeg,nbl2,ibl,kbl,ijbl,iis,jjs,
cshneg_OLD.f:     *                  denspar,schwarz, x_ij_ij_max, x_kl_kl_max,
cshneg_OLD.f:c npij     : number of IJcs pairs in this block of quartets
cshneg_OLD.f:c x_ij_ij_max : maximum of (ij|ij) in the current block
cshneg_OLD.f:c densmax(ijkl) will be used in prec4neg & precspec
cshneg_OLD.f:c               ONLY if ipres(ijkl)>0
cshneg_OLD.f:      dimension iis(*),jjs(*),ijbl(nbl2,*)
cshneg_OLD.f:      do ijc=1,npij
cshneg_OLD.f:         ijpar=nijbeg-1+ijc
cshneg_OLD.f:         ijcs=ijbl(ibl,ijpar)
cshneg_OLD.f:         ics=iis(ijcs)
cshneg_OLD.f:         jcs=jjs(ijcs)
cshneg_OLD.f:         d1ij=denspar(ics,jcs,1)
cshneg_OLD.f:         d2ij=denspar(ics,jcs,2)
cshneg_OLD.f:            npkl_e=ijc
cshneg_OLD.f:            ijij=ijc*(ijc-1)/2
cshneg_OLD.f:            ijij=(ijc-1)*npkl
cshneg_OLD.f:         x_ij_ij=schwarz(ics,jcs)
cshneg_OLD.f:         dens1mx_ij=dens1max * x_ij_ij
cshneg_OLD.f:         estim_max=dens1mx_ij * x_kl_kl_max
cshneg_OLD.f:c           all next ijpairs will have x_ij_ij even smaller so
cshneg_OLD.f:            do iqrt=ijij+1,nbls
cshneg_OLD.f:            nblsp=nblsp-(nbls-ijij)
cshneg_OLD.f:               klcs=ijbl(kbl,klpar)
cshneg_OLD.f:               ijkl=ijij+klc
cshneg_OLD.f:               if(ipres(ijkl).eq.0) then
cshneg_OLD.f:               estim_max=dens1mx_ij * x_kl_kl
cshneg_OLD.f:                     ipres(ijij+iqrt)=0
cshneg_OLD.f:                  call get_dmx_giao(d1ij,d1ik,d1il,d1jk,d1jl,d1kl,
cshneg_OLD.f:     *                              d2ij,d2ik,d2il,d2jk,d2jl,d2kl,dmx)
cshneg_OLD.f:                  estim_max=dmx*x_ij_ij * x_kl_kl
cshneg_OLD.f:                     ipres(ijkl)=0
cshneg_OLD.f:                     densmax(ijkl)=dmx
cshneg_OLD.f:         endif                      ! (estim_max.LT.eps2) ij
cshneg_OLD.f:      enddo                         ! ijc=1,npij
cshneg_OLD.f:      subroutine get_dmx_giao(d1ij,d1ik,d1il,d1jk,d1jl,d1kl,
cshneg_OLD.f:     *                        d2ij,d2ik,d2il,d2jk,d2jl,d2kl,dmx)
cshneg_OLD.f:c        dmx=max(dij,dik_h,dil_h,djk_h,djl_h,dkl)
cshneg_OLD.f:c        dmx1=max(dij,dkl)
cshneg_OLD.f:         dmx1=4.d0*d1ij*d2kl + d1ik*d2jl + d1il*d2jk
cshneg_OLD.f:         dmx2=4.d0*d2ij*d1kl + d2ik*d1jl + d2il*d1jk
cshneg_OLD.f:      subroutine schw_neq_2pd1(nbls,ncs,npij,npkl,npkl0,
cshneg_OLD.f:     *                  nijbeg,nklbeg,nbl2,ibl,kbl,ijbl,iis,jjs,
cshneg_OLD.f:     *                  denspar,schwarz, x_ij_ij_max, x_kl_kl_max,
cshneg_OLD.f:c npij     : number of IJcs pairs in this block of quartets
cshneg_OLD.f:c x_ij_ij_max : maximum of (ij|ij) in the current block
cshneg_OLD.f:c densmax(ijkl) will be used in prec4neg & precspec
cshneg_OLD.f:c               ONLY if ipres(ijkl)>0
cshneg_OLD.f:      dimension iis(*),jjs(*),ijbl(nbl2,*)
cshneg_OLD.f:      do ijc=1,npij
cshneg_OLD.f:         ijpar=nijbeg-1+ijc
cshneg_OLD.f:         ijcs=ijbl(ibl,ijpar)
cshneg_OLD.f:         ics=iis(ijcs)
cshneg_OLD.f:         jcs=jjs(ijcs)
cshneg_OLD.f:         dij=denspar(ics,jcs)
cshneg_OLD.f:            npkl_e=ijc
cshneg_OLD.f:            ijij=ijc*(ijc-1)/2
cshneg_OLD.f:            ijij=(ijc-1)*npkl
cshneg_OLD.f:         x_ij_ij=schwarz(ics,jcs)
cshneg_OLD.f:         dens1mx_ij=dens1max * x_ij_ij
cshneg_OLD.f:         estim_max=dens1mx_ij * x_kl_kl_max
cshneg_OLD.f:c           all next ijpairs will have x_ij_ij even smaller so
cshneg_OLD.f:            do iqrt=ijij+1,nbls
cshneg_OLD.f:            nblsp=nblsp-(nbls-ijij)
cshneg_OLD.f:               klcs=ijbl(kbl,klpar)
cshneg_OLD.f:               ijkl=ijij+klc
cshneg_OLD.f:               if(ipres(ijkl).eq.0) then
cshneg_OLD.f:               estim_max=dens1mx_ij * x_kl_kl
cshneg_OLD.f:                     ipres(ijij+iqrt)=0
cshneg_OLD.f:                  call get_dmx_2pd1(dij,dik,dil,djk,djl,dkl,dmx)
cshneg_OLD.f:                  estim_max=dmx*x_ij_ij * x_kl_kl
cshneg_OLD.f:                     ipres(ijkl)=0
cshneg_OLD.f:                     densmax(ijkl)=dmx
cshneg_OLD.f:         endif                      ! (estim_max.LT.eps2) ij
cshneg_OLD.f:      enddo                         ! ijc=1,npij
cshneg_OLD.f:      subroutine get_dmx_2pd1(dij,dik,dil,djk,djl,dkl,dmx)
cshneg_OLD.f:      dijkl=dij*dkl
cshneg_OLD.f:      dmx=4.d0*dijkl + dikjl + diljk
cwts.f:      integer nat3,ip,ipp,i,j,ii,jj,ij,it
cwts.f:      real*8 abra,abrara,thrx,thrx1,thrxx,valt,abdaij,abdaijm,abval
cwts.f:      real*8 abvj,abvvj,valj,valjx,valjy,valjz,abijt,abij
cwts.f:      real*8 gwtmax,dmx,valx,valy,valz,daij,xyc,xzc,yzc
cwts.f:      real*8 vij,vijx,vijy,vijz,gij,hdx,hdy,hdz,hgx,hgy,hgz
cwts.f:      real*8 daijt,smax,dmax,potp,potxp,potp2,potxp2
cwts.f:          ij = it + jj
cwts.f:          daij = da(ij)*vao(j)
cwts.f:          abdaij=abs(daij)
cwts.f:          abdaijm=abdaij*vmx
cwts.f:              denx(1,iatm) = denx(1,iatm) - daij*valx
cwts.f:              denx(2,iatm) = denx(2,iatm) - daij*valy
cwts.f:              denx(3,iatm) = denx(3,iatm) - daij*valz
cwts.f:          if(doxx.and.abdaijm.gt.thrxx)then
cwts.f:              denxx(1,iatm,1,iatm)=denxx(1,iatm,1,iatm)+daij*vaoxx(1,i)
cwts.f:              xyc=daij*vaoxx(2,i)
cwts.f:              denxx(2,iatm,2,iatm)=denxx(2,iatm,2,iatm)+daij*vaoxx(3,i)
cwts.f:              xzc=daij*vaoxx(4,i)
cwts.f:              yzc=daij*vaoxx(5,i)
cwts.f:              denxx(3,iatm,3,iatm)=denxx(3,iatm,3,iatm)+daij*vaoxx(6,i)
cwts.f:          abdaijm=abs(da(ij))*valm*vmx
cwts.f:          if(doxx.and.abdaijm.gt.thrxx)then
cwts.f:            daij = da(ij)*vaox(1,j)
cwts.f:              denxx(1,iatm,1,jatm)=denxx(1,iatm,1,jatm)+daij*valx
cwts.f:              denxx(2,iatm,1,jatm)=denxx(2,iatm,1,jatm)+daij*valy
cwts.f:              denxx(3,iatm,1,jatm)=denxx(3,iatm,1,jatm)+daij*valz
cwts.f:              daij = da(ij)*vaox(2,j)
cwts.f:              denxx(1,iatm,2,jatm)=denxx(1,iatm,2,jatm)+daij*valx
cwts.f:              denxx(2,iatm,2,jatm)=denxx(2,iatm,2,jatm)+daij*valy
cwts.f:              denxx(3,iatm,2,jatm)=denxx(3,iatm,2,jatm)+daij*valz
cwts.f:              daij = da(ij)*vaox(3,j)
cwts.f:              denxx(1,iatm,3,jatm)=denxx(1,iatm,3,jatm)+daij*valx
cwts.f:              denxx(2,iatm,3,jatm)=denxx(2,iatm,3,jatm)+daij*valy
cwts.f:              denxx(3,iatm,3,jatm)=denxx(3,iatm,3,jatm)+daij*valz
cwts.f:          ij = (jj*(jj-1))/2 + ii
cwts.f:          daij = da(ij)*vao(j)
cwts.f:          abdaij=abs(daij)
cwts.f:          abdaijm=abdaij*vmx
cwts.f:              denx(1,iatm) = denx(1,iatm) - daij*valx
cwts.f:              denx(2,iatm) = denx(2,iatm) - daij*valy
cwts.f:              denx(3,iatm) = denx(3,iatm) - daij*valz
cwts.f:          if(doxx.and.abdaijm.gt.thrxx)then
cwts.f:              denxx(1,iatm,1,iatm)=denxx(1,iatm,1,iatm)+daij*vaoxx(1,i)
cwts.f:              xyc=daij*vaoxx(2,i)
cwts.f:              denxx(2,iatm,2,iatm)=denxx(2,iatm,2,iatm)+daij*vaoxx(3,i)
cwts.f:              xzc=daij*vaoxx(4,i)
cwts.f:              yzc=daij*vaoxx(5,i)
cwts.f:              denxx(3,iatm,3,iatm)=denxx(3,iatm,3,iatm)+daij*vaoxx(6,i)
cwts.f:          abdaijm=abs(da(ij))*valm*vmx
cwts.f:          if(doxx.and.abdaijm.gt.thrxx)then
cwts.f:              daij = da(ij)*vaox(1,j)
cwts.f:              denxx(1,iatm,1,jatm)=denxx(1,iatm,1,jatm)+daij*valx
cwts.f:              denxx(2,iatm,1,jatm)=denxx(2,iatm,1,jatm)+daij*valy
cwts.f:              denxx(3,iatm,1,jatm)=denxx(3,iatm,1,jatm)+daij*valz
cwts.f:              daij = da(ij)*vaox(2,j)
cwts.f:              denxx(1,iatm,2,jatm)=denxx(1,iatm,2,jatm)+daij*valx
cwts.f:              denxx(2,iatm,2,jatm)=denxx(2,iatm,2,jatm)+daij*valy
cwts.f:              denxx(3,iatm,2,jatm)=denxx(3,iatm,2,jatm)+daij*valz
cwts.f:              daij = da(ij)*vaox(3,j)
cwts.f:              denxx(1,iatm,3,jatm)=denxx(1,iatm,3,jatm)+daij*valx
cwts.f:              denxx(2,iatm,3,jatm)=denxx(2,iatm,3,jatm)+daij*valy
cwts.f:              denxx(3,iatm,3,jatm)=denxx(3,iatm,3,jatm)+daij*valz
cwts.f:            ij = it + jj
cwts.f:                fda(1,iatm,ij) = fda(1,iatm,ij) - valx*valj
cwts.f:                fda(2,iatm,ij) = fda(2,iatm,ij) - valy*valj
cwts.f:                fda(3,iatm,ij) = fda(3,iatm,ij) - valz*valj
cwts.f:                fda(1,jatm,ij) = fda(1,jatm,ij) - val*vaox(1,j)
cwts.f:                fda(2,jatm,ij) = fda(2,jatm,ij) - val*vaox(2,j)
cwts.f:                fda(3,jatm,ij) = fda(3,jatm,ij) - val*vaox(3,j)
cwts.f:                fda(1,katm,ij)=fda(1,katm,ij) + vdjx*denx(1,katm)
cwts.f:                fda(2,katm,ij)=fda(2,katm,ij) + vdjx*denx(2,katm)
cwts.f:                fda(3,katm,ij)=fda(3,katm,ij) + vdjx*denx(3,katm)
cwts.f:                fda(1,ia,ij)=fda(1,ia,ij)+xc*gwt(1,ia,ipp)
cwts.f:                fda(2,ia,ij)=fda(2,ia,ij)+xc*gwt(2,ia,ipp)
cwts.f:                fda(3,ia,ij)=fda(3,ia,ij)+xc*gwt(3,ia,ipp)
cwts.f:            ij = it + jj
cwts.f:            daijt=da(ij)
cwts.f:            abijt=abs(daijt)
cwts.f:            daij = daijt*valj
cwts.f:            abij=abs(daij)
cwts.f:              if(abij*valm.gt.thrsh)then
cwts.f:                denx(1,iatm) = denx(1,iatm) - daij*valx
cwts.f:                denx(2,iatm) = denx(2,iatm) - daij*valy
cwts.f:                denx(3,iatm) = denx(3,iatm) - daij*valz
cwts.f:             if(abijt*(abvj*valmm+abvvj*valm).gt.thrsh)then
cwts.f:              gdx(1,1,iatm)=gdx(1,1,iatm)-daijt*(valj*valxx+valx*valjx)
cwts.f:              gdx(1,2,iatm)=gdx(1,2,iatm)-daijt*(valj*valxy+valy*valjx)
cwts.f:              gdx(1,3,iatm)=gdx(1,3,iatm)-daijt*(valj*valxz+valz*valjx)
cwts.f:              gdx(2,1,iatm)=gdx(2,1,iatm)-daijt*(valj*valxy+valx*valjy)
cwts.f:              gdx(2,2,iatm)=gdx(2,2,iatm)-daijt*(valj*valyy+valy*valjy)
cwts.f:              gdx(2,3,iatm)=gdx(2,3,iatm)-daijt*(valj*valyz+valz*valjy)
cwts.f:              gdx(3,1,iatm)=gdx(3,1,iatm)-daijt*(valj*valxz+valx*valjz)
cwts.f:              gdx(3,2,iatm)=gdx(3,2,iatm)-daijt*(valj*valyz+valy*valjz)
cwts.f:              gdx(3,3,iatm)=gdx(3,3,iatm)-daijt*(valj*valzz+valz*valjz)
cwts.f:              if(dodenxx.and.abij*valmm.gt.thrsh)then
cwts.f:                denxx(1,iatm,1,iatm)=denxx(1,iatm,1,iatm)+daij*valxx
cwts.f:                xyc=daij*valxy
cwts.f:                denxx(2,iatm,2,iatm)=denxx(2,iatm,2,iatm)+daij*valyy
cwts.f:                xzc=daij*valxz
cwts.f:                yzc=daij*valyz
cwts.f:                denxx(3,iatm,3,iatm)=denxx(3,iatm,3,iatm)+daij*valzz
cwts.f:              if(abijt*(abvj*vmx+abvvj*valmm).gt.thrsh)then
cwts.f:     $                   daijt * (vaoxxx(1,i)*valj+valxx*valjx)
cwts.f:     $                   daijt * (vaoxxx(2,i)*valj+valxy*valjx)
cwts.f:     $                   daijt * (vaoxxx(2,i)*valj+valxy*valjx)
cwts.f:     $                   daijt * (vaoxxx(3,i)*valj+valyy*valjx)
cwts.f:     $                   daijt * (vaoxxx(5,i)*valj+valxz*valjx)
cwts.f:     $                   daijt * (vaoxxx(5,i)*valj+valxz*valjx)
cwts.f:     $                   daijt * (vaoxxx(6,i)*valj+valyz*valjx)
cwts.f:     $                   daijt * (vaoxxx(6,i)*valj+valyz*valjx)
cwts.f:     $                   daijt * (vaoxxx(8,i)*valj+valzz*valjx)
cwts.f:     $                   daijt * (vaoxxx(2,i)*valj+valxx*valjy)
cwts.f:     $                   daijt * (vaoxxx(3,i)*valj+valxy*valjy)
cwts.f:     $                   daijt * (vaoxxx(3,i)*valj+valxy*valjy)
cwts.f:     $                   daijt * (vaoxxx(4,i)*valj+valyy*valjy)
cwts.f:     $                   daijt * (vaoxxx(6,i)*valj+valxz*valjy)
cwts.f:     $                   daijt * (vaoxxx(6,i)*valj+valxz*valjy)
cwts.f:     $                   daijt * (vaoxxx(7,i)*valj+valyz*valjy)
cwts.f:     $                   daijt * (vaoxxx(7,i)*valj+valyz*valjy)
cwts.f:     $                   daijt * (vaoxxx(9,i)*valj+valzz*valjy)
cwts.f:     $                   daijt * (vaoxxx(5,i)*valj+valxx*valjz)
cwts.f:     $                   daijt * (vaoxxx(6,i)*valj+valxy*valjz)
cwts.f:     $                   daijt * (vaoxxx(6,i)*valj+valxy*valjz)
cwts.f:     $                   daijt * (vaoxxx(7,i)*valj+valyy*valjz)
cwts.f:     $                   daijt * (vaoxxx(8,i)*valj+valxz*valjz)
cwts.f:     $                   daijt * (vaoxxx(8,i)*valj+valxz*valjz)
cwts.f:     $                   daijt * (vaoxxx(9,i)*valj+valyz*valjz)
cwts.f:     $                   daijt * (vaoxxx(9,i)*valj+valyz*valjz)
cwts.f:     $                   daijt * (vaoxxx(10,i)*valj+valzz*valjz)
cwts.f:              if(dodenxx.and.abijt*abvvj*valm.gt.thrsh)then
cwts.f:                daij = daijt*valjx
cwts.f:                denxx(1,iatm,1,jatm)=denxx(1,iatm,1,jatm)+daij*valx
cwts.f:                denxx(2,iatm,1,jatm)=denxx(2,iatm,1,jatm)+daij*valy
cwts.f:                denxx(3,iatm,1,jatm)=denxx(3,iatm,1,jatm)+daij*valz
cwts.f:                daij = daijt*valjy
cwts.f:                denxx(1,iatm,2,jatm)=denxx(1,iatm,2,jatm)+daij*valx
cwts.f:                denxx(2,iatm,2,jatm)=denxx(2,iatm,2,jatm)+daij*valy
cwts.f:                denxx(3,iatm,2,jatm)=denxx(3,iatm,2,jatm)+daij*valz
cwts.f:                daij = daijt*valjz
cwts.f:                denxx(1,iatm,3,jatm)=denxx(1,iatm,3,jatm)+daij*valx
cwts.f:                denxx(2,iatm,3,jatm)=denxx(2,iatm,3,jatm)+daij*valy
cwts.f:                denxx(3,iatm,3,jatm)=denxx(3,iatm,3,jatm)+daij*valz
cwts.f:              if(abijt*(abvvj*valmm+vmx*valm).gt.thrsh)then
cwts.f:     $                      daijt * (valxx*valjx+valx*vaoxx(1,j))
cwts.f:     $                      daijt * (valxx*valjy+valx*vaoxx(2,j))
cwts.f:     $                      daijt * (valxy*valjx+valy*vaoxx(1,j))
cwts.f:     $                      daijt * (valxy*valjy+valy*vaoxx(2,j))
cwts.f:     $                      daijt * (valxx*valjz+valx*vaoxx(4,j))
cwts.f:     $                      daijt * (valxz*valjx+valz*vaoxx(1,j))
cwts.f:     $                      daijt * (valxy*valjz+valy*vaoxx(4,j))
cwts.f:     $                      daijt * (valxz*valjy+valz*vaoxx(2,j))
cwts.f:     $                      daijt * (valxz*valjz+valz*vaoxx(4,j))
cwts.f:     $                      daijt * (valxy*valjx+valx*vaoxx(2,j))
cwts.f:     $                      daijt * (valxy*valjy+valx*vaoxx(3,j))
cwts.f:     $                      daijt * (valyy*valjx+valy*vaoxx(2,j))
cwts.f:     $                      daijt * (valyy*valjy+valy*vaoxx(3,j))
cwts.f:     $                      daijt * (valxy*valjz+valx*vaoxx(5,j))
cwts.f:     $                      daijt * (valyz*valjx+valz*vaoxx(2,j))
cwts.f:     $                      daijt * (valyy*valjz+valy*vaoxx(5,j))
cwts.f:     $                      daijt * (valyz*valjy+valz*vaoxx(3,j))
cwts.f:     $                      daijt * (valyz*valjz+valz*vaoxx(5,j))
cwts.f:     $                      daijt * (valxz*valjx+valx*vaoxx(4,j))
cwts.f:     $                      daijt * (valxz*valjy+valx*vaoxx(5,j))
cwts.f:     $                      daijt * (valyz*valjx+valy*vaoxx(4,j))
cwts.f:     $                      daijt * (valyz*valjy+valy*vaoxx(5,j))
cwts.f:     $                      daijt * (valxz*valjz+valx*vaoxx(6,j))
cwts.f:     $                      daijt * (valzz*valjx+valz*vaoxx(4,j))
cwts.f:     $                      daijt * (valyz*valjz+valy*vaoxx(6,j))
cwts.f:     $                      daijt * (valzz*valjy+valz*vaoxx(5,j))
cwts.f:     $                      daijt * (valzz*valjz+valz*vaoxx(6,j))
cwts.f:            ij = (jj*(jj-1))/2 + ii
cwts.f:            daijt= da(ij)
cwts.f:            abijt=abs(daijt)
cwts.f:            daij = daijt*valj
cwts.f:            abij=abs(daij)
cwts.f:              if(abij*valm.gt.thrsh)then
cwts.f:                denx(1,iatm) = denx(1,iatm) - daij*valx
cwts.f:                denx(2,iatm) = denx(2,iatm) - daij*valy
cwts.f:                denx(3,iatm) = denx(3,iatm) - daij*valz
cwts.f:             if(abijt*(abvj*valmm+abvvj*valm).gt.thrsh)then
cwts.f:              gdx(1,1,iatm)=gdx(1,1,iatm)-daijt*(valj*valxx+valx*valjx)
cwts.f:              gdx(1,2,iatm)=gdx(1,2,iatm)-daijt*(valj*valxy+valy*valjx)
cwts.f:              gdx(1,3,iatm)=gdx(1,3,iatm)-daijt*(valj*valxz+valz*valjx)
cwts.f:              gdx(2,1,iatm)=gdx(2,1,iatm)-daijt*(valj*valxy+valx*valjy)
cwts.f:              gdx(2,2,iatm)=gdx(2,2,iatm)-daijt*(valj*valyy+valy*valjy)
cwts.f:              gdx(2,3,iatm)=gdx(2,3,iatm)-daijt*(valj*valyz+valz*valjy)
cwts.f:              gdx(3,1,iatm)=gdx(3,1,iatm)-daijt*(valj*valxz+valx*valjz)
cwts.f:              gdx(3,2,iatm)=gdx(3,2,iatm)-daijt*(valj*valyz+valy*valjz)
cwts.f:              gdx(3,3,iatm)=gdx(3,3,iatm)-daijt*(valj*valzz+valz*valjz)
cwts.f:            if(dodenxx.and.abij*valmm.gt.thrsh)then
cwts.f:              denxx(1,iatm,1,iatm)=denxx(1,iatm,1,iatm)+daij*valxx
cwts.f:              xyc=daij*valxy
cwts.f:              denxx(2,iatm,2,iatm)=denxx(2,iatm,2,iatm)+daij*valyy
cwts.f:              xzc=daij*valxz
cwts.f:              yzc=daij*valyz
cwts.f:              denxx(3,iatm,3,iatm)=denxx(3,iatm,3,iatm)+daij*valzz
cwts.f:              if(abijt*(abvj*vmx+abvvj*valmm).gt.thrsh)then
cwts.f:     $                   daijt * (vaoxxx(1,i)*valj+valxx*valjx)
cwts.f:     $                   daijt * (vaoxxx(2,i)*valj+valxy*valjx)
cwts.f:     $                   daijt * (vaoxxx(2,i)*valj+valxy*valjx)
cwts.f:     $                   daijt * (vaoxxx(3,i)*valj+valyy*valjx)
cwts.f:     $                   daijt * (vaoxxx(5,i)*valj+valxz*valjx)
cwts.f:     $                   daijt * (vaoxxx(5,i)*valj+valxz*valjx)
cwts.f:     $                   daijt * (vaoxxx(6,i)*valj+valyz*valjx)
cwts.f:     $                   daijt * (vaoxxx(6,i)*valj+valyz*valjx)
cwts.f:     $                   daijt * (vaoxxx(8,i)*valj+valzz*valjx)
cwts.f:     $                   daijt * (vaoxxx(2,i)*valj+valxx*valjy)
cwts.f:     $                   daijt * (vaoxxx(3,i)*valj+valxy*valjy)
cwts.f:     $                   daijt * (vaoxxx(3,i)*valj+valxy*valjy)
cwts.f:     $                   daijt * (vaoxxx(4,i)*valj+valyy*valjy)
cwts.f:     $                   daijt * (vaoxxx(6,i)*valj+valxz*valjy)
cwts.f:     $                 daijt * (vaoxxx(6,i)*valj+valxz*valjy)
cwts.f:     $                   daijt * (vaoxxx(7,i)*valj+valyz*valjy)
cwts.f:     $                   daijt * (vaoxxx(7,i)*valj+valyz*valjy)
cwts.f:     $                   daijt * (vaoxxx(9,i)*valj+valzz*valjy)
cwts.f:     $                   daijt * (vaoxxx(5,i)*valj+valxx*valjz)
cwts.f:     $                   daijt * (vaoxxx(6,i)*valj+valxy*valjz)
cwts.f:     $                   daijt * (vaoxxx(6,i)*valj+valxy*valjz)
cwts.f:     $                   daijt * (vaoxxx(7,i)*valj+valyy*valjz)
cwts.f:     $                   daijt * (vaoxxx(8,i)*valj+valxz*valjz)
cwts.f:     $                   daijt * (vaoxxx(8,i)*valj+valxz*valjz)
cwts.f:     $                   daijt * (vaoxxx(9,i)*valj+valyz*valjz)
cwts.f:     $                   daijt * (vaoxxx(9,i)*valj+valyz*valjz)
cwts.f:     $                   daijt * (vaoxxx(10,i)*valj+valzz*valjz)
cwts.f:              if(dodenxx.and.abijt*abvvj*valm.gt.thrsh)then
cwts.f:                daij = daijt*valjx
cwts.f:                denxx(1,iatm,1,jatm)=denxx(1,iatm,1,jatm)+daij*valx
cwts.f:                denxx(2,iatm,1,jatm)=denxx(2,iatm,1,jatm)+daij*valy
cwts.f:                denxx(3,iatm,1,jatm)=denxx(3,iatm,1,jatm)+daij*valz
cwts.f:                daij = daijt*valjy
cwts.f:                denxx(1,iatm,2,jatm)=denxx(1,iatm,2,jatm)+daij*valx
cwts.f:                denxx(2,iatm,2,jatm)=denxx(2,iatm,2,jatm)+daij*valy
cwts.f:                denxx(3,iatm,2,jatm)=denxx(3,iatm,2,jatm)+daij*valz
cwts.f:                daij = daijt*valjz
cwts.f:                denxx(1,iatm,3,jatm)=denxx(1,iatm,3,jatm)+daij*valx
cwts.f:                denxx(2,iatm,3,jatm)=denxx(2,iatm,3,jatm)+daij*valy
cwts.f:                denxx(3,iatm,3,jatm)=denxx(3,iatm,3,jatm)+daij*valz
cwts.f:              if(abijt*(abvvj*valmm+vmx*valm).gt.thrsh)then
cwts.f:     $                      daijt * (valxx*valjx+valx*vaoxx(1,j))
cwts.f:     $                      daijt * (valxx*valjy+valx*vaoxx(2,j))
cwts.f:     $                      daijt * (valxy*valjx+valy*vaoxx(1,j))
cwts.f:     $                      daijt * (valxy*valjy+valy*vaoxx(2,j))
cwts.f:     $                      daijt * (valxx*valjz+valx*vaoxx(4,j))
cwts.f:     $                      daijt * (valxz*valjx+valz*vaoxx(1,j))
cwts.f:     $                      daijt * (valxy*valjz+valy*vaoxx(4,j))
cwts.f:     $                      daijt * (valxz*valjy+valz*vaoxx(2,j))
cwts.f:     $                      daijt * (valxz*valjz+valz*vaoxx(4,j))
cwts.f:     $                      daijt * (valxy*valjx+valx*vaoxx(2,j))
cwts.f:     $                      daijt * (valxy*valjy+valx*vaoxx(3,j))
cwts.f:     $                      daijt * (valyy*valjx+valy*vaoxx(2,j))
cwts.f:     $                      daijt * (valyy*valjy+valy*vaoxx(3,j))
cwts.f:     $                      daijt * (valxy*valjz+valx*vaoxx(5,j))
cwts.f:     $                      daijt * (valyz*valjx+valz*vaoxx(2,j))
cwts.f:     $                      daijt * (valyy*valjz+valy*vaoxx(5,j))
cwts.f:     $                      daijt * (valyz*valjy+valz*vaoxx(3,j))
cwts.f:     $                      daijt * (valyz*valjz+valz*vaoxx(5,j))
cwts.f:     $                      daijt * (valxz*valjx+valx*vaoxx(4,j))
cwts.f:     $                      daijt * (valxz*valjy+valx*vaoxx(5,j))
cwts.f:     $                      daijt * (valyz*valjx+valy*vaoxx(4,j))
cwts.f:     $                      daijt * (valyz*valjy+valy*vaoxx(5,j))
cwts.f:     $                      daijt * (valxz*valjz+valx*vaoxx(6,j))
cwts.f:     $                      daijt * (valzz*valjx+valz*vaoxx(4,j))
cwts.f:     $                      daijt * (valyz*valjz+valy*vaoxx(6,j))
cwts.f:     $                      daijt * (valzz*valjy+valz*vaoxx(5,j))
cwts.f:     $                      daijt * (valzz*valjz+valz*vaoxx(6,j))
cwts.f:              ij = it + jj
cwts.f:                fda(1,iatm,ij) = fda(1,iatm,ij) - xxvx*valj - valix*xvj
cwts.f:                fda(2,iatm,ij) = fda(2,iatm,ij) - xxvy*valj - valiy*xvj
cwts.f:                fda(3,iatm,ij) = fda(3,iatm,ij) - xxvz*valj - valiz*xvj
cwts.f:                fda(1,jatm,ij) = fda(1,jatm,ij) - xvi*valjx -
cwts.f:                fda(2,jatm,ij) = fda(2,jatm,ij) - xvi*valjy -
cwts.f:                fda(3,jatm,ij) = fda(3,jatm,ij) - xvi*valjz -
cwts.f:              vij=vali*valj
cwts.f:              vijx=valix*valj+valjx*vali
cwts.f:              vijy=valiy*valj+valjy*vali
cwts.f:              vijz=valiz*valj+valjz*vali
cwts.f:              if(svmax*abs(vij)+swmax*abs(vijx+vijy+vijz).gt.thrsh)then
cwts.f:                  fda(1,katm,ij) = fda(1,katm,ij) + (sv(1,katm)*vij+
cwts.f:     $            sw(1,1,katm)*vijx+sw(2,1,katm)*vijy+sw(3,1,katm)*vijz)
cwts.f:                  fda(2,katm,ij) = fda(2,katm,ij) + (sv(2,katm)*vij+
cwts.f:     $            sw(1,2,katm)*vijx+sw(2,2,katm)*vijy+sw(3,2,katm)*vijz)
cwts.f:                  fda(3,katm,ij) = fda(3,katm,ij) + (sv(3,katm)*vij+
cwts.f:     $            sw(1,3,katm)*vijx+sw(2,3,katm)*vijy+sw(3,3,katm)*vijz)
cwts.f:              gij=potp*vij+potxp2*(dx*vijx+dy*vijy+dz*vijz)
cwts.f:              if(gwtmax*abs(gij).gt.thrsh)then
cwts.f:                    fda(1,ia,ij)=fda(1,ia,ij)+gwt(1,ia,ipp)*gij
cwts.f:                    fda(2,ia,ij)=fda(2,ia,ij)+gwt(2,ia,ipp)*gij
cwts.f:                    fda(3,ia,ij)=fda(3,ia,ij)+gwt(3,ia,ipp)*gij
cwts.f:      integer nat3,ip,ipp,i,j,ii,jj,ij,it
cwts.f:      real*8 dmx2,daij,dbij,daij2,dbij2,abdij,abdijm
cwts.f:      real*8 valij,valija,valijb
cwts.f:      real*8 valjx,valjy,valjz,abvj,abvvj,abijt,abij
cwts.f:      real*8 vij,vijx,vijy,vijz
cwts.f:      real*8 dxija,dxijb,gija,gijb
cwts.f:          ij = it + jj
cwts.f:          daij2=two*da(ij)
cwts.f:          dbij2=two*db(ij)
cwts.f:          daij = daij2*vao(j)
cwts.f:          dbij = dbij2*vao(j)
cwts.f:          abdij=max(abs(daij),abs(dbij))
cwts.f:          abdijm=abdij*vmx
cwts.f:              denxa(1,iatm) = denxa(1,iatm) - daij*valx
cwts.f:              denxa(2,iatm) = denxa(2,iatm) - daij*valy
cwts.f:              denxa(3,iatm) = denxa(3,iatm) - daij*valz
cwts.f:              denxb(1,iatm) = denxb(1,iatm) - dbij*valx
cwts.f:              denxb(2,iatm) = denxb(2,iatm) - dbij*valy
cwts.f:              denxb(3,iatm) = denxb(3,iatm) - dbij*valz
cwts.f:          if(doxx.and.abdijm.gt.thrxx)then
cwts.f:             denxxa(1,iatm,1,iatm)=denxxa(1,iatm,1,iatm)+daij*vaoxx(1,i)
cwts.f:             xyc=daij*vaoxx(2,i)
cwts.f:             denxxa(2,iatm,2,iatm)=denxxa(2,iatm,2,iatm)+daij*vaoxx(3,i)
cwts.f:             xzc=daij*vaoxx(4,i)
cwts.f:             yzc=daij*vaoxx(5,i)
cwts.f:             denxxa(3,iatm,3,iatm)=denxxa(3,iatm,3,iatm)+daij*vaoxx(6,i)
cwts.f:             denxxb(1,iatm,1,iatm)=denxxb(1,iatm,1,iatm)+dbij*vaoxx(1,i)
cwts.f:             xyc=dbij*vaoxx(2,i)
cwts.f:             denxxb(2,iatm,2,iatm)=denxxb(2,iatm,2,iatm)+dbij*vaoxx(3,i)
cwts.f:             xzc=dbij*vaoxx(4,i)
cwts.f:             yzc=dbij*vaoxx(5,i)
cwts.f:             denxxb(3,iatm,3,iatm)=denxxb(3,iatm,3,iatm)+dbij*vaoxx(6,i)
cwts.f:          abdijm=max(abs(da(ij)),abs(db(ij)))*valm*vmx
cwts.f:          if(doxx.and.abdijm.gt.thrxx)then
cwts.f:              daij = daij2*vaox(1,j)
cwts.f:              denxxa(1,iatm,1,jatm)=denxxa(1,iatm,1,jatm)+daij*valx
cwts.f:              denxxa(2,iatm,1,jatm)=denxxa(2,iatm,1,jatm)+daij*valy
cwts.f:              denxxa(3,iatm,1,jatm)=denxxa(3,iatm,1,jatm)+daij*valz
cwts.f:              daij = daij2*vaox(2,j)
cwts.f:              denxxa(1,iatm,2,jatm)=denxxa(1,iatm,2,jatm)+daij*valx
cwts.f:              denxxa(2,iatm,2,jatm)=denxxa(2,iatm,2,jatm)+daij*valy
cwts.f:              denxxa(3,iatm,2,jatm)=denxxa(3,iatm,2,jatm)+daij*valz
cwts.f:              daij = daij2*vaox(3,j)
cwts.f:              denxxa(1,iatm,3,jatm)=denxxa(1,iatm,3,jatm)+daij*valx
cwts.f:              denxxa(2,iatm,3,jatm)=denxxa(2,iatm,3,jatm)+daij*valy
cwts.f:              denxxa(3,iatm,3,jatm)=denxxa(3,iatm,3,jatm)+daij*valz
cwts.f:              dbij = dbij2*vaox(1,j)
cwts.f:              denxxb(1,iatm,1,jatm)=denxxb(1,iatm,1,jatm)+dbij*valx
cwts.f:              denxxb(2,iatm,1,jatm)=denxxb(2,iatm,1,jatm)+dbij*valy
cwts.f:              denxxb(3,iatm,1,jatm)=denxxb(3,iatm,1,jatm)+dbij*valz
cwts.f:              dbij = dbij2*vaox(2,j)
cwts.f:              denxxb(1,iatm,2,jatm)=denxxb(1,iatm,2,jatm)+dbij*valx
cwts.f:              denxxb(2,iatm,2,jatm)=denxxb(2,iatm,2,jatm)+dbij*valy
cwts.f:              denxxb(3,iatm,2,jatm)=denxxb(3,iatm,2,jatm)+dbij*valz
cwts.f:              dbij = dbij2*vaox(3,j)
cwts.f:              denxxb(1,iatm,3,jatm)=denxxb(1,iatm,3,jatm)+dbij*valx
cwts.f:              denxxb(2,iatm,3,jatm)=denxxb(2,iatm,3,jatm)+dbij*valy
cwts.f:              denxxb(3,iatm,3,jatm)=denxxb(3,iatm,3,jatm)+dbij*valz
cwts.f:          ij = (jj*(jj-1))/2 + ii
cwts.f:          daij2 = two*da(ij)
cwts.f:          dbij2 = two*db(ij)
cwts.f:          daij = daij2*vao(j)
cwts.f:          dbij = dbij2*vao(j)
cwts.f:          abdij=max(abs(daij),abs(dbij))
cwts.f:          abdijm=abdij*vmx
cwts.f:              denxa(1,iatm) = denxa(1,iatm) - daij*valx
cwts.f:              denxa(2,iatm) = denxa(2,iatm) - daij*valy
cwts.f:              denxa(3,iatm) = denxa(3,iatm) - daij*valz
cwts.f:              denxb(1,iatm) = denxb(1,iatm) - dbij*valx
cwts.f:              denxb(2,iatm) = denxb(2,iatm) - dbij*valy
cwts.f:              denxb(3,iatm) = denxb(3,iatm) - dbij*valz
cwts.f:          if(doxx.and.abdijm.gt.thrxx)then
cwts.f:             denxxa(1,iatm,1,iatm)=denxxa(1,iatm,1,iatm)+daij*vaoxx(1,i)
cwts.f:             xyc=daij*vaoxx(2,i)
cwts.f:             denxxa(2,iatm,2,iatm)=denxxa(2,iatm,2,iatm)+daij*vaoxx(3,i)
cwts.f:             xzc=daij*vaoxx(4,i)
cwts.f:             yzc=daij*vaoxx(5,i)
cwts.f:             denxxa(3,iatm,3,iatm)=denxxa(3,iatm,3,iatm)+daij*vaoxx(6,i)
cwts.f:             denxxb(1,iatm,1,iatm)=denxxb(1,iatm,1,iatm)+dbij*vaoxx(1,i)
cwts.f:             xyc=dbij*vaoxx(2,i)
cwts.f:             denxxb(2,iatm,2,iatm)=denxxb(2,iatm,2,iatm)+dbij*vaoxx(3,i)
cwts.f:             xzc=dbij*vaoxx(4,i)
cwts.f:             yzc=dbij*vaoxx(5,i)
cwts.f:             denxxb(3,iatm,3,iatm)=denxxb(3,iatm,3,iatm)+dbij*vaoxx(6,i)
cwts.f:          abdijm=max(abs(da(ij)),abs(db(ij)))*valm*vmx
cwts.f:          if(doxx.and.abdijm.gt.thrxx)then
cwts.f:              daij = daij2*vaox(1,j)
cwts.f:              denxxa(1,iatm,1,jatm)=denxxa(1,iatm,1,jatm)+daij*valx
cwts.f:              denxxa(2,iatm,1,jatm)=denxxa(2,iatm,1,jatm)+daij*valy
cwts.f:              denxxa(3,iatm,1,jatm)=denxxa(3,iatm,1,jatm)+daij*valz
cwts.f:              daij = daij2*vaox(2,j)
cwts.f:              denxxa(1,iatm,2,jatm)=denxxa(1,iatm,2,jatm)+daij*valx
cwts.f:              denxxa(2,iatm,2,jatm)=denxxa(2,iatm,2,jatm)+daij*valy
cwts.f:              denxxa(3,iatm,2,jatm)=denxxa(3,iatm,2,jatm)+daij*valz
cwts.f:              daij = daij2*vaox(3,j)
cwts.f:              denxxa(1,iatm,3,jatm)=denxxa(1,iatm,3,jatm)+daij*valx
cwts.f:              denxxa(2,iatm,3,jatm)=denxxa(2,iatm,3,jatm)+daij*valy
cwts.f:              denxxa(3,iatm,3,jatm)=denxxa(3,iatm,3,jatm)+daij*valz
cwts.f:              dbij = dbij2*vaox(1,j)
cwts.f:              denxxb(1,iatm,1,jatm)=denxxb(1,iatm,1,jatm)+dbij*valx
cwts.f:              denxxb(2,iatm,1,jatm)=denxxb(2,iatm,1,jatm)+dbij*valy
cwts.f:              denxxb(3,iatm,1,jatm)=denxxb(3,iatm,1,jatm)+dbij*valz
cwts.f:              dbij = dbij2*vaox(2,j)
cwts.f:              denxxb(1,iatm,2,jatm)=denxxb(1,iatm,2,jatm)+dbij*valx
cwts.f:              denxxb(2,iatm,2,jatm)=denxxb(2,iatm,2,jatm)+dbij*valy
cwts.f:              denxxb(3,iatm,2,jatm)=denxxb(3,iatm,2,jatm)+dbij*valz
cwts.f:              dbij = dbij2*vaox(3,j)
cwts.f:              denxxb(1,iatm,3,jatm)=denxxb(1,iatm,3,jatm)+dbij*valx
cwts.f:              denxxb(2,iatm,3,jatm)=denxxb(2,iatm,3,jatm)+dbij*valy
cwts.f:              denxxb(3,iatm,3,jatm)=denxxb(3,iatm,3,jatm)+dbij*valz
cwts.f:            ij = it + jj
cwts.f:                fda(1,iatm,ij) = fda(1,iatm,ij) - valxa*valj
cwts.f:                fda(2,iatm,ij) = fda(2,iatm,ij) - valya*valj
cwts.f:                fda(3,iatm,ij) = fda(3,iatm,ij) - valza*valj
cwts.f:                fdb(1,iatm,ij) = fdb(1,iatm,ij) - valxb*valj
cwts.f:                fdb(2,iatm,ij) = fdb(2,iatm,ij) - valyb*valj
cwts.f:                fdb(3,iatm,ij) = fdb(3,iatm,ij) - valzb*valj
cwts.f:                fda(1,jatm,ij) = fda(1,jatm,ij) - vala*vaox(1,j)
cwts.f:                fda(2,jatm,ij) = fda(2,jatm,ij) - vala*vaox(2,j)
cwts.f:                fda(3,jatm,ij) = fda(3,jatm,ij) - vala*vaox(3,j)
cwts.f:                fdb(1,jatm,ij) = fdb(1,jatm,ij) - valb*vaox(1,j)
cwts.f:                fdb(2,jatm,ij) = fdb(2,jatm,ij) - valb*vaox(2,j)
cwts.f:                fdb(3,jatm,ij) = fdb(3,jatm,ij) - valb*vaox(3,j)
cwts.f:            valij = vali*valj
cwts.f:            if(abs(valij)*svmax.gt.thrsh) then
cwts.f:                fda(1,katm,ij)=fda(1,katm,ij) + valij*sva(1,katm)
cwts.f:                fda(2,katm,ij)=fda(2,katm,ij) + valij*sva(2,katm)
cwts.f:                fda(3,katm,ij)=fda(3,katm,ij) + valij*sva(3,katm)
cwts.f:                fdb(1,katm,ij)=fdb(1,katm,ij) + valij*svb(1,katm)
cwts.f:                fdb(2,katm,ij)=fdb(2,katm,ij) + valij*svb(2,katm)
cwts.f:                fdb(3,katm,ij)=fdb(3,katm,ij) + valij*svb(3,katm)
cwts.f:            valija=valij*prap
cwts.f:            valijb=valij*prbp
cwts.f:                fda(1,ia,ij)=fda(1,ia,ij)+valija*gwt(1,ia,ipp)
cwts.f:                fda(2,ia,ij)=fda(2,ia,ij)+valija*gwt(2,ia,ipp)
cwts.f:                fda(3,ia,ij)=fda(3,ia,ij)+valija*gwt(3,ia,ipp)
cwts.f:                fdb(1,ia,ij)=fdb(1,ia,ij)+valijb*gwt(1,ia,ipp)
cwts.f:                fdb(2,ia,ij)=fdb(2,ia,ij)+valijb*gwt(2,ia,ipp)
cwts.f:                fdb(3,ia,ij)=fdb(3,ia,ij)+valijb*gwt(3,ia,ipp)
cwts.f:            abijt=max(abs(daij2),abs(dbij2))
cwts.f:            abij=max(abs(daij),abs(dbij))
cwts.f:            if(abij*valm.gt.thrsh)then
cwts.f:            if(abijt*(abvj*valmm+abvvj*valm).gt.thrsh)then
cwts.f:            if(abij*valmm.gt.thrsh)then
cwts.f:            if(dogradxx.and.abijt*(abvj*vmx+abvvj*valmm).gt.thrsh)then
cwts.f:            if(abijt*abvvj*valm.gt.thrsh)then
cwts.f:            if(dogradxx.and.abijt*(abvvj*valmm+vmx*valm).gt.thrsh)then
cwts.f:            abijt=max(abs(daij2),abs(dbij2))
cwts.f:            abij=max(abs(daij),abs(dbij))
cwts.f:            if(abij*valm.gt.thrsh)then
cwts.f:            if(abijt*(abvj*valmm+abvvj*valm).gt.thrsh)then
cwts.f:            if(abij*valmm.gt.thrsh)then
cwts.f:            if(dogradxx.and.abijt*(abvj*vmx+abvvj*valmm).gt.thrsh)then
cwts.f:            if(abijt*abvvj*valm.gt.thrsh)then
cwts.f:            if(dogradxx.and.abijt*(abvvj*valmm+vmx*valm).gt.thrsh)then
cwts.f:                fda(1,iatm,ij)=fda(1,iatm,ij)-xxvxa*valj-valix*xvja
cwts.f:                fda(2,iatm,ij)=fda(2,iatm,ij)-xxvya*valj-valiy*xvja
cwts.f:                fda(3,iatm,ij)=fda(3,iatm,ij)-xxvza*valj-valiz*xvja
cwts.f:                fdb(1,iatm,ij)=fdb(1,iatm,ij)-xxvxb*valj-valix*xvjb
cwts.f:                fdb(2,iatm,ij)=fdb(2,iatm,ij)-xxvyb*valj-valiy*xvjb
cwts.f:                fdb(3,iatm,ij)=fdb(3,iatm,ij)-xxvzb*valj-valiz*xvjb
cwts.f:                fda(1,jAtm,ij) = fda(1,jatm,ij) - xvia*Valjx -
cwts.f:                fda(2,jatm,ij) = fda(2,jatm,ij) - xvia*valjy -
cwts.f:                fda(3,jatm,ij) = fda(3,jAtm,ij) - xvia*valjz -
cwts.f:                fdb(1,jatm,ij) = fdb(1,jatm,ij) - xvib*valjx -
cwts.f:                fdb(2,jatm,ij) = fdb(2,jatm,ij) - xvib*valjy -
cwts.f:                fdb(3,jatm,ij) = fdb(3,jatm,ij) - xvib*valjz -
cwts.f:              vij=vali*valj
cwts.f:              vijx=valix*valj+valjx*vali
cwts.f:              vijy=valiy*valj+valjy*vali
cwts.f:              vijz=valiz*valj+valjz*vali
cwts.f:              if(svmax*abs(vij)+swmax*abs(vijx+vijy+vijz).GT.thrsh)then
cwts.f:                  fda(1,katm,ij) = fda(1,katm,ij) + (sva(1,katm)*vij+
cwts.f:     $                           swa(1,1,katm)*vijx+swa(2,1,katm)*vijy+
cwts.f:     $                           swa(3,1,katm)*vijz)
cwts.f:                  fda(2,katm,ij) = fda(2,katm,ij) + (sva(2,katm)*vij+
cwts.f:     $                           swa(1,2,katm)*vijx+swa(2,2,katm)*vijy+
cwts.f:     $                           swa(3,2,katm)*vijz)
cwts.f:                  fda(3,katm,ij) = fda(3,katm,ij) + (sva(3,katm)*vij+
cwts.f:     $                           swa(1,3,katm)*vijx+swa(2,3,katm)*vijy+
cwts.f:     $                           swa(3,3,katm)*vijz)
cwts.f:                  fdb(1,katm,ij) = fdb(1,katm,ij) + (svb(1,katm)*vij+
cwts.f:     $                           swb(1,1,katm)*vijx+swb(2,1,katm)*vijy+
cwts.f:     $                           swb(3,1,katm)*vijz)
cwts.f:                  fdb(2,katm,ij) = fdb(2,katm,ij) + (svb(2,katm)*vij+
cwts.f:     $                           swb(1,2,katm)*vijx+swb(2,2,katm)*vijy+
cwts.f:     $                           swb(3,2,katm)*vijz)
cwts.f:                  fdb(3,katm,ij) = fdb(3,katm,ij) + (svb(3,katm)*vij+
cwts.f:     $                           swb(1,3,katm)*vijx+swb(2,3,katm)*vijy+
cwts.f:     $                           swb(3,3,katm)*vijz)
cwts.f:              dxija=dax*vijx+day*vijy+daz*vijz
cwts.f:              dxijb=dbx*vijx+dby*vijy+dbz*vijz
cwts.f:              gija=prap*vij+pgap2*dxija+pgcp*dxijb
cwts.f:              gijb=prbp*vij+pgbp2*dxijb+pgcp*dxija
cwts.f:              if(gwtmax*max(abs(gija),abs(gijb)).gt.thrsh)then
cwts.f:                    fda(1,ia,ij)=fda(1,ia,ij)+gwt(1,ia,ipp)*gija
cwts.f:                    fda(2,ia,ij)=fda(2,ia,ij)+gwt(2,ia,ipp)*gija
cwts.f:                    fda(3,ia,ij)=fda(3,ia,ij)+gwt(3,ia,ipp)*gija
cwts.f:                    fdb(1,ia,ij)=fdb(1,ia,ij)+gwt(1,ia,ipp)*gijb
cwts.f:                    fdb(2,ia,ij)=fdb(2,ia,ij)+gwt(2,ia,ipp)*gijb
cwts.f:                    fdb(3,ia,ij)=fdb(3,ia,ij)+gwt(3,ia,ipp)*gijb
cwts.f:      integer nat3,ip,ipp,i,j,ii,jj,ij,it
cwts.f:      real*8 abra,abrara,thrx,thrx1,thrxx,valt,abdaij,abdaijm,abval
cwts.f:      real*8 abvj,abvvj,valj,valjx,valjy,valjz,abijt,abij
cwts.f:      real*8 gwtmax,dmx,valx,valy,valz,daij,xyc,xzc,yzc
cwts.f:      real*8 vij,vijx,vijy,vijz,gij,hdx,hdy,hdz,hgx,hgy,hgz
cwts.f:      real*8 daijt,smax,dmax,potp,potxp,potp2,potxp2
cwts.f:          ij = it + jj
cwts.f:          daij = da(ij)*vao(j)
cwts.f:          abdaij=abs(daij)
cwts.f:          abdaijm=abdaij*vmx
cwts.f:              denx(1,iatm) = denx(1,iatm) - daij*valx
cwts.f:              denx(2,iatm) = denx(2,iatm) - daij*valy
cwts.f:              denx(3,iatm) = denx(3,iatm) - daij*valz
cwts.f:          if(doxx.and.abdaijm.gt.thrxx)then
cwts.f:              denxx(1,iatm,1,iatm)=denxx(1,iatm,1,iatm)+daij*vaoxx(1,i)
cwts.f:              xyc=daij*vaoxx(2,i)
cwts.f:              denxx(2,iatm,2,iatm)=denxx(2,iatm,2,iatm)+daij*vaoxx(3,i)
cwts.f:              xzc=daij*vaoxx(4,i)
cwts.f:              yzc=daij*vaoxx(5,i)
cwts.f:              denxx(3,iatm,3,iatm)=denxx(3,iatm,3,iatm)+daij*vaoxx(6,i)
cwts.f:          abdaijm=abs(da(ij))*valm*vmx
cwts.f:          if(doxx.and.abdaijm.gt.thrxx)then
cwts.f:            daij = da(ij)*vaox(1,j)
cwts.f:              denxx(1,iatm,1,jatm)=denxx(1,iatm,1,jatm)+daij*valx
cwts.f:              denxx(2,iatm,1,jatm)=denxx(2,iatm,1,jatm)+daij*valy
cwts.f:              denxx(3,iatm,1,jatm)=denxx(3,iatm,1,jatm)+daij*valz
cwts.f:              daij = da(ij)*vaox(2,j)
cwts.f:              denxx(1,iatm,2,jatm)=denxx(1,iatm,2,jatm)+daij*valx
cwts.f:              denxx(2,iatm,2,jatm)=denxx(2,iatm,2,jatm)+daij*valy
cwts.f:              denxx(3,iatm,2,jatm)=denxx(3,iatm,2,jatm)+daij*valz
cwts.f:              daij = da(ij)*vaox(3,j)
cwts.f:              denxx(1,iatm,3,jatm)=denxx(1,iatm,3,jatm)+daij*valx
cwts.f:              denxx(2,iatm,3,jatm)=denxx(2,iatm,3,jatm)+daij*valy
cwts.f:              denxx(3,iatm,3,jatm)=denxx(3,iatm,3,jatm)+daij*valz
cwts.f:          ij = (jj*(jj-1))/2 + ii
cwts.f:          daij = da(ij)*vao(j)
cwts.f:          abdaij=abs(daij)
cwts.f:          abdaijm=abdaij*vmx
cwts.f:              denx(1,iatm) = denx(1,iatm) - daij*valx
cwts.f:              denx(2,iatm) = denx(2,iatm) - daij*valy
cwts.f:              denx(3,iatm) = denx(3,iatm) - daij*valz
cwts.f:          if(doxx.and.abdaijm.gt.thrxx)then
cwts.f:              denxx(1,iatm,1,iatm)=denxx(1,iatm,1,iatm)+daij*vaoxx(1,i)
cwts.f:              xyc=daij*vaoxx(2,i)
cwts.f:              denxx(2,iatm,2,iatm)=denxx(2,iatm,2,iatm)+daij*vaoxx(3,i)
cwts.f:              xzc=daij*vaoxx(4,i)
cwts.f:              yzc=daij*vaoxx(5,i)
cwts.f:              denxx(3,iatm,3,iatm)=denxx(3,iatm,3,iatm)+daij*vaoxx(6,i)
cwts.f:          abdaijm=abs(da(ij))*valm*vmx
cwts.f:          if(doxx.and.abdaijm.gt.thrxx)then
cwts.f:              daij = da(ij)*vaox(1,j)
cwts.f:              denxx(1,iatm,1,jatm)=denxx(1,iatm,1,jatm)+daij*valx
cwts.f:              denxx(2,iatm,1,jatm)=denxx(2,iatm,1,jatm)+daij*valy
cwts.f:              denxx(3,iatm,1,jatm)=denxx(3,iatm,1,jatm)+daij*valz
cwts.f:              daij = da(ij)*vaox(2,j)
cwts.f:              denxx(1,iatm,2,jatm)=denxx(1,iatm,2,jatm)+daij*valx
cwts.f:              denxx(2,iatm,2,jatm)=denxx(2,iatm,2,jatm)+daij*valy
cwts.f:              denxx(3,iatm,2,jatm)=denxx(3,iatm,2,jatm)+daij*valz
cwts.f:              daij = da(ij)*vaox(3,j)
cwts.f:              denxx(1,iatm,3,jatm)=denxx(1,iatm,3,jatm)+daij*valx
cwts.f:              denxx(2,iatm,3,jatm)=denxx(2,iatm,3,jatm)+daij*valy
cwts.f:              denxx(3,iatm,3,jatm)=denxx(3,iatm,3,jatm)+daij*valz
cwts.f:            ij = it + jj
cwts.f:                fda(1,ia,ij)=fda(1,ia,ij)+trp(1,ia)
cwts.f:                fda(2,ia,ij)=fda(2,ia,ij)+trp(2,ia)
cwts.f:                fda(3,ia,ij)=fda(3,ia,ij)+trp(3,ia)
cwts.f:            ij = it + jj
cwts.f:            daijt=da(ij)
cwts.f:            abijt=abs(daijt)
cwts.f:            daij = daijt*valj
cwts.f:            abij=abs(daij)
cwts.f:              if(abij*valm.gt.thrsh)then
cwts.f:                denx(1,iatm) = denx(1,iatm) - daij*valx
cwts.f:                denx(2,iatm) = denx(2,iatm) - daij*valy
cwts.f:                denx(3,iatm) = denx(3,iatm) - daij*valz
cwts.f:             if(abijt*(abvj*valmm+abvvj*valm).gt.thrsh)then
cwts.f:              gdx(1,1,iatm)=gdx(1,1,iatm)-daijt*(valj*valxx+valx*valjx)
cwts.f:              gdx(1,2,iatm)=gdx(1,2,iatm)-daijt*(valj*valxy+valy*valjx)
cwts.f:              gdx(1,3,iatm)=gdx(1,3,iatm)-daijt*(valj*valxz+valz*valjx)
cwts.f:              gdx(2,1,iatm)=gdx(2,1,iatm)-daijt*(valj*valxy+valx*valjy)
cwts.f:              gdx(2,2,iatm)=gdx(2,2,iatm)-daijt*(valj*valyy+valy*valjy)
cwts.f:              gdx(2,3,iatm)=gdx(2,3,iatm)-daijt*(valj*valyz+valz*valjy)
cwts.f:              gdx(3,1,iatm)=gdx(3,1,iatm)-daijt*(valj*valxz+valx*valjz)
cwts.f:              gdx(3,2,iatm)=gdx(3,2,iatm)-daijt*(valj*valyz+valy*valjz)
cwts.f:              gdx(3,3,iatm)=gdx(3,3,iatm)-daijt*(valj*valzz+valz*valjz)
cwts.f:              if(dodenxx.and.abij*valmm.gt.thrsh)then
cwts.f:                denxx(1,iatm,1,iatm)=denxx(1,iatm,1,iatm)+daij*valxx
cwts.f:                xyc=daij*valxy
cwts.f:                denxx(2,iatm,2,iatm)=denxx(2,iatm,2,iatm)+daij*valyy
cwts.f:                xzc=daij*valxz
cwts.f:                yzc=daij*valyz
cwts.f:                denxx(3,iatm,3,iatm)=denxx(3,iatm,3,iatm)+daij*valzz
cwts.f:              if(abijt*(abvj*vmx+abvvj*valmm).gt.thrsh)then
cwts.f:     $                   daijt * (vaoxxx(1,i)*valj+valxx*valjx)
cwts.f:     $                   daijt * (vaoxxx(2,i)*valj+valxy*valjx)
cwts.f:     $                   daijt * (vaoxxx(2,i)*valj+valxy*valjx)
cwts.f:     $                   daijt * (vaoxxx(3,i)*valj+valyy*valjx)
cwts.f:     $                   daijt * (vaoxxx(5,i)*valj+valxz*valjx)
cwts.f:     $                   daijt * (vaoxxx(5,i)*valj+valxz*valjx)
cwts.f:     $                   daijt * (vaoxxx(6,i)*valj+valyz*valjx)
cwts.f:     $                   daijt * (vaoxxx(6,i)*valj+valyz*valjx)
cwts.f:     $                   daijt * (vaoxxx(8,i)*valj+valzz*valjx)
cwts.f:     $                   daijt * (vaoxxx(2,i)*valj+valxx*valjy)
cwts.f:     $                   daijt * (vaoxxx(3,i)*valj+valxy*valjy)
cwts.f:     $                   daijt * (vaoxxx(3,i)*valj+valxy*valjy)
cwts.f:     $                   daijt * (vaoxxx(4,i)*valj+valyy*valjy)
cwts.f:     $                   daijt * (vaoxxx(6,i)*valj+valxz*valjy)
cwts.f:     $                   daijt * (vaoxxx(6,i)*valj+valxz*valjy)
cwts.f:     $                   daijt * (vaoxxx(7,i)*valj+valyz*valjy)
cwts.f:     $                   daijt * (vaoxxx(7,i)*valj+valyz*valjy)
cwts.f:     $                   daijt * (vaoxxx(9,i)*valj+valzz*valjy)
cwts.f:     $                   daijt * (vaoxxx(5,i)*valj+valxx*valjz)
cwts.f:     $                   daijt * (vaoxxx(6,i)*valj+valxy*valjz)
cwts.f:     $                   daijt * (vaoxxx(6,i)*valj+valxy*valjz)
cwts.f:     $                   daijt * (vaoxxx(7,i)*valj+valyy*valjz)
cwts.f:     $                   daijt * (vaoxxx(8,i)*valj+valxz*valjz)
cwts.f:     $                   daijt * (vaoxxx(8,i)*valj+valxz*valjz)
cwts.f:     $                   daijt * (vaoxxx(9,i)*valj+valyz*valjz)
cwts.f:     $                   daijt * (vaoxxx(9,i)*valj+valyz*valjz)
cwts.f:     $                   daijt * (vaoxxx(10,i)*valj+valzz*valjz)
cwts.f:              if(dodenxx.and.abijt*abvvj*valm.gt.thrsh)then
cwts.f:                daij = daijt*valjx
cwts.f:                denxx(1,iatm,1,jatm)=denxx(1,iatm,1,jatm)+daij*valx
cwts.f:                denxx(2,iatm,1,jatm)=denxx(2,iatm,1,jatm)+daij*valy
cwts.f:                denxx(3,iatm,1,jatm)=denxx(3,iatm,1,jatm)+daij*valz
cwts.f:                daij = daijt*valjy
cwts.f:                denxx(1,iatm,2,jatm)=denxx(1,iatm,2,jatm)+daij*valx
cwts.f:                denxx(2,iatm,2,jatm)=denxx(2,iatm,2,jatm)+daij*valy
cwts.f:                denxx(3,iatm,2,jatm)=denxx(3,iatm,2,jatm)+daij*valz
cwts.f:                daij = daijt*valjz
cwts.f:                denxx(1,iatm,3,jatm)=denxx(1,iatm,3,jatm)+daij*valx
cwts.f:                denxx(2,iatm,3,jatm)=denxx(2,iatm,3,jatm)+daij*valy
cwts.f:                denxx(3,iatm,3,jatm)=denxx(3,iatm,3,jatm)+daij*valz
cwts.f:              if(abijt*(abvvj*valmm+vmx*valm).gt.thrsh)then
cwts.f:     $                      daijt * (valxx*valjx+valx*vaoxx(1,j))
cwts.f:     $                      daijt * (valxx*valjy+valx*vaoxx(2,j))
cwts.f:     $                      daijt * (valxy*valjx+valy*vaoxx(1,j))
cwts.f:     $                      daijt * (valxy*valjy+valy*vaoxx(2,j))
cwts.f:     $                      daijt * (valxx*valjz+valx*vaoxx(4,j))
cwts.f:     $                      daijt * (valxz*valjx+valz*vaoxx(1,j))
cwts.f:     $                      daijt * (valxy*valjz+valy*vaoxx(4,j))
cwts.f:     $                      daijt * (valxz*valjy+valz*vaoxx(2,j))
cwts.f:     $                      daijt * (valxz*valjz+valz*vaoxx(4,j))
cwts.f:     $                      daijt * (valxy*valjx+valx*vaoxx(2,j))
cwts.f:     $                      daijt * (valxy*valjy+valx*vaoxx(3,j))
cwts.f:     $                      daijt * (valyy*valjx+valy*vaoxx(2,j))
cwts.f:     $                      daijt * (valyy*valjy+valy*vaoxx(3,j))
cwts.f:     $                      daijt * (valxy*valjz+valx*vaoxx(5,j))
cwts.f:     $                      daijt * (valyz*valjx+valz*vaoxx(2,j))
cwts.f:     $                      daijt * (valyy*valjz+valy*vaoxx(5,j))
cwts.f:     $                      daijt * (valyz*valjy+valz*vaoxx(3,j))
cwts.f:     $                      daijt * (valyz*valjz+valz*vaoxx(5,j))
cwts.f:     $                      daijt * (valxz*valjx+valx*vaoxx(4,j))
cwts.f:     $                      daijt * (valxz*valjy+valx*vaoxx(5,j))
cwts.f:     $                      daijt * (valyz*valjx+valy*vaoxx(4,j))
cwts.f:     $                      daijt * (valyz*valjy+valy*vaoxx(5,j))
cwts.f:     $                      daijt * (valxz*valjz+valx*vaoxx(6,j))
cwts.f:     $                      daijt * (valzz*valjx+valz*vaoxx(4,j))
cwts.f:     $                      daijt * (valyz*valjz+valy*vaoxx(6,j))
cwts.f:     $                      daijt * (valzz*valjy+valz*vaoxx(5,j))
cwts.f:     $                      daijt * (valzz*valjz+valz*vaoxx(6,j))
cwts.f:            ij = (jj*(jj-1))/2 + ii
cwts.f:            daijt= da(ij)
cwts.f:            abijt=abs(daijt)
cwts.f:            daij = daijt*valj
cwts.f:            abij=abs(daij)
cwts.f:              if(abij*valm.gt.thrsh)then
cwts.f:                denx(1,iatm) = denx(1,iatm) - daij*valx
cwts.f:                denx(2,iatm) = denx(2,iatm) - daij*valy
cwts.f:                denx(3,iatm) = denx(3,iatm) - daij*valz
cwts.f:             if(abijt*(abvj*valmm+abvvj*valm).gt.thrsh)then
cwts.f:              gdx(1,1,iatm)=gdx(1,1,iatm)-daijt*(valj*valxx+valx*valjx)
cwts.f:              gdx(1,2,iatm)=gdx(1,2,iatm)-daijt*(valj*valxy+valy*valjx)
cwts.f:              gdx(1,3,iatm)=gdx(1,3,iatm)-daijt*(valj*valxz+valz*valjx)
cwts.f:              gdx(2,1,iatm)=gdx(2,1,iatm)-daijt*(valj*valxy+valx*valjy)
cwts.f:              gdx(2,2,iatm)=gdx(2,2,iatm)-daijt*(valj*valyy+valy*valjy)
cwts.f:              gdx(2,3,iatm)=gdx(2,3,iatm)-daijt*(valj*valyz+valz*valjy)
cwts.f:              gdx(3,1,iatm)=gdx(3,1,iatm)-daijt*(valj*valxz+valx*valjz)
cwts.f:              gdx(3,2,iatm)=gdx(3,2,iatm)-daijt*(valj*valyz+valy*valjz)
cwts.f:              gdx(3,3,iatm)=gdx(3,3,iatm)-daijt*(valj*valzz+valz*valjz)
cwts.f:            if(dodenxx.and.abij*valmm.gt.thrsh)then
cwts.f:              denxx(1,iatm,1,iatm)=denxx(1,iatm,1,iatm)+daij*valxx
cwts.f:              xyc=daij*valxy
cwts.f:              denxx(2,iatm,2,iatm)=denxx(2,iatm,2,iatm)+daij*valyy
cwts.f:              xzc=daij*valxz
cwts.f:              yzc=daij*valyz
cwts.f:              denxx(3,iatm,3,iatm)=denxx(3,iatm,3,iatm)+daij*valzz
cwts.f:              if(abijt*(abvj*vmx+abvvj*valmm).gt.thrsh)then
cwts.f:     $                   daijt * (vaoxxx(1,i)*valj+valxx*valjx)
cwts.f:     $                   daijt * (vaoxxx(2,i)*valj+valxy*valjx)
cwts.f:     $                   daijt * (vaoxxx(2,i)*valj+valxy*valjx)
cwts.f:     $                   daijt * (vaoxxx(3,i)*valj+valyy*valjx)
cwts.f:     $                   daijt * (vaoxxx(5,i)*valj+valxz*valjx)
cwts.f:     $                   daijt * (vaoxxx(5,i)*valj+valxz*valjx)
cwts.f:     $                   daijt * (vaoxxx(6,i)*valj+valyz*valjx)
cwts.f:     $                   daijt * (vaoxxx(6,i)*valj+valyz*valjx)
cwts.f:     $                   daijt * (vaoxxx(8,i)*valj+valzz*valjx)
cwts.f:     $                   daijt * (vaoxxx(2,i)*valj+valxx*valjy)
cwts.f:     $                   daijt * (vaoxxx(3,i)*valj+valxy*valjy)
cwts.f:     $                   daijt * (vaoxxx(3,i)*valj+valxy*valjy)
cwts.f:     $                   daijt * (vaoxxx(4,i)*valj+valyy*valjy)
cwts.f:     $                   daijt * (vaoxxx(6,i)*valj+valxz*valjy)
cwts.f:     $                 daijt * (vaoxxx(6,i)*valj+valxz*valjy)
cwts.f:     $                   daijt * (vaoxxx(7,i)*valj+valyz*valjy)
cwts.f:     $                   daijt * (vaoxxx(7,i)*valj+valyz*valjy)
cwts.f:     $                   daijt * (vaoxxx(9,i)*valj+valzz*valjy)
cwts.f:     $                   daijt * (vaoxxx(5,i)*valj+valxx*valjz)
cwts.f:     $                   daijt * (vaoxxx(6,i)*valj+valxy*valjz)
cwts.f:     $                   daijt * (vaoxxx(6,i)*valj+valxy*valjz)
cwts.f:     $                   daijt * (vaoxxx(7,i)*valj+valyy*valjz)
cwts.f:     $                   daijt * (vaoxxx(8,i)*valj+valxz*valjz)
cwts.f:     $                   daijt * (vaoxxx(8,i)*valj+valxz*valjz)
cwts.f:     $                   daijt * (vaoxxx(9,i)*valj+valyz*valjz)
cwts.f:     $                   daijt * (vaoxxx(9,i)*valj+valyz*valjz)
cwts.f:     $                   daijt * (vaoxxx(10,i)*valj+valzz*valjz)
cwts.f:              if(dodenxx.and.abijt*abvvj*valm.gt.thrsh)then
cwts.f:                daij = daijt*valjx
cwts.f:                denxx(1,iatm,1,jatm)=denxx(1,iatm,1,jatm)+daij*valx
cwts.f:                denxx(2,iatm,1,jatm)=denxx(2,iatm,1,jatm)+daij*valy
cwts.f:                denxx(3,iatm,1,jatm)=denxx(3,iatm,1,jatm)+daij*valz
cwts.f:                daij = daijt*valjy
cwts.f:                denxx(1,iatm,2,jatm)=denxx(1,iatm,2,jatm)+daij*valx
cwts.f:                denxx(2,iatm,2,jatm)=denxx(2,iatm,2,jatm)+daij*valy
cwts.f:                denxx(3,iatm,2,jatm)=denxx(3,iatm,2,jatm)+daij*valz
cwts.f:                daij = daijt*valjz
cwts.f:                denxx(1,iatm,3,jatm)=denxx(1,iatm,3,jatm)+daij*valx
cwts.f:                denxx(2,iatm,3,jatm)=denxx(2,iatm,3,jatm)+daij*valy
cwts.f:                denxx(3,iatm,3,jatm)=denxx(3,iatm,3,jatm)+daij*valz
cwts.f:              if(abijt*(abvvj*valmm+vmx*valm).gt.thrsh)then
cwts.f:     $                      daijt * (valxx*valjx+valx*vaoxx(1,j))
cwts.f:     $                      daijt * (valxx*valjy+valx*vaoxx(2,j))
cwts.f:     $                      daijt * (valxy*valjx+valy*vaoxx(1,j))
cwts.f:     $                      daijt * (valxy*valjy+valy*vaoxx(2,j))
cwts.f:     $                      daijt * (valxx*valjz+valx*vaoxx(4,j))
cwts.f:     $                      daijt * (valxz*valjx+valz*vaoxx(1,j))
cwts.f:     $                      daijt * (valxy*valjz+valy*vaoxx(4,j))
cwts.f:     $                      daijt * (valxz*valjy+valz*vaoxx(2,j))
cwts.f:     $                      daijt * (valxz*valjz+valz*vaoxx(4,j))
cwts.f:     $                      daijt * (valxy*valjx+valx*vaoxx(2,j))
cwts.f:     $                      daijt * (valxy*valjy+valx*vaoxx(3,j))
cwts.f:     $                      daijt * (valyy*valjx+valy*vaoxx(2,j))
cwts.f:     $                      daijt * (valyy*valjy+valy*vaoxx(3,j))
cwts.f:     $                      daijt * (valxy*valjz+valx*vaoxx(5,j))
cwts.f:     $                      daijt * (valyz*valjx+valz*vaoxx(2,j))
cwts.f:     $                      daijt * (valyy*valjz+valy*vaoxx(5,j))
cwts.f:     $                      daijt * (valyz*valjy+valz*vaoxx(3,j))
cwts.f:     $                      daijt * (valyz*valjz+valz*vaoxx(5,j))
cwts.f:     $                      daijt * (valxz*valjx+valx*vaoxx(4,j))
cwts.f:     $                      daijt * (valxz*valjy+valx*vaoxx(5,j))
cwts.f:     $                      daijt * (valyz*valjx+valy*vaoxx(4,j))
cwts.f:     $                      daijt * (valyz*valjy+valy*vaoxx(5,j))
cwts.f:     $                      daijt * (valxz*valjz+valx*vaoxx(6,j))
cwts.f:     $                      daijt * (valzz*valjx+valz*vaoxx(4,j))
cwts.f:     $                      daijt * (valyz*valjz+valy*vaoxx(6,j))
cwts.f:     $                      daijt * (valzz*valjy+valz*vaoxx(5,j))
cwts.f:     $                      daijt * (valzz*valjz+valz*vaoxx(6,j))
cwts.f:              ij = it + jj
cwts.f:              vij=vali*valj
cwts.f:              vijx=valix*valj+valjx*vali
cwts.f:              vijy=valiy*valj+valjy*vali
cwts.f:              vijz=valiz*valj+valjz*vali
cwts.f:              if(svmax*abs(vij)+swmax*abs(vijx+vijy+vijz).gt.thrsh)then
cwts.f:                  trp(1,katm) = trp(1,katm) + (sv(1,katm)*vij+
cwts.f:     $            sw(1,1,katm)*vijx+sw(2,1,katm)*vijy+sw(3,1,katm)*vijz)
cwts.f:                  trp(2,katm) = trp(2,katm) + (sv(2,katm)*vij+
cwts.f:     $            sw(1,2,katm)*vijx+sw(2,2,katm)*vijy+sw(3,2,katm)*vijz)
cwts.f:                  trp(3,katm) = trp(3,katm) + (sv(3,katm)*vij+
cwts.f:     $            sw(1,3,katm)*vijx+sw(2,3,katm)*vijy+sw(3,3,katm)*vijz)
cwts.f:              gij=potp*vij+potxp2*(dx*vijx+dy*vijy+dz*vijz)
cwts.f:              if(gwtmax*abs(gij).gt.thrsh)then
cwts.f:                    trp(1,ia)=trp(1,ia)+gwt(1,ia,ipp)*gij
cwts.f:                    trp(2,ia)=trp(2,ia)+gwt(2,ia,ipp)*gij
cwts.f:                    trp(3,ia)=trp(3,ia)+gwt(3,ia,ipp)*gij
cwts.f:                fda(1,ia,ij)=fda(1,ia,ij)+trp(1,ia)
cwts.f:                fda(2,ia,ij)=fda(2,ia,ij)+trp(2,ia)
cwts.f:                fda(3,ia,ij)=fda(3,ia,ij)+trp(3,ia)
cwts.f:      integer nat3,ip,ipp,i,j,ii,jj,ij,it
cwts.f:      real*8 dmx2,daij,dbij,daij2,dbij2,abdij,abdijm
cwts.f:      real*8 valij,valija,valijb
cwts.f:      real*8 valjx,valjy,valjz,abvj,abvvj,abijt,abij
cwts.f:      real*8 vij,vijx,vijy,vijz
cwts.f:      real*8 dxija,dxijb,gija,gijb
cwts.f:          ij = it + jj
cwts.f:          daij2=two*da(ij)
cwts.f:          dbij2=two*db(ij)
cwts.f:          daij = daij2*vao(j)
cwts.f:          dbij = dbij2*vao(j)
cwts.f:          abdij=max(abs(daij),abs(dbij))
cwts.f:          abdijm=abdij*vmx
cwts.f:              denxa(1,iatm) = denxa(1,iatm) - daij*valx
cwts.f:              denxa(2,iatm) = denxa(2,iatm) - daij*valy
cwts.f:              denxa(3,iatm) = denxa(3,iatm) - daij*valz
cwts.f:              denxb(1,iatm) = denxb(1,iatm) - dbij*valx
cwts.f:              denxb(2,iatm) = denxb(2,iatm) - dbij*valy
cwts.f:              denxb(3,iatm) = denxb(3,iatm) - dbij*valz
cwts.f:          if(doxx.and.abdijm.gt.thrxx)then
cwts.f:             denxxa(1,iatm,1,iatm)=denxxa(1,iatm,1,iatm)+daij*vaoxx(1,i)
cwts.f:             xyc=daij*vaoxx(2,i)
cwts.f:             denxxa(2,iatm,2,iatm)=denxxa(2,iatm,2,iatm)+daij*vaoxx(3,i)
cwts.f:             xzc=daij*vaoxx(4,i)
cwts.f:             yzc=daij*vaoxx(5,i)
cwts.f:             denxxa(3,iatm,3,iatm)=denxxa(3,iatm,3,iatm)+daij*vaoxx(6,i)
cwts.f:             denxxb(1,iatm,1,iatm)=denxxb(1,iatm,1,iatm)+dbij*vaoxx(1,i)
cwts.f:             xyc=dbij*vaoxx(2,i)
cwts.f:             denxxb(2,iatm,2,iatm)=denxxb(2,iatm,2,iatm)+dbij*vaoxx(3,i)
cwts.f:             xzc=dbij*vaoxx(4,i)
cwts.f:             yzc=dbij*vaoxx(5,i)
cwts.f:             denxxb(3,iatm,3,iatm)=denxxb(3,iatm,3,iatm)+dbij*vaoxx(6,i)
cwts.f:          abdijm=max(abs(da(ij)),abs(db(ij)))*valm*vmx
cwts.f:          if(doxx.and.abdijm.gt.thrxx)then
cwts.f:              daij = daij2*vaox(1,j)
cwts.f:              denxxa(1,iatm,1,jatm)=denxxa(1,iatm,1,jatm)+daij*valx
cwts.f:              denxxa(2,iatm,1,jatm)=denxxa(2,iatm,1,jatm)+daij*valy
cwts.f:              denxxa(3,iatm,1,jatm)=denxxa(3,iatm,1,jatm)+daij*valz
cwts.f:              daij = daij2*vaox(2,j)
cwts.f:              denxxa(1,iatm,2,jatm)=denxxa(1,iatm,2,jatm)+daij*valx
cwts.f:              denxxa(2,iatm,2,jatm)=denxxa(2,iatm,2,jatm)+daij*valy
cwts.f:              denxxa(3,iatm,2,jatm)=denxxa(3,iatm,2,jatm)+daij*valz
cwts.f:              daij = daij2*vaox(3,j)
cwts.f:              denxxa(1,iatm,3,jatm)=denxxa(1,iatm,3,jatm)+daij*valx
cwts.f:              denxxa(2,iatm,3,jatm)=denxxa(2,iatm,3,jatm)+daij*valy
cwts.f:              denxxa(3,iatm,3,jatm)=denxxa(3,iatm,3,jatm)+daij*valz
cwts.f:              dbij = dbij2*vaox(1,j)
cwts.f:              denxxb(1,iatm,1,jatm)=denxxb(1,iatm,1,jatm)+dbij*valx
cwts.f:              denxxb(2,iatm,1,jatm)=denxxb(2,iatm,1,jatm)+dbij*valy
cwts.f:              denxxb(3,iatm,1,jatm)=denxxb(3,iatm,1,jatm)+dbij*valz
cwts.f:              dbij = dbij2*vaox(2,j)
cwts.f:              denxxb(1,iatm,2,jatm)=denxxb(1,iatm,2,jatm)+dbij*valx
cwts.f:              denxxb(2,iatm,2,jatm)=denxxb(2,iatm,2,jatm)+dbij*valy
cwts.f:              denxxb(3,iatm,2,jatm)=denxxb(3,iatm,2,jatm)+dbij*valz
cwts.f:              dbij = dbij2*vaox(3,j)
cwts.f:              denxxb(1,iatm,3,jatm)=denxxb(1,iatm,3,jatm)+dbij*valx
cwts.f:              denxxb(2,iatm,3,jatm)=denxxb(2,iatm,3,jatm)+dbij*valy
cwts.f:              denxxb(3,iatm,3,jatm)=denxxb(3,iatm,3,jatm)+dbij*valz
cwts.f:          ij = (jj*(jj-1))/2 + ii
cwts.f:          daij2 = two*da(ij)
cwts.f:          dbij2 = two*db(ij)
cwts.f:          daij = daij2*vao(j)
cwts.f:          dbij = dbij2*vao(j)
cwts.f:          abdij=max(abs(daij),abs(dbij))
cwts.f:          abdijm=abdij*vmx
cwts.f:              denxa(1,iatm) = denxa(1,iatm) - daij*valx
cwts.f:              denxa(2,iatm) = denxa(2,iatm) - daij*valy
cwts.f:              denxa(3,iatm) = denxa(3,iatm) - daij*valz
cwts.f:              denxb(1,iatm) = denxb(1,iatm) - dbij*valx
cwts.f:              denxb(2,iatm) = denxb(2,iatm) - dbij*valy
cwts.f:              denxb(3,iatm) = denxb(3,iatm) - dbij*valz
cwts.f:          if(doxx.and.abdijm.gt.thrxx)then
cwts.f:             denxxa(1,iatm,1,iatm)=denxxa(1,iatm,1,iatm)+daij*vaoxx(1,i)
cwts.f:             xyc=daij*vaoxx(2,i)
cwts.f:             denxxa(2,iatm,2,iatm)=denxxa(2,iatm,2,iatm)+daij*vaoxx(3,i)
cwts.f:             xzc=daij*vaoxx(4,i)
cwts.f:             yzc=daij*vaoxx(5,i)
cwts.f:             denxxa(3,iatm,3,iatm)=denxxa(3,iatm,3,iatm)+daij*vaoxx(6,i)
cwts.f:             denxxb(1,iatm,1,iatm)=denxxb(1,iatm,1,iatm)+dbij*vaoxx(1,i)
cwts.f:             xyc=dbij*vaoxx(2,i)
cwts.f:             denxxb(2,iatm,2,iatm)=denxxb(2,iatm,2,iatm)+dbij*vaoxx(3,i)
cwts.f:             xzc=dbij*vaoxx(4,i)
cwts.f:             yzc=dbij*vaoxx(5,i)
cwts.f:             denxxb(3,iatm,3,iatm)=denxxb(3,iatm,3,iatm)+dbij*vaoxx(6,i)
cwts.f:          abdijm=max(abs(da(ij)),abs(db(ij)))*valm*vmx
cwts.f:          if(doxx.and.abdijm.gt.thrxx)then
cwts.f:              daij = daij2*vaox(1,j)
cwts.f:              denxxa(1,iatm,1,jatm)=denxxa(1,iatm,1,jatm)+daij*valx
cwts.f:              denxxa(2,iatm,1,jatm)=denxxa(2,iatm,1,jatm)+daij*valy
cwts.f:              denxxa(3,iatm,1,jatm)=denxxa(3,iatm,1,jatm)+daij*valz
cwts.f:              daij = daij2*vaox(2,j)
cwts.f:              denxxa(1,iatm,2,jatm)=denxxa(1,iatm,2,jatm)+daij*valx
cwts.f:              denxxa(2,iatm,2,jatm)=denxxa(2,iatm,2,jatm)+daij*valy
cwts.f:              denxxa(3,iatm,2,jatm)=denxxa(3,iatm,2,jatm)+daij*valz
cwts.f:              daij = daij2*vaox(3,j)
cwts.f:              denxxa(1,iatm,3,jatm)=denxxa(1,iatm,3,jatm)+daij*valx
cwts.f:              denxxa(2,iatm,3,jatm)=denxxa(2,iatm,3,jatm)+daij*valy
cwts.f:              denxxa(3,iatm,3,jatm)=denxxa(3,iatm,3,jatm)+daij*valz
cwts.f:              dbij = dbij2*vaox(1,j)
cwts.f:              denxxb(1,iatm,1,jatm)=denxxb(1,iatm,1,jatm)+dbij*valx
cwts.f:              denxxb(2,iatm,1,jatm)=denxxb(2,iatm,1,jatm)+dbij*valy
cwts.f:              denxxb(3,iatm,1,jatm)=denxxb(3,iatm,1,jatm)+dbij*valz
cwts.f:              dbij = dbij2*vaox(2,j)
cwts.f:              denxxb(1,iatm,2,jatm)=denxxb(1,iatm,2,jatm)+dbij*valx
cwts.f:              denxxb(2,iatm,2,jatm)=denxxb(2,iatm,2,jatm)+dbij*valy
cwts.f:              denxxb(3,iatm,2,jatm)=denxxb(3,iatm,2,jatm)+dbij*valz
cwts.f:              dbij = dbij2*vaox(3,j)
cwts.f:              denxxb(1,iatm,3,jatm)=denxxb(1,iatm,3,jatm)+dbij*valx
cwts.f:              denxxb(2,iatm,3,jatm)=denxxb(2,iatm,3,jatm)+dbij*valy
cwts.f:              denxxb(3,iatm,3,jatm)=denxxb(3,iatm,3,jatm)+dbij*valz
cwts.f:            ij = it + jj
cwts.f:            valij = vali*valj
cwts.f:            if(abs(valij)*svmax.gt.thrsh) then
cwts.f:                trpa(1,katm)=trpa(1,katm) + valij*sva(1,katm)
cwts.f:                trpa(2,katm)=trpa(2,katm) + valij*sva(2,katm)
cwts.f:                trpa(3,katm)=trpa(3,katm) + valij*sva(3,katm)
cwts.f:                trpb(1,katm)=trpb(1,katm) + valij*svb(1,katm)
cwts.f:                trpb(2,katm)=trpb(2,katm) + valij*svb(2,katm)
cwts.f:                trpb(3,katm)=trpb(3,katm) + valij*svb(3,katm)
cwts.f:            valija=valij*prap
cwts.f:            valijb=valij*prbp
cwts.f:                trpa(1,ia)=trpa(1,ia)+valija*gwt(1,ia,ipp)
cwts.f:                trpa(2,ia)=trpa(2,ia)+valija*gwt(2,ia,ipp)
cwts.f:                trpa(3,ia)=trpa(3,ia)+valija*gwt(3,ia,ipp)
cwts.f:                trpb(1,ia)=trpb(1,ia)+valijb*gwt(1,ia,ipp)
cwts.f:                trpb(2,ia)=trpb(2,ia)+valijb*gwt(2,ia,ipp)
cwts.f:                trpb(3,ia)=trpb(3,ia)+valijb*gwt(3,ia,ipp)
cwts.f:              fda(1,ia,ij)=fda(1,ia,ij)+trpa(1,ia)
cwts.f:              fda(2,ia,ij)=fda(2,ia,ij)+trpa(2,ia)
cwts.f:              fda(3,ia,ij)=fda(3,ia,ij)+trpa(3,ia)
cwts.f:              fdb(1,ia,ij)=fdb(1,ia,ij)+trpb(1,ia)
cwts.f:              fdb(2,ia,ij)=fdb(2,ia,ij)+trpb(2,ia)
cwts.f:              fdb(3,ia,ij)=fdb(3,ia,ij)+trpb(3,ia)
cwts.f:            abijt=max(abs(daij2),abs(dbij2))
cwts.f:            abij=max(abs(daij),abs(dbij))
cwts.f:            if(abij*valm.gt.thrsh)then
cwts.f:            if(abijt*(abvj*valmm+abvvj*valm).gt.thrsh)then
cwts.f:            if(abij*valmm.gt.thrsh)then
cwts.f:            if(dogradxx.and.abijt*(abvj*vmx+abvvj*valmm).gt.thrsh)then
cwts.f:            if(abijt*abvvj*valm.gt.thrsh)then
cwts.f:            if(dogradxx.and.abijt*(abvvj*valmm+vmx*valm).gt.thrsh)then
cwts.f:            abijt=max(abs(daij2),abs(dbij2))
cwts.f:            abij=max(abs(daij),abs(dbij))
cwts.f:            if(abij*valm.gt.thrsh)then
cwts.f:            if(abijt*(abvj*valmm+abvvj*valm).gt.thrsh)then
cwts.f:            if(abij*valmm.gt.thrsh)then
cwts.f:            if(dogradxx.and.abijt*(abvj*vmx+abvvj*valmm).gt.thrsh)then
cwts.f:            if(abijt*abvvj*valm.gt.thrsh)then
cwts.f:            if(dogradxx.and.abijt*(abvvj*valmm+vmx*valm).gt.thrsh)then
cwts.f:              vij=vali*valj
cwts.f:              vijx=valix*valj+valjx*vali
cwts.f:              vijy=valiy*valj+valjy*vali
cwts.f:              vijz=valiz*valj+valjz*vali
cwts.f:              if(svmax*abs(vij)+swmax*abs(vijx+vijy+vijz).GT.thrsh)then
cwts.f:                  trpa(1,katm) = trpa(1,katm) + (sva(1,katm)*vij+
cwts.f:     $                           swa(1,1,katm)*vijx+swa(2,1,katm)*vijy+
cwts.f:     $                           swa(3,1,katm)*vijz)
cwts.f:                  trpa(2,katm) = trpa(2,katm) + (sva(2,katm)*vij+
cwts.f:     $                           swa(1,2,katm)*vijx+swa(2,2,katm)*vijy+
cwts.f:     $                           swa(3,2,katm)*vijz)
cwts.f:                  trpa(3,katm) = trpa(3,katm) + (sva(3,katm)*vij+
cwts.f:     $                           swa(1,3,katm)*vijx+swa(2,3,katm)*vijy+
cwts.f:     $                           swa(3,3,katm)*vijz)
cwts.f:                  trpb(1,katm) = trpb(1,katm) + (svb(1,katm)*vij+
cwts.f:     $                           swb(1,1,katm)*vijx+swb(2,1,katm)*vijy+
cwts.f:     $                           swb(3,1,katm)*vijz)
cwts.f:                  trpb(2,katm) = trpb(2,katm) + (svb(2,katm)*vij+
cwts.f:     $                           swb(1,2,katm)*vijx+swb(2,2,katm)*vijy+
cwts.f:     $                           swb(3,2,katm)*vijz)
cwts.f:                  trpb(3,katm) = trpb(3,katm) + (svb(3,katm)*vij+
cwts.f:     $                           swb(1,3,katm)*vijx+swb(2,3,katm)*vijy+
cwts.f:     $                           swb(3,3,katm)*vijz)
cwts.f:              dxija=dax*vijx+day*vijy+daz*vijz
cwts.f:              dxijb=dbx*vijx+dby*vijy+dbz*vijz
cwts.f:              gija=prap*vij+pgap2*dxija+pgcp*dxijb
cwts.f:              gijb=prbp*vij+pgbp2*dxijb+pgcp*dxija
cwts.f:              if(gwtmax*max(abs(gija),abs(gijb)).gt.thrsh)then
cwts.f:                    trpa(1,ia)=trpa(1,ia)+gwt(1,ia,ipp)*gija
cwts.f:                    trpa(2,ia)=trpa(2,ia)+gwt(2,ia,ipp)*gija
cwts.f:                    trpa(3,ia)=trpa(3,ia)+gwt(3,ia,ipp)*gija
cwts.f:                    trpb(1,ia)=trpb(1,ia)+gwt(1,ia,ipp)*gijb
cwts.f:                    trpb(2,ia)=trpb(2,ia)+gwt(2,ia,ipp)*gijb
cwts.f:                    trpb(3,ia)=trpb(3,ia)+gwt(3,ia,ipp)*gijb
cwts.f:                fda(1,ia,ij)=fda(1,ia,ij)+trpa(1,ia)
cwts.f:                fda(2,ia,ij)=fda(2,ia,ij)+trpa(2,ia)
cwts.f:                fda(3,ia,ij)=fda(3,ia,ij)+trpa(3,ia)
cwts.f:                fdb(1,ia,ij)=fdb(1,ia,ij)+trpb(1,ia)
cwts.f:                fdb(2,ia,ij)=fdb(2,ia,ij)+trpb(2,ia)
cwts.f:                fdb(3,ia,ij)=fdb(3,ia,ij)+trpb(3,ia)
cwts.f:      integer nat3,ip,ipp,i,j,ii,jj,ij,it
cwts.f:      real*8 abra,abrara,thrx,thrx1,thrxx,valt,abdaij,abdaijm,abval
cwts.f:      real*8 abvj,abvvj,valj,valjx,valjy,valjz,abijt,abij
cwts.f:      real*8 gwtmax,dmx,valx,valy,valz,daij,xyc,xzc,yzc
cwts.f:      real*8 vij,vijx,vijy,vijz,gij,hdx,hdy,hdz,hgx,hgy,hgz
cwts.f:      real*8 daijt,smax,dmax,potp,potxp,potp2,potxp2
cwts.f:          ij = it + jj
cwts.f:          daij = da(ij)*vao(j)
cwts.f:          abdaij=abs(daij)
cwts.f:          abdaijm=abdaij*vmx
cwts.f:          denx(1,iatm) = denx(1,iatm) - daij*valx
cwts.f:          denx(2,iatm) = denx(2,iatm) - daij*valy
cwts.f:          denx(3,iatm) = denx(3,iatm) - daij*valz
cwts.f:          ij = (jj*(jj-1))/2 + ii
cwts.f:          daij = da(ij)*vao(j)
cwts.f:          abdaij=abs(daij)
cwts.f:          abdaijm=abdaij*vmx
cwts.f:          denx(1,iatm) = denx(1,iatm) - daij*valx
cwts.f:          denx(2,iatm) = denx(2,iatm) - daij*valy
cwts.f:          denx(3,iatm) = denx(3,iatm) - daij*valz
cwts.f:            ij = it + jj
cwts.f:                fda(1,iatm,ij) = fda(1,iatm,ij) - valx*valj
cwts.f:                fda(2,iatm,ij) = fda(2,iatm,ij) - valy*valj
cwts.f:                fda(3,iatm,ij) = fda(3,iatm,ij) - valz*valj
cwts.f:                fda(1,jatm,ij) = fda(1,jatm,ij) - val*vaox(1,j)
cwts.f:                fda(2,jatm,ij) = fda(2,jatm,ij) - val*vaox(2,j)
cwts.f:                fda(3,jatm,ij) = fda(3,jatm,ij) - val*vaox(3,j)
cwts.f:                fda(1,katm,ij)=fda(1,katm,ij) + vdjx*denx(1,katm)
cwts.f:                fda(2,katm,ij)=fda(2,katm,ij) + vdjx*denx(2,katm)
cwts.f:                fda(3,katm,ij)=fda(3,katm,ij) + vdjx*denx(3,katm)
cwts.f:              fda(1,ia,ij)=fda(1,ia,ij)+xc*gwt(1,ia,ipp)
cwts.f:              fda(2,ia,ij)=fda(2,ia,ij)+xc*gwt(2,ia,ipp)
cwts.f:              fda(3,ia,ij)=fda(3,ia,ij)+xc*gwt(3,ia,ipp)
cwts.f:            ij = it + jj
cwts.f:            daijt=da(ij)
cwts.f:            abijt=abs(daijt)
cwts.f:            daij = daijt*valj
cwts.f:            abij=abs(daij)
cwts.f:            if(abij*valm.gt.thrsh)then
cwts.f:              denx(1,iatm) = denx(1,iatm) - daij*valx
cwts.f:              denx(2,iatm) = denx(2,iatm) - daij*valy
cwts.f:              denx(3,iatm) = denx(3,iatm) - daij*valz
cwts.f:            if(abijt*(abvj*valmm+abvvj*valm).gt.thrsh)then
cwts.f:              gdx(1,1,iatm)=gdx(1,1,iatm)-daijt*(valj*valxx+valx*valjx)
cwts.f:              gdx(1,2,iatm)=gdx(1,2,iatm)-daijt*(valj*valxy+valy*valjx)
cwts.f:              gdx(1,3,iatm)=gdx(1,3,iatm)-daijt*(valj*valxz+valz*valjx)
cwts.f:              gdx(2,1,iatm)=gdx(2,1,iatm)-daijt*(valj*valxy+valx*valjy)
cwts.f:              gdx(2,2,iatm)=gdx(2,2,iatm)-daijt*(valj*valyy+valy*valjy)
cwts.f:              gdx(2,3,iatm)=gdx(2,3,iatm)-daijt*(valj*valyz+valz*valjy)
cwts.f:              gdx(3,1,iatm)=gdx(3,1,iatm)-daijt*(valj*valxz+valx*valjz)
cwts.f:              gdx(3,2,iatm)=gdx(3,2,iatm)-daijt*(valj*valyz+valy*valjz)
cwts.f:              gdx(3,3,iatm)=gdx(3,3,iatm)-daijt*(valj*valzz+valz*valjz)
cwts.f:            ij = (jj*(jj-1))/2 + ii
cwts.f:            daijt= da(ij)
cwts.f:            abijt=abs(daijt)
cwts.f:            daij = daijt*valj
cwts.f:            abij=abs(daij)
cwts.f:              if(abij*valm.gt.thrsh)then
cwts.f:                denx(1,iatm) = denx(1,iatm) - daij*valx
cwts.f:                denx(2,iatm) = denx(2,iatm) - daij*valy
cwts.f:                denx(3,iatm) = denx(3,iatm) - daij*valz
cwts.f:             if(abijt*(abvj*valmm+abvvj*valm).gt.thrsh)then
cwts.f:              gdx(1,1,iatm)=gdx(1,1,iatm)-daijt*(valj*valxx+valx*valjx)
cwts.f:              gdx(1,2,iatm)=gdx(1,2,iatm)-daijt*(valj*valxy+valy*valjx)
cwts.f:              gdx(1,3,iatm)=gdx(1,3,iatm)-daijt*(valj*valxz+valz*valjx)
cwts.f:              gdx(2,1,iatm)=gdx(2,1,iatm)-daijt*(valj*valxy+valx*valjy)
cwts.f:              gdx(2,2,iatm)=gdx(2,2,iatm)-daijt*(valj*valyy+valy*valjy)
cwts.f:              gdx(2,3,iatm)=gdx(2,3,iatm)-daijt*(valj*valyz+valz*valjy)
cwts.f:              gdx(3,1,iatm)=gdx(3,1,iatm)-daijt*(valj*valxz+valx*valjz)
cwts.f:              gdx(3,2,iatm)=gdx(3,2,iatm)-daijt*(valj*valyz+valy*valjz)
cwts.f:              gdx(3,3,iatm)=gdx(3,3,iatm)-daijt*(valj*valzz+valz*valjz)
cwts.f:              ij = it + jj
cwts.f:                fda(1,iatm,ij) = fda(1,iatm,ij) - xxvx*valj - valix*xvj
cwts.f:                fda(2,iatm,ij) = fda(2,iatm,ij) - xxvy*valj - valiy*xvj
cwts.f:                fda(3,iatm,ij) = fda(3,iatm,ij) - xxvz*valj - valiz*xvj
cwts.f:                fda(1,jatm,ij) = fda(1,jatm,ij) - xvi*valjx -
cwts.f:                fda(2,jatm,ij) = fda(2,jatm,ij) - xvi*valjy -
cwts.f:                fda(3,jatm,ij) = fda(3,jatm,ij) - xvi*valjz -
cwts.f:              vij=vali*valj
cwts.f:              vijx=valix*valj+valjx*vali
cwts.f:              vijy=valiy*valj+valjy*vali
cwts.f:              vijz=valiz*valj+valjz*vali
cwts.f:              if(svmax*abs(vij)+swmax*abs(vijx+vijy+vijz).gt.thrsh)then
cwts.f:                  fda(1,katm,ij) = fda(1,katm,ij) + (sv(1,katm)*vij+
cwts.f:     $            sw(1,1,katm)*vijx+sw(2,1,katm)*vijy+sw(3,1,katm)*vijz)
cwts.f:                  fda(2,katm,ij) = fda(2,katm,ij) + (sv(2,katm)*vij+
cwts.f:     $            sw(1,2,katm)*vijx+sw(2,2,katm)*vijy+sw(3,2,katm)*vijz)
cwts.f:                  fda(3,katm,ij) = fda(3,katm,ij) + (sv(3,katm)*vij+
cwts.f:     $            sw(1,3,katm)*vijx+sw(2,3,katm)*vijy+sw(3,3,katm)*vijz)
cwts.f:              gij=potp*vij+potxp2*(dx*vijx+dy*vijy+dz*vijz)
cwts.f:              if(gwtmax*abs(gij).gt.thrsh)then
cwts.f:                  fda(1,ia,ij)=fda(1,ia,ij)+gwt(1,ia,ipp)*gij
cwts.f:                  fda(2,ia,ij)=fda(2,ia,ij)+gwt(2,ia,ipp)*gij
cwts.f:                  fda(3,ia,ij)=fda(3,ia,ij)+gwt(3,ia,ipp)*gij
cwts.f:      integer nat3,ip,ipp,i,j,ii,jj,ij,it
cwts.f:      real*8 dmx2,daij,dbij,daij2,dbij2,abdij,abdijm
cwts.f:      real*8 valij,valija,valijb
cwts.f:      real*8 valjx,valjy,valjz,abvj,abvvj,abijt,abij
cwts.f:      real*8 vij,vijx,vijy,vijz
cwts.f:      real*8 dxija,dxijb,gija,gijb
cwts.f:          ij = it + jj
cwts.f:          daij2=two*da(ij)
cwts.f:          dbij2=two*db(ij)
cwts.f:          daij = daij2*vao(j)
cwts.f:          dbij = dbij2*vao(j)
cwts.f:          abdij=max(abs(daij),abs(dbij))
cwts.f:          abdijm=abdij*vmx
cwts.f:          denxa(1,iatm) = denxa(1,iatm) - daij*valx
cwts.f:          denxa(2,iatm) = denxa(2,iatm) - daij*valy
cwts.f:          denxa(3,iatm) = denxa(3,iatm) - daij*valz
cwts.f:          denxb(1,iatm) = denxb(1,iatm) - dbij*valx
cwts.f:          denxb(2,iatm) = denxb(2,iatm) - dbij*valy
cwts.f:          denxb(3,iatm) = denxb(3,iatm) - dbij*valz
cwts.f:          ij = (jj*(jj-1))/2 + ii
cwts.f:          daij2 = two*da(ij)
cwts.f:          dbij2 = two*db(ij)
cwts.f:          daij = daij2*vao(j)
cwts.f:          dbij = dbij2*vao(j)
cwts.f:          abdij=max(abs(daij),abs(dbij))
cwts.f:          abdijm=abdij*vmx
cwts.f:          denxa(1,iatm) = denxa(1,iatm) - daij*valx
cwts.f:          denxa(2,iatm) = denxa(2,iatm) - daij*valy
cwts.f:          denxa(3,iatm) = denxa(3,iatm) - daij*valz
cwts.f:          denxb(1,iatm) = denxb(1,iatm) - dbij*valx
cwts.f:          denxb(2,iatm) = denxb(2,iatm) - dbij*valy
cwts.f:          denxb(3,iatm) = denxb(3,iatm) - dbij*valz
cwts.f:            ij = it + jj
cwts.f:                fda(1,iatm,ij) = fda(1,iatm,ij) - valxa*valj
cwts.f:                fda(2,iatm,ij) = fda(2,iatm,ij) - valya*valj
cwts.f:                fda(3,iatm,ij) = fda(3,iatm,ij) - valza*valj
cwts.f:                fdb(1,iatm,ij) = fdb(1,iatm,ij) - valxb*valj
cwts.f:                fdb(2,iatm,ij) = fdb(2,iatm,ij) - valyb*valj
cwts.f:                fdb(3,iatm,ij) = fdb(3,iatm,ij) - valzb*valj
cwts.f:                fda(1,jatm,ij) = fda(1,jatm,ij) - vala*vaox(1,j)
cwts.f:                fda(2,jatm,ij) = fda(2,jatm,ij) - vala*vaox(2,j)
cwts.f:                fda(3,jatm,ij) = fda(3,jatm,ij) - vala*vaox(3,j)
cwts.f:                fdb(1,jatm,ij) = fdb(1,jatm,ij) - valb*vaox(1,j)
cwts.f:                fdb(2,jatm,ij) = fdb(2,jatm,ij) - valb*vaox(2,j)
cwts.f:                fdb(3,jatm,ij) = fdb(3,jatm,ij) - valb*vaox(3,j)
cwts.f:            valij = vali*valj
cwts.f:            if(abs(valij)*svmax.gt.thrsh) then
cwts.f:                fda(1,katm,ij)=fda(1,katm,ij) + valij*sva(1,katm)
cwts.f:                fda(2,katm,ij)=fda(2,katm,ij) + valij*sva(2,katm)
cwts.f:                fda(3,katm,ij)=fda(3,katm,ij) + valij*sva(3,katm)
cwts.f:                fdb(1,katm,ij)=fdb(1,katm,ij) + valij*svb(1,katm)
cwts.f:                fdb(2,katm,ij)=fdb(2,katm,ij) + valij*svb(2,katm)
cwts.f:                fdb(3,katm,ij)=fdb(3,katm,ij) + valij*svb(3,katm)
cwts.f:            valija=valij*prap
cwts.f:            valijb=valij*prbp
cwts.f:              fda(1,ia,ij)=fda(1,ia,ij)+valija*gwt(1,ia,ipp)
cwts.f:              fda(2,ia,ij)=fda(2,ia,ij)+valija*gwt(2,ia,ipp)
cwts.f:              fda(3,ia,ij)=fda(3,ia,ij)+valija*gwt(3,ia,ipp)
cwts.f:              fdb(1,ia,ij)=fdb(1,ia,ij)+valijb*gwt(1,ia,ipp)
cwts.f:              fdb(2,ia,ij)=fdb(2,ia,ij)+valijb*gwt(2,ia,ipp)
cwts.f:              fdb(3,ia,ij)=fdb(3,ia,ij)+valijb*gwt(3,ia,ipp)
cwts.f:            abijt=max(abs(daij2),abs(dbij2))
cwts.f:            abij=max(abs(daij),abs(dbij))
cwts.f:            if(abij*valm.gt.thrsh)then
cwts.f:            if(abijt*(abvj*valmm+abvvj*valm).gt.thrsh)then
cwts.f:            abijt=max(abs(daij2),abs(dbij2))
cwts.f:            abij=max(abs(daij),abs(dbij))
cwts.f:            if(abij*valm.gt.thrsh)then
cwts.f:            if(abijt*(abvj*valmm+abvvj*valm).gt.thrsh)then
cwts.f:                fda(1,iatm,ij)=fda(1,iatm,ij)-xxvxa*valj-valix*xvja
cwts.f:                fda(2,iatm,ij)=fda(2,iatm,ij)-xxvya*valj-valiy*xvja
cwts.f:                fda(3,iatm,ij)=fda(3,iatm,ij)-xxvza*valj-valiz*xvja
cwts.f:                fdb(1,iatm,ij)=fdb(1,iatm,ij)-xxvxb*valj-valix*xvjb
cwts.f:                fdb(2,iatm,ij)=fdb(2,iatm,ij)-xxvyb*valj-valiy*xvjb
cwts.f:                fdb(3,iatm,ij)=fdb(3,iatm,ij)-xxvzb*valj-valiz*xvjb
cwts.f:                fda(1,jAtm,ij) = fda(1,jatm,ij) - xvia*Valjx -
cwts.f:                fda(2,jatm,ij) = fda(2,jatm,ij) - xvia*valjy -
cwts.f:                fda(3,jatm,ij) = fda(3,jAtm,ij) - xvia*valjz -
cwts.f:                fdb(1,jatm,ij) = fdb(1,jatm,ij) - xvib*valjx -
cwts.f:                fdb(2,jatm,ij) = fdb(2,jatm,ij) - xvib*valjy -
cwts.f:                fdb(3,jatm,ij) = fdb(3,jatm,ij) - xvib*valjz -
cwts.f:              vij=vali*valj
cwts.f:              vijx=valix*valj+valjx*vali
cwts.f:              vijy=valiy*valj+valjy*vali
cwts.f:              vijz=valiz*valj+valjz*vali
cwts.f:              if(svmax*abs(vij)+swmax*abs(vijx+vijy+vijz).GT.thrsh)then
cwts.f:                  fda(1,katm,ij) = fda(1,katm,ij) + (sva(1,katm)*vij+
cwts.f:     $                           swa(1,1,katm)*vijx+swa(2,1,katm)*vijy+
cwts.f:     $                           swa(3,1,katm)*vijz)
cwts.f:                  fda(2,katm,ij) = fda(2,katm,ij) + (sva(2,katm)*vij+
cwts.f:     $                           swa(1,2,katm)*vijx+swa(2,2,katm)*vijy+
cwts.f:     $                           swa(3,2,katm)*vijz)
cwts.f:                  fda(3,katm,ij) = fda(3,katm,ij) + (sva(3,katm)*vij+
cwts.f:     $                           swa(1,3,katm)*vijx+swa(2,3,katm)*vijy+
cwts.f:     $                           swa(3,3,katm)*vijz)
cwts.f:                  fdb(1,katm,ij) = fdb(1,katm,ij) + (svb(1,katm)*vij+
cwts.f:     $                           swb(1,1,katm)*vijx+swb(2,1,katm)*vijy+
cwts.f:     $                           swb(3,1,katm)*vijz)
cwts.f:                  fdb(2,katm,ij) = fdb(2,katm,ij) + (svb(2,katm)*vij+
cwts.f:     $                           swb(1,2,katm)*vijx+swb(2,2,katm)*vijy+
cwts.f:     $                           swb(3,2,katm)*vijz)
cwts.f:                  fdb(3,katm,ij) = fdb(3,katm,ij) + (svb(3,katm)*vij+
cwts.f:     $                           swb(1,3,katm)*vijx+swb(2,3,katm)*vijy+
cwts.f:     $                           swb(3,3,katm)*vijz)
cwts.f:              dxija=dax*vijx+day*vijy+daz*vijz
cwts.f:              dxijb=dbx*vijx+dby*vijy+dbz*vijz
cwts.f:              gija=prap*vij+pgap2*dxija+pgcp*dxijb
cwts.f:              gijb=prbp*vij+pgbp2*dxijb+pgcp*dxija
cwts.f:              if(gwtmax*max(abs(gija),abs(gijb)).gt.thrsh)then
cwts.f:                  fda(1,ia,ij)=fda(1,ia,ij)+gwt(1,ia,ipp)*gija
cwts.f:                  fda(2,ia,ij)=fda(2,ia,ij)+gwt(2,ia,ipp)*gija
cwts.f:                  fda(3,ia,ij)=fda(3,ia,ij)+gwt(3,ia,ipp)*gija
cwts.f:                  fdb(1,ia,ij)=fdb(1,ia,ij)+gwt(1,ia,ipp)*gijb
cwts.f:                  fdb(2,ia,ij)=fdb(2,ia,ij)+gwt(2,ia,ipp)*gijb
cwts.f:                  fdb(3,ia,ij)=fdb(3,ia,ij)+gwt(3,ia,ipp)*gijb
datlog.f:c     lensm(nsij)=total number of functions up to given nsij
datlog.f:      ijk=10
datlog.f:      ijk=ijk+1
datlog.f:        nia(1,ijk)=ix
datlog.f:        nia(2,ijk)=iy
datlog.f:        nia(3,ijk)=iz
dbscf.f:c     Dkl *{ (ij|kl) - 0.5(il|kj) } where kl belong to small bs only.
dbscf.f:c transfer density dens(ij) from the smalll basis set to the big basis.
destiny.f:c (the same for each quartet: it used to be  ngcq=lgenct(ijklp)  )
destiny.f:      subroutine destret(ibl,kbl,ijbl,nbl2,nijbeg,nijend,nklbeg,nklend,
destiny.f:C???? common /contr/ ngci,ngcj,ngck,ngcl,lci,lcj,lck,lcl,lcij,lckl
destiny.f:      dimension ijbl(nbl2,*)
destiny.f:      ijkl =0
destiny.f:      do 100 ijp=nijbeg,nijend
destiny.f:         ijcs=ijbl(ibl,ijp)
destiny.f:         if(nklend.eq.0) nklendx=ijp
destiny.f:            klcs=ijbl(kbl,klp)
destiny.f:            ijkl=ijkl+1
destiny.f:            if(ipres(ijkl).eq.0) go to 100
destiny.f:            ijklp=indxr(ijkl)
destiny.f:        ics=iis(ijcs)               ! contracted shell ICS
destiny.f:        jcs=jjs(ijcs)               !     -"-          JCS
destiny.f:           call indexg(inx,ics,jcs,kcs,lcs,ijcs,klcs,
destiny.f:          lgenct(ijklp)=ngcq
destiny.f:          labels(1,iqu,ijklp)=icff
destiny.f:          labels(2,iqu,ijklp)=jcff
destiny.f:          labels(3,iqu,ijklp)=kcff
destiny.f:          labels(4,iqu,ijklp)=lcff
destiny.f:      subroutine indexg(inx,ics,jcs,kcs,lcs,ijcs,klcs,
destiny.f:      common /contr/ ngci,ngcj,ngck,ngcl,lci,lcj,lck,lcl,lcij,lckl
destiny.f:             ijpg=0
destiny.f:                  ijpg=ijpg+1
destiny.f:                  iix(ijpg)=icf
destiny.f:                  jjx(ijpg)=jcf
destiny.f:             ijklg=0
destiny.f:             do 2045 ijp1=1,ijpg
destiny.f:                ijklg=ijklg+1
destiny.f:                icfg(ijklg)=iix(ijp1)
destiny.f:                jcfg(ijklg)=jjx(ijp1)
destiny.f:                kcfg(ijklg)=kkx(klp1)
destiny.f:                lcfg(ijklg)=llx(klp1)
destiny.f:      ngcq=ijklg
destiny.f:c    i>=j; k>=l; ij>=kl
destiny.f:      ij1=max0(i,j)
destiny.f:      ij0=min0(i,j)
destiny.f:      if(ij1.gt.kl1.or.(ij1.eq.kl1.and.ij0.ge.kl0)) then
destiny.f:        iix(1)=ij1
destiny.f:        iix(2)=ij0
destiny.f:        iix(3)=ij1
destiny.f:        iix(4)=ij0
dftd3.f:      integer lin,ij,ik,jk
dftd3.f:            ij=lin(jat,iat)
dftd3.f:            icomp(ij)=1
dftd3.f:            cc6ab(ij)=sqrt(c6)
dftd3.f:            r2ab(ij)=r2
dftd3.f:            dmp(ij)=(1./rr)**(1./3.) 
dftd3.f:            ij=lin(jat,iat)
dftd3.f:            if(icomp(ij).eq.1)then
dftd3.f:c           tmp=dmp(ik)*dmp(jk)*dmp(ij)
dftd3.f:            rav=(4./3.)/(dmp(ik)*dmp(jk)*dmp(ij))
dftd3.f:            c9=cc6ab(ij)*cc6ab(ik)*cc6ab(jk)
dftd3.f:            d2(1)=r2ab(ij)
dftfock.f:      ijklp=0
dftfock.f:            ijklp=ijklp+1
dftfock.f:            icff=ilab(ijklp)
dftfock.f:            jcff=jlab(ijklp)
dftfock.f:            kcff=klab(ijklp)
dftfock.f:            lcff=llab(ijklp)
dftfock.f:                       ij=ii+jff
dftfock.f:                       fock(ij)=fock(ij)+xin4*dens(kl)
dftfock.f:                       fock(kl)=fock(kl)+xin4*dens(ij)
dftfock.f:         ij=0
dftfock.f:            ij=ij+1
dftfock.f:            fock(ij)=fock(ij)*resc
dftfock.f:     *                        iarray, nbls,ngcd,lnijkl,
dftfock.f:      dimension buf(nbls,lnijkl,ngcd)
dftfock.f:        do 100 ijklp=1,nbls
dftfock.f:        ngcq=lgenct(ijklp)
dftfock.f:            icff=labels(1,iqu,ijklp)
dftfock.f:            jcff=labels(2,iqu,ijklp)
dftfock.f:            kcff=labels(3,iqu,ijklp)
dftfock.f:            lcff=labels(4,iqu,ijklp)
dftfock.f:             iijf=iarray(jcf,icf)
dftfock.f:             xint=buf(ijklp,intct,iqu)
dftfock.f:          fock(i,iijf)=fock(i,iijf)+xin4*dn(i,kklf)
dftfock.f:          fock(i,kklf)=fock(i,kklf)+xin4*dn(i,iijf)
dftfock.f:cc          fock(iijf)=fock(iijf)+xin4*dn(kklf)
dftfock.f:cc          fock(kklf)=fock(kklf)+xin4*dn(iijf)
dftfock.f:     *                         iarray,nbls,ngcd,lnijkl,
dftfock.f:      dimension buf(nbls,lnijkl,ngcd)
dftfock.f:        do 100 ijklp=1,nbls
dftfock.f:        ngcq=lgenct(ijklp)
dftfock.f:            icff=labels(1,iqu,ijklp)
dftfock.f:            jcff=labels(2,iqu,ijklp)
dftfock.f:            kcff=labels(3,iqu,ijklp)
dftfock.f:            lcff=labels(4,iqu,ijklp)
dftfock.f:             xint=buf(ijklp,intct,iqu)
dftfock.f:                iijf=iarray(jcf,icf)
dftfock.f:          fock(i,iijf)=fock(i,iijf)+xin4*dn(i,kklf)
dftfock.f:          fock(i,kklf)=fock(i,kklf)+xin4*dn(i,iijf)
dftfock.f:cc          fock(iijf)=fock(iijf)+xin4*dn(kklf)
dftfock.f:cc          fock(kklf)=fock(kklf)+xin4*dn(iijf)
dftfock.f:     *                         iarray,nbls,ngcd,lnijkl,
dftfock.f:      dimension buf(nbls,lnijkl,ngcd)
dftfock.f:        do 400 ijklp=1,nbls
dftfock.f:        ngcq=lgenct(ijklp)
dftfock.f:            icff=labels(1,iqu,ijklp)
dftfock.f:            jcff=labels(2,iqu,ijklp)
dftfock.f:            kcff=labels(3,iqu,ijklp)
dftfock.f:            lcff=labels(4,iqu,ijklp)
dftfock.f:             xint=buf(ijklp,intct,iqu)
dftfock.f:                iijf=iarray(jcf,icf)
dftfock.f:          fock(iijf)=fock(iijf)+xin4*dn(kklf)
dftfock.f:          fock(kklf)=fock(kklf)+xin4*dn(iijf)
dftfock.f:     *                         iarray,nbls,ngcd,lnijkl,
dftfock.f:      dimension buf(nbls,lnijkl,ngcd)
dftfock.f:        do 100 ijklp=1,nbls
dftfock.f:        ngcq=lgenct(ijklp)
dftfock.f:            icff=labels(1,iqu,ijklp)
dftfock.f:            jcff=labels(2,iqu,ijklp)
dftfock.f:            kcff=labels(3,iqu,ijklp)
dftfock.f:            lcf=labels(4,iqu,ijklp)+1
dftfock.f:             xint=buf(ijklp,intct,iqu)
dftfock.f:                iijf=iarray(jcf,icf)
dftfock.f:          fock(i,iijf)=fock(i,iijf)+xin4*dn(i,kklf)
dftfock.f:          fock(i,kklf)=fock(i,kklf)+xin4*dn(i,iijf)
dftfock.f:cc          fock(iijf)=fock(iijf)+xin4*dn(kklf)
dftfock.f:cc          fock(kklf)=fock(kklf)+xin4*dn(iijf)
dfthessc.f:          do ij=1,ntri
dfthessc.f:            f(1,ic,ij)=f(1,ic,ij)-f(1,ia,ij)
dfthessc.f:            f(2,ic,ij)=f(2,ic,ij)-f(2,ia,ij)
dfthessc.f:            f(3,ic,ij)=f(3,ic,ij)-f(3,ia,ij)
dft_nmr.f:      common /dftpnt/ ird,iaij,idst,iixx,iiwt,ipre,iexp,
dft_nmr.f:     *                  NBatch,bl(idst),bl(iaij),bl(ird),bl(iixx),
dft_uhf.f:      ijklp=0
dft_uhf.f:            ijklp=ijklp+1
dft_uhf.f:            icff=ilab(ijklp)
dft_uhf.f:            jcff=jlab(ijklp)
dft_uhf.f:            kcff=klab(ijklp)
dft_uhf.f:            lcff=llab(ijklp)
dft_uhf.f:                       ij=ii+jff
dft_uhf.f:                       fockA(ij)=fockA(ij)+xin2*DenAB(kl)
dft_uhf.f:                       fockA(kl)=fockA(kl)+xin2*DenAB(ij)
dft_uhf.f:                       fockB(ij)=fockB(ij)+xin2*DenAB(kl)
dft_uhf.f:                       fockB(kl)=fockB(kl)+xin2*DenAB(ij)
dft_uhf.f:         ij=0
dft_uhf.f:            ij=ij+1
dft_uhf.f:            fockA(ij)=fockA(ij)*resc
dft_uhf.f:            fockB(ij)=fockB(ij)*resc
dft_uhf.f:     *                       iarray, nbls,   ngcd,   lnijkl, labels,
dft_uhf.f:      dimension buf(nbls,lnijkl,ngcd)
dft_uhf.f:        do 100 ijklp=1,nbls
dft_uhf.f:        ngcq=lgenct(ijklp)
dft_uhf.f:            icff=labels(1,iqu,ijklp)
dft_uhf.f:            jcff=labels(2,iqu,ijklp)
dft_uhf.f:            kcff=labels(3,iqu,ijklp)
dft_uhf.f:            lcff=labels(4,iqu,ijklp)
dft_uhf.f:             iijf=iarray(jcf,icf)
dft_uhf.f:             xint=buf(ijklp,intct,iqu)
dft_uhf.f:          fockA(iijf)=fockA(iijf)+xin2*DenAB(kklf)
dft_uhf.f:          fockA(kklf)=fockA(kklf)+xin2*DenAB(iijf)
dft_uhf.f:          fockB(iijf)=fockB(iijf)+xin2*DenAB(kklf)
dft_uhf.f:          fockB(kklf)=fockB(kklf)+xin2*DenAB(iijf)
dft_uhf.f:     *                        iarray, nbls,   ngcd,   lnijkl, labels,
dft_uhf.f:      dimension buf(nbls,lnijkl,ngcd)
dft_uhf.f:        do 400 ijklp=1,nbls
dft_uhf.f:        ngcq=lgenct(ijklp)
dft_uhf.f:            icff=labels(1,iqu,ijklp)
dft_uhf.f:            jcff=labels(2,iqu,ijklp)
dft_uhf.f:            kcff=labels(3,iqu,ijklp)
dft_uhf.f:            lcff=labels(4,iqu,ijklp)
dft_uhf.f:             xint=buf(ijklp,intct,iqu)
dft_uhf.f:                iijf=iarray(jcf,icf)
dft_uhf.f:          fockA(iijf)=fockA(iijf)+xin2*DenAB(kklf)
dft_uhf.f:          fockA(kklf)=fockA(kklf)+xin2*DenAB(iijf)
dft_uhf.f:          fockB(iijf)=fockB(iijf)+xin2*DenAB(kklf)
dft_uhf.f:          fockB(kklf)=fockB(kklf)+xin2*DenAB(iijf)
dft_uhf.f:     *                        iarray, nbls,   ngcd,   lnijkl, labels,
dft_uhf.f:      dimension buf(nbls,lnijkl,ngcd)
dft_uhf.f:        do 100 ijklp=1,nbls
dft_uhf.f:        ngcq=lgenct(ijklp)
dft_uhf.f:            icff=labels(1,iqu,ijklp)
dft_uhf.f:            jcff=labels(2,iqu,ijklp)
dft_uhf.f:            kcff=labels(3,iqu,ijklp)
dft_uhf.f:            lcf=labels(4,iqu,ijklp)+1
dft_uhf.f:             xint=buf(ijklp,intct,iqu)
dft_uhf.f:                iijf=iarray(jcf,icf)
dft_uhf.f:          fockA(iijf)=fockA(iijf)+xin2*DenAB(kklf)
dft_uhf.f:          fockA(kklf)=fockA(kklf)+xin2*DenAB(iijf)
dft_uhf.f:          fockB(iijf)=fockB(iijf)+xin2*DenAB(kklf)
dft_uhf.f:          fockB(kklf)=fockB(kklf)+xin2*DenAB(iijf)
fock_bld.f:     *                     iarray, nbls,ngcd,lnijkl,
fock_bld.f:      dimension buf(nbls,lnijkl,ngcd)
fock_bld.f:        do 100 ijklp=1,nbls
fock_bld.f:        ngcq=lgenct(ijklp)
fock_bld.f:            icff=labels(1,iqu,ijklp)
fock_bld.f:            jcff=labels(2,iqu,ijklp)
fock_bld.f:            kcff=labels(3,iqu,ijklp)
fock_bld.f:            lcff=labels(4,iqu,ijklp)
fock_bld.f:             iijf=iarray(jcf,icf)
fock_bld.f:             xint=buf(ijklp,intct,iqu)
fock_bld.f:          fock(1,iijf)=fock(1,iijf)+xin4*dn(1,kklf)
fock_bld.f:          fock(1,kklf)=fock(1,kklf)+xin4*dn(1,iijf)
fock_bld.f:          fock(i,iijf)=fock(i,iijf)+xin4*dn(i,kklf)
fock_bld.f:          fock(i,kklf)=fock(i,kklf)+xin4*dn(i,iijf)
fock_bld.f:     *                    nbls,ngcd,lnijkl,
fock_bld.f:      dimension buf(nbls,lnijkl,ngcd)
fock_bld.f:        do 100 ijklp=1,nbls
fock_bld.f:        ngcq=lgenct(ijklp)
fock_bld.f:            icff=labels(1,iqu,ijklp)
fock_bld.f:            jcff=labels(2,iqu,ijklp)
fock_bld.f:            kcff=labels(3,iqu,ijklp)
fock_bld.f:            lcff=labels(4,iqu,ijklp)
fock_bld.f:             xint=buf(ijklp,intct,iqu)
fock_bld.f:                iijf=iarray(jcf,icf)
fock_bld.f:          fock(i,iijf)=fock(i,iijf)+xin4*dn(i,kklf)
fock_bld.f:          fock(i,kklf)=fock(i,kklf)+xin4*dn(i,iijf)
fock_bld.f:     *                      iarray,nbls,ngcd,lnijkl,
fock_bld.f:      dimension buf(nbls,lnijkl,ngcd)
fock_bld.f:        do 400 ijklp=1,nbls
fock_bld.f:        ngcq=lgenct(ijklp)
fock_bld.f:            icff=labels(1,iqu,ijklp)
fock_bld.f:            jcff=labels(2,iqu,ijklp)
fock_bld.f:            kcff=labels(3,iqu,ijklp)
fock_bld.f:            lcff=labels(4,iqu,ijklp)
fock_bld.f:             xint=buf(ijklp,intct,iqu)
fock_bld.f:                iijf=iarray(jcf,icf)
fock_bld.f:          fock(iijf)=fock(iijf)+xin4*dn(kklf)
fock_bld.f:          fock(kklf)=fock(kklf)+xin4*dn(iijf)
fock_bld.f:     *                    nbls,ngcd,lnijkl,
fock_bld.f:      dimension buf(nbls,lnijkl,ngcd)
fock_bld.f:        do 100 ijklp=1,nbls
fock_bld.f:        ngcq=lgenct(ijklp)
fock_bld.f:            icff=labels(1,iqu,ijklp)
fock_bld.f:            jcff=labels(2,iqu,ijklp)
fock_bld.f:            kcff=labels(3,iqu,ijklp)
fock_bld.f:            lcf=labels(4,iqu,ijklp)+1
fock_bld.f:             xint=buf(ijklp,intct,iqu)
fock_bld.f:                iijf=iarray(jcf,icf)
fock_bld.f:          fock(i,iijf)=fock(i,iijf)+xin4*dn(i,kklf)
fock_bld.f:          fock(i,kklf)=fock(i,kklf)+xin4*dn(i,iijf)
fock_bld.f:     *                      iarray,nbls,ngcd,lnijkl,
fock_bld.f:      dimension buf(nbls,lnijkl,ngcd)
fock_bld.f:        do 100 ijklp=1,nbls
fock_bld.f:        ngcq=lgenct(ijklp)
fock_bld.f:            icff=labels(1,iqu,ijklp)
fock_bld.f:            jcff=labels(2,iqu,ijklp)
fock_bld.f:            kcff=labels(3,iqu,ijklp)
fock_bld.f:            lcf=labels(4,iqu,ijklp)+1
fock_bld.f:             xint=buf(ijklp,intct,iqu)
fock_bld.f:                iijf=iarray(jcf,icf)
fock_bld.f:          fock(iijf)=fock(iijf)+xin4*dn(kklf)
fock_bld.f:          fock(kklf)=fock(kklf)+xin4*dn(iijf)
fock_sym.f:         ij=0
fock_sym.f:            ij=ij+1
fock_sym.f:            ij1=i1*(i1-1)/2+j1
fock_sym.f:            if (j1.gt.i1) ij1=j1*(j1-1)/2+i1
fock_sym.f:            ff=fock(ij)+fct*fock(ij1)
fock_sym.f:            if (ij.gt.ij1) ff=ff*half
fock_sym.f:            fock(ij)=ff
fock_sym.f:            fock(ij1)=fct*ff
fock_sym.f:         ij=0
fock_sym.f:            ij=ij+1
fock_sym.f:              ij1=i1*(i1-1)/2+j1
fock_sym.f:              ij1=j1*(j1-1)/2+i1
fock_sym.f:            ff=(dens(ij)+fct*dens(ij1))*half
fock_sym.f:                delta=abs(dens(ij)-ff)
fock_sym.f:            dens(ij)=ff
fock_sym.f:            dens(ij1)=fct*ff
force1.f:        ij=0
force1.f:        ij=ij+1
force1.f:        dew(ij)=s
force1.f:        ij=0
force1.f:        ij=ij+1
force1.f:        dew(ij)=dew(ij)+s
force1.f:                  iij=0
force1.f:                     iij=iij+1
force1.f:                     ij=ii+jff
force1.f:                     dij=dn(ij)
force1.f:                     if(iff.ne.jff) dij=2.d0*dij
force1.f:                  iij_icr=iij+(icr-1)*len
force1.f:     *                           -(sa(iij_icr)+sb(iij_icr))*dij*zza
force1.f:                  atfor(icr,iat)=atfor(icr,iat)+sa(iij_icr)*dij*zza
force1.f:                  atfor(icr,jat)=atfor(icr,jat)+sb(iij_icr)*dij*zza
force1.f:          ij=0
force1.f:               ij=ij+1
force1.f:               sb(ij)=sb(ij)+rb(ij)*coefi*coefj
force1.f:      ij=0
force1.f:      do 730 ij1=1,len
force1.f:      ij=ij+1
force1.f:      sb(ij)=sb(iadd+ij1)
force1.f:      ij=0
force1.f:         ij=ij+1
force1.f:         xint(ij)=yint(ij)*ft
force1.f:         xint(ij+ln)=yint(ij+ln)*ft
force1.f:         xint(ij+2*ln)=yint(ij+2*ln)*ft
force1.f:      ij=0
force1.f:         ij=ij+1
force1.f:         xint(ij)=xint(ij)-yint(ij)*ft
force1.f:         xint(ij+ln)=xint(ij+ln)-yint(ij+ln)*ft
force1.f:         xint(ij+2*ln)=xint(ij+2*ln)-yint(ij+2*ln)*ft
force1.f:      ij=0
force1.f:         ij=ij+1
force1.f:         xint(ij)=xint(ij)-yint(ij)*ft
force1.f:         xint(ij+ln)=xint(ij+ln)-yint(ij+ln)*ft
force1.f:         xint(ij+2*ln)=xint(ij+2*ln)-yint(ij+2*ln)*ft
force1.f:      ij=0
force1.f:         ij=ij+1
force1.f:         xint(ij)=xint(ij)-yint(ij)*ft
force1.f:         xint(ij+ln)=xint(ij+ln)-yint(ij+ln)*ft
force1.f:         xint(ij+2*ln)=xint(ij+2*ln)-yint(ij+2*ln)*ft
force1.f:            ij=0
force1.f:                 ij=ij+1
force1.f:                 coefij=coefi*coefj
force1.f:                 sa(ij)=sa(ij)+ra(ij)*coefij
force1.f:                 sb(ij)=sb(ij)+rb(ij)*coefij
force1.f:      ij=0
force1.f:      do 730 ij1=1,len
force1.f:      ij=ij+1
force1.f:      sa(ij)=sa(iadd+ij1)
force1.f:      sb(ij)=sb(iadd+ij1)
force1.f:      kij=0
force1.f:clalb*            xra(1),xra(2),xra(3),la,lb,xint,wint,kij,ln)
force1.f:     *            xra(1),xra(2),xra(3),      xint,wint,kij,ln)
force1.f:      ij=0
force1.f:         ij=ij+1
force1.f:         yint(ij+2*ln)=xint(ij+2*ln)*ftz + wint(ij+2*ln)*twoa
force1.f:         yint(ij+ln)=xint(ij+ln)*fty +wint(ij+ln)*twoa
force1.f:         yint(ij)=xint(ij)*ftx+wint(ij)*twoa
force1.f:      kij=1
force1.f:clalb*            xra(1),xra(2),xra(3),la,lb,xint,wint,kij,ln)
force1.f:     *            xra(1),xra(2),xra(3),      xint,wint,kij,ln)
force1.f:      ij=0
force1.f:         ij=ij+1
force1.f:         wint(ij+2*ln)=xint(ij+2*ln)*ftz + wint(ij+2*ln)*twob
force1.f:         wint(ij+ln)=xint(ij+ln)*fty + wint(ij+ln)*twob
force1.f:         wint(ij)=xint(ij)*ftx + wint(ij)*twob
force1.f:     *                  xm1,xp1,kij,ln)
force1.f:     *               icr,kij)
force1.f:     *                  kk,kij)
force1.f:c     write(6,*)'n1,n2=',n1,n2,' ie1,ie2=',ie1,ie2,' Kij=',kij
force1.f:                             ij=(i3-1)*len2+j3
force1.f:                             f3b(icrl+ij,k1)=fff(icrl+ji,k1)
force1.f:                  iij=0
force1.f:                     iij=iij+1
force1.f:                     ij=ii+jff
force1.f:                     dnij=dn(ij)
force1.f:                     dwij=dw(ij)
force1.f:                        dnij=2.d0*dnij
force1.f:                        dwij=2.d0*dwij
force1.f:                  iij_icr=iij+(icr-1)*len
force1.f:                  atfor(icr,iat)=atfor(icr,iat)+s3(iij_icr)*dwij
force1.f:                  atfor(icr,jat)=atfor(icr,jat)-s3(iij_icr)*dwij
force1.f:                  atfor(icr,iat)=atfor(icr,iat)-t3(iij_icr)*dnij
force1.f:                  atfor(icr,jat)=atfor(icr,jat)+t3(iij_icr)*dnij
force1.f:                     atfor(icr,iat)=atfor(icr,iat)-f3a(iij_icr,k1)*dnij
force1.f:                     atfor(icr,jat)=atfor(icr,jat)-f3b(iij_icr,k1)*dnij
force1.f:                 ij=0
force1.f:                        ij=ij+1
force1.f:                        s3(ij)=zero
force1.f:                  iij=0
force1.f:                     iij=(i1-1)*len2+j1
force1.f:                     ij=ii+jff
force1.f:                       ij=jj+iff
force1.f:                     dnij=dn(ij)
force1.f:          call vcdsum(mag,nuc,len,iij,s3,dnij,atrot)
force1.f:      subroutine vcdsum(mag,nuc,len,iij,s3,den,atrot)
force1.f:      atrot(mag,nuc)=atrot(mag,nuc)-s3(iij,nuc,mag)*den
force1.f:              ij=0
force1.f:                  ij=ij+1
force1.f:                  s3(ij)=zero
force1.f:              iij=0
force1.f:                  iij=iij+1
force1.f:                    sder(iff,jff,mag)=sder(iff,jff,mag)+s3(iij+mag1)
force2.f:      subroutine force_der(bl,nbls,lnijr,lnklr,npij,ngcd,idx1,ixab)
force2.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,mmax,
force2.f:     * nqi,nqj,nqk,nql,nsij,nskl,
force2.f:     * nqij,nqij1,nsij1,nqkl,nqkl1,nskl1,ijbeg,klbeg
force2.f:     * ibfij1,ibfij2,ibfkl1,ibfkl2,
force2.f:     * ibf2l1,ibf2l2,ibf2l3,ibf2l4,ibfij3,ibfkl3,
force2.f:     * ixij,iyij,izij, iwij,ivij,iuij,isij
force2.f:      common /dimasse/ lqijr,lqklr,lqmxr,lij3,lkl3,l3l,lsss
force2.f:      lqij=nfu(nqij+1)
force2.f:      lqmx=lqij
force2.f:      if(lqkl.gt.lqij) lqmx=lqkl
force2.f:      call conv24r(nbls,npij,bl(idx1),bl(ixab),bl(ixabq))
force2.f:      ijdim=lnij-nfu(nqij)
force2.f:      call getint(ijdim,ijvecx)
force2.f:      call getint(ijdim,ijvecy)
force2.f:      call getint(ijdim,ijvecz)
force2.f:      call find_non0(nqij,lnij,nqkl,lnkl,
force2.f:     *               nijx,nijy,nijz,nklx,nkly,nklz,
force2.f:     *               bl(ijvecx),bl(ijvecy),bl(ijvecz),
force2.f:      incr9=9*ngcd*nbls*lnij*lnkl
force2.f:     *               lnijr,lnklr,lnij,lnkl,nqij,nqkl,
force2.f:     *               nijx,nijy,nijz,nklx,nkly,nklz,
force2.f:     *               bl(ijvecx),bl(ijvecy),bl(ijvecz),
force2.f:      subroutine conv24r(nbls,npij,idx1,xab,xabq)
force2.f:      dimension xab(npij,3),xabq(nbls,3)
force2.f:      do 100 ijkl=1,nbls
force2.f:      ijpar=idx1(ijkl)
force2.f:c     klpar=idx2(ijkl)
force2.f:        xabq(ijkl,i)=xab(ijpar,i)
force2.f:c       xcdq(ijkl,i)=xcd(klpar,i)
force2.f:      subroutine first_der_O(ngcd,nbls,buf2,ndim,lnijr,lnklr,lnij,lnkl,
force2.f:     *                     nqij,nqkl,deriv,der00,xab)
force2.f:cccc  dimension buf2(4,nbls,lnijr,lnklr,ngcd) OR buf2(10,etc.)
force2.f:      dimension buf2(ndim,nbls,lnijr,lnklr,ngcd)
force2.f:      dimension deriv(9,nbls,lnij,lnkl,ngcd),der00(nbls,lnij,lnkl,ngcd)
force2.f:c INPUT buf2(1,nbls,lnijr,lnklr,ngcd) - ordinary 2-el.integ.
force2.f:c INPUT buf2(2,nbls,lnijr,lnklr,ngcd) - 2-el.integ. resc by 2*exp_a
force2.f:c INPUT buf2(3,nbls,lnijr,lnklr,ngcd) - 2-el.integ. resc by 2*exp_b
force2.f:c INPUT buf2(4,nbls,lnijr,lnklr,ngcd) - 2-el.integ. resc by 2*exp_c
force2.f:c--->           derAX=deriv(1,nbls,lnij,lnkl,ngcd),
force2.f:c--->           derBX=deriv(2,nbls,lnij,lnkl,ngcd)
force2.f:c--->           derCX=deriv(3,nbls,lnij,lnkl,ngcd),
force2.f:c--->           derAY=deriv(4,nbls,lnij,lnkl,ngcd),
force2.f:c--->           derBY=deriv(5,nbls,lnij,lnkl,ngcd),
force2.f:c--->           derCY=deriv(6,nbls,lnij,lnkl,ngcd),
force2.f:c--->           derAZ=deriv(7,nbls,lnij,lnkl,ngcd),
force2.f:c--->           derBZ=deriv(8,nbls,lnij,lnkl,ngcd),
force2.f:c--->           derCZ=deriv(9,nbls,lnij,lnkl,ngcd),
force2.f:c--->           der00(nbls,lnij,lnkl,ngcd) - ordinary integr.
force2.f:      do 200 ij=nfu(nqij)+1,lnij
force2.f:      n_ab_x=nia(1,ij)
force2.f:      n_ab_y=nia(2,ij)
force2.f:      n_ab_z=nia(3,ij)
force2.f:      ijpx=npxyz(1,ij)
force2.f:      ijpy=npxyz(2,ij)
force2.f:      ijpz=npxyz(3,ij)
force2.f:      ijmx=0
force2.f:      ijmy=0
force2.f:      ijmz=0
force2.f:      if(n_ab_x.gt.0) ijmx=nmxyz(1,ij)
force2.f:      if(n_ab_y.gt.0) ijmy=nmxyz(2,ij)
force2.f:      if(n_ab_z.gt.0) ijmz=nmxyz(3,ij)
force2.f:        do 250 ijkl=1,nbls
force2.f:        two_a_x=buf2(2,ijkl,ijpx,kl,iqu)
force2.f:        two_a_y=buf2(2,ijkl,ijpy,kl,iqu)
force2.f:        two_a_z=buf2(2,ijkl,ijpz,kl,iqu)
force2.f:        two_b_0=buf2(3,ijkl,ij,kl,iqu)
force2.f:        two_b_x=buf2(3,ijkl,ijpx,kl,iqu)
force2.f:        two_b_y=buf2(3,ijkl,ijpy,kl,iqu)
force2.f:        two_b_z=buf2(3,ijkl,ijpz,kl,iqu)
force2.f:        two_c_x=buf2(4,ijkl,ij,klpx,iqu)
force2.f:        two_c_y=buf2(4,ijkl,ij,klpy,iqu)
force2.f:        two_c_z=buf2(4,ijkl,ij,klpz,iqu)
force2.f:        der00(ijkl,ij,kl,iqu)=buf2(1,ijkl,ij,kl,iqu)
force2.f:           x_n_ab=n_ab_x*buf2(1,ijkl,ijmx,kl,iqu)
force2.f:           deriv(1,ijkl,ij,kl,iqu)=two_a_x - x_n_ab
force2.f:           deriv(1,ijkl,ij,kl,iqu)=two_a_x
force2.f:        deriv(2,ijkl,ij,kl,iqu)=two_b_x + xab(ijkl,1)*two_b_0
force2.f:           x_n_cd=n_cd_x*buf2(1,ijkl,ij,klmx,iqu)
force2.f:           deriv(3,ijkl,ij,kl,iqu)=two_c_x - x_n_cd
force2.f:           deriv(3,ijkl,ij,kl,iqu)=two_c_x
force2.f:           y_n_ab=n_ab_y*buf2(1,ijkl,ijmy,kl,iqu)
force2.f:           deriv(4,ijkl,ij,kl,iqu)=two_a_y - y_n_ab
force2.f:           deriv(4,ijkl,ij,kl,iqu)=two_a_y
force2.f:        deriv(5,ijkl,ij,kl,iqu)=two_b_y + xab(ijkl,2)*two_b_0
force2.f:           y_n_cd=n_cd_y*buf2(1,ijkl,ij,klmy,iqu)
force2.f:           deriv(6,ijkl,ij,kl,iqu)=two_c_y - y_n_cd
force2.f:           deriv(6,ijkl,ij,kl,iqu)=two_c_y
force2.f:           z_n_ab=n_ab_z*buf2(1,ijkl,ijmz,kl,iqu)
force2.f:           deriv(7,ijkl,ij,kl,iqu)=two_a_z - z_n_ab
force2.f:           deriv(7,ijkl,ij,kl,iqu)=two_a_z
force2.f:        deriv(8,ijkl,ij,kl,iqu)=two_b_z + xab(ijkl,3)*two_b_0
force2.f:           z_n_cd=n_cd_z*buf2(1,ijkl,ij,klmz,iqu)
force2.f:           deriv(9,ijkl,ij,kl,iqu)=two_c_z - z_n_cd
force2.f:           deriv(9,ijkl,ij,kl,iqu)=two_c_z
force2.f:      subroutine first_der(ngcd,nbls,buf2,ndim,lnijr,lnklr,lnij,lnkl,
force2.f:     *                     nqij,nqkl,deriv,der00,xab,
force2.f:     *                     nijx,nijy,nijz,nklx,nkly,nklz,
force2.f:     *                     ijvecx,ijvecy,ijvecz,klvecx,klvecy,klvecz )
force2.f:c INPUT buf2(1,nbls,lnijr,lnklr,ngcd) - ordinary 2-el.integ.
force2.f:c INPUT buf2(2,nbls,lnijr,lnklr,ngcd) - 2-el.integ. resc by 2*exp_a
force2.f:c INPUT buf2(3,nbls,lnijr,lnklr,ngcd) - 2-el.integ. resc by 2*exp_b
force2.f:c INPUT buf2(4,nbls,lnijr,lnklr,ngcd) - 2-el.integ. resc by 2*exp_c
force2.f:c               derAX=deriv(1,nbls,lnij,lnkl,ngcd),
force2.f:c               derBX=deriv(2,nbls,lnij,lnkl,ngcd)
force2.f:c               derCX=deriv(3,nbls,lnij,lnkl,ngcd),
force2.f:c               derAY=deriv(4,nbls,lnij,lnkl,ngcd),
force2.f:c               derBY=deriv(5,nbls,lnij,lnkl,ngcd),
force2.f:c               derCY=deriv(6,nbls,lnij,lnkl,ngcd),
force2.f:c               derAZ=deriv(7,nbls,lnij,lnkl,ngcd),
force2.f:c               derBZ=deriv(8,nbls,lnij,lnkl,ngcd),
force2.f:c               derCZ=deriv(9,nbls,lnij,lnkl,ngcd),
force2.f:c               der00(nbls,lnij,lnkl,ngcd) - ordinary integr.
force2.f:cccc  dimension buf2(4,nbls,lnijr,lnklr,ngcd) OR buf2(10,etc.)
force2.f:c200  dimension buf2(ndim,nbls,lnijr,lnklr,ngcd)
force2.f:      dimension buf2(nbls,lnijr,lnklr,ngcd, ndim)
force2.f:      dimension deriv(9,nbls,lnij,lnkl,ngcd),der00(nbls,lnij,lnkl,ngcd)
force2.f:      dimension ijvecx(*),ijvecy(*),ijvecz(*)
force2.f:            do 220 ij=nfu(nqij)+1,lnij
force2.f:            ijpx=npxyz(1,ij)
force2.f:            ijpy=npxyz(2,ij)
force2.f:            ijpz=npxyz(3,ij)
force2.f:               do 230 ijkl=1,nbls
force2.f:               two_b_0=buf2(ijkl,ij,kl,iqu,3)
force2.f:               der00(ijkl,ij,kl,iqu)=buf2(ijkl,ij,kl,iqu,1)
force2.f:               deriv(1,ijkl,ij,kl,iqu)=buf2(ijkl,ijpx,kl,iqu,2)
force2.f:               deriv(2,ijkl,ij,kl,iqu)=buf2(ijkl,ijpx,kl,iqu,3)
force2.f:     *                                    + xab(ijkl,1)*two_b_0
force2.f:               deriv(3,ijkl,ij,kl,iqu)=buf2(ijkl,ij,klpx,iqu,4)
force2.f:               deriv(4,ijkl,ij,kl,iqu)=buf2(ijkl,ijpy,kl,iqu,2)
force2.f:               deriv(5,ijkl,ij,kl,iqu)=buf2(ijkl,ijpy,kl,iqu,3)
force2.f:     *                                    + xab(ijkl,2)*two_b_0
force2.f:               deriv(6,ijkl,ij,kl,iqu)=buf2(ijkl,ij,klpy,iqu,4)
force2.f:               deriv(7,ijkl,ij,kl,iqu)=buf2(ijkl,ijpz,kl,iqu,2)
force2.f:               deriv(8,ijkl,ij,kl,iqu)=buf2(ijkl,ijpz,kl,iqu,3)
force2.f:     *                                    + xab(ijkl,3)*two_b_0
force2.f:               deriv(9,ijkl,ij,kl,iqu)=buf2(ijkl,ij,klpz,iqu,4)
force2.f:            do 221 ijx=1,nijx
force2.f:            ij=ijvecx(ijx)  ! only these which have n_ab_x >0
force2.f:c           n_ab_x=nia(1,ij)
force2.f:            x_n_ab=dble( nia(1,ij) )
force2.f:            ijmx=nmxyz(1,ij)
force2.f:               do 231 ijkl=1,nbls
force2.f:                  deriv(1,ijkl,ij,kl,iqu)=deriv(1,ijkl,ij,kl,iqu)
force2.f:     *                          - x_n_ab*buf2(ijkl,ijmx,kl,iqu,1)
force2.f:            do 222 ijy=1,nijy
force2.f:            ij=ijvecy(ijy)  ! only these which have n_ab_y >0
force2.f:cc          n_ab_y=nia(2,ij)
force2.f:            y_n_ab=dble( nia(2,ij) )
force2.f:            ijmy=nmxyz(2,ij)
force2.f:               do 232 ijkl=1,nbls
force2.f:                  deriv(4,ijkl,ij,kl,iqu)=deriv(4,ijkl,ij,kl,iqu)
force2.f:     *                          - y_n_ab*buf2(ijkl,ijmy,kl,iqu,1)
force2.f:            do 223 ijz=1,nijz
force2.f:            ij=ijvecz(ijz)  ! only these which have n_ab_z >0
force2.f:c           n_ab_z=nia(3,ij)
force2.f:            z_n_ab=dble( nia(3,ij) )
force2.f:            ijmz=nmxyz(3,ij)
force2.f:               do 233 ijkl=1,nbls
force2.f:                  deriv(7,ijkl,ij,kl,iqu)=deriv(7,ijkl,ij,kl,iqu)
force2.f:     *                          - z_n_ab*buf2(ijkl,ijmz,kl,iqu,1)
force2.f:      call lower_cd(ngcd,nbls,buf2,ndim,lnijr,lnklr,lnij,lnkl,
force2.f:     *              nqij,nklx,klvecx,ixyz,deriv)
force2.f:      call lower_cd(ngcd,nbls,buf2,ndim,lnijr,lnklr,lnij,lnkl,
force2.f:     *              nqij,nkly,klvecy,ixyz,deriv)
force2.f:      call lower_cd(ngcd,nbls,buf2,ndim,lnijr,lnklr,lnij,lnkl,
force2.f:     *              nqij,nklz,klvecz,ixyz,deriv)
force2.f:      subroutine find_non0(nqij,lnij,nqkl,lnkl,
force2.f:     *                     nijx,nijy,nijz,nklx,nkly,nklz,
force2.f:     *                     ijvecx,ijvecy,ijvecz,klvecx,klvecy,klvecz)
force2.f:      dimension ijvecx(*),ijvecy(*),ijvecz(*)
force2.f:      nijx=0
force2.f:      nijy=0
force2.f:      nijz=0
force2.f:      do 100 ij=nfu(nqij)+1,lnij
force2.f:         n_ab_x=nia(1,ij)
force2.f:         n_ab_y=nia(2,ij)
force2.f:         n_ab_z=nia(3,ij)
force2.f:            nijx=nijx+1
force2.f:            ijvecx(nijx)=ij
force2.f:            nijy=nijy+1
force2.f:            ijvecy(nijy)=ij
force2.f:            nijz=nijz+1
force2.f:            ijvecz(nijz)=ij
force2.f:      subroutine lower_cd(ngcd,nbls,buf2,ndim,lnijr,lnklr,lnij,lnkl,
force2.f:     *                    nqij,nklxyz,klvecxyz,ixyz, deriv)
force2.f:      dimension buf2(nbls,lnijr,lnklr,ngcd,ndim)
force2.f:      dimension deriv(9,nbls,lnij,lnkl,ngcd)
force2.f:            do 220 ij=nfu(nqij)+1,lnij
force2.f:               do 230 ijkl=1,nbls
force2.f:               deriv(idxyz,ijkl,ij,kl,iqu)=deriv(idxyz,ijkl,ij,kl,iqu)
force2.f:     *                           - xyz_n_cd*buf2(ijkl,ij,klmxyz,iqu,1)
force2.f:      subroutine onecentr(iis,jjs,inx,npij,npkl,npklx,
force2.f:     *           ibl,kbl,ijbl,nbl2,nijbeg,nijend,nklbeg,nklend,
force2.f:     *           ipres,ijcent,klcent)
force2.f:      dimension inx(12,*),iis(*),jjs(*),ijbl(nbl2,*)
force2.f:      dimension ijcent(npij),klcent(npkl)
force2.f:      ijpar=0
force2.f:      do 100 ijp=nijbeg,nijend
force2.f:      ijpar=ijpar+1
force2.f:        ijcs=ijbl(ibl,ijp)
force2.f:        ics=iis(ijcs)
force2.f:        jcs=jjs(ijcs)
force2.f:        ijcent(ijpar)=-12
force2.f:        if(iatom.eq.jatom) ijcent(ijpar)=iatom
force2.f:          klcs=ijbl(kbl,klp)
force2.f:        do 300 ijpar=1,npij
force2.f:           klc=ijcent(ijpar)
force2.f:           klcent(ijpar)=klc
force2.f:      ijkl=0
force2.f:      do 400 ijpar=1,npij
force2.f:      ijc=ijcent(ijpar)
force2.f:      if(npklx.eq.0) npklend=ijpar
force2.f:      ijkl=ijkl+1
force2.f:      if(ijc.eq.klc) ipres(ijkl)=0
force2.f:      subroutine onecentx(inx_1,inx_2,npij,inx_3,inx_4,npkl,npklx,
force2.f:     *           ijbl_12,nbl2_ijd,
force2.f:     *           ijbl_34,nbl2_kld,
force2.f:     *           nijbeg,nijend,nklbeg,nklend,
force2.f:     *           ipres,ijcent,klcent)
force2.f:      dimension ijbl_12(nbl2_ijd,*)
force2.f:      dimension ijbl_34(nbl2_kld,*)
force2.f:      dimension ijcent(npij),klcent(npkl)
force2.f:      ijpar=0
force2.f:      do 100 ijp=nijbeg,nijend
force2.f:      ijpar=ijpar+1
force2.f:        ijcs=ijbl_12(ibl,ijp)
force2.f:        call get_ij_half(ijcs,ics,jcs)
force2.f:        ijcent(ijpar)=-12
force2.f:        if(iatom.eq.jatom) ijcent(ijpar)=iatom
force2.f:ccc   write(6,*)'ijcs=',ijcs,' ics,jcs=',ics,jcs,' iat,jat=',iatom,jatom
force2.f:          klcs=ijbl_34(kbl,klp)
force2.f:          call get_ij_half(klcs,kcs,lcs)
force2.f:        do 300 ijpar=1,npij
force2.f:           klc=ijcent(ijpar)
force2.f:           klcent(ijpar)=klc
force2.f:      ijkl=0
force2.f:      do 400 ijpar=1,npij
force2.f:      ijc=ijcent(ijpar)
force2.f:      if(npklx.eq.0) npklend=ijpar
force2.f:      ijkl=ijkl+1
force2.f:      if(ijc.eq.klc) ipres(ijkl)=0
force2.f:ccc   write(6,*)'ijkl=',ijkl,' ijp,klp=',ijpar,klpar,' ijc,klc=',ijc,klc
forces.f:      ijcf=0
forces.f:            ijcf=ijcf+1
forces.f:            ijne=iine+jnew
forces.f:            if(jnew.gt.inew) ijne=jnew*(jnew-1)/2+inew
forces.f:            den_sp(ijne)=den_lsh(ijcf)
forces.f:      do ij=1,ncf*(ncf+1)/2
forces.f:         den_lsh(ij)=den_sp(ij)
forces.f,v:      ijcf=0
forces.f,v:            ijcf=ijcf+1
forces.f,v:            ijne=iine+jnew
forces.f,v:            if(jnew.gt.inew) ijne=jnew*(jnew-1)/2+inew
forces.f,v:            den_sp(ijne)=den_lsh(ijcf)
forces.f,v:      do ij=1,ncf*(ncf+1)/2
forces.f,v:         den_lsh(ij)=den_sp(ij)
forces_mp2.f:C  Main routine for MP2-gradients.  The residia (Tij) in (virtual)
forces_mp2.f:C  get filenames for <Tij> <Kov> and <bins> files
forces_mp2.f:      filname1=scrfile(1:len)//'.Tij'
forces_mp2.f:      ndisk1 = 41        ! unit number for <Tij> file
forces_mp2.f:C  open the <Tij>, <Kov> and <bins> files
forces_mp2.f:      ittij=mataddr('Ttilda')
forces_mp2.f:      call matdef('Tij','q',nvir,nvir)
forces_mp2.f:      iatij=mataddr('Tij')
forces_mp2.f:     1              iprint, thresh,bl(iatij),bl(ittij),bl(ibuf),
forces_mp2.f:      call matrem('Tij')
forces_mp2.f:C  for each Tij we store 1 integral (no indices needed here)
forces_mp2.f:c  we have finished with the <Tij> file
forces_mp2.f:     1                    iprint, thresh, tij,    ttilda, ibuf,
forces_mp2.f:C    the Tij in virtual basis are on unit ndisk1
forces_mp2.f:C    ndisk1      unit for Tij an virtual basis
forces_mp2.f:C    tij         matrix of dimension nvir*nvir
forces_mp2.f:      dimension tij(*),ttilda(*),gradv(3,natoms)
forces_mp2.f:C    loop over pairs of occupied orbitals: ij
forces_mp2.f:      ij=0
forces_mp2.f:      NTij=0
forces_mp2.f:      NKij=0
forces_mp2.f:            ij=ij+1
forces_mp2.f:C  read Tij from disk convert to real and put into matrix Tij
forces_mp2.f:            read(ndisk1,rec=ij) i1,ibuf
forces_mp2.f:                  write(6,*) ' Threshold Tij-imov:',imov,' i1:',i1(imov)
forces_mp2.f:               Tij(imov)=xx
forces_mp2.f:            call matcopy('Tij','Ttilda')
forces_mp2.f:C     read virtual-occupied block of Kij for B1-terms
forces_mp2.f:            read(ndisk2,rec=ij) i1bin,lbuf
forces_mp2.f:cc        write(6,*) ' Threshold Kij - imov:',imov,' i1:',i1bin(imov,1)
forces_mp2.f:cc        write(6,*) ' Threshold Kij - imov:',imov,' i1:',i1bin(imov,2)
forces_mp2.f:            call matmmult('Tij','Ttilda','TT')
forces_mp2.f:            call matadd('TT','Tsum1')  !  Tsum1=sum Tij*Ttilda+
forces_mp2.f:               call matmmul2('Tij','Ttilda','TT','t','t','n')
forces_mp2.f:               call matadd('TT','Tsum1')  !  Tsum1=sum Tij*Ttilda+
forces_mp2.f:            call matmmult('Tij','evir','txx')
forces_mp2.f:               call matmmul2('Tij','evir','txx','t','n','n')
forces_mp2.f:C   have Tij(ia,ib) in virtual basis need Tmylam(i,j)
forces_mp2.f:C   ndisk1    unit for <Tij> in virtual MO basis
forces_mp2.f:C  reserve memory for one Tij
forces_mp2.f:C  This subroutine reads the files containing the Residua Tij in
forces_mp2.f:C  virtual basis, as one matrix Tij(ia,ib).  These are on files starting
forces_mp2.f:C  Tij(my,lam) is placed in a bin mylam as follows:
forces_mp2.f:C  Since the original Tij are read in Canonical order i.ge.j and
forces_mp2.f:C  ij=i*(i-1)/2+j each bin has 2*npairs position and
forces_mp2.f:C  integral T(my,lam) is put into the (1,ij) position of bin mylam
forces_mp2.f:C  integral T(lam,my) is put into the (2,ij) position of bin mylam
forces_mp2.f:C  the bins can normally only hold -lbin- ij values
forces_mp2.f:C    Tmylam(i,j) = ibins(1,ij)
forces_mp2.f:C    Tmylam(j,i) = ibins(2,ij)
forces_mp2.f:C  ndisk1     unit for <Tij> in virtual MO basis
forces_mp2.f:      ij=0
forces_mp2.f:      iijj=0
forces_mp2.f:      ij=ij+1
forces_mp2.f:      iijj=iijj+1
forces_mp2.f:      if(ij.gt.lbin) then
forces_mp2.f:        ij=1
forces_mp2.f:C  first read Tij in virtual basis and transform to AO basis
forces_mp2.f:      read(ndisk1,rec=iijj) int1,ibuf
forces_mp2.f:C  Tij in AO basis returned in jbuf as integer*4 words
forces_mp2.f:      ibins(1,ij,mylam)=jbuf(my,lam)
forces_mp2.f:      ibins(2,ij,mylam)=jbuf(lam,my)
forces_mp2.f:      i1bin(1,ij,mylam)=jnt1(my,lam)
forces_mp2.f:      i1bin(2,ij,mylam)=jnt1(lam,my)
forces_mp2.f:C     lbin        number of ij values per bin
forces_mp2.f:      ij=0
forces_mp2.f:      ij=ij+1
forces_mp2.f:      if(ij.gt.lbin) then
forces_mp2.f:        ij=1
forces_mp2.f:      If(int1(1,ij).eq.0) Then
forces_mp2.f:        xx = ibin(1,ij)*thresh
forces_mp2.f:      Else If(int1(1,ij).gt.0) Then
forces_mp2.f:        xx = ibin(1,ij)*thresh
forces_mp2.f:        xx = xx + SIGN(int1(1,ij)*dblcmp,xx)
forces_mp2.f:        xx = ibin(1,ij)*thresh*10.0d0**(-int1(1,ij))
forces_mp2.f:      If(int1(2,ij).eq.0) Then
forces_mp2.f:        xx = ibin(2,ij)*thresh
forces_mp2.f:      Else If(int1(2,ij).gt.0) Then
forces_mp2.f:        xx = ibin(2,ij)*thresh
forces_mp2.f:        xx = xx + SIGN(int1(2,ij)*dblcmp,xx)
forces_mp2.f:        xx = ibin(2,ij)*thresh*10.0d0**(-int1(2,ij))
forces_mp2.f:      ij=0
forces_mp2.f:      ij=ij+1
forces_mp2.f:      if(ij.gt.lbin) then
forces_mp2.f:        ij=1
forces_mp2.f:      If(int1(1,ij).eq.0) Then
forces_mp2.f:        xx = ibins(1,ij)*thresh
forces_mp2.f:      Else If(int1(1,ij).gt.0) Then
forces_mp2.f:        xx = ibins(1,ij)*thresh
forces_mp2.f:        xx = xx + SIGN(int1(1,ij)*dblcmp,xx)
forces_mp2.f:        xx = ibins(1,ij)*thresh*10.0d0**(-int1(1,ij))
forces_mp2.f:      If(int1(2,ij).eq.0) Then
forces_mp2.f:        xx = ibins(2,ij)*thresh
forces_mp2.f:      Else If(int1(2,ij).gt.0) Then
forces_mp2.f:        xx = ibins(2,ij)*thresh
forces_mp2.f:        xx = xx + SIGN(int1(2,ij)*dblcmp,xx)
forces_mp2.f:        xx = ibins(2,ij)*thresh*10.0d0**(-int1(2,ij))
forces_mp2.f:C    transforms one Tij originally in virtual MO basis to AO basis
forces_mp2.f:C    tmo   - array with Tij in MO basis
forces_mp2.f:C    tao   - Tij in AO basis
forces_mp2.f:C    ibuf  - Tij in MO basis as integer*4
forces_mp2.f:C    jbuf  - Tij in AO basis as integer*4
forces_mp2.f:C   A is now calculated by first sorting Tij(ab) to Tab(ij).  This
forces_mp2.f:C  reserve memory for one Tij
forces_mp2.f:      ij=0
forces_mp2.f:      ij=ij+1
forces_mp2.f:      if(ij.gt.lbin) then
forces_mp2.f:        ij=1
forces_mp2.f:      If(i1bin(1,ij).eq.0) Then
forces_mp2.f:        xx = ibins(1,ij)*thresh
forces_mp2.f:      Else If(i1bin(1,ij).gt.0) Then
forces_mp2.f:        xx = ibins(1,ij)*thresh
forces_mp2.f:        xx = xx + SIGN(i1bin(1,ij)*dblcmp,xx)
forces_mp2.f:        xx = ibins(1,ij)*thresh*10.0d0**(-i1bin(1,ij))
forces_mp2.f:      If(i1bin(2,ij).eq.0) Then
forces_mp2.f:        xx = ibins(2,ij)*thresh
forces_mp2.f:      Else If(i1bin(2,ij).gt.0) Then
forces_mp2.f:        xx = ibins(2,ij)*thresh
forces_mp2.f:        xx = xx + SIGN(i1bin(2,ij)*dblcmp,xx)
forces_mp2.f:        xx = ibins(2,ij)*thresh*10.0d0**(-i1bin(2,ij))
forces_mp2.f:C  The residua are on disk in virtual basis, as one matrix Tij(ia,ib)
forces_mp2.f:C  Tij(a,b) is placed in a bin iab as follows:
forces_mp2.f:C     integral T(a,b) is put into the (1,ij) position of bin IAB
forces_mp2.f:C     integral T(b,a) is put into the (2,ij) position of bin IAB
forces_mp2.f:C  the bins can normally only hold -lbin- ij values
forces_mp2.f:C     Tab(i,j) = ibins(1,ij)
forces_mp2.f:C     Tab(j,i) = ibins(2,ij)
forces_mp2.f:C     INPUT     Tij in virtual basis on ndisk1
forces_mp2.f:C     while Tij will be used later and must be kept
forces_mp2.f:C     ndisk1     unit number for Tij in virtual basis
forces_mp2.f:      ij=0
forces_mp2.f:      iijj=0
forces_mp2.f:            ij=ij+1
forces_mp2.f:            iijj=iijj+1
forces_mp2.f:            if (ij.gt.lbin) then
forces_mp2.f:               ij=1
forces_mp2.f:C  read Tij in virtual basis and transform to AO basis
forces_mp2.f:            read(ndisk1,rec=iijj) i1,ibuf
forces_mp2.f:                  ibins(1,ij,iab)=ibuf(ia,ib)
forces_mp2.f:                  ibins(2,ij,iab)=ibuf(ib,ia)
forces_mp2.f:                  i1bin(1,ij,iab)=i1(ia,ib)
forces_mp2.f:                  i1bin(2,ij,iab)=i1(ib,ia)
forces_mp2.f:      subroutine prinTij(jbuf,TT,nvir,thresh)
forces_OLD.f:      ijcf=0
forces_OLD.f:            ijcf=ijcf+1
forces_OLD.f:            ijne=iine+jnew
forces_OLD.f:            if(jnew.gt.inew) ijne=jnew*(jnew-1)/2+inew
forces_OLD.f:            den_sp(ijne)=den_lsh(ijcf)
forces_OLD.f:      do ij=1,ncf*(ncf+1)/2
forces_OLD.f:         den_lsh(ij)=den_sp(ij)
ftc_energy.f:            ijxmin=max(ixmin,jxmin)
ftc_energy.f:            ijymin=max(iymin,jymin)
ftc_energy.f:            ijzmin=max(izmin,jzmin)
ftc_energy.f:            ijxmax=min(ixmax,jxmax)
ftc_energy.f:            ijymax=min(iymax,jymax)
ftc_energy.f:            ijzmax=min(izmax,jzmax)
ftc_energy.f:            ijyindexmin=iyindexmin+ijymin-iymin
ftc_energy.f:            ijyindexmax=iyindexmax-iymax+ijymax
ftc_energy.f:            jydmin=ijyindexmin-(jymin-iyregmin+1)
ftc_energy.f:            iydmin=ijyindexmin-(iymin-iyregmin+1)
ftc_energy.f:            if((ijxmin .eq. ijxmax) .and. (ijymin .lt. ijymax) .and.
ftc_energy.f:     &         (ijzmin .lt. ijzmax)) then
ftc_energy.f:                  ij = ii+jfunc
ftc_energy.f:                  ij = (jfunc*(jfunc-1))/2 + ifunc
ftc_energy.f:                denspart(index)=dens(ij)
ftc_energy.f:                ipyexp=ipyexpstore(jsh)+(ijymin-jyminold)
ftc_energy.f:                ipzexp=ipzexpstore(jsh)+(ijzmin-jzmin)
ftc_energy.f:                npwyexp=npwy-(ijymin-jyminold)
ftc_energy.f:                npwzexp=npwz-(ijzmin-jzmin)
ftc_energy.f:     &    ijyindexmin,   ijyindexmax,   ijzmin,        ijzmax,
ftc_energy.f:          ijxmin=max(ixreg,jxmin,icorexmin2)
ftc_energy.f:          ijymin=max(iyregmin,jymin,icoreymin2)
ftc_energy.f:          ijzmin=max(jzmin,icorezmin2)
ftc_energy.f:          ijxmax=min(ixreg,jxmax,icorexmax2)
ftc_energy.f:          ijymax=min(iyregmax,jymax,icoreymax2)
ftc_energy.f:          ijzmax=min(jzmax,icorezmax2)
ftc_energy.f:          ijxmin=max(ixreg,jxmin)
ftc_energy.f:          ijymin=max(iyregmin,jymin)
ftc_energy.f:          ijzmin=jzmin
ftc_energy.f:          ijxmax=min(ixreg,jxmax)
ftc_energy.f:          ijymax=min(iyregmax,jymax)
ftc_energy.f:          ijzmax=jzmax
ftc_energy.f:        if((ijxmin .eq. ijxmax) .and. (ijymin .lt. ijymax) .and.
ftc_energy.f:     &     (ijzmin .lt. ijzmax)) then
ftc_energy.f:          ijyindexmin=1+ijymin-iyregmin
ftc_energy.f:          ijyindexmax=npwy-iyregmax+ijymax
ftc_energy.f:c Now ijxmin=ijxmax=ixreg
ftc_energy.f:              ij = ii + jfunc
ftc_energy.f:              ij = (jfunc*(jfunc-1))/2 + ifunc
ftc_energy.f:            denspart(index)=dens(ij)
ftc_energy.f:            ipyexp=ipyexpstore(jsh)+(ijymin-jyminold)
ftc_energy.f:            ipzexp=ipzexpstore(jsh)+(ijzmin-jzmin)
ftc_energy.f:            npwyexp=ijyindexmax-ijyindexmin+1
ftc_energy.f:            npwzexp=ijzmax-ijzmin+1
ftc_energy.f:     &    icorezmin1, icorezmax1,       ijzmin,    ijzmax,
ftc_energy.f:     &    ijymin,     ijymax)
ftc_energy.f:     &    Px,         Py,         Pz,         fockcontr,  ijyindexmin,
ftc_energy.f:     &    ijyindexmax,ijzmin,     ijzmax,     Lxmin,      Lymin,
ftc_energy.f:     &         Px,               Py,      Pz,fockcontr,     ijyindexmin,
ftc_energy.f:     &ijyindexmax,           ijzmin,  ijzmax,    Lxmin,           Lymin,
ftc_energy.f:                ij = ii + jfunc
ftc_energy.f:                ij = (jfunc*(jfunc-1))/2 + ifunc
ftc_energy.f:              Fockmx(ij)=Fockmx(ij) + value_fock
ftc_energy.f:            ijxmin=max(ixmin,jxmin)
ftc_energy.f:            ijymin=max(iymin,jymin)
ftc_energy.f:            ijzmin=max(izmin,jzmin)
ftc_energy.f:            ijxmax=min(ixmax,jxmax)
ftc_energy.f:            ijymax=min(iymax,jymax)
ftc_energy.f:            ijzmax=min(izmax,jzmax)
ftc_energy.f:            ijyindexmin=iyindexmin+ijymin-iymin
ftc_energy.f:            ijyindexmax=iyindexmax-iymax+ijymax
ftc_energy.f:            jydmin=ijyindexmin-(jymin-iyregmin+1)
ftc_energy.f:            iydmin=ijyindexmin-(iymin-iyregmin+1)
ftc_energy.f:            if((ijxmin .eq. ijxmax) .and. (ijymin .lt. ijymax) .and.
ftc_energy.f:     &        (ijzmin .lt. ijzmax)) then
ftc_energy.f:                ipyexp=ipyexpstore(jsh)+(ijymin-jyminold)
ftc_energy.f:                ipzexp=ipzexpstore(jsh)+(ijzmin-jzmin)
ftc_energy.f:                npwyexp=npwy-(ijymin-jyminold)
ftc_energy.f:                npwzexp=npwz-(ijzmin-jzmin)
ftc_energy.f:     &    Px,         Py,         Pz,      fockcontr, ijyindexmin,
ftc_energy.f:     &    ijyindexmax,ijzmin,     ijzmax,  Lxmin,     Lymin,
ftc_energy.f:                    ij = ii + jfunc
ftc_energy.f:                    ij = (jfunc*(jfunc-1))/2 + ifunc
ftc_energy.f:                  Fockmx(ij) = Fockmx(ij) + value_Fock
ftc_energyV.f:c g(i)*summ{dij*g(j)} PRODUCT IN 2D AT A GIVEN ix GRIDPOINT.
ftc_fft.f:            idij = is
ftc_fft.f:              idij = idij+2
ftc_fft.f:                c1(i-1,k,j)= wa(idij-1)*ch(i-1,k,j)-wa(idij)*ch(i,k,j)
ftc_fft.f:                c1(i,k,j)  = wa(idij-1)*ch(i,k,j)  +wa(idij)*ch(i-1,k,j)
ftc_fft.f:              idij = is
ftc_fft.f:                idij = idij+2
ftc_fft.f:                c1(i-1,k,j)= wa(idij-1)*ch(i-1,k,j)-wa(idij)*ch(i,k,j)
ftc_fft.f:                c1(i,k,j)  = wa(idij-1)*ch(i,k,j)  +wa(idij)*ch(i-1,k,j)
ftc_fft.f:            idij = is
ftc_fft.f:              idij = idij+2
ftc_fft.f:                ch(i-1,k,j)= wa(idij-1)*c1(i-1,k,j)+wa(idij)*c1(i,k,j)
ftc_fft.f:                ch(i,k,j)  = wa(idij-1)*c1(i,k,j)  -wa(idij)*c1(i-1,k,j)
ftc_fft.f:              idij = is
ftc_fft.f:                idij = idij+2
ftc_fft.f:                ch(i-1,k,j)= wa(idij-1)*c1(i-1,k,j)+wa(idij)*c1(i,k,j)
ftc_fft.f:                ch(i,k,j)  = wa(idij-1)*c1(i,k,j)  -wa(idij)*c1(i-1,k,j)
ftc_fft.f:            idij = is
ftc_fft.f:              idij = idij+2
ftc_fft.f:              waij=wa(idij)
ftc_fft.f:              waij1=wa(idij-1)
ftc_fft.f:                  c1(m,im1,k,j) = waij1 * ch(m,im1,k,j)
ftc_fft.f:     &                           -waij  * ch(m,i,k,j)
ftc_fft.f:                  c1(m,i,k,j)   = waij1 * ch(m,i,k,j)
ftc_fft.f:     &                           +waij  * ch(m,im1,k,j)
ftc_fft.f:              idij = is
ftc_fft.f:                idij = idij+2
ftc_fft.f:                waij=wa(idij)
ftc_fft.f:                waij1=wa(idij-1)
ftc_fft.f:                  c1(m,im1,k,j) = waij1 * ch(m,im1,k,j)
ftc_fft.f:     &                           -waij  * ch(m,i,k,j)
ftc_fft.f:                  c1(m,i,k,j)   = waij1 * ch(m,i,k,j)
ftc_fft.f:     &                           +waij  * ch(m,im1,k,j)
ftc_fft.f:            idij = is
ftc_fft.f:              idij = idij+2
ftc_fft.f:              waij=wa(idij)
ftc_fft.f:              waij1=wa(idij-1)
ftc_fft.f:                  ch(m,im1,k,j) = waij1*c1(m,im1,k,j)+waij*c1(m,i,k,j)
ftc_fft.f:                  ch(m,i,k,j) = waij1*c1(m,i,k,j)-waij*c1(m,im1,k,j)
ftc_fft.f:              idij = is
ftc_fft.f:                idij = idij+2
ftc_fft.f:                waij=wa(idij)
ftc_fft.f:                waij1=wa(idij-1)
ftc_fft.f:                  ch(m,im1,k,j) = waij1*c1(m,im1,k,j)+waij*c1(m,i,k,j)
ftc_fft.f:                  ch(m,i,k,j) = waij1*c1(m,i,k,j)-waij*c1(m,im1,k,j)
ftc_fft.f:          idij = 0
ftc_fft.f:            idij = idij+2
ftc_fft.f:              idij = idij+2
ftc_fft.f:                c1(i-1,k,j)= wa(idij-1)*ch(i-1,k,j)-wa(idij)*ch(i,k,j)
ftc_fft.f:                c1(i,k,j)  = wa(idij-1)*ch(i,k,j)  +wa(idij)*ch(i-1,k,j)
ftc_fft.f:              idij = idj
ftc_fft.f:                idij = idij+2
ftc_fft.f:                c1(i-1,k,j)= wa(idij-1)*ch(i-1,k,j)-wa(idij)*ch(i,k,j)
ftc_fft.f:                c1(i,k,j)  = wa(idij-1)*ch(i,k,j)  +wa(idij)*ch(i-1,k,j)
ftc_fft.f:          idij = 0
ftc_fft.f:            idij = idij+2
ftc_fft.f:              idij = idij+2
ftc_fft.f:                c1(i-1,k,j)= wa(idij-1)*ch(i-1,k,j)+wa(idij)*ch(i,k,j)
ftc_fft.f:                c1(i,k,j)  = wa(idij-1)*ch(i,k,j)  -wa(idij)*ch(i-1,k,j)
ftc_fft.f:              idij = idj
ftc_fft.f:                idij = idij+2
ftc_fft.f:                c1(i-1,k,j)= wa(idij-1)*ch(i-1,k,j)+wa(idij)*ch(i,k,j)
ftc_fft.f:                c1(i,k,j)  = wa(idij-1)*ch(i,k,j)  -wa(idij)*ch(i-1,k,j)
ftc_fft.f:          idij = 0
ftc_fft.f:            idij = idij+2
ftc_fft.f:              idij = idij+2
ftc_fft.f:              waidij=wa(idij)
ftc_fft.f:              waidij1=wa(idij-1)
ftc_fft.f:                  c1(1,m,i,k,j) = waidij1 * ch(1,m,i,k,j)
ftc_fft.f:     &                           -waidij   * ch(2,m,i,k,j)
ftc_fft.f:                  c1(2,m,i,k,j) = waidij1 * ch(2,m,i,k,j)
ftc_fft.f:     &                           +waidij   * ch(1,m,i,k,j)
ftc_fft.f:              idij = idj
ftc_fft.f:                idij = idij+2
ftc_fft.f:                waidij=wa(idij)
ftc_fft.f:                waidij1=wa(idij-1)
ftc_fft.f:                  c1(1,m,i,k,j) = waidij1 * ch(1,m,i,k,j)
ftc_fft.f:     &                           -waidij   * ch(2,m,i,k,j)
ftc_fft.f:                  c1(2,m,i,k,j) = waidij1 * ch(2,m,i,k,j)
ftc_fft.f:     &                           +waidij   * ch(1,m,i,k,j)
ftc_fft.f:          idij = 0
ftc_fft.f:            idij = idij+2
ftc_fft.f:              idij = idij+2
ftc_fft.f:              waidij=wa(idij)
ftc_fft.f:              waidij1=wa(idij-1)
ftc_fft.f:                  c1(1,m,i,k,j) = waidij1 * ch(1,m,i,k,j)
ftc_fft.f:     &                           +waidij   * ch(2,m,i,k,j)
ftc_fft.f:                  c1(2,m,i,k,j) = waidij1 * ch(2,m,i,k,j)
ftc_fft.f:     &                           -waidij   * ch(1,m,i,k,j)
ftc_fft.f:              idij = idj
ftc_fft.f:                idij = idij+2
ftc_fft.f:                waidij=wa(idij)
ftc_fft.f:                waidij1=wa(idij-1)
ftc_fft.f:                  c1(1,m,i,k,j) = waidij1 * ch(1,m,i,k,j)
ftc_fft.f:     &                           +waidij   * ch(2,m,i,k,j)
ftc_fft.f:                  c1(2,m,i,k,j) = waidij1 * ch(2,m,i,k,j)
ftc_fft.f:     &                           -waidij   * ch(1,m,i,k,j)
ftc_forces.f:            ijxmin=max(ixmin,jxmin)
ftc_forces.f:            ijymin=max(iymin,jymin)
ftc_forces.f:            ijzmin=max(izmin,jzmin)
ftc_forces.f:            ijxmax=min(ixmax,jxmax)
ftc_forces.f:            ijymax=min(iymax,jymax)
ftc_forces.f:            ijzmax=min(izmax,jzmax)
ftc_forces.f:            ijyindexmin=iyindexmin+ijymin-iymin
ftc_forces.f:            ijyindexmax=iyindexmax-iymax+ijymax
ftc_forces.f:            jydmin=ijyindexmin-(jymin-iyregmin+1)
ftc_forces.f:            iydmin=ijyindexmin-(iymin-iyregmin+1)
ftc_forces.f:            if((ijxmin .eq. ijxmax) .and. (ijymin .le. ijymax) .and.
ftc_forces.f:     &         (ijzmin .lt. ijzmax)) then
ftc_forces.f:c Now ijxmin=ijxmax=ixreg
ftc_forces.f:                ipyexp=ipyexpstore(jsh)+(ijymin-jyminold)
ftc_forces.f:                ipzexp=ipzexpstore(jsh)+(ijzmin-jzmin)
ftc_forces.f:                npwyexp=npwy-(ijymin-jyminold)
ftc_forces.f:                npwzexp=npwz-(ijzmin-jzmin)
ftc_forces.f:     &    ijyindexmin,   ijyindexmax,   ijzmin,        ijzmax,
ftc_forces.f:          ijxmin=max(ixreg,jxmin,icorexmin2)
ftc_forces.f:          ijymin=max(iyregmin,jymin,icoreymin2)
ftc_forces.f:          ijzmin=max(jzmin,icorezmin2)
ftc_forces.f:          ijxmax=min(ixreg,jxmax,icorexmax2)
ftc_forces.f:          ijymax=min(iyregmax,jymax,icoreymax2)
ftc_forces.f:          ijzmax=min(jzmax,icorezmax2)
ftc_forces.f:          ijxmin=max(ixreg,jxmin)
ftc_forces.f:          ijymin=max(iyregmin,jymin)
ftc_forces.f:          ijzmin=jzmin
ftc_forces.f:          ijxmax=min(ixreg,jxmax)
ftc_forces.f:          ijymax=min(iyregmax,jymax)
ftc_forces.f:          ijzmax=jzmax
ftc_forces.f:        if((ijxmin .eq. ijxmax) .and. (ijymin .le. ijymax) .and.
ftc_forces.f:     &     (ijzmin .le. ijzmax)) then
ftc_forces.f:          ijyindexmin=1+ijymin-iyregmin
ftc_forces.f:          ijyindexmax=npwy-iyregmax+ijymax
ftc_forces.f:c Now ijxmin=ijxmax=ixreg
ftc_forces.f:            ipyexp=ipyexpstore(jsh)+(ijymin-jyminold)
ftc_forces.f:            ipzexp=ipzexpstore(jsh)+(ijzmin-jzmin)
ftc_forces.f:            npwyexp=ijyindexmax-ijyindexmin+1
ftc_forces.f:            npwzexp=ijzmax-ijzmin+1
ftc_forces.f:     &    ijzmin,        ijzmax,        ijymin,        ijymax)
ftc_forces.f:     &    ijyindexmin,   ijyindexmax,   ijzmin,        ijzmax,
ftc_forces.f:     &    ijyindexmin,   ijyindexmax,   ijzmin,        ijzmax,
ftc_forces.f:          ijxmin=max(ixreg,jxmin,icorexmin2)
ftc_forces.f:          ijymin=max(iyregmin,jymin,icoreymin2)
ftc_forces.f:          ijzmin=max(jzmin,icorezmin2)
ftc_forces.f:          ijxmax=min(ixreg,jxmax,icorexmax2)
ftc_forces.f:          ijymax=min(iyregmax,jymax,icoreymax2)
ftc_forces.f:          ijzmax=min(jzmax,icorezmax2)
ftc_forces.f:          ijxmin=max(ixreg,jxmin)
ftc_forces.f:          ijymin=max(iyregmin,jymin)
ftc_forces.f:          ijzmin=jzmin
ftc_forces.f:          ijxmax=min(ixreg,jxmax)
ftc_forces.f:          ijymax=min(iyregmax,jymax)
ftc_forces.f:          ijzmax=jzmax
ftc_forces.f:        if((ijxmin .eq. ijxmax) .and. (ijymin .le. ijymax) .and.
ftc_forces.f:     &     (ijzmin .le. ijzmax)) then
ftc_forces.f:          ijyindexmin=1+ijymin-iyregmin
ftc_forces.f:          ijyindexmax=npwy-iyregmax+ijymax
ftc_forces.f:c Now ijxmin=ijxmax=ixreg
ftc_forces.f:          do iy=ijyindexmin,ijyindexmax
ftc_forces.f:            do iz=ijzmin,ijzmax
ftc_forces.f:            ipyexp=ipyexpstore(jsh)+(ijymin-jyminold)
ftc_forces.f:            ipzexp=ipzexpstore(jsh)+(ijzmin-jzmin)
ftc_forces.f:            npwyexp=ijyindexmax-ijyindexmin+1
ftc_forces.f:            npwzexp=ijzmax-ijzmin+1
ftc_forces.f:     &    ijzmin,        ijzmax,        ijymin,        ijymax)
ftc_forces.f:     &    ijyindexmin,   ijyindexmax,   ijzmin,        ijzmax,
ftc_forces.f:     &    ijyindexmin,   ijyindexmax,   ijzmin,        ijzmax,
ftc_forces.f:          do iy=ijyindexmin,ijyindexmax
ftc_forces.f:            do iz=ijzmin,ijzmax
ftc_multipoles.f:                  indxij=indxi+jfunc
ftc_multipoles.f:                  Fockmx(indxij)=Fockmx(indxij)+
ftc_multipoles.f:                  indxij=indxi+jfunc*(jfunc-1)/2
ftc_multipoles.f:                  Fockmx(indxij)=Fockmx(indxij)+
ftc_multipoles.f:                  indxij=indxi+jfunc
ftc_multipoles.f:                  Fockmx(indxij)=Fockmx(indxij)+
ftc_multipoles.f:                  indxij=indxi+jfunc*(jfunc-1)/2
ftc_multipoles.f:                  Fockmx(indxij)=Fockmx(indxij)+
ftc_multipoles.f:          ijump=1
ftc_multipoles.f:          ijump=0
ftc_multipoles.f:          ijump=0
ftc_multipoles.f:        indexip=indexip+ijump !starting from 2 for d and from 1 for f
gdftd3.f:      subroutine grdc6iji(max_elem,maxc,n,dum,cn,
gdftd3.f:      subroutine grdc6ijk(max_elem,maxc,n,dum,cn,
gdftd3.f:      subroutine ncoord12(natoms,rcov,iz,xyz,ija,cn)
gdftd3.f:      integer iz(*),natoms,i,ija(2)
gdftd3.f:      i=ija(jjj)
geometry.f:c     ij = nupair-1
geometry.f:      ij = 0
geometry.f:      ij=ij+1
geometry.f:c     bl(ij) = meqatm(i,j)
geometry.f:      call int_to_bl( bl(nupair), ij, meqatm(i,j) )
get_d1nmr.f:             xij=xi-xj
get_d1nmr.f:             yij=yi-yj
get_d1nmr.f:             zij=zi-zj
get_d1nmr.f:             xfactr=yij*trans(3) - zij*trans(2)
get_d1nmr.f:             yfactr=zij*trans(1) - xij*trans(3)
get_d1nmr.f:             zfactr=xij*trans(2) - yij*trans(1)
get_d1nmr.f:               ij=ii+jff
get_d1nmr.f:            dn1(ij,1)= dn1(ij,1)-den(ij)*xfactr
get_d1nmr.f:            dn1(ij,2)= dn1(ij,2)-den(ij)*yfactr
get_d1nmr.f:            dn1(ij,3)= dn1(ij,3)-den(ij)*zfactr
get_d1nmr.f:      ij=0
get_d1nmr.f:          ij=ij+1
get_d1nmr.f:          b(ij)=a(i,j)-a(j,i)
get_d1nmr.f:      ij=0
get_d1nmr.f:            ij=ij+1
get_d1nmr.f:            d1c(ij)=d1c(ij)+w1(j,i)
get_d1w1.f:            ij=ii+j
get_d1w1.f:            if(j.gt.i) ij=jj+i
get_d1w1.f:            wens1(ij     )=xdfd
get_d1w1.f:            wens1(ij+ntri)=ydfd
get_d1w1.f:            wens1(ij+ntr2)=zdfd
get_d1w1.f:            ij=ii+j
get_d1w1.f:            if(j.gt.i) ij=jj+i
get_d1w1.f:            wens1(ij     )=xdfd
get_d1w1.f:c  form, Xmat(ij)=X1(i,j) where (ij)=i*(i-1)/2+j, i>=j, X is symmetrical
get_d1w1.f:      call absmax(nat29,dhess,ij_max,hij_max)
get_d1w1.f:      ij=0
get_d1w1.f:                 ij=ij+1
get_d1w1.f:                 if(ij.eq.ij_max) then
get_d1w1.f:c maximum residuum in HESSian is hij_max
get_d1w1.f:      write(iout,201) icooh,jcooh, hij_max,iatH,jatH
get_d1w1.f:            ij=ii+j
get_d1w1.f:            if(j.gt.i) ij=lind(j)+i
get_d1w1.f:            w1(ij,1)=work(i,j,1)+work(j,i,1)
get_d1w1.f:            w1(ij,2)=work(i,j,2)+work(j,i,2)
get_d1w1.f:            w1(ij,3)=work(i,j,3)+work(j,i,3)
get_d1w1.f:      ij=0
get_d1w1.f:            ij=ij+1
get_d1w1.f:            w1(ij,1)=w1(ij,1)+dfxd
get_d1w1.f:            w1(ij,2)=w1(ij,2)+dfyd
get_d1w1.f:            w1(ij,3)=w1(ij,3)+dfzd
get_d1w1.f:               ij=ii+j
get_d1w1.f:               ij=jj+i
get_d1w1.f:            fds1(i,j,1)=f1(ij,1)-sum1
get_d1w1.f:            fds1(i,j,2)=f1(ij,2)-sum2
get_d1w1.f:            fds1(i,j,3)=f1(ij,3)-sum3
get_d1w1_uhf.f:           call getint_2(4*iblstore , ijklsiz) ! I*2
get_d1w1_uhf.f:           call getint_2(4*iqstore  , ijkllab) ! I*2
get_d1w1_uhf.f:     $        bl(ixint4),  bl(ixint8), bl(ijkllab),bl(ijklsiz),
get_d1w1_uhf.f:     $        bl(ixint4),  bl(ixint8), bl(ijkllab),bl(ijklsiz),
get_d1w1_uhf.f:     $        bl(ijkllab), bl(ijklsiz),bl(nquarts),iqstore,
get_d1w1_uhf.f:     $        bl(ijkllab), bl(ijklsiz),bl(nquarts),iqstore,
get_d1w1_uhf.f:     *                          map_fs,ncs,nbls,ngcd,lnijkl,
get_d1w1_uhf.f:      dimension buf(nbls,lnijkl,ngcd)
get_d1w1_uhf.f:      do 100 ijklp=1,nbls
get_d1w1_uhf.f:        ngcq=lgenct(ijklp)
get_d1w1_uhf.f:           icff=labels(1,iqu,ijklp)
get_d1w1_uhf.f:           jcff=labels(2,iqu,ijklp)
get_d1w1_uhf.f:           kcff=labels(3,iqu,ijklp)
get_d1w1_uhf.f:           lcff=labels(4,iqu,ijklp)
get_d1w1_uhf.f:           dij=densp(ics,jcs)
get_d1w1_uhf.f:           dmax=max(4.d0*dij,4.d0*dkl,dik,dil,djk,djl)
get_d1w1_uhf.f:c          dmax=max(16.d0*dij,16.d0*dkl,dik,dil,djk,djl)
get_d1w1_uhf.f:c  Indices and integrals in the quartet ijkl :
get_d1w1_uhf.f:c         output : ijf & density elements xij,yij,zij
get_d1w1_uhf.f:          xint0=buf(ijklp,integ,iqu)
get_d1w1_uhf.f:            ijf = ii+jcf
get_d1w1_uhf.f:            ijf = jj+icf
get_d1w1_uhf.f:             fockA(icoordiat,ijf)=fockA(icoordiat,ijf) +
get_d1w1_uhf.f:             fockB(icoordiat,ijf)=fockB(icoordiat,ijf) +
get_d1w1_uhf.f:     $       (densA(icoordiat,ijf)+densB(icoordiat,ijf))*xint2
get_d1w1_uhf.f:     $       (densA(icoordiat,ijf)+densB(icoordiat,ijf))*xint2
get_d1w1_uhf.f:     $                          lnijkl,thres1,labels,length,lgenct)
get_d1w1_uhf.f:      dimension buf(nbls,lnijkl,ngcd)
get_d1w1_uhf.f:      do 100 ijklp=1,nbls
get_d1w1_uhf.f:        ngcq=lgenct(ijklp)
get_d1w1_uhf.f:           icff=labels(1,iqu,ijklp)
get_d1w1_uhf.f:           jcff=labels(2,iqu,ijklp)
get_d1w1_uhf.f:           kcff=labels(3,iqu,ijklp)
get_d1w1_uhf.f:           lcff=labels(4,iqu,ijklp)
get_d1w1_uhf.f:           dij=densp(ics,jcs)
get_d1w1_uhf.f:           dmax=max(4.d0*dij,4.d0*dkl,dik,dil,djk,djl)
get_d1w1_uhf.f:c          dmax=max(16.d0*dij,16.d0*dkl,dik,dil,djk,djl)
get_d1w1_uhf.f:c  Indices and integrals in the quartet ijkl :
get_d1w1_uhf.f:          xint0=buf(ijklp,integ,iqu)
get_d1w1_uhf.f:              ijf = ii1+jc1
get_d1w1_uhf.f:              ijf = jj1+ic1
get_d1w1_uhf.f:             fockA(icoordiat,ijf)=fockA(icoordiat,ijf) +
get_d1w1_uhf.f:             fockB(icoordiat,ijf)=fockB(icoordiat,ijf) +
get_d1w1_uhf.f:     $          (densA(icoordiat,ijf)+densB(icoordiat,ijf))*xint2
get_d1w1_uhf.f:     $          (densA(icoordiat,ijf)+densB(icoordiat,ijf))*xint2
get_d1w1_uhf.f:            ijf = ii+jcf
get_d1w1_uhf.f:            ijf = jj+icf
get_d1w1_uhf.f:             fockA(icoordiat,ijf)=fockA(icoordiat,ijf) +
get_d1w1_uhf.f:             fockB(icoordiat,ijf)=fockB(icoordiat,ijf) +
get_d1w1_uhf.f:     $         (densA(icoordiat,ijf)+densB(icoordiat,ijf))*xcoul
get_d1w1_uhf.f:     $         (densA(icoordiat,ijf)+densB(icoordiat,ijf))*xcoul
get_d1w1_uhf.f:     *                           map_fs,ncs,nbls,ngcd,lnijkl,
get_d1w1_uhf.f:      dimension buf(nbls,lnijkl,ngcd)
get_d1w1_uhf.f:      do 100 ijklp=1,nbls
get_d1w1_uhf.f:        ngcq=lgenct(ijklp)
get_d1w1_uhf.f:           icff=labels(1,iqu,ijklp)
get_d1w1_uhf.f:           jcff=labels(2,iqu,ijklp)
get_d1w1_uhf.f:           kcff=labels(3,iqu,ijklp)
get_d1w1_uhf.f:           lcff=labels(4,iqu,ijklp)
get_d1w1_uhf.f:           dij=densp(ics,jcs)
get_d1w1_uhf.f:           dmax=4.0d0*max(dij,dkl)
get_d1w1_uhf.f:c          dmax=4.0d0*Sqrt(max(dij,dkl))
get_d1w1_uhf.f:c  Indices and integrals in the quartet ijkl :
get_d1w1_uhf.f:c         output : ijf & density elements xij,yij,zij
get_d1w1_uhf.f:          xint0=buf(ijklp,integ,iqu)
get_d1w1_uhf.f:            ijf = ii+jcf
get_d1w1_uhf.f:            ijf = jj+icf
get_d1w1_uhf.f:             fockA(icoordiat,ijf)=fockA(icoordiat,ijf) +
get_d1w1_uhf.f:             fockB(icoordiat,ijf)=fockB(icoordiat,ijf) +
get_d1w1_uhf.f:     $         (densA(icoordiat,ijf)+densB(icoordiat,ijf))*xint2
get_d1w1_uhf.f:     $         (densA(icoordiat,ijf)+densB(icoordiat,ijf))*xint2
get_d1w1_uhf.f:     $                           densp,map_fs,ncs,nbls,ngcd,lnijkl,
get_d1w1_uhf.f:      dimension buf(nbls,lnijkl,ngcd)
get_d1w1_uhf.f:      do 100 ijklp=1,nbls
get_d1w1_uhf.f:        ngcq=lgenct(ijklp)
get_d1w1_uhf.f:           icff=labels(1,iqu,ijklp)
get_d1w1_uhf.f:           jcff=labels(2,iqu,ijklp)
get_d1w1_uhf.f:           kcff=labels(3,iqu,ijklp)
get_d1w1_uhf.f:           lcff=labels(4,iqu,ijklp)
get_d1w1_uhf.f:           dij=densp(ics,jcs)
get_d1w1_uhf.f:           dmax=4.0d0*max(dij,dkl)
get_d1w1_uhf.f:c          dmax=4.0d0*Sqrt(max(dij,dkl))
get_d1w1_uhf.f:c  Indices and integrals in the quartet ijkl :
get_d1w1_uhf.f:          xint0=buf(ijklp,integ,iqu)
get_d1w1_uhf.f:            ijf = ii1+jc1
get_d1w1_uhf.f:            ijf = jj1+ic1
get_d1w1_uhf.f:             fockA(icoordiat,ijf)=fockA(icoordiat,ijf) +
get_d1w1_uhf.f:             fockB(icoordiat,ijf)=fockB(icoordiat,ijf) +
get_d1w1_uhf.f:     $         (densA(icoordiat,ijf)+densB(icoordiat,ijf))*xint2
get_d1w1_uhf.f:     $         (densA(icoordiat,ijf)+densB(icoordiat,ijf))*xint2
get_d1w1_uhf.f:            ijf = ii+jcf
get_d1w1_uhf.f:            ijf = jj+icf
get_d1w1_uhf.f:             fockA(icoordiat,ijf)=fockA(icoordiat,ijf) +
get_d1w1_uhf.f:             fockB(icoordiat,ijf)=fockB(icoordiat,ijf) +
get_d1w1_uhf.f:     $         (densA(icoordiat,ijf)+densB(icoordiat,ijf))*xcoul
get_d1w1_uhf.f:     $         (densA(icoordiat,ijf)+densB(icoordiat,ijf))*xcoul
get_d1w1_uhf.f:      ij=0
get_d1w1_uhf.f:            ij=ij+1
get_d1w1_uhf.f:            hfc(ij)     =hfc(ij)      - sux
get_d1w1_uhf.f:            hfc(ntri+ij)=hfc(ntri+ij) - suy
get_d1w1_uhf.f:            hfc(ntr2+ij)=hfc(ntr2+ij) - suz
get_d1w1_uhf.f:      ij=0
get_d1w1_uhf.f:            ij=ij+1
get_d1w1_uhf.f:            hfc(ij)     =hfc(ij)      -xlvsh*sux
get_d1w1_uhf.f:            hfc(ntri+ij)=hfc(ntri+ij) -xlvsh*suy
get_d1w1_uhf.f:            hfc(ntr2+ij)=hfc(ntr2+ij) -xlvsh*suz
get_d1w1_uhf.f:      ijklp=0
get_d1w1_uhf.f:          ijklp=ijklp+1
get_d1w1_uhf.f:          icff=ilab(ijklp)
get_d1w1_uhf.f:          jcff=jlab(ijklp)
get_d1w1_uhf.f:          kcff=klab(ijklp)
get_d1w1_uhf.f:          lcff=llab(ijklp)
get_d1w1_uhf.f:          dij=densp(ics,jcs)
get_d1w1_uhf.f:          dmax=max(4.d0*dij,4.d0*dkl,dik,dil,djk,djl)
get_d1w1_uhf.f:              ij=lind(max0(icf,jcf))+min0(icf,jcf)
get_d1w1_uhf.f:                      focka(iat,ij)=focka(iat,ij)+
get_d1w1_uhf.f:                      fockb(iat,ij)=fockb(iat,ij)+
get_d1w1_uhf.f:     $                     (dena(iat,ij)+denb(iat,ij))*xint2
get_d1w1_uhf.f:     $                     (dena(iat,ij)+denb(iat,ij))*xint2
get_d1w1_uhf.f:      ijklp=0
get_d1w1_uhf.f:          ijklp=ijklp+1
get_d1w1_uhf.f:          icff=ilab(ijklp)
get_d1w1_uhf.f:          jcff=jlab(ijklp)
get_d1w1_uhf.f:          kcff=klab(ijklp)
get_d1w1_uhf.f:          lcff=llab(ijklp)
get_d1w1_uhf.f:          dij=densp(ics,jcs)
get_d1w1_uhf.f:          dmax=max(4.d0*dij,4.d0*dkl,dik,dil,djk,djl)
get_d1w1_uhf.f:              ij=lind(max0(ic1,jc1))+min0(ic1,jc1)
get_d1w1_uhf.f:                      focka(iat,ij)=focka(iat,ij)+
get_d1w1_uhf.f:                      fockb(iat,ij)=fockb(iat,ij)+
get_d1w1_uhf.f:     $                     (dena(iat,ij)+denb(iat,ij))*xint2
get_d1w1_uhf.f:     $                     (dena(iat,ij)+denb(iat,ij))*xint2
get_d1w1_uhf.f:                      ijc=max0(lic,ljc)+min0(icf,jcf)
get_d1w1_uhf.f:                        focka(iat,ijc)=focka(iat,ijc)+
get_d1w1_uhf.f:                        fockb(iat,ijc)=fockb(iat,ijc)+
get_d1w1_uhf.f:     $                       (dena(iat,ijc)+denb(iat,ijc))*xco
get_d1w1_uhf.f:     $                       (dena(iat,ijc)+denb(iat,ijc))*xco
get_d1w1_uhf.f:      ijklp=0
get_d1w1_uhf.f:          ijklp=ijklp+1
get_d1w1_uhf.f:          icff=ilab(ijklp)
get_d1w1_uhf.f:          jcff=jlab(ijklp)
get_d1w1_uhf.f:          kcff=klab(ijklp)
get_d1w1_uhf.f:          lcff=llab(ijklp)
get_d1w1_uhf.f:          dij=densp(ics,jcs)
get_d1w1_uhf.f:          dmax=max(4.d0*dij,4.d0*dkl,dik,dil,djk,djl)
get_d1w1_uhf.f:              ij=lind(max0(icf,jcf))+min0(icf,jcf)
get_d1w1_uhf.f:                      focka(iat,ij)=focka(iat,ij)+
get_d1w1_uhf.f:                      fockb(iat,ij)=fockb(iat,ij)+
get_d1w1_uhf.f:     $                     (dena(iat,ij)+denb(iat,ij))*xint2
get_d1w1_uhf.f:     $                     (dena(iat,ij)+denb(iat,ij))*xint2
get_d1w1_uhf.f:      ijklp=0
get_d1w1_uhf.f:          ijklp=ijklp+1
get_d1w1_uhf.f:          icff=ilab(ijklp)
get_d1w1_uhf.f:          jcff=jlab(ijklp)
get_d1w1_uhf.f:          kcff=klab(ijklp)
get_d1w1_uhf.f:          lcff=llab(ijklp)
get_d1w1_uhf.f:          dij=densp(ics,jcs)
get_d1w1_uhf.f:          dmax=max(4.d0*dij,4.d0*dkl,dik,dil,djk,djl)
get_d1w1_uhf.f:              ij=lind(max0(ic1,jc1))+min0(ic1,jc1)
get_d1w1_uhf.f:                      focka(iat,ij)=focka(iat,ij)+
get_d1w1_uhf.f:                      fockb(iat,ij)=fockb(iat,ij)+
get_d1w1_uhf.f:     $                     (dena(iat,ij)+denb(iat,ij))*xint2
get_d1w1_uhf.f:     $                     (dena(iat,ij)+denb(iat,ij))*xint2
get_d1w1_uhf.f:                      ijc=lind(max0(icf,jcf))+min0(icf,jcf)
get_d1w1_uhf.f:                        focka(iat,ijc)=focka(iat,ijc)+
get_d1w1_uhf.f:                        fockb(iat,ijc)=fockb(iat,ijc)+
get_d1w1_uhf.f:     $                       (dena(iat,ijc)+denb(iat,ijc))*xco
get_d1w1_uhf.f:     $                       (dena(iat,ijc)+denb(iat,ijc))*xco
get_d1w1_uhf.f:     $        xinteg4,     xinteg8,    ijkllab,    ijklsiz,
get_d1w1_uhf.f:      integer*2 ijkllab(4,iqstore) !   ilab,jlab,klab,llab
get_d1w1_uhf.f:      integer*2 ijklsiz(4,iblstore)!   isiz(isbl),jsiz,ksiz,lsiz  
get_d1w1_uhf.f:      call read_int2(iunit1,ijklsiz,4*iblstore)
get_d1w1_uhf.f:      call read_int2(iunit3,ijkllab,4*iqstore)
get_d1w1_uhf.f:      ijklp=0
get_d1w1_uhf.f:          ilen=ijklsiz(1,isbl)
get_d1w1_uhf.f:          jlen=ijklsiz(2,isbl)
get_d1w1_uhf.f:          klen=ijklsiz(3,isbl)
get_d1w1_uhf.f:          llen=ijklsiz(4,isbl)
get_d1w1_uhf.f:            ijklp=ijklp+1
get_d1w1_uhf.f:            icff=ijkllab(1,ijklp)
get_d1w1_uhf.f:            jcff=ijkllab(2,ijklp)
get_d1w1_uhf.f:            kcff=ijkllab(3,ijklp)
get_d1w1_uhf.f:            lcff=ijkllab(4,ijklp)
get_d1w1_uhf.f:            dij=densp(ics,jcs)
get_d1w1_uhf.f:            dmax=max(4.0d0*dij,4.0d0*dkl,dik,dil,djk,djl)
get_d1w1_uhf.f:     $        xinteg4,     xinteg8,    ijkllab,    ijklsiz,
get_d1w1_uhf.f:      integer*2 ijkllab(4,iqstore) !   ilab,jlab,klab,llab
get_d1w1_uhf.f:      integer*2 ijklsiz(4,iblstore)!   isiz(isbl),jsiz,ksiz,lsiz  
get_d1w1_uhf.f:      call read_int2(iunit1,ijklsiz,4*iblstore)
get_d1w1_uhf.f:      call read_int2(iunit3,ijkllab,4*iqstore)
get_d1w1_uhf.f:      ijklp=0
get_d1w1_uhf.f:          ilen=ijklsiz(1,isbl)
get_d1w1_uhf.f:          jlen=ijklsiz(2,isbl)
get_d1w1_uhf.f:          klen=ijklsiz(3,isbl)
get_d1w1_uhf.f:          llen=ijklsiz(4,isbl)
get_d1w1_uhf.f:            ijklp=ijklp+1
get_d1w1_uhf.f:            icff=ijkllab(1,ijklp)
get_d1w1_uhf.f:            jcff=ijkllab(2,ijklp)
get_d1w1_uhf.f:            kcff=ijkllab(3,ijklp)
get_d1w1_uhf.f:            lcff=ijkllab(4,ijklp)
get_d1w1_uhf.f:            dij=densp(ics,jcs)
get_d1w1_uhf.f:            dmax=max(4.0d0*dij,4.0d0*dkl,dik,dil,djk,djl)
get_d1w1_uhf.f:     $        ijkllab,     ijklsiz,    nquarts,     iqstore,
get_d1w1_uhf.f:      integer*2 ijkllab(4,iqstore) !   ilab,jlab,klab,llab
get_d1w1_uhf.f:      integer*2 ijklsiz(4,iblstore)!   isiz(isbl),jsiz,ksiz,lsiz  
get_d1w1_uhf.f:      call read_int2(iunit1,ijklsiz,4*iblstore)
get_d1w1_uhf.f:      call read_int2(iunit3,ijkllab,4*iqstore)
get_d1w1_uhf.f:      ijklp=0
get_d1w1_uhf.f:          ilen=ijklsiz(1,isbl)
get_d1w1_uhf.f:          jlen=ijklsiz(2,isbl)
get_d1w1_uhf.f:          klen=ijklsiz(3,isbl)
get_d1w1_uhf.f:          llen=ijklsiz(4,isbl)
get_d1w1_uhf.f:            ijklp=ijklp+1
get_d1w1_uhf.f:            icff=ijkllab(1,ijklp)
get_d1w1_uhf.f:            jcff=ijkllab(2,ijklp)
get_d1w1_uhf.f:            kcff=ijkllab(3,ijklp)
get_d1w1_uhf.f:            lcff=ijkllab(4,ijklp)
get_d1w1_uhf.f:            dij=densp(ics,jcs)
get_d1w1_uhf.f:            dmax=max(4.0d0*dij,4.0d0*dkl,dik,dil,djk,djl)
get_d1w1_uhf.f:     $        ijkllab,     ijklsiz,    nquarts,     iqstore,
get_d1w1_uhf.f:      integer*2 ijkllab(4,iqstore) !   ilab,jlab,klab,llab
get_d1w1_uhf.f:      integer*2 ijklsiz(4,iblstore)!   isiz(isbl),jsiz,ksiz,lsiz  
get_d1w1_uhf.f:      call read_int2(iunit1,ijklsiz,4*iblstore)
get_d1w1_uhf.f:      call read_int2(iunit3,ijkllab,4*iqstore)
get_d1w1_uhf.f:      ijklp=0
get_d1w1_uhf.f:          ilen=ijklsiz(1,isbl)
get_d1w1_uhf.f:          jlen=ijklsiz(2,isbl)
get_d1w1_uhf.f:          klen=ijklsiz(3,isbl)
get_d1w1_uhf.f:          llen=ijklsiz(4,isbl)
get_d1w1_uhf.f:            ijklp=ijklp+1
get_d1w1_uhf.f:            icff=ijkllab(1,ijklp)
get_d1w1_uhf.f:            jcff=ijkllab(2,ijklp)
get_d1w1_uhf.f:            kcff=ijkllab(3,ijklp)
get_d1w1_uhf.f:            lcff=ijkllab(4,ijklp)
get_d1w1_uhf.f:            dij=densp(ics,jcs)
get_d1w1_uhf.f:            dmax=max(4.0d0*dij,4.0d0*dkl,dik,dil,djk,djl)
get_d1w1_uhf.f:          ij=lind(max0(icf,jcf))+min0(icf,jcf)
get_d1w1_uhf.f:                  focka(iat,ij)=focka(iat,ij)+
get_d1w1_uhf.f:                  fockb(iat,ij)=fockb(iat,ij)+
get_d1w1_uhf.f:     $                 (dena(iat,ij)+denb(iat,ij))*xin2
get_d1w1_uhf.f:     $                 (dena(iat,ij)+denb(iat,ij))*xin2
get_d1w1_uhf.f:          ij=lind(max0(ic1,jc1))+min0(ic1,jc1)
get_d1w1_uhf.f:                  focka(iat,ij)=focka(iat,ij)+
get_d1w1_uhf.f:                  fockb(iat,ij)=fockb(iat,ij)+
get_d1w1_uhf.f:     $                 (dena(iat,ij)+denb(iat,ij))*xin2
get_d1w1_uhf.f:     $                 (dena(iat,ij)+denb(iat,ij))*xin2
get_d1w1_uhf.f:                  ijc=max0(lic,ljc)+min0(icf,jcf)
get_d1w1_uhf.f:                    focka(iat,ijc)=focka(iat,ijc)+
get_d1w1_uhf.f:                    fockb(iat,ijc)=fockb(iat,ijc)+
get_d1w1_uhf.f:     $                   (dena(iat,ijc)+denb(iat,ijc))*xco
get_d1w1_uhf.f:     $                   (dena(iat,ijc)+denb(iat,ijc))*xco
get_d1w1_uhf.f:          ij=lind(max0(icf,jcf))+min0(icf,jcf)
get_d1w1_uhf.f:                  focka(iat,ij)=focka(iat,ij)+
get_d1w1_uhf.f:                  fockb(iat,ij)=fockb(iat,ij)+
get_d1w1_uhf.f:     $                 (dena(iat,ij)+denb(iat,ij))*xin2
get_d1w1_uhf.f:     $                 (dena(iat,ij)+denb(iat,ij))*xin2
get_d1w1_uhf.f:          ij=lind(max0(ic1,jc1))+min0(ic1,jc1)
get_d1w1_uhf.f:                  focka(iat,ij)=focka(iat,ij)+
get_d1w1_uhf.f:                  fockb(iat,ij)=fockb(iat,ij)+
get_d1w1_uhf.f:     $                 (dena(iat,ij)+denb(iat,ij))*xin2
get_d1w1_uhf.f:     $                 (dena(iat,ij)+denb(iat,ij))*xin2
get_d1w1_uhf.f:                  ijc=lind(max0(icf,jcf))+min0(icf,jcf)
get_d1w1_uhf.f:                    focka(iat,ijc)=focka(iat,ijc)+
get_d1w1_uhf.f:                    fockb(iat,ijc)=fockb(iat,ijc)+
get_d1w1_uhf.f:     $                   (dena(iat,ijc)+denb(iat,ijc))*xco
get_d1w1_uhf.f:     $                   (dena(iat,ijc)+denb(iat,ijc))*xco
get_d1w1_uhf.f:          ij=lind(max0(icf,jcf))+min0(icf,jcf)
get_d1w1_uhf.f:                  focka(iat,ij)=focka(iat,ij)+
get_d1w1_uhf.f:                  fockb(iat,ij)=fockb(iat,ij)+
get_d1w1_uhf.f:     $                 (dena(iat,ij)+denb(iat,ij))*xin2
get_d1w1_uhf.f:     $                 (dena(iat,ij)+denb(iat,ij))*xin2
get_d1w1_uhf.f:          ij=lind(max0(ic1,jc1))+min0(ic1,jc1)
get_d1w1_uhf.f:                  focka(iat,ij)=focka(iat,ij)+
get_d1w1_uhf.f:                  fockb(iat,ij)=fockb(iat,ij)+
get_d1w1_uhf.f:     $                 (dena(iat,ij)+denb(iat,ij))*xin2
get_d1w1_uhf.f:     $                 (dena(iat,ij)+denb(iat,ij))*xin2
get_d1w1_uhf.f:                  ijc=max0(lic,ljc)+min0(icf,jcf)
get_d1w1_uhf.f:                    focka(iat,ijc)=focka(iat,ijc)+
get_d1w1_uhf.f:                    fockb(iat,ijc)=fockb(iat,ijc)+
get_d1w1_uhf.f:     $                   (dena(iat,ijc)+denb(iat,ijc))*xco
get_d1w1_uhf.f:     $                   (dena(iat,ijc)+denb(iat,ijc))*xco
get_d1w1_uhf.f:          ij=lind(max0(icf,jcf))+min0(icf,jcf)
get_d1w1_uhf.f:                  focka(iat,ij)=focka(iat,ij)+
get_d1w1_uhf.f:                  fockb(iat,ij)=fockb(iat,ij)+
get_d1w1_uhf.f:     $                 (dena(iat,ij)+denb(iat,ij))*xin2
get_d1w1_uhf.f:     $                 (dena(iat,ij)+denb(iat,ij))*xin2
get_d1w1_uhf.f:          ij=lind(max0(ic1,jc1))+min0(ic1,jc1)
get_d1w1_uhf.f:                  focka(iat,ij)=focka(iat,ij)+
get_d1w1_uhf.f:                  fockb(iat,ij)=fockb(iat,ij)+
get_d1w1_uhf.f:     $                 (dena(iat,ij)+denb(iat,ij))*xin2
get_d1w1_uhf.f:     $                 (dena(iat,ij)+denb(iat,ij))*xin2
get_d1w1_uhf.f:                  ijc=lind(max0(icf,jcf))+min0(icf,jcf)
get_d1w1_uhf.f:                    focka(iat,ijc)=focka(iat,ijc)+
get_d1w1_uhf.f:                    fockb(iat,ijc)=fockb(iat,ijc)+
get_d1w1_uhf.f:     $                   (dena(iat,ijc)+denb(iat,ijc))*xco
get_d1w1_uhf.f:     $                   (dena(iat,ijc)+denb(iat,ijc))*xco
get_d1w1_uhf.f:          ij=lind(max0(icf,jcf))+min0(icf,jcf)
get_d1w1_uhf.f:                  focka(iat,ij)=focka(iat,ij)+
get_d1w1_uhf.f:                  fockb(iat,ij)=fockb(iat,ij)+
get_d1w1_uhf.f:     $                 (dena(iat,ij)+denb(iat,ij))*xin2
get_d1w1_uhf.f:     $                 (dena(iat,ij)+denb(iat,ij))*xin2
get_d1w1_uhf.f:          ij=lind(max0(ic1,jc1))+min0(ic1,jc1)
get_d1w1_uhf.f:                  focka(iat,ij)=focka(iat,ij)+
get_d1w1_uhf.f:                  fockb(iat,ij)=fockb(iat,ij)+
get_d1w1_uhf.f:     $                 (dena(iat,ij)+denb(iat,ij))*xin2
get_d1w1_uhf.f:     $                 (dena(iat,ij)+denb(iat,ij))*xin2
get_d1w1_uhf.f:                  ijc=max0(lic,ljc)+min0(icf,jcf)
get_d1w1_uhf.f:                    focka(iat,ijc)=focka(iat,ijc)+
get_d1w1_uhf.f:                    fockb(iat,ijc)=fockb(iat,ijc)+
get_d1w1_uhf.f:     $                   (dena(iat,ijc)+denb(iat,ijc))*xco
get_d1w1_uhf.f:     $                   (dena(iat,ijc)+denb(iat,ijc))*xco
get_d1w1_uhf.f:          ij=lind(max0(icf,jcf))+min0(icf,jcf)
get_d1w1_uhf.f:                  focka(iat,ij)=focka(iat,ij)+
get_d1w1_uhf.f:                  fockb(iat,ij)=fockb(iat,ij)+
get_d1w1_uhf.f:     $                 (dena(iat,ij)+denb(iat,ij))*xin2
get_d1w1_uhf.f:     $                 (dena(iat,ij)+denb(iat,ij))*xin2
get_d1w1_uhf.f:          ij=lind(max0(ic1,jc1))+min0(ic1,jc1)
get_d1w1_uhf.f:                  focka(iat,ij)=focka(iat,ij)+
get_d1w1_uhf.f:                  fockb(iat,ij)=fockb(iat,ij)+
get_d1w1_uhf.f:     $                 (dena(iat,ij)+denb(iat,ij))*xin2
get_d1w1_uhf.f:     $                 (dena(iat,ij)+denb(iat,ij))*xin2
get_d1w1_uhf.f:                  ijc=lind(max0(icf,jcf))+min0(icf,jcf)
get_d1w1_uhf.f:                    focka(iat,ijc)=focka(iat,ijc)+
get_d1w1_uhf.f:                    fockb(iat,ijc)=fockb(iat,ijc)+
get_d1w1_uhf.f:     $                   (dena(iat,ijc)+denb(iat,ijc))*xco
get_d1w1_uhf.f:     $                   (dena(iat,ijc)+denb(iat,ijc))*xco
grad_dft.f:     $                  EVec,   NAtoms, XC,     AIJ,    rrij,
grad_dft.f:C  rrij    -  inverse of interatomic distances
grad_dft.f:      REAL*8 AIJ(NAtoms,NAtoms),rrij(natoms,natoms)
grad_dft.f:      xmu = (RDist(IAtm)-RDist(JAtm))*rrij(IAtm,JAtm)
grad_dft.f:     $            XC(1,IAtm),XC(2,IAtm),XC(3,IAtm),rrij(IATOM,IAtm),
grad_dft.f:     $             XC(1,IAtm),XC(2,IAtm),XC(3,IAtm),rrij(JAtm,IAtm),
graddft.f:C  calculate inverse atomic distances, Becke aij parameters
guess.f:      ij = 0
guess.f:      ij = ij+1
guess.f:      ss(ij) = s(j,i)
hess1.f:                  iij=0
hess1.f:                     iij=iij+1
hess1.f:                     ij=ii+jff
hess1.f:                  iij_icr=iij+(icr-1)*len
hess1.f:                  over1(icr,iau,ij)=over1(icr,iau,ij) + s3(iij_icr)
hess1.f:                  over1(icr,jau,ij)=over1(icr,jau,ij) - s3(iij_icr)
hess1.f:                  iij=0
hess1.f:                     iij=iij+1
hess1.f:                     ij=ii+jff
hess1.f:                  iij_icr=iij+(icr-1)*len
hess1.f:                     fock1(icr,iau,ij)=fock1(icr,iau,ij) + t3(iij_icr)
hess1.f:                     fock1(icr,jau,ij)=fock1(icr,jau,ij) - t3(iij_icr)
hess1.f:                  iij=0
hess1.f:                     iij=iij+1
hess1.f:                     ij=ii+jff
hess1.f:                  iij_icr=iij+(icr-1)*len
hess1.f:                  fock1A(icr,iau,ij)=fock1A(icr,iau,ij) + t3(iij_icr)
hess1.f:                  fock1B(icr,iau,ij)=fock1B(icr,iau,ij) + t3(iij_icr)
hess1.f:                  fock1A(icr,jau,ij)=fock1A(icr,jau,ij) - t3(iij_icr)
hess1.f:                  fock1B(icr,jau,ij)=fock1B(icr,jau,ij) - t3(iij_icr)
hess1.f:                  iij=0
hess1.f:                     iij=iij+1
hess1.f:                     ij=ii+jff
hess1.f:                  iij_icr=iij+(icr-1)*len
hess1.f:                  fock1(icr,nru,ij)=fock1(icr,nru,ij)
hess1.f:     *                                 +(sa(iij_icr)+sb(iij_icr))*zza
hess1.f:                  fock1(icr,iau,ij)=fock1(icr,iau,ij)-sa(iij_icr)*zza
hess1.f:                  fock1(icr,jau,ij)=fock1(icr,jau,ij)-sb(iij_icr)*zza
hess1.f:                  iij=0
hess1.f:                     iij=iij+1
hess1.f:                     ij=ii+jff
hess1.f:                  iij_icr=iij+(icr-1)*len
hess1.f:                  fock1A(icr,nru,ij)=fock1A(icr,nru,ij)
hess1.f:     *                                 +(sa(iij_icr)+sb(iij_icr))*zza
hess1.f:                  fock1B(icr,nru,ij)=fock1B(icr,nru,ij)
hess1.f:     *                                 +(sa(iij_icr)+sb(iij_icr))*zza
hess1.f:                  fock1A(icr,iau,ij)=fock1A(icr,iau,ij)-sa(iij_icr)*zza
hess1.f:                  fock1B(icr,iau,ij)=fock1B(icr,iau,ij)-sa(iij_icr)*zza
hess1.f:                  fock1A(icr,jau,ij)=fock1A(icr,jau,ij)-sb(iij_icr)*zza
hess1.f:                  fock1B(icr,jau,ij)=fock1B(icr,jau,ij)-sb(iij_icr)*zza
hess1.f:                  iij=0
hess1.f:                     iij=iij+1
hess1.f:c                    iijx=iij
hess1.f:c                    iijy=iijx+len
hess1.f:c                    iijz=iijx+len*2
hess1.f:                     ij=ii+jff
hess1.f:                     dnij=dn(ij)
hess1.f:                     dwij=dw(ij)
hess1.f:                        dnij=2.d0*dnij
hess1.f:                        dwij=2.d0*dwij
hess1.f:             icrij=iij-len
hess1.f:                   icrij=icrij+len
hess1.f:          s3dw=t3(icrij)*dnij-s3(icrij)*dwij
hess1.f:c    *' d2S,Tij/dAxdAy=',iat,icr1,icr2,' D2=', s3(icrij), t3(icrij)
hess1.f:          ij=0
hess1.f:               ij=ij+1
hess1.f:               sb(ij)=sb(ij)+rb(ij)*coefi*coefj
hess1.f:      ij=0
hess1.f:      do 730 ij1=1,len
hess1.f:      ij=ij+1
hess1.f:      sb(ij)=sb(iadd+ij1)
hess1.f:      ij=0
hess1.f:         ij=ij+1
hess1.f:         xint(ij)     =yint(ij)*ft
hess1.f:         xint(ij+ln)  =yint(ij+ln)*ft
hess1.f:         xint(ij+2*ln)=yint(ij+2*ln)*ft
hess1.f:         xint(ij+3*ln)=yint(ij+3*ln)*ft
hess1.f:         xint(ij+4*ln)=yint(ij+4*ln)*ft
hess1.f:         xint(ij+5*ln)=yint(ij+5*ln)*ft
hess1.f:      ij=0
hess1.f:         ij=ij+1
hess1.f:         xint(ij)     =xint(ij)     -yint(ij)*ft
hess1.f:         xint(ij+ln)  =xint(ij+ln)  -yint(ij+ln)*ft
hess1.f:         xint(ij+2*ln)=xint(ij+2*ln)-yint(ij+2*ln)*ft
hess1.f:         xint(ij+3*ln)=xint(ij+3*ln)-yint(ij+3*ln)*ft
hess1.f:         xint(ij+4*ln)=xint(ij+4*ln)-yint(ij+4*ln)*ft
hess1.f:         xint(ij+5*ln)=xint(ij+5*ln)-yint(ij+5*ln)*ft
hess1.f:      ij=0
hess1.f:         ij=ij+1
hess1.f:         xint(ij)     =xint(ij)     -yint(ij)*ft
hess1.f:         xint(ij+ln)  =xint(ij+ln)  -yint(ij+ln)*ft
hess1.f:         xint(ij+2*ln)=xint(ij+2*ln)-yint(ij+2*ln)*ft
hess1.f:         xint(ij+3*ln)=xint(ij+3*ln)-yint(ij+3*ln)*ft
hess1.f:         xint(ij+4*ln)=xint(ij+4*ln)-yint(ij+4*ln)*ft
hess1.f:         xint(ij+5*ln)=xint(ij+5*ln)-yint(ij+5*ln)*ft
hess1.f:      ij=0
hess1.f:         ij=ij+1
hess1.f:         xint(ij)     =xint(ij)     -yint(ij)*ft
hess1.f:         xint(ij+ln)  =xint(ij+ln)  -yint(ij+ln)*ft
hess1.f:         xint(ij+2*ln)=xint(ij+2*ln)-yint(ij+2*ln)*ft
hess1.f:         xint(ij+3*ln)=xint(ij+3*ln)-yint(ij+3*ln)*ft
hess1.f:         xint(ij+4*ln)=xint(ij+4*ln)-yint(ij+4*ln)*ft
hess1.f:         xint(ij+5*ln)=xint(ij+5*ln)-yint(ij+5*ln)*ft
hess1.f:           ijcr=0
hess1.f:                 ijcr=ijcr+1
hess1.f:                 ijcrl=(ijcr-1)*len
hess1.f:                       ij=(i3-1)*len2+j3
hess1.f:                       f3(ijcrl+ij)=t3(ijcrl+ji)
hess1.f:                  iij=0
hess1.f:                     iij=iij+1
hess1.f:                     ij=ii+jff
hess1.f:                     dnij=dn(ij)
hess1.f:                     dwij=dw(ij)
hess1.f:                        dnij=2.d0*dnij
hess1.f:                        dwij=2.d0*dwij
hess1.f:            write(6,*)' iij=',iij,' icf=',iff,' jcf=',jff,' ij=',ij
hess1.f:             icrij=iij-len
hess1.f:                   icrij=icrij+len
hess1.f:          saaij=s3(icrij)
hess1.f:          sbbij=f3(icrij)
hess1.f:          sabij=-saaij
hess1.f:          sbaij=-sbbij
hess1.f:      write(6,*)'d2S/dAdA=',saaij,' at=',iat,' coor=',icr1,icr2
hess1.f:      write(6,*)'d2S/dBdB=',sbbij,' at=',jat,' coor=',icr1,icr2
hess1.f:      over2(ij,icr1,iat,icr2,iat)=over2(ij,icr1,iat,icr2,iat)+saaij
hess1.f:      over2(ij,icr1,jat,icr2,jat)=over2(ij,icr1,jat,icr2,jat)+sbbij
hess1.f:      over2(ij,icr1,iat,icr2,jat)=over2(ij,icr1,iat,icr2,jat)+sabij
hess1.f:      over2(ij,icr1,jat,icr2,iat)=over2(ij,icr1,jat,icr2,iat)+sbaij
hess1.f:         over2(ij,icr2,iat,icr1,iat)=over2(ij,icr2,iat,icr1,iat)+saaij
hess1.f:         over2(ij,icr2,jat,icr1,jat)=over2(ij,icr2,jat,icr1,jat)+sbbij
hess1.f:         over2(ij,icr2,jat,icr1,iat)=over2(ij,icr2,jat,icr1,iat)+sabij
hess1.f:         over2(ij,icr2,iat,icr1,jat)=over2(ij,icr2,iat,icr1,jat)+sbaij
hess1.f:                           ijcf=icf*(icf-1)/2 +jcf
hess1.f:                           ijcf=jcf*(jcf-1)/2 +icf
hess1.f:                        s2ij=over2(ijcf,icr,iat,jcr,jat)
hess1.f:                        if(abs(s2ij).gt. 1.d-9) then
hess1.f:                        write(6,*)'icf,jcf=',icf,jcf,' elem=',s2ij
hess1.f:           ijcr=0
hess1.f:                 ijcr=ijcr+1
hess1.f:                 ijcrl=(ijcr-1)*len
hess1.f:                       ij=(i3-1)*len2+j3
hess1.f:                       f3(ijcrl+ij)=t3(ijcrl+ji)
hess1.f:                  iij=0
hess1.f:                     iij=iij+1
hess1.f:                     ij=ii+jff
hess1.f:                     dnij=dn(ij)
hess1.f:                     dwij=dw(ij)
hess1.f:                        dnij=2.d0*dnij
hess1.f:                        dwij=2.d0*dwij
hess1.f:            write(6,*)' iij=',iij,' icf=',iff,' jcf=',jff,' ij=',ij
hess1.f:             icrij=iij-len
hess1.f:                   icrij=icrij+len
hess1.f:          saaij=s3(icrij)
hess1.f:          sbbij=f3(icrij)
hess1.f:          sabij=-saaij
hess1.f:          sbaij=-sbbij
hess1.f:      write(6,*)'d2S/dAdA=',saaij,' at=',iat,' coor=',icr1,icr2
hess1.f:      write(6,*)'d2S/dBdB=',sbbij,' at=',jat,' coor=',icr1,icr2
hess1.f:      over2(ij,icr1,iat,icr2,iat)=over2(ij,icr1,iat,icr2,iat)+saaij
hess1.f:      over2(ij,icr1,jat,icr2,jat)=over2(ij,icr1,jat,icr2,jat)+sbbij
hess1.f:      over2(ij,icr1,iat,icr2,jat)=over2(ij,icr1,iat,icr2,jat)+sabij
hess1.f:      over2(ij,icr1,jat,icr2,iat)=over2(ij,icr1,jat,icr2,iat)+sbaij
hess1.f:         over2(ij,icr2,iat,icr1,iat)=over2(ij,icr2,iat,icr1,iat)+saaij
hess1.f:         over2(ij,icr2,jat,icr1,jat)=over2(ij,icr2,jat,icr1,jat)+sbbij
hess1.f:         over2(ij,icr2,jat,icr1,iat)=over2(ij,icr2,jat,icr1,iat)+sabij
hess1.f:         over2(ij,icr2,iat,icr1,jat)=over2(ij,icr2,iat,icr1,jat)+sbaij
hess1.f:                           ijcf=icf*(icf-1)/2 +jcf
hess1.f:                           ijcf=jcf*(jcf-1)/2 +icf
hess1.f:                        s2ij=over2(ijcf,icr,iat,jcr,jat)
hess1.f:                        if(abs(s2ij).gt. 1.d-9) then
hess1.f:                        write(6,*)'icf,jcf=',icf,jcf,' elem=',s2ij
hess1.f:                  iij=0
hess1.f:                     iij=iij+1
hess1.f:c                    iijx=iij
hess1.f:c                    iijy=iijx+len
hess1.f:c                    iijz=iijx+len*2
hess1.f:                     ij=ii+jff
hess1.f:                     dnij=dn(ij)
hess1.f:                     dwij=dw(ij)
hess1.f:                        dnij=2.d0*dnij
hess1.f:                        dwij=2.d0*dwij
hess1.f:             icrij=iij-len
hess1.f:                   icrij=icrij+len
hess1.f:          s3dw=t3(icrij)*dnij-s3(icrij)*dwij
hess1.f:          saaij=s3dw
hess1.f:          sbbij=s3dw
hess1.f:          sabij=-saaij
hess1.f:          sbaij=-sbbij
hess1.f:      athess(icr1,iat,icr2,iat)=athess(icr1,iat,icr2,iat)+saaij
hess1.f:      athess(icr1,jat,icr2,jat)=athess(icr1,jat,icr2,jat)+sbbij
hess1.f:      athess(icr1,iat,icr2,jat)=athess(icr1,iat,icr2,jat)+sabij
hess1.f:      athess(icr1,jat,icr2,iat)=athess(icr1,jat,icr2,iat)+sbaij
hess1.f:         athess(icr2,iat,icr1,iat)=athess(icr2,iat,icr1,iat)+saaij
hess1.f:         athess(icr2,jat,icr1,jat)=athess(icr2,jat,icr1,jat)+sbbij
hess1.f:         athess(icr2,jat,icr1,iat)=athess(icr2,jat,icr1,iat)+sabij
hess1.f:         athess(icr2,iat,icr1,jat)=athess(icr2,iat,icr1,jat)+sbaij
hess1.f:c    *' shells=',i,j,' (A|C|B)=',iat,nra,jat,' ij=',ij,' dij=',dij
hess1.f:                  iij=0
hess1.f:                     iij=iij+1
hess1.f:                     ij=ii+jff
hess1.f:                     dij=dn(ij)
hess1.f:                     if(iff.ne.jff) dij=dij+dij
hess1.f:         dijzza=dij*zza
hess1.f:         icrij=iij-len
hess1.f:               icrij=icrij+len
hess1.f:               t1=sa(icrij)*dijzza
hess1.f:               t2=sb(icrij)*dijzza
hess1.f:         icrij=iij-len
hess1.f:               icrij=icrij+len
hess1.f:          t1=sc(icrij)*dijzza
hess1.f:           ij=0
hess1.f:                    ij=ij+1
hess1.f:                    coefij=coefi*coefj
hess1.f:                    sa(ij)=sa(ij)+ra(ij)*coefij
hess1.f:                    sb(ij)=sb(ij)+rb(ij)*coefij
hess1.f:           ij=0
hess1.f:                    ij=ij+1
hess1.f:                    coefij=coefi*coefj
hess1.f:                    sc(ij)=sc(ij)+rc(ij)*coefij
hess1.f:      ij=0
hess1.f:        do ij1=1,len
hess1.f:          ij=ij+1
hess1.f:          sa(ij)=sa(iadd+ij1)
hess1.f:          sb(ij)=sb(iadd+ij1)
hess1.f:      ij=0
hess1.f:        do ij1=1,len
hess1.f:          ij=ij+1
hess1.f:          sc(ij)=sc(iadd+ij1)
hess1.f:                              ij=(i3-1)*len2+j3
hess1.f:                              f3b(icrl+ij,k1)=fff(icrl+ji,k1)
hess1.f:                  iij=0
hess1.f:                        iij=iij+1
hess1.f:                        ij=ii+jff
hess1.f:                        dij=dens(ij)
hess1.f:                        if(iff.ne.jff) dij=2.d0*dij
hess1.f:                           iij_icr=iij+(icr-1)*len
hess1.f:     *                                         -f3a(iij_icr,k1)*dij
hess1.f:     *                                         -f3b(iij_icr,k1)*dij
hess1.f:         do ij=1,ntri
hess1.f:            f1(1,iat,ij)=bl(ij,1)
hess1.f:            f1(2,iat,ij)=bl(ij,2)
hess1.f:            f1(3,iat,ij)=bl(ij,3)
hess1.f:         do ij=1,ntri
hess1.f:            sux=sux+r1(ij,1)
hess1.f:            suy=suy+r1(ij,2)
hess1.f:            suz=suz+r1(ij,3)
hess1.f:         do ij=1,ntri
hess1.f:            sux=sux+r1(ij,1)
hess1.f:            suy=suy+r1(ij,2)
hess1.f:            suz=suz+r1(ij,3)
hess2e.f:c transform ordinary density dens(ij) into denspar(ics,jcs)
hess2e.f:c transform ordinary density dens(ij) into denspar(ics,jcs)
hess2e.f:      subroutine hessian_der(bl,nbls,lnijr,lnklr,npij,ngcd,idx1,ixab)
hess2e.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,mmax,
hess2e.f:     * nqi,nqj,nqk,nql,nsij,nskl,
hess2e.f:     * nqij,nqij1,nsij1,nqkl,nqkl1,nskl1,ijbeg,klbeg
hess2e.f:     * ibfij1,ibfij2,ibfkl1,ibfkl2,
hess2e.f:     * ibf2l1,ibf2l2,ibf2l3,ibf2l4,ibfij3,ibfkl3,
hess2e.f:     * ixij,iyij,izij, iwij,ivij,iuij,isij
hess2e.f:      common /dimasse/ lqijr,lqklr,lqmxr,lij3,lkl3,l3l,lsss
hess2e.f:      lqij=nfu(nqij+1)
hess2e.f:      lqmx=lqij
hess2e.f:        if(lqkl.gt.lqij) lqmx=lqkl
hess2e.f:      call conv24r(nbls,npij,bl(idx1),bl(ixab),bl(ixabq))
hess2e.f:      ijdim=lnij-nfu(nqij)
hess2e.f:      call getint(ijdim,ijvecx)
hess2e.f:      call getint(ijdim,ijvecy)
hess2e.f:      call getint(ijdim,ijvecz)
hess2e.f:      call find_non0(nqij,lnij,nqkl,lnkl,
hess2e.f:     *               nijx,nijy,nijz,nklx,nkly,nklz,
hess2e.f:     *               bl(ijvecx),bl(ijvecy),bl(ijvecz),
hess2e.f:      incr45=45*ngcd*nbls*lnij*lnkl
hess2e.f:      incr9 = 9*ngcd*nbls*lnij*lnkl
hess2e.f:     *               lnijr,lnklr,lnij,lnkl,nqij,nqkl,
hess2e.f:     *               nijx,nijy,nijz,nklx,nkly,nklz,
hess2e.f:     *               bl(ijvecx),bl(ijvecy),bl(ijvecz),
hess2e.f:      call secnd_der(ngcd,nbls,bl(ibeg),lnijr,lnklr,lnij,lnkl,nqij,nqkl,
hess2e.f:      subroutine secnd_der(ngcd,nbls,buf2,lnijr,lnklr,lnij,lnkl,
hess2e.f:     *                     nqij,nqkl,der2,xab)
hess2e.f:c2001 dimension buf2(10,nbls,lnijr,lnklr,ngcd)
hess2e.f:      dimension buf2(nbls,lnijr,lnklr,ngcd,10)
hess2e.f:cccc  dimension der0(nbls,lnij,lnkl,ngcd)     these two are constracted
hess2e.f:cccc  dimension der1(9,nbls,lnij,lnkl,ngcd)   when first_der is called
hess2e.f:      dimension der2(45,nbls,lnij,lnkl,ngcd)
hess2e.f:c INPUT buf2(1,nbls,lnijr,lnklr,ngcd) - ordinary 2-el.integ.
hess2e.f:c  buf2(2,nbls,lnijr,lnklr,ngcd) - 2-el.integ. resc by 2*exp_a
hess2e.f:c  buf2(3,nbls,lnijr,lnklr,ngcd) - 2-el.integ. resc by 2*exp_b
hess2e.f:c  buf2(4,nbls,lnijr,lnklr,ngcd) - 2-el.integ. resc by 2*exp_c
hess2e.f:c  buf2(5,nbls,lnijr,lnklr,ngcd) - 2-el.integ. resc by 4*exp_a*exp_b
hess2e.f:c  buf2(6,nbls,lnijr,lnklr,ngcd) - 2-el.integ. resc by 4*exp_a*exp_c
hess2e.f:c  buf2(7,nbls,lnijr,lnklr,ngcd) - 2-el.integ. resc by 4*exp_b*exp_c
hess2e.f:c  buf2(8,nbls,lnijr,lnklr,ngcd) - 2-el.integ. resc by 4*exp_a*exp_a
hess2e.f:c  buf2(9,nbls,lnijr,lnklr,ngcd) - 2-el.integ. resc by 4*exp_b*exp_b
hess2e.f:c  buf2(10nbls,lnijr,lnklr,ngcd) - 2-el.integ. resc by 4*exp_c*exp_c
hess2e.f:c    der000=der0(nbls,lnij,lnkl,ngcd) - ordinary integr.
hess2e.f:c    der1AX=der1(1,nbls,lnij,lnkl,ngcd),
hess2e.f:c    der1BX=der1(2,nbls,lnij,lnkl,ngcd)
hess2e.f:c    der1CX=der1(3,nbls,lnij,lnkl,ngcd),
hess2e.f:c    der1AY=der1(4,nbls,lnij,lnkl,ngcd),
hess2e.f:c    der1BY=der1(5,nbls,lnij,lnkl,ngcd),
hess2e.f:c    der1CY=der1(6,nbls,lnij,lnkl,ngcd),
hess2e.f:c    der1AZ=der1(7,nbls,lnij,lnkl,ngcd),
hess2e.f:c    der1BZ=der1(8,nbls,lnij,lnkl,ngcd),
hess2e.f:c    der1CZ=der1(9,nbls,lnij,lnkl,ngcd),
hess2e.f:c    der2_AxAx=der2(1,nbls,lnij,lnkl,ngcd),
hess2e.f:c    der2_AxAy=der2(2,nbls,lnij,lnkl,ngcd),
hess2e.f:c    der2_AxAz=der2(3,nbls,lnij,lnkl,ngcd),
hess2e.f:c    der2_AyAy=der2(4,nbls,lnij,lnkl,ngcd),
hess2e.f:c    der2_AyAz=der2(5,nbls,lnij,lnkl,ngcd),
hess2e.f:c    der2_AzAz=der2(6,nbls,lnij,lnkl,ngcd),
hess2e.f:c    der2_AxBx= der2(7,nbls,lnij,lnkl,ngcd),
hess2e.f:c    der2_AxBy= der2(8,nbls,lnij,lnkl,ngcd),
hess2e.f:c    der2_AxBz= der2(9,nbls,lnij,lnkl,ngcd),
hess2e.f:c    der2_AyBx=der2(10,nbls,lnij,lnkl,ngcd),
hess2e.f:c    der2_AyBy=der2(11,nbls,lnij,lnkl,ngcd),
hess2e.f:c    der2_AyBz=der2(12,nbls,lnij,lnkl,ngcd),
hess2e.f:c    der2_AzBx=der2(13,nbls,lnij,lnkl,ngcd),
hess2e.f:c    der2_AzBy=der2(14,nbls,lnij,lnkl,ngcd),
hess2e.f:c    der2_AzBz=der2(15,nbls,lnij,lnkl,ngcd),
hess2e.f:c    der2_AxCx=der2(16,nbls,lnij,lnkl,ngcd),
hess2e.f:c    der2_AxCy=der2(17,nbls,lnij,lnkl,ngcd),
hess2e.f:c    der2_AxCz=der2(18,nbls,lnij,lnkl,ngcd),
hess2e.f:c    der2_AyCx=der2(19,nbls,lnij,lnkl,ngcd),
hess2e.f:c    der2_AyCy=der2(20,nbls,lnij,lnkl,ngcd),
hess2e.f:c    der2_AyCz=der2(21,nbls,lnij,lnkl,ngcd),
hess2e.f:c    der2_AzCx=der2(22,nbls,lnij,lnkl,ngcd),
hess2e.f:c    der2_AzCy=der2(23,nbls,lnij,lnkl,ngcd),
hess2e.f:c    der2_AzCz=der2(24,nbls,lnij,lnkl,ngcd),
hess2e.f:c    der2_BxBx=der2(25,nbls,lnij,lnkl,ngcd),
hess2e.f:c    der2_BxBy=der2(26,nbls,lnij,lnkl,ngcd),
hess2e.f:c    der2_BxBz=der2(27,nbls,lnij,lnkl,ngcd),
hess2e.f:c    der2_ByBy=der2(28,nbls,lnij,lnkl,ngcd),
hess2e.f:c    der2_ByBz=der2(29,nbls,lnij,lnkl,ngcd),
hess2e.f:c    der2_BzBz=der2(30,nbls,lnij,lnkl,ngcd),
hess2e.f:c    der2_BxCx=der2(31,nbls,lnij,lnkl,ngcd),
hess2e.f:c    der2_BxCy=der2(32,nbls,lnij,lnkl,ngcd),
hess2e.f:c    der2_BxCz=der2(33,nbls,lnij,lnkl,ngcd),
hess2e.f:c    der2_ByCx=der2(34,nbls,lnij,lnkl,ngcd),
hess2e.f:c    der2_ByCy=der2(35,nbls,lnij,lnkl,ngcd),
hess2e.f:c    der2_ByCz=der2(36,nbls,lnij,lnkl,ngcd),
hess2e.f:c    der2_BzCx=der2(37,nbls,lnij,lnkl,ngcd),
hess2e.f:c    der2_BzCy=der2(38,nbls,lnij,lnkl,ngcd),
hess2e.f:c    der2_BzCz=der2(39,nbls,lnij,lnkl,ngcd),
hess2e.f:c    der2_CxCx=der2(40,nbls,lnij,lnkl,ngcd),
hess2e.f:c    der2_CxCy=der2(41,nbls,lnij,lnkl,ngcd),
hess2e.f:c    der2_CxCz=der2(42,nbls,lnij,lnkl,ngcd),
hess2e.f:c    der2_CyCy=der2(43,nbls,lnij,lnkl,ngcd),
hess2e.f:c    der2_CyCz=der2(44,nbls,lnij,lnkl,ngcd),
hess2e.f:c    der2_CzCz=der2(45,nbls,lnij,lnkl,ngcd),
hess2e.f:     *                      ngcd,nbls,buf2,lnijr,lnklr,lnij,lnkl,
hess2e.f:     *                      nqij,nqkl,
hess2e.f:     *                      ngcd,nbls,buf2,lnijr,lnklr,lnij,lnkl,
hess2e.f:     *                      nqij,nqkl,
hess2e.f:     *                      ngcd,nbls,buf2,lnijr,lnklr,lnij,lnkl,
hess2e.f:     *                      nqij,nqkl,
hess2e.f:     *                      ngcd,nbls,buf2,lnijr,lnklr,lnij,lnkl,
hess2e.f:     *                      nqij,nqkl,
hess2e.f:     *                      ngcd,nbls,buf2,lnijr,lnklr,lnij,lnkl,
hess2e.f:     *                      nqij,nqkl,
hess2e.f:     *                      ngcd,nbls,buf2,lnijr,lnklr,lnij,lnkl,
hess2e.f:     *                      nqij,nqkl,
hess2e.f:     *                    ngcd,nbls,buf2,lnijr,lnklr,lnij,lnkl,
hess2e.f:     *                    nqij,nqkl,
hess2e.f:c2001 dimension buf2(10,nbls,lnijr,lnklr,ngcd)
hess2e.f:      dimension buf2(nbls,lnijr,lnklr,ngcd,10)
hess2e.f:      dimension der2(45,nbls,lnij,lnkl,ngcd)
hess2e.f:      do 200 ij=nfu(nqij)+1,lnij
hess2e.f:      ij_pi=npxyz(icart,ij)         ! funct. ( i+j + 1icart )
hess2e.f:      ij_pj=npxyz(jcart,ij)         ! funct. ( i+j + 1jcart )
hess2e.f:      ij_pi_pj=npxyz(jcart,ij_pi)   ! funct. ( i+j + 1ic + 1-jc)
hess2e.f:c     n_ij_00_i=nia(icart,ij)
hess2e.f:c     n_ij_pi_j=nia(jcart,ij_pi)
hess2e.f:c     n_ij_mi_j=nia(jcart,ij_mi)
hess2e.f:      n_ij_pi_j=nia(jcart,ij_pi)    ! jcart-power of (i+j+1ic |
hess2e.f:      n_ij_00_i=nia(icart,ij)       ! icart-power of (i+j+0    |
hess2e.f:      if(n_ij_00_i.gt.0) then
hess2e.f:         ij_mi=nmxyz(icart,ij)      ! funct. (i+j-1ic |
hess2e.f:         ij_mi=0
hess2e.f:      if(ij_mi.gt.0) then
hess2e.f:         n_ij_mi_j=nia(jcart,ij_mi) ! jcart-power of (i+j-1ic
hess2e.f:         n_ij_mi_j=0
hess2e.f:      ij_mi_pj=nmxyz(icart,ij_pj)   ! funct. (i+j -1ic +1jc)
hess2e.f:      ij_pi_mj=nmxyz(jcart,ij_pi)   ! funct. (i+j +1ic -1jc)
hess2e.f:      ij_mi_mj=0
hess2e.f:      if(ij_mi.gt.0) ij_mi_mj=nmxyz(jcart,ij_mi)  ! funct. (i+j-1i-1j|
hess2e.f:c                 or ij_mi_mj=nmxyz(icart,ij_mj)
hess2e.f:        do 250 ijkl=1,nbls
hess2e.f:c       four_ab_pipj=buf2(8,ijkl,ij_pi_pj, kl,iqu)
hess2e.f:c       two_a_mi_pj =buf2(2,ijkl,ij_mi_pj, kl,iqu)
hess2e.f:c       two_a_pi_mj =buf2(2,ijkl,ij_pi_mj, kl,iqu)
hess2e.f:c       two_0_mi_mj =buf2(1,ijkl,ij_mi_mj, kl,iqu)
hess2e.f:      der=buf2(ijkl,ij_pi_pj, kl,iqu,8)
hess2e.f:      if(ij_mi_pj.gt.0) then
hess2e.f:         der=der-n_ij_00_i*buf2(ijkl,ij_mi_pj, kl,iqu,2)
hess2e.f:      if(ij_pi_mj.gt.0) then
hess2e.f:         der=der-n_ij_pi_j*buf2(ijkl,ij_pi_mj, kl,iqu,2)
hess2e.f:      if(ij_mi_mj.gt.0) then
hess2e.f:         der=der+n_ij_00_i*n_ij_mi_j*buf2(ijkl,ij_mi_mj, kl,iqu,1)
hess2e.f:      der2(nder_aa,ijkl,ij,kl,iqu)=der
hess2e.f:     *                    ngcd,nbls,buf2,lnijr,lnklr,lnij,lnkl,
hess2e.f:     *                    nqij,nqkl,
hess2e.f:c2001 dimension buf2(10,nbls,lnijr,lnklr,ngcd)
hess2e.f:      dimension buf2(nbls,lnijr,lnklr,ngcd,10)
hess2e.f:      dimension der2(45,nbls,lnij,lnkl,ngcd)
hess2e.f:      do 200 ij=nfu(nqij)+1,lnij
hess2e.f:        do 250 ijkl=1,nbls
hess2e.f:c       four_c_pipj=buf2(10,ijkl,ij,kl_pi_pj,iqu)
hess2e.f:c       two_c_mi_pj=buf2( 4,ijkl,ij,kl_mi_pj,iqu)
hess2e.f:c       two_c_pi_mj=buf2( 4,ijkl,ij,kl_pi_mj,iqu)
hess2e.f:c       two_0_mi_mj=buf2( 1,ijkl,ij,kl_mi_mj,iqu)
hess2e.f:      der=buf2(ijkl,ij,kl_pi_pj,iqu,10)
hess2e.f:        der=der-n_kl_00_i*buf2(ijkl,ij,kl_mi_pj,iqu,4)
hess2e.f:        der=der-n_kl_pi_j*buf2(ijkl,ij,kl_pi_mj,iqu,4)
hess2e.f:        der=der+n_kl_00_i*n_kl_mi_j*buf2(ijkl,ij,kl_mi_mj,iqu,1)
hess2e.f:      der2(nder_cc,ijkl,ij,kl,iqu)=der
hess2e.f:     *                    ngcd,nbls,buf2,lnijr,lnklr,lnij,lnkl,
hess2e.f:     *                    nqij,nqkl,
hess2e.f:c2001 dimension buf2(10,nbls,lnijr,lnklr,ngcd)
hess2e.f:      dimension buf2(nbls,lnijr,lnklr,ngcd,10)
hess2e.f:      dimension der2(45,nbls,lnij,lnkl,ngcd)
hess2e.f:      do 200 ij=nfu(nqij)+1,lnij
hess2e.f:      ij_pi=npxyz(icart,ij)
hess2e.f:      ij_pj=npxyz(jcart,ij)
hess2e.f:      ij_pi_pj=npxyz(jcart,ij_pi)
hess2e.f:        do 250 ijkl=1,nbls
hess2e.f:c       four_b_pipj=buf2(9,ijkl,ij_pi_pj, kl,iqu)
hess2e.f:c       four_b_pi  =buf2(9,ijkl,ij_pi   , kl,iqu)
hess2e.f:c       four_b_pj  =buf2(9,ijkl,ij_pj   , kl,iqu)
hess2e.f:c       four_b_0   =buf2(9,ijkl,ij      , kl,iqu)
hess2e.f:c       two_b_0    =buf2(3,ijkl,ij      , kl,iqu)
hess2e.f:      der=                  buf2(ijkl,ij_pi_pj,kl,iqu,9)
hess2e.f:     *              +xab(ijkl,jcart)*buf2(ijkl,ij_pi,kl,iqu,9)
hess2e.f:     *              +xab(ijkl,icart)*buf2(ijkl,ij_pj,kl,iqu,9)
hess2e.f:     *   +xab(ijkl,icart)*xab(ijkl,jcart)*buf2(ijkl,ij,kl,iqu,9)
hess2e.f:      if(jcart.eq.icart) der=der-buf2(ijkl,ij,kl,iqu,3)
hess2e.f:      der2(nder_bb,ijkl,ij,kl,iqu)=der
hess2e.f:c        write(6,66) nder_bb, ij,kl
hess2e.f:c  66    format('no=',i3,'ij,kl=',2i4)
hess2e.f:c        write(6,67) '(2b)2 int. ++ =',buf2(9,ijkl,ij_pi_pj,kl,iqu)
hess2e.f:c        write(6,67) '(2b)2 int. +0 =',buf2(9,ijkl,ij_pi   ,kl,iqu)
hess2e.f:c        write(6,67) '(2b)2 int. 0+ =',buf2(9,ijkl,ij_pj   ,kl,iqu)
hess2e.f:c        write(6,67) '(2b)2 int. 00 =',buf2(9,ijkl,ij      ,kl,iqu)
hess2e.f:c        write(6,67) '(2b)1 int. 00 =',buf2(3,ijkl,ij      ,kl,iqu)
hess2e.f:     *                    ngcd,nbls,buf2,lnijr,lnklr,lnij,lnkl,
hess2e.f:     *                    nqij,nqkl,
hess2e.f:c2001 dimension buf2(10,nbls,lnijr,lnklr,ngcd)
hess2e.f:      dimension buf2(nbls,lnijr,lnklr,ngcd,10)
hess2e.f:      dimension der2(45,nbls,lnij,lnkl,ngcd)
hess2e.f:      do 200 ij=nfu(nqij)+1,lnij
hess2e.f:      ij_pi=npxyz(icart,ij)
hess2e.f:      ij_pj=npxyz(jcart,ij)
hess2e.f:      n_ij_i=nia(icart,ij)
hess2e.f:      ij_mi=0
hess2e.f:      if(n_ij_i.gt.0) ij_mi=nmxyz(icart,ij)
hess2e.f:      ij_pi_pj=npxyz(jcart,ij_pi)
hess2e.f:      ij_mi_pj=nmxyz(icart,ij_pj)
hess2e.f:c     ij_mi_mj=0
hess2e.f:c     if(ij_mi.gt.0) ij_mi_mj=nmxyz(jcart,ij_mi)
hess2e.f:c                 or ij_mi_mj=nmxyz(icart,ij_mj)
hess2e.f:        do 250 ijkl=1,nbls
hess2e.f:c       four_ab_pipj=buf2(5,ijkl,ij_pi_pj, kl,iqu)
hess2e.f:c       four_ab_pi  =buf2(5,ijkl,ij_pi   , kl,iqu)
hess2e.f:c       two_b_mi_pj=buf2(3,ijkl,ij_mi_pj, kl,iqu)
hess2e.f:c       two_b_mi   =buf2(3,ijkl,ij_mi   , kl,iqu)
hess2e.f:      der=                buf2(ijkl,ij_pi_pj, kl,iqu,5)
hess2e.f:     *         +xab(ijkl,jcart)*buf2(ijkl,ij_pi , kl,iqu,5)
hess2e.f:      if(n_ij_i.gt.0) then
hess2e.f:        if(ij_mi_pj.gt.0) then
hess2e.f:          der=der-n_ij_i*buf2(ijkl,ij_mi_pj, kl,iqu,3)
hess2e.f:        if(ij_mi   .gt.0) then
hess2e.f:          der=der -n_ij_i*xab(ijkl,jcart)*buf2(ijkl,ij_mi , kl,iqu,3)
hess2e.f:c        write(6,66) nder_ab, ij,kl
hess2e.f:c  66    format('no=',i3,'ij,kl=',2i4)
hess2e.f:c        write(6,67) '(4ab  int. ++ =',buf2(5,ijkl,ij_pi_pj,kl,iqu)
hess2e.f:c        write(6,67) '(4ab  int. +  =',buf2(5,ijkl,ij_pi   ,kl,iqu)
hess2e.f:c        write(6,67) '(2b   int. -+ =',buf2(3,ijkl,ij_mi_pj,kl,iqu)
hess2e.f:c        write(6,67) '(2b   int. -  =',buf2(3,ijkl,ij_mi   ,kl,iqu)
hess2e.f:      der2(nder_ab,ijkl,ij,kl,iqu)=der
hess2e.f:     *                    ngcd,nbls,buf2,lnijr,lnklr,lnij,lnkl,
hess2e.f:     *                    nqij,nqkl,
hess2e.f:c2001 dimension buf2(10,nbls,lnijr,lnklr,ngcd)
hess2e.f:      dimension buf2(nbls,lnijr,lnklr,ngcd,10)
hess2e.f:      dimension der2(45,nbls,lnij,lnkl,ngcd)
hess2e.f:      do 200 ij=nfu(nqij)+1,lnij
hess2e.f:      ij_pi=npxyz(icart,ij)
hess2e.f:      n_ij_i=nia(icart,ij)
hess2e.f:      ij_mi=0
hess2e.f:      if(n_ij_i.gt.0) ij_mi=nmxyz(icart,ij)
hess2e.f:        do 250 ijkl=1,nbls
hess2e.f:c       four_ac_pipj=buf2(6,ijkl,ij_pi,kl_pj,iqu)
hess2e.f:c       two_c_mi_pj=buf2(4,ijkl,ij_mi,kl_pj,iqu)
hess2e.f:c       two_a_pi_mj=buf2(2,ijkl,ij_pi,kl_mj,iqu)
hess2e.f:c       two_0_mi_mj=buf2(1,ijkl,ij_mi,kl_mj,iqu)
hess2e.f:      der=buf2(ijkl,ij_pi,kl_pj,iqu,6)
hess2e.f:      if(n_ij_i.gt.0 .and. ij_mi.gt.0) then
hess2e.f:        der=der-n_ij_i*buf2(ijkl,ij_mi,kl_pj,iqu,4)
hess2e.f:        der=der-n_kl_j*buf2(ijkl,ij_pi,kl_mj,iqu,2)
hess2e.f:      if(n_ij_i.gt.0 .and. n_kl_j.gt.0) then
hess2e.f:        der=der+n_ij_i*n_kl_j*buf2(ijkl,ij_mi,kl_mj,iqu,1)
hess2e.f:      der2(nder_ac,ijkl,ij,kl,iqu)=der
hess2e.f:c        write(6,66) nder_ac, ij,kl
hess2e.f:c        write(6,*)'ij   ,kl   =',ij   ,kl
hess2e.f:c        write(6,*)'ij_pi,kl_pj=',ij_pi,kl_pj
hess2e.f:c        write(6,*)'ij_mi,kl_pj=',ij_mi,kl_pj
hess2e.f:c        write(6,*)'ij_pi,kl_mj=',ij_pi,kl_mj
hess2e.f:c        write(6,*)'ij_mi,kl_mj=',ij_mi,kl_mj
hess2e.f:c  66    format('no=',i3,'ij,kl=',2i4)
hess2e.f:c        write(6,67) '(4ac  int. ++ =',buf2(6,ijkl,ij_pi,kl_pj,iqu)
hess2e.f:c        write(6,67) '(2c   int. -+ =',buf2(4,ijkl,ij_mi,kl_pj,iqu)
hess2e.f:c        write(6,67) '(2a   int. +- =',buf2(2,ijkl,ij_pi,kl_mj,iqu)
hess2e.f:c        write(6,67) '(     int. -- =',buf2(1,ijkl,ij_mi,kl_mj,iqu)
hess2e.f:     *                    ngcd,nbls,buf2,lnijr,lnklr,lnij,lnkl,
hess2e.f:     *                    nqij,nqkl,
hess2e.f:c2001 dimension buf2(10,nbls,lnijr,lnklr,ngcd)
hess2e.f:      dimension buf2(nbls,lnijr,lnklr,ngcd,10)
hess2e.f:      dimension der2(45,nbls,lnij,lnkl,ngcd)
hess2e.f:      do 200 ij=nfu(nqij)+1,lnij
hess2e.f:      ij_pi=npxyz(icart,ij)
hess2e.f:        do 250 ijkl=1,nbls
hess2e.f:c       four_bc_pipj=buf2(7,ijkl,ij_pi,kl_pj,iqu)
hess2e.f:c       four_bc_0ipj=buf2(7,ijkl,ij   ,kl_pj,iqu)
hess2e.f:c       two_b_pi_mj=buf2(3,ijkl,ij_pi,kl_mj,iqu)
hess2e.f:c       two_b_0i_mj=buf2(3,ijkl,ij   ,kl_mj,iqu)
hess2e.f:      der=                buf2(ijkl,ij_pi,kl_pj,iqu,7)
hess2e.f:     *  + xab(ijkl,icart)*buf2(ijkl,ij   ,kl_pj,iqu,7)
hess2e.f:     *    - n_kl_j*(                  buf2(ijkl,ij_pi,kl_mj,iqu,3)
hess2e.f:     *              + xab(ijkl,icart)*buf2(ijkl,ij   ,kl_mj,iqu,3) )
hess2e.f:      der2(nder_bc,ijkl,ij,kl,iqu)=der
hess2e.f:      ij=0
hess2e.f:            ij=ij+1
hess2e.f:                 fock(icr,iat,ij)=fock(icr,iat,ij)*thinv2
hess2e.f:      if(icf.eq.jcf) fock(icr,iat,ij)=fock(icr,iat,ij)+fock(icr,iat,ij)
hess2e.f:      ij=0
hess2e.f:            ij=ij+1
hess2e.f:               fockA(1,iat,ij)=fockA(1,iat,ij)*thres
hess2e.f:               fockA(2,iat,ij)=fockA(2,iat,ij)*thres
hess2e.f:               fockA(3,iat,ij)=fockA(3,iat,ij)*thres
hess2e.f:               fockB(1,iat,ij)=fockB(1,iat,ij)*thres
hess2e.f:               fockB(2,iat,ij)=fockB(2,iat,ij)*thres
hess2e.f:               fockB(3,iat,ij)=fockB(3,iat,ij)*thres
hess2e.f:            fockA(1,iat,ij)=fockA(1,iat,ij)+fockA(1,iat,ij)
hess2e.f:            fockA(2,iat,ij)=fockA(2,iat,ij)+fockA(2,iat,ij)
hess2e.f:            fockA(3,iat,ij)=fockA(3,iat,ij)+fockA(3,iat,ij)
hess2e.f:            fockB(1,iat,ij)=fockB(1,iat,ij)+fockB(1,iat,ij)
hess2e.f:            fockB(2,iat,ij)=fockB(2,iat,ij)+fockB(2,iat,ij)
hess2e.f:            fockB(3,iat,ij)=fockB(3,iat,ij)+fockB(3,iat,ij)
hess2e.f:         ij=0
hess2e.f:            ij=ij+1
hess2e.f:            ij1=i1*(i1-1)/2+j1
hess2e.f:            if(j1.gt.i1) ij1=j1*(j1-1)/2+i1
hess2e.f:                     ff=fock(icr,iat,ij)+sign*fock(icr,iat1,ij1)
hess2e.f:                     if(ij.gt.ij1) ff=ff*half
hess2e.f:                     fock(icr,iat,ij)=ff
hess2e.f:                     fock(icr,iat1,ij1)=sign*ff
hess2e.f:                     ff=fock(icr,iat,ij)+sign*fock(icr,iat1,ij1)
hess2e.f:                     fock(icr,iat,ij)=ff
hess2e.f:                     fock(icr,iat1,ij1)=sign*ff
hess2e.f:         do ij=1,ntri
hess2e.f:            bl(ij,1)=f1(1,iat,ij)
hess2e.f:            bl(ij,2)=f1(2,iat,ij)
hess2e.f:            bl(ij,3)=f1(3,iat,ij)
hess2e.f:         ij=0
hess2e.f:            ij=ij+1
hess2e.f:            ij1=i1*(i1-1)/2+j1
hess2e.f:            if(j1.gt.i1) ij1=j1*(j1-1)/2+i1
hess2e.f:                     ff=fock(ij,icr,1)+sign*fock(ij1,icr,1)
hess2e.f:                     if(ij.gt.ij1) ff=ff*half
hess2e.f:                     fock(ij ,icr,1)=ff
hess2e.f:                     fock(ij1,icr,1)=sign*ff
hess2e.f:                     ff=fock(ij,icr,1)+sign*fock(ij1,icr,2)
hess2e.f:                     fock(ij ,icr,1)=ff
hess2e.f:                     fock(ij1,icr,2)=sign*ff
hess2e.f:         do ij=1,ntri
hess2e.f:            bl(ij,1)=f1(1,iat,ij)
hess2e.f:            bl(ij,2)=f1(2,iat,ij)
hess2e.f:            bl(ij,3)=f1(3,iat,ij)
hess2e.f:         ij=0
hess2e.f:            ij=ij+1
hess2e.f:            ij1=i1*(i1-1)/2+j1
hess2e.f:            if(j1.gt.i1) ij1=j1*(j1-1)/2+i1
hess2e.f:                  fock(ij1,icr,2)=fock(ij,icr,1)*fct*ngxyz(icr)
hessana.f:c   where D=2*CC+   and g_ijkl=(ij|kl) - 0.5 (il|kj)
hessana.f:c 1. + tr D0*G(D0,gxy) = Sum(ijkl) Dij*dkl*gxy,ijkl (2-el)
hessana.f:c       Tr { D0*G(D0,gxy)} = Sum ijkl {Dij*Dkl*gxy,ijkl}
hessana.f:c                          4*nbls*lnijkl*ngcd if ngcd>1 (transpose)
hessana.f:         do ij=1,ntri
hessana.f:            write(6,111) ij,fder(1,iat,ij)*factor,
hessana.f:     *                      fder(2,iat,ij)*factor,
hessana.f:     *                      fder(3,iat,ij)*factor
hessana.f:  111 format('ij=',i3,2x,3(f12.6,1x))
hessana.f:            ij=0
hessana.f:                  ij=ij+1
hessana.f:                  ij1=ic1*(ic1-1)/2+jc1
hessana.f:                  if(jc1.gt.ic1) ij1=jc1*(jc1-1)/2+ic1
hessana.f:c                 den1(ij1,1,iat)=fct*den1(ij,1,ias)*negx(isymop)
hessana.f:c                 den1(ij1,2,iat)=fct*den1(ij,2,ias)*negy(isymop)
hessana.f:c                 den1(ij1,3,iat)=fct*den1(ij,3,ias)*negz(isymop)
hessana.f:c                 wen1(ij1,1,iat)=fct*wen1(ij,1,ias)*negx(isymop)
hessana.f:c                 wen1(ij1,2,iat)=fct*wen1(ij,2,ias)*negy(isymop)
hessana.f:c                 wen1(ij1,3,iat)=fct*wen1(ij,3,ias)*negz(isymop)
hessana.f:                  den1(ij1,1, 2 )=fct*den1(ij,1, 1 )*negx(isymop)
hessana.f:                  den1(ij1,2, 2 )=fct*den1(ij,2, 1 )*negy(isymop)
hessana.f:                  den1(ij1,3, 2 )=fct*den1(ij,3, 1 )*negz(isymop)
hessana.f:                    den1B(ij1,1, 2 )=fct*den1B(ij,1, 1 )*negx(isymop)
hessana.f:                    den1B(ij1,2, 2 )=fct*den1B(ij,2, 1 )*negy(isymop)
hessana.f:                    den1B(ij1,3, 2 )=fct*den1B(ij,3, 1 )*negz(isymop)
hessana.f:                  wen1(ij1,1, 2 )=fct*wen1(ij,1, 1 )*negx(isymop)
hessana.f:                  wen1(ij1,2, 2 )=fct*wen1(ij,2, 1 )*negy(isymop)
hessana.f:                  wen1(ij1,3, 2 )=fct*wen1(ij,3, 1 )*negz(isymop)
hess_dft.f:          denomij=max(abs(prr+fdxyz*prg),abs(dx*pfprod+fpg),
hess_dft.f:          if(denomij.gt.epsi)then
hess_dft.f:             thrshm=thrsh1/denomij
hess_dft.f:              valt=max(Abs(vaij),Abs(V1X),Abs(V1Y),Abs(V1Z))
hess_dft.f:              if(svmax*abs(vij)+swmax*(abs(vijx)+abs(vijy)+
hess_dft.f:     $            abs(vijz)).lt.thrsh)  GO TO 80
hess_dft.f:          denij=max(den1,den2,den3)
hess_dft.f:          if(denij.gt.epsi)then
hess_dft.f:             thrshm=thrsh1/denij
hess_dft.f:              valt=max(Abs(vaij2),Abs(V1X2),Abs(V1Y2),Abs(V1Z2))
hess_dft.f:              if(svmax*abs(vij)+swmax*(abs(vijx)+abs(vijy)+
hess_dft.f:     $            abs(vijz)).lt.thrsh)  GO TO 80
hess_dft.f:     $                   NAtoms, XC,     AIJ,    rrij,   RDist,
hess_dft.f:C  rrij    -  inverse of interatomic distances
hess_dft.f:      REAL*8 AIJ(NAtoms,NAtoms),rrij(natoms,natoms)
hess_dft.f:      xmu = (RDist(IAtm)-RDist(JAtm))*rrij(IAtm,JAtm)
hess_dft.f:     $            XC(1,IAtm),XC(2,IAtm),XC(3,IAtm),rrij(IATOM,IAtm),
hess_dft.f:     $             XC(1,IAtm),XC(2,IAtm),XC(3,IAtm),rrij(JAtm,IAtm),
hess_dft.f:     $                NAtoms,XC,     AIJ,    rrij, P,
hess_dft.f:C  rrij    -  inverse of interatomic distances
hess_dft.f:      REAL*8 AIJ(NAtoms,NAtoms),rrij(natoms,natoms)
hess_dft.f:      xmu = (DistI-DistJ)*rrij(IAtm,JAtm)
hess_dft.f:     $       XC(1,IAtm),XC(2,IAtm),XC(3,IAtm),rrij(IAtm,JAtm),
hessdft.f:C  calculate inverse atomic distances, Becke aij parameters
huckel.f:C    Hii = hii;      Hij = 0.5K*(hii + hjj)*Sij
inc123.f:      ij=0
inc123.f:         ij=ij+1
inc123.f:         xint(ij)=yint(ij)*ft
inc123.f:         xint(ij+ln)=yint(ij+ln)*ft
inc123.f:         xint(ij+2*ln)=yint(ij+2*ln)*ft
inc123.f:         xint(ij+3*ln)=yint(ij+3*ln)*ft
inc123.f:      ij=0
inc123.f:         ij=ij+1
inc123.f:         xint(ij)=xint(ij)-yint(ij)*ft
inc123.f:         xint(ij+ln)=xint(ij+ln)-yint(ij+ln)*ft
inc123.f:         xint(ij+2*ln)=xint(ij+2*ln)-yint(ij+2*ln)*ft
inc123.f:         xint(ij+3*ln)=xint(ij+3*ln)-yint(ij+3*ln)*ft
inc123.f:      ij=0
inc123.f:         ij=ij+1
inc123.f:         xint(ij)=xint(ij)-yint(ij)*ft
inc123.f:         xint(ij+ln)=xint(ij+ln)-yint(ij+ln)*ft
inc123.f:         xint(ij+2*ln)=xint(ij+2*ln)-yint(ij+2*ln)*ft
inc123.f:         xint(ij+3*ln)=xint(ij+3*ln)-yint(ij+3*ln)*ft
inc123.f:      ij=0
inc123.f:         ij=ij+1
inc123.f:         xint(ij)=xint(ij)-yint(ij)*ft
inc123.f:         xint(ij+ln)=xint(ij+ln)-yint(ij+ln)*ft
inc123.f:         xint(ij+2*ln)=xint(ij+2*ln)-yint(ij+2*ln)*ft
inc123.f:         xint(ij+3*ln)=xint(ij+3*ln)-yint(ij+3*ln)*ft
inc123.f:      ij=0
inc123.f:      ij=ij+1
inc123.f:      xint(ij)=fzj*ximp(ij)-fyj*ximp(ij+ln)
inc123.f:      xint(ij+ln)=fxj*ximp(ij+2*ln)-fzj*ximp(ij+3*ln)
inc123.f:      xint(ij+2*ln)=fyj*ximp(ij+4*ln)-fxj*ximp(ij+5*ln)
inc123.f:         ij=0
inc123.f:         ij=ij+1
inc123.f:         adx= fxj*ximp(ij)     -twob*ximp(ij+ln)
inc123.f:         ady= fyj*ximp(ij+2*ln)-twob*ximp(ij+3*ln)
inc123.f:         adz= fzj*ximp(ij+4*ln)-twob*ximp(ij+5*ln)
inc123.f:c        xint(ij)=xint(ij)          +   xb(2)*adz - xb(3)*ady
inc123.f:c        xint(ij+ln)=xint(ij+ln)    +   xb(3)*adx - xb(1)*adz
inc123.f:c        xint(ij+2*ln)=xint(ij+2*ln)+   xb(1)*ady - xb(2)*adx
inc123.f:         xint(ij)=xint(ij)          +   ybg*adz - zbg*ady
inc123.f:         xint(ij+ln)=xint(ij+ln)    +   zbg*adx - xbg*adz
inc123.f:         xint(ij+2*ln)=xint(ij+2*ln)+   xbg*ady - ybg*adx
inc123.f:              ij=(i-1)*3 + j
inc123.f:              loc=(ij-1)*ln
inc123.f:         ij=0
inc123.f:               ij=ij+1
inc123.f:      xint(ij+lcas)=
inc123.f:c    1              +(-bmi*fcs + cmi*fbs)*fnit* rm01(loc1+ij)
inc123.f:c    1              -(-bmi*fct + cmi*fbt)*fnis* rm01(loc2+ij)
inc123.f:c    2    -(-bmi*fcs + cmi*fbs )*twob* rp01(loc1+ij)
inc123.f:c    2    +(-bmi*fct + cmi*fbt )*twob* rp01(loc2+ij)
inc123.f:     1              +(-bmig*fcs + cmig*fbs)*fnit* rm01(loc1+ij)
inc123.f:     1              -(-bmig*fct + cmig*fbt)*fnis* rm01(loc2+ij)
inc123.f:     2    -(-bmig*fcs + cmig*fbs )*twob* rp01(loc1+ij)
inc123.f:     2    +(-bmig*fct + cmig*fbt )*twob* rp01(loc2+ij)
inc123.f:     1    -bmi*fmis*fnit* tab_pmm(loc3+ij)
inc123.f:     1    +bmi*fmit*fnis* tab_pmm(loc4+ij)
inc123.f:     1    +cmi*fmis*fnit* tab_pmm(loc5+ij)
inc123.f:     1    -cmi*fmit*fnis* tab_pmm(loc6+ij)
inc123.f:     2    +bmi*twob*( fmis*tab_pmp(loc3+ij)
inc123.f:     2              - fmit*tab_pmp(loc4+ij) )
inc123.f:     2    -cmi*twob*( fmis*tab_pmp(loc5+ij)
inc123.f:     2               -fmit*tab_pmp(loc6+ij) )
inc123.f:     2    +bmi*twoa*( fnit*tab_ppm(loc3+ij)
inc123.f:     2              - fnis*tab_ppm(loc4+ij) )
inc123.f:     2    -cmi*twoa*( fnit*tab_ppm(loc5+ij)
inc123.f:     2              - fnis*tab_ppm(loc6+ij) )
inc123.f:     3  -twoa*twob*bmi*( (tmi-tni)*rpp0(loc7+ij)
inc123.f:     3                  -(smi-sni)*rpp0(loc8+ij) )
inc123.f:     3  +twoa*twob*cmi*( (tmi-tni)*rpp0(loc9+ij)
inc123.f:     3                  -(smi-sni)*rpp0(loc0+ij) )
inc123.f:         ij=0
inc123.f:               ij=ij+1
inc123.f:      xint(ij+lcas)= xint(ij+lcas)
inc123.f:c    1             + (-bni*fcs + cni*fbs)*fmit* rm10(loc1+ij)
inc123.f:c    1              -(-bni*fct + cni*fbt)*fmis* rm10(loc2+ij)
inc123.f:c    2    -(-bni*fcs + cni*fbs )*twoa* rp10(loc1+ij)
inc123.f:c    2    +(-bni*fct + cni*fbt )*twoa* rp10(loc2+ij)
inc123.f:     1             + (-bnig*fcs + cnig*fbs)*fmit* rm10(loc1+ij)
inc123.f:     1              -(-bnig*fct + cnig*fbt)*fmis* rm10(loc2+ij)
inc123.f:     2    -(-bnig*fcs + cnig*fbs )*twoa* rp10(loc1+ij)
inc123.f:     2    +(-bnig*fct + cnig*fbt )*twoa* rp10(loc2+ij)
inc123.f:     1    -bni*fnis*fmit* rpmm(loc3+ij)
inc123.f:     1    +bni*fnit*fmis* rpmm(loc4+ij)
inc123.f:     1    +cni*fnis*fmit* rpmm(loc5+ij)
inc123.f:     1    -cni*fnit*fmis* rpmm(loc6+ij)
inc123.f:      xint(ij+lcas)= xint(ij+lcas)
inc123.f:     2    +bni*twoa*( fnis*rpmp(loc3+ij)
inc123.f:     2              - fnit*rpmp(loc4+ij))
inc123.f:     2    -cni*twoa*( fnis*rpmp(loc5+ij)
inc123.f:     2               -fnit*rpmp(loc6+ij))
inc123.f:     2    +bni*twob*( fmit*rppm(loc3+ij)
inc123.f:     2              - fmis*rppm(loc4+ij) )
inc123.f:     2    -cni*twob*( fmit*rppm(loc5+ij)
inc123.f:     2              - fmis*rppm(loc6+ij) )
inc123.f:     3  +twoa*twob*bni*( (tmi-tni)*rpp0(loc7+ij)
inc123.f:     3                  -(smi-sni)*rpp0(loc8+ij) )
inc123.f:     3  -twoa*twob*cni*( (tmi-tni)*rpp0(loc9+ij)
inc123.f:     3                  -(smi-sni)*rpp0(loc0+ij) )
inc123.f:         ij=0
inc123.f:               ij=ij+1
inc123.f:               rppm(ij+lcas)= zero
inc123.f:     *             +    ani*fmib*rm10( (kb-1)*ln+ij )
inc123.f:     *             +    ami*fnib*rm01( (kb-1)*ln+ij )
inc123.f:     1             -    ani*twoa*rp10( (kb-1)*ln+ij )
inc123.f:     1             -    ami*twob*rp01( (kb-1)*ln+ij )
inc123.f:     2  + float(idk(ka,kb))*xin0(ij)
inc123.f:     2  + fmib*tab_mp( ((kb-1)*3+ka-1)*ln  +ij )
inc123.f:     2  + fnib*tab_mp( ((ka-1)*3+kb-1)*ln  +ij + 9*ln)
inc123.f:     3   -twoa*tab_mp( ((kb-1)*3+ka-1)*ln+ij + 18*ln)
inc123.f:     3   -twob*tab_mp( ((ka-1)*3+kb-1)*ln+ij + 18*ln)
inc123.f:         ij=0
inc123.f:               ij=ij+1
inc123.f:      xint(lcah+ij)=fmic*fnis*tab_mm(loc3+ij)-fmis*fnic*tab_mm(loc4+ij)
inc123.f:     *  +twob*( -fmic*tab_mp(loc3+ij) + fmis*tab_mp(loc4+ij) )
inc123.f:     *  +twoa*( -fnis*tab_mp(loc3+ij+9*ln) + fnic*tab_mp(loc4+ij+9*ln))
inc123.f:     *  +twoa*twob*( (smi-sni)*rp10(loc1+ij)-(cmi-cni)*rp10(loc2+ij) )
intanu.f:      ij=0
intanu.f:         ij=ij+1
intanu.f:         xint(ij+loc)=xfc(ixff+jxf)*yfc(iyff+jyf)*zfc(izff+jzf)*s0
intanu.f:   10    xint(ij+loc)=zero
intanu.f:      ij=0
intanu.f:         ij=ij+1
intanu.f:         xint(ij+loc)=xfc(ixff+jxf)*yfc(iyff+jyf)*zfc(izff+jzf)*s0
intanu.f:   10    xint(ij+loc)=zero
intanu.f:      ij=0
intanu.f:         ij=ij+1
intanu.f:         xint(ij+loc)=xfc(ixff+jxf)*yfc(iyff+jyf)*zfc(izff+jzf)*s0
intanu.f:   10    xint(ij+loc)=zero
intcal.f:      ij=0
intcal.f:          ij=ij+1
intcal.f:          s(ij)=x(i,j,igc,jgc)
intcal.f:          iij=-1
intcal.f:                  iij=iij+1
intcal.f:                    ij=ii+jff
intcal.f:                    oneint(ij)=bl(is+iij)
intcal.f:              ij=0
intcal.f:                  ij=ij+1
intcal.f:                  ss(j1,i1,jgc,igc)=ss(j1,i1,jgc,igc)+s(ij)*coefi*coefj
intcal.f:      ij=0
intcal.f:         ij=ij+1
intcal.f:         xint(ij)=yint(ij)*ft
intcal.f:      ij=0
intcal.f:         ij=ij+1
intcal.f:         xint(ij)=xint(ij)-yint(ij)*ft
intcal.f:      ij=0
intcal.f:         ij=ij+1
intcal.f:         xint(ij)=xint(ij)-yint(ij)*ft
intcal.f:      ij=0
intcal.f:         ij=ij+1
intcal.f:         xint(ij)=xint(ij)-yint(ij)*ft
intcal.f:      ij=0
intcal.f:      ij1=0
intcal.f:         ij=ij+1
intcal.f:         ij1=ij1+1
intcal.f:         if (i.eq.2) xint(ij1)=(two*s(ij+jlen1)-s(ij)-s(ij-jlen1))*sqtw
intcal.f:         if (i.eq.3) xint(ij1)=(s(ij-jlen1-jlen1)-s(ij-jlen1))*half
intcal.f:   70    xint(ij1)=s(ij)
intcal.f:      call tfer(xint,s,ij1)
intcal.f:      ij=0
intcal.f:      ij1=0
intcal.f:            ij=ij+1
intcal.f:            ij1=ij1+1
intcal.f:            if (j.eq.2) xint(ij1)=(two*s(ij+1)-s(ij)-s(ij-1))*sqtw
intcal.f:            if (j.eq.3) xint(ij1)=(s(ij-2)-s(ij-1))*half
intcal.f:  120       xint(ij1)=s(ij)
intcal.f:      call tfer(xint,s,ij1)
int_cphf.f:           call getint_2(4*iblstore , ijklsiz) ! I*2
int_cphf.f:           call getint_2(4*iqstore  , ijkllab) ! I*2
int_cphf.f:     $        bl(ixint4),  bl(ixint8), bl(ijkllab),bl(ijklsiz),
int_cphf.f:     *                     nbls,ngcd,lnijkl,labels,length,lgenct )
int_cphf.f:      dimension buf(nbls,lnijkl,ngcd)
int_cphf.f:      do 100 ijklp=1,nbls
int_cphf.f:      ngcq=lgenct(ijklp)
int_cphf.f:        icff=labels(1,iqu,ijklp)
int_cphf.f:        jcff=labels(2,iqu,ijklp)
int_cphf.f:        kcff=labels(3,iqu,ijklp)
int_cphf.f:        lcff=labels(4,iqu,ijklp)
int_cphf.f:c  Indices and integrals in the quartet ijkl :
int_cphf.f:          xint0=buf(ijklp,integ,iqu)
int_cphf.f:      ijklp=0
int_cphf.f:            ijklp=ijklp+1
int_cphf.f:            icff=ilab(ijklp)
int_cphf.f:            jcff=jlab(ijklp)
int_cphf.f:            kcff=klab(ijklp)
int_cphf.f:            lcff=llab(ijklp)
int_cphf.f:c        do 200 ij=1,ntri
int_cphf.f:c           fock(ij,1)=fock(ij,1)*resc
int_cphf.f:c           fock(ij,2)=fock(ij,2)*resc
int_cphf.f:c           fock(ij,3)=fock(ij,3)*resc
int_cphf.f:     $        xinteg4,     xinteg8,    ijkllab,    ijklsiz,
int_cphf.f:      integer*2 ijkllab(4,iqstore) !   ilab,jlab,klab,llab
int_cphf.f:      integer*2 ijklsiz(4,iblstore)!   isiz(isbl),jsiz,ksiz,lsiz  
int_cphf.f:      call read_int2(iunit1,ijklsiz,4*iblstore)
int_cphf.f:      call read_int2(iunit3,ijkllab,4*iqstore)
int_cphf.f:      ijklp=0
int_cphf.f:         ilen=ijklsiz(1,isbl)
int_cphf.f:         jlen=ijklsiz(2,isbl)
int_cphf.f:         klen=ijklsiz(3,isbl)
int_cphf.f:         llen=ijklsiz(4,isbl)
int_cphf.f:            ijklp=ijklp+1
int_cphf.f:            icff=ijkllab(1,ijklp)
int_cphf.f:            jcff=ijkllab(2,ijklp)
int_cphf.f:            kcff=ijkllab(3,ijklp)
int_cphf.f:            lcff=ijkllab(4,ijklp)
int_cphf.f:      do ij=1,ntri
int_cphf.f:         fock(ij,1)=fock(ij,1)*factor
int_cphf.f:         fock(ij,2)=fock(ij,2)*factor
int_cphf.f:         fock(ij,3)=fock(ij,3)*factor
int_d1g0.f:c transform selected density bl(lselect) dens(ij) into denspar(ics,jcs)
int_d1g0.f:     *                  nbls,ngcd,lnijkl,thres1,labels,length,lgenct)
int_d1g0.f:      dimension buf(nbls,lnijkl,ngcd)
int_d1g0.f:      do 100 ijklp=1,nbls
int_d1g0.f:        ngcq=lgenct(ijklp)
int_d1g0.f:           icff=labels(1,iqu,ijklp)
int_d1g0.f:           jcff=labels(2,iqu,ijklp)
int_d1g0.f:           kcff=labels(3,iqu,ijklp)
int_d1g0.f:           lcff=labels(4,iqu,ijklp)
int_d1g0.f:           dij=densp(ics,jcs)
int_d1g0.f:           dmax=max(4.d0*dij,4.d0*dkl,dik,dil,djk,djl)
int_d1g0.f:c  Indices and integrals in the quartet ijkl :
int_d1g0.f:          xint0=buf(ijklp,integ,iqu)
int_d1g0.f:                  ijf = ii+jcf
int_d1g0.f:                  ijf = jj+icf
int_d1g0.f:c  ***  ij  ***
int_d1g0.f:                fock(ijf,1)=fock(ijf,1) + dens(klf,1)*xint4
int_d1g0.f:                fock(ijf,2)=fock(ijf,2) + dens(klf,2)*xint4
int_d1g0.f:                fock(ijf,3)=fock(ijf,3) + dens(klf,3)*xint4
int_d1g0.f:                fock(klf,1)=fock(klf,1) + dens(ijf,1)*xint4
int_d1g0.f:                fock(klf,2)=fock(klf,2) + dens(ijf,2)*xint4
int_d1g0.f:                fock(klf,3)=fock(klf,3) + dens(ijf,3)*xint4
int_d1g0.f:     *                    nbls,ngcd,lnijkl,thres1,labels,length,lgenct)
int_d1g0.f:      dimension buf(nbls,lnijkl,ngcd)
int_d1g0.f:      do 100 ijklp=1,nbls
int_d1g0.f:        ngcq=lgenct(ijklp)
int_d1g0.f:           icff=labels(1,iqu,ijklp)
int_d1g0.f:           jcff=labels(2,iqu,ijklp)
int_d1g0.f:           kcff=labels(3,iqu,ijklp)
int_d1g0.f:           lcff=labels(4,iqu,ijklp)
int_d1g0.f:           dij=densp(ics,jcs)
int_d1g0.f:           dmax=max(4.d0*dij,4.d0*dkl,dik,dil,djk,djl)
int_d1g0.f:c  Indices and integrals in the quartet ijkl :
int_d1g0.f:          xint0=buf(ijklp,integ,iqu)
int_d1g0.f:                  ijf = ii1+jc1
int_d1g0.f:                  ijf = jj1+ic1
int_d1g0.f:c  ***  ij  ***
int_d1g0.f:                fock(ijf,1)=fock(ijf,1) + dens(klf,1)*xint4
int_d1g0.f:                fock(ijf,2)=fock(ijf,2) + dens(klf,2)*xint4
int_d1g0.f:                fock(ijf,3)=fock(ijf,3) + dens(klf,3)*xint4
int_d1g0.f:                fock(klf,1)=fock(klf,1) + dens(ijf,1)*xint4
int_d1g0.f:                fock(klf,2)=fock(klf,2) + dens(ijf,2)*xint4
int_d1g0.f:                fock(klf,3)=fock(klf,3) + dens(ijf,3)*xint4
int_d1g0.f:                  ijf = ii+jcf
int_d1g0.f:                  ijf = jj+icf
int_d1g0.f:c  ***  ij  ***
int_d1g0.f:                fock(ijf,1)=fock(ijf,1) + dens(klf,1)*xcoul
int_d1g0.f:                fock(ijf,2)=fock(ijf,2) + dens(klf,2)*xcoul
int_d1g0.f:                fock(ijf,3)=fock(ijf,3) + dens(klf,3)*xcoul
int_d1g0.f:                fock(klf,1)=fock(klf,1) + dens(ijf,1)*xcoul
int_d1g0.f:                fock(klf,2)=fock(klf,2) + dens(ijf,2)*xcoul
int_d1g0.f:                fock(klf,3)=fock(klf,3) + dens(ijf,3)*xcoul
int_d1g0nat.f:           call getint_2(4*iblstore , ijklsiz) ! I*2
int_d1g0nat.f:           call getint_2(4*iqstore  , ijkllab) ! I*2
int_d1g0nat.f:     $        bl(ixint4),  bl(ixint8), bl(ijkllab),bl(ijklsiz),
int_d1g0nat.f:     $        bl(ixint4),  bl(ixint8), bl(ijkllab),bl(ijklsiz),
int_d1g0nat.f:     $        bl(ijkllab), bl(ijklsiz),bl(nquarts),iqstore,
int_d1g0nat.f:     $        bl(ijkllab), bl(ijklsiz),bl(nquarts),iqstore,
int_d1g0nat.f:     $        nbls,        ngcd,        lnijkl,      thres1,
int_d1g0nat.f:      dimension buf(nbls,lnijkl,ngcd)
int_d1g0nat.f:      do 100 ijklp=1,nbls
int_d1g0nat.f:        ngcq=lgenct(ijklp)
int_d1g0nat.f:           icff=labels(1,iqu,ijklp)
int_d1g0nat.f:           jcff=labels(2,iqu,ijklp)
int_d1g0nat.f:           kcff=labels(3,iqu,ijklp)
int_d1g0nat.f:           lcff=labels(4,iqu,ijklp)
int_d1g0nat.f:           dij=densp(ics,jcs)
int_d1g0nat.f:           dmax=max(4.d0*dij,4.d0*dkl,dik,dil,djk,djl)
int_d1g0nat.f:c  Indices and integrals in the quartet ijkl :
int_d1g0nat.f:c         output : ijf & density elements xij,yij,zij
int_d1g0nat.f:          xint0=buf(ijklp,integ,iqu)
int_d1g0nat.f:            ijf = ii+jcf
int_d1g0nat.f:            ijf = jj+icf
int_d1g0nat.f:                 call daxpy(nat3,xint4,dens(1,klf),1,fock(1,ijf),1)
int_d1g0nat.f:                 call daxpy(nat3,xint4,dens(1,ijf),1,fock(1,klf),1)
int_d1g0nat.f:     $        lnijkl,      thres1,      labels,      length,
int_d1g0nat.f:      dimension buf(nbls,lnijkl,ngcd)
int_d1g0nat.f:      do 100 ijklp=1,nbls
int_d1g0nat.f:        ngcq=lgenct(ijklp)
int_d1g0nat.f:           icff=labels(1,iqu,ijklp)
int_d1g0nat.f:           jcff=labels(2,iqu,ijklp)
int_d1g0nat.f:           kcff=labels(3,iqu,ijklp)
int_d1g0nat.f:           lcff=labels(4,iqu,ijklp)
int_d1g0nat.f:           dij=densp(ics,jcs)
int_d1g0nat.f:           dmax=max(4.d0*dij,4.d0*dkl,dik,dil,djk,djl)
int_d1g0nat.f:c  Indices and integrals in the quartet ijkl :
int_d1g0nat.f:          xint0=buf(ijklp,integ,iqu)
int_d1g0nat.f:              ijf = ii1+jc1
int_d1g0nat.f:              ijf = jj1+ic1
int_d1g0nat.f:                 call daxpy(nat3,xint4,dens(1,klf),1,fock(1,ijf),1)
int_d1g0nat.f:                 call daxpy(nat3,xint4,dens(1,ijf),1,fock(1,klf),1)
int_d1g0nat.f:            ijf = ii+jcf
int_d1g0nat.f:            ijf = jj+icf
int_d1g0nat.f:                 call daxpy(nat3,xcoul,dens(1,klf),1,fock(1,ijf),1)
int_d1g0nat.f:                 call daxpy(nat3,xcoul,dens(1,ijf),1,fock(1,klf),1)
int_d1g0nat.f:     *                           map_fs,ncs,nbls,ngcd,lnijkl,
int_d1g0nat.f:      dimension buf(nbls,lnijkl,ngcd)
int_d1g0nat.f:      do 100 ijklp=1,nbls
int_d1g0nat.f:        ngcq=lgenct(ijklp)
int_d1g0nat.f:           icff=labels(1,iqu,ijklp)
int_d1g0nat.f:           jcff=labels(2,iqu,ijklp)
int_d1g0nat.f:           kcff=labels(3,iqu,ijklp)
int_d1g0nat.f:           lcff=labels(4,iqu,ijklp)
int_d1g0nat.f:           dij=densp(ics,jcs)
int_d1g0nat.f:           dmax=4.0d0*max(dij,dkl)
int_d1g0nat.f:c  Indices and integrals in the quartet ijkl :
int_d1g0nat.f:c         output : ijf & density elements xij,yij,zij
int_d1g0nat.f:          xint0=buf(ijklp,integ,iqu)
int_d1g0nat.f:            ijf = ii+jcf
int_d1g0nat.f:            ijf = jj+icf
int_d1g0nat.f:             fock(icoordiat,ijf)=fock(icoordiat,ijf) +
int_d1g0nat.f:     $                           dens(icoordiat,ijf)*xint4
int_d1g0nat.f:     *                           map_fs,ncs,nbls,ngcd,lnijkl,
int_d1g0nat.f:      dimension buf(nbls,lnijkl,ngcd)
int_d1g0nat.f:      do 100 ijklp=1,nbls
int_d1g0nat.f:        ngcq=lgenct(ijklp)
int_d1g0nat.f:           icff=labels(1,iqu,ijklp)
int_d1g0nat.f:           jcff=labels(2,iqu,ijklp)
int_d1g0nat.f:           kcff=labels(3,iqu,ijklp)
int_d1g0nat.f:           lcff=labels(4,iqu,ijklp)
int_d1g0nat.f:           dij=densp(ics,jcs)
int_d1g0nat.f:           dmax=4.0d0*max(dij,dkl)
int_d1g0nat.f:c  Indices and integrals in the quartet ijkl :
int_d1g0nat.f:          xint0=buf(ijklp,integ,iqu)
int_d1g0nat.f:            ijf = ii1+jc1
int_d1g0nat.f:            ijf = jj1+ic1
int_d1g0nat.f:             fock(icoordiat,ijf)=fock(icoordiat,ijf) +
int_d1g0nat.f:     $                           dens(icoordiat,ijf)*xint4
int_d1g0nat.f:            ijf = ii+jcf
int_d1g0nat.f:            ijf = jj+icf
int_d1g0nat.f:             fock(icoordiat,ijf)=fock(icoordiat,ijf) +
int_d1g0nat.f:     $                           dens(icoordiat,ijf)*xcoul
int_d1g0nat.f:      ijklp=0
int_d1g0nat.f:          ijklp=ijklp+1
int_d1g0nat.f:          icff=ilab(ijklp)
int_d1g0nat.f:          jcff=jlab(ijklp)
int_d1g0nat.f:          kcff=klab(ijklp)
int_d1g0nat.f:          lcff=llab(ijklp)
int_d1g0nat.f:          dij=densp(ics,jcs)
int_d1g0nat.f:          dmax=max(4.d0*dij,4.d0*dkl,dik,dil,djk,djl)
int_d1g0nat.f:              ij=lind(max0(icf,jcf))+min0(icf,jcf)
int_d1g0nat.f:                    call daxpy(nat3,xint4,dens(1,kl),1,fock(1,ij),1)
int_d1g0nat.f:                    call daxpy(nat3,xint4,dens(1,ij),1,fock(1,kl),1)
int_d1g0nat.f:      ijklp=0
int_d1g0nat.f:          ijklp=ijklp+1
int_d1g0nat.f:          icff=ilab(ijklp)
int_d1g0nat.f:          jcff=jlab(ijklp)
int_d1g0nat.f:          kcff=klab(ijklp)
int_d1g0nat.f:          lcff=llab(ijklp)
int_d1g0nat.f:          dij=densp(ics,jcs)
int_d1g0nat.f:          dmax=max(4.d0*dij,4.d0*dkl,dik,dil,djk,djl)
int_d1g0nat.f:              ij=lind(max0(ic1,jc1))+min0(ic1,jc1)
int_d1g0nat.f:                    call daxpy(nat3,xint4,dens(1,kl),1,fock(1,ij),1)
int_d1g0nat.f:                    call daxpy(nat3,xint4,dens(1,ij),1,fock(1,kl),1)
int_d1g0nat.f:                      ijc=max0(lic,ljc)+min0(icf,jcf)
int_d1g0nat.f:                      call daxpy(nat3,xco,dens(1,klc),1,fock(1,ijc),1)
int_d1g0nat.f:                      call daxpy(nat3,xco,dens(1,ijc),1,fock(1,klc),1)
int_d1g0nat.f:      ijklp=0
int_d1g0nat.f:          ijklp=ijklp+1
int_d1g0nat.f:          icff=ilab(ijklp)
int_d1g0nat.f:          jcff=jlab(ijklp)
int_d1g0nat.f:          kcff=klab(ijklp)
int_d1g0nat.f:          lcff=llab(ijklp)
int_d1g0nat.f:          dij=densp(ics,jcs)
int_d1g0nat.f:          dmax=max(4.d0*dij,4.d0*dkl,dik,dil,djk,djl)
int_d1g0nat.f:              ij=lind(max0(icf,jcf))+min0(icf,jcf)
int_d1g0nat.f:                    call daxpy(nat3,xint4,dens(1,kl),1,fock(1,ij),1)
int_d1g0nat.f:                    call daxpy(nat3,xint4,dens(1,ij),1,fock(1,kl),1)
int_d1g0nat.f:      ijklp=0
int_d1g0nat.f:          ijklp=ijklp+1
int_d1g0nat.f:          icff=ilab(ijklp)
int_d1g0nat.f:          jcff=jlab(ijklp)
int_d1g0nat.f:          kcff=klab(ijklp)
int_d1g0nat.f:          lcff=llab(ijklp)
int_d1g0nat.f:          dij=densp(ics,jcs)
int_d1g0nat.f:          dmax=max(4.d0*dij,4.d0*dkl,dik,dil,djk,djl)
int_d1g0nat.f:              ij=lind(max0(ic1,jc1))+min0(ic1,jc1)
int_d1g0nat.f:                    call daxpy(nat3,xint4,dens(1,kl),1,fock(1,ij),1)
int_d1g0nat.f:                    call daxpy(nat3,xint4,dens(1,ij),1,fock(1,kl),1)
int_d1g0nat.f:                      ijc=lind(max0(icf,jcf))+min0(icf,jcf)
int_d1g0nat.f:                      call daxpy(nat3,xco,dens(1,klc),1,fock(1,ijc),1)
int_d1g0nat.f:                      call daxpy(nat3,xco,dens(1,ijc),1,fock(1,klc),1)
int_d1g0nat.f:     $        xinteg4,     xinteg8,    ijkllab,    ijklsiz,
int_d1g0nat.f:      integer*2 ijkllab(4,iqstore) !   ilab,jlab,klab,llab
int_d1g0nat.f:      integer*2 ijklsiz(4,iblstore)!   isiz(isbl),jsiz,ksiz,lsiz  
int_d1g0nat.f:      call read_int2(iunit1,ijklsiz,4*iblstore)
int_d1g0nat.f:      call read_int2(iunit3,ijkllab,4*iqstore)
int_d1g0nat.f:      ijklp=0
int_d1g0nat.f:          ilen=ijklsiz(1,isbl)
int_d1g0nat.f:          jlen=ijklsiz(2,isbl)
int_d1g0nat.f:          klen=ijklsiz(3,isbl)
int_d1g0nat.f:          llen=ijklsiz(4,isbl)
int_d1g0nat.f:            ijklp=ijklp+1
int_d1g0nat.f:            icff=ijkllab(1,ijklp)
int_d1g0nat.f:            jcff=ijkllab(2,ijklp)
int_d1g0nat.f:            kcff=ijkllab(3,ijklp)
int_d1g0nat.f:            lcff=ijkllab(4,ijklp)
int_d1g0nat.f:            dij=densp(ics,jcs)
int_d1g0nat.f:            dmax=max(4.0d0*dij,4.0d0*dkl,dik,dil,djk,djl)
int_d1g0nat.f:     $        xinteg4,     xinteg8,    ijkllab,    ijklsiz,
int_d1g0nat.f:      integer*2 ijkllab(4,iqstore) !   ilab,jlab,klab,llab
int_d1g0nat.f:      integer*2 ijklsiz(4,iblstore)!   isiz(isbl),jsiz,ksiz,lsiz  
int_d1g0nat.f:      call read_int2(iunit1,ijklsiz,4*iblstore)
int_d1g0nat.f:      call read_int2(iunit3,ijkllab,4*iqstore)
int_d1g0nat.f:      ijklp=0
int_d1g0nat.f:          ilen=ijklsiz(1,isbl)
int_d1g0nat.f:          jlen=ijklsiz(2,isbl)
int_d1g0nat.f:          klen=ijklsiz(3,isbl)
int_d1g0nat.f:          llen=ijklsiz(4,isbl)
int_d1g0nat.f:            ijklp=ijklp+1
int_d1g0nat.f:            icff=ijkllab(1,ijklp)
int_d1g0nat.f:            jcff=ijkllab(2,ijklp)
int_d1g0nat.f:            kcff=ijkllab(3,ijklp)
int_d1g0nat.f:            lcff=ijkllab(4,ijklp)
int_d1g0nat.f:            dij=densp(ics,jcs)
int_d1g0nat.f:            dmax=max(4.0d0*dij,4.0d0*dkl,dik,dil,djk,djl)
int_d1g0nat.f:     $        ijkllab,     ijklsiz,    nquarts,     iqstore,
int_d1g0nat.f:      integer*2 ijkllab(4,iqstore) !   ilab,jlab,klab,llab
int_d1g0nat.f:      integer*2 ijklsiz(4,iblstore)!   isiz(isbl),jsiz,ksiz,lsiz  
int_d1g0nat.f:      call read_int2(iunit1,ijklsiz,4*iblstore)
int_d1g0nat.f:      call read_int2(iunit3,ijkllab,4*iqstore)
int_d1g0nat.f:      ijklp=0
int_d1g0nat.f:          ilen=ijklsiz(1,isbl)
int_d1g0nat.f:          jlen=ijklsiz(2,isbl)
int_d1g0nat.f:          klen=ijklsiz(3,isbl)
int_d1g0nat.f:          llen=ijklsiz(4,isbl)
int_d1g0nat.f:            ijklp=ijklp+1
int_d1g0nat.f:            icff=ijkllab(1,ijklp)
int_d1g0nat.f:            jcff=ijkllab(2,ijklp)
int_d1g0nat.f:            kcff=ijkllab(3,ijklp)
int_d1g0nat.f:            lcff=ijkllab(4,ijklp)
int_d1g0nat.f:            dij=densp(ics,jcs)
int_d1g0nat.f:            dmax=max(4.0d0*dij,4.0d0*dkl,dik,dil,djk,djl)
int_d1g0nat.f:     $        ijkllab,     ijklsiz,    nquarts,     iqstore,
int_d1g0nat.f:      integer*2 ijkllab(4,iqstore) !   ilab,jlab,klab,llab
int_d1g0nat.f:      integer*2 ijklsiz(4,iblstore)!   isiz(isbl),jsiz,ksiz,lsiz  
int_d1g0nat.f:      call read_int2(iunit1,ijklsiz,4*iblstore)
int_d1g0nat.f:      call read_int2(iunit3,ijkllab,4*iqstore)
int_d1g0nat.f:      ijklp=0
int_d1g0nat.f:          ilen=ijklsiz(1,isbl)
int_d1g0nat.f:          jlen=ijklsiz(2,isbl)
int_d1g0nat.f:          klen=ijklsiz(3,isbl)
int_d1g0nat.f:          llen=ijklsiz(4,isbl)
int_d1g0nat.f:            ijklp=ijklp+1
int_d1g0nat.f:            icff=ijkllab(1,ijklp)
int_d1g0nat.f:            jcff=ijkllab(2,ijklp)
int_d1g0nat.f:            kcff=ijkllab(3,ijklp)
int_d1g0nat.f:            lcff=ijkllab(4,ijklp)
int_d1g0nat.f:            dij=densp(ics,jcs)
int_d1g0nat.f:            dmax=max(4.0d0*dij,4.0d0*dkl,dik,dil,djk,djl)
int_d1g0nat.f:          ij=lind(max0(icf,jcf))+min0(icf,jcf)
int_d1g0nat.f:                call daxpy(nat3,xin4,dens(1,kl),1,fock(1,ij),1)
int_d1g0nat.f:                call daxpy(nat3,xin4,dens(1,ij),1,fock(1,kl),1)
int_d1g0nat.f:          ij=lind(max0(ic1,jc1))+min0(ic1,jc1)
int_d1g0nat.f:                call daxpy(nat3,xin4,dens(1,kl),1,fock(1,ij),1)
int_d1g0nat.f:                call daxpy(nat3,xin4,dens(1,ij),1,fock(1,kl),1)
int_d1g0nat.f:                  ijc=max0(lic,ljc)+min0(icf,jcf)
int_d1g0nat.f:                  call daxpy(nat3,xco,dens(1,klc),1,fock(1,ijc),1)
int_d1g0nat.f:                  call daxpy(nat3,xco,dens(1,ijc),1,fock(1,klc),1)
int_d1g0nat.f:          ij=lind(max0(icf,jcf))+min0(icf,jcf)
int_d1g0nat.f:                call daxpy(nat3,xin4,dens(1,kl),1,fock(1,ij),1)
int_d1g0nat.f:                call daxpy(nat3,xin4,dens(1,ij),1,fock(1,kl),1)
int_d1g0nat.f:          ij=lind(max0(ic1,jc1))+min0(ic1,jc1)
int_d1g0nat.f:                call daxpy(nat3,xin4,dens(1,kl),1,fock(1,ij),1)
int_d1g0nat.f:                call daxpy(nat3,xin4,dens(1,ij),1,fock(1,kl),1)
int_d1g0nat.f:                  ijc=lind(max0(icf,jcf))+min0(icf,jcf)
int_d1g0nat.f:                  call daxpy(nat3,xco,dens(1,klc),1,fock(1,ijc),1)
int_d1g0nat.f:                  call daxpy(nat3,xco,dens(1,ijc),1,fock(1,klc),1)
int_d1g0nat.f:          ij=lind(max0(icf,jcf))+min0(icf,jcf)
int_d1g0nat.f:                call daxpy(nat3,xin4,dens(1,kl),1,fock(1,ij),1)
int_d1g0nat.f:                call daxpy(nat3,xin4,dens(1,ij),1,fock(1,kl),1)
int_d1g0nat.f:          ij=lind(max0(ic1,jc1))+min0(ic1,jc1)
int_d1g0nat.f:                call daxpy(nat3,xin4,dens(1,kl),1,fock(1,ij),1)
int_d1g0nat.f:                call daxpy(nat3,xin4,dens(1,ij),1,fock(1,kl),1)
int_d1g0nat.f:                  ijc=max0(lic,ljc)+min0(icf,jcf)
int_d1g0nat.f:                  call daxpy(nat3,xco,dens(1,klc),1,fock(1,ijc),1)
int_d1g0nat.f:                  call daxpy(nat3,xco,dens(1,ijc),1,fock(1,klc),1)
int_d1g0nat.f:          ij=lind(max0(icf,jcf))+min0(icf,jcf)
int_d1g0nat.f:                call daxpy(nat3,xin4,dens(1,kl),1,fock(1,ij),1)
int_d1g0nat.f:                call daxpy(nat3,xin4,dens(1,ij),1,fock(1,kl),1)
int_d1g0nat.f:          ij=lind(max0(ic1,jc1))+min0(ic1,jc1)
int_d1g0nat.f:                call daxpy(nat3,xin4,dens(1,kl),1,fock(1,ij),1)
int_d1g0nat.f:                call daxpy(nat3,xin4,dens(1,ij),1,fock(1,kl),1)
int_d1g0nat.f:                  ijc=lind(max0(icf,jcf))+min0(icf,jcf)
int_d1g0nat.f:                  call daxpy(nat3,xco,dens(1,klc),1,fock(1,ijc),1)
int_d1g0nat.f:                  call daxpy(nat3,xco,dens(1,ijc),1,fock(1,klc),1)
int_d1g0nat.f:          ij=lind(max0(icf,jcf))+min0(icf,jcf)
int_d1g0nat.f:                call daxpy(nat3,xin4,dens(1,kl),1,fock(1,ij),1)
int_d1g0nat.f:                call daxpy(nat3,xin4,dens(1,ij),1,fock(1,kl),1)
int_d1g0nat.f:          ij=lind(max0(ic1,jc1))+min0(ic1,jc1)
int_d1g0nat.f:                call daxpy(nat3,xin4,dens(1,kl),1,fock(1,ij),1)
int_d1g0nat.f:                call daxpy(nat3,xin4,dens(1,ij),1,fock(1,kl),1)
int_d1g0nat.f:                  ijc=max0(lic,ljc)+min0(icf,jcf)
int_d1g0nat.f:                  call daxpy(nat3,xco,dens(1,klc),1,fock(1,ijc),1)
int_d1g0nat.f:                  call daxpy(nat3,xco,dens(1,ijc),1,fock(1,klc),1)
int_d1g0nat.f:          ij=lind(max0(icf,jcf))+min0(icf,jcf)
int_d1g0nat.f:                call daxpy(nat3,xin4,dens(1,kl),1,fock(1,ij),1)
int_d1g0nat.f:                call daxpy(nat3,xin4,dens(1,ij),1,fock(1,kl),1)
int_d1g0nat.f:          ij=lind(max0(ic1,jc1))+min0(ic1,jc1)
int_d1g0nat.f:                call daxpy(nat3,xin4,dens(1,kl),1,fock(1,ij),1)
int_d1g0nat.f:                call daxpy(nat3,xin4,dens(1,ij),1,fock(1,kl),1)
int_d1g0nat.f:                  ijc=lind(max0(icf,jcf))+min0(icf,jcf)
int_d1g0nat.f:                  call daxpy(nat3,xco,dens(1,klc),1,fock(1,ijc),1)
int_d1g0nat.f:                  call daxpy(nat3,xco,dens(1,ijc),1,fock(1,klc),1)
int_fock.f:c transform ordinary density dens(ij) into denspar(ics,jcs)
int_fock.f:           call getint_2(4*iblstore , ijklsiz) ! I*2
int_fock.f:           call getint_2(4*iqstore  , ijkllab) ! I*2
int_fock.f:     $        bl(ixint4),  bl(ixint8), bl(ijkllab),bl(ijklsiz),
int_fock.f:     $        bl(ixint4),  bl(ixint8), bl(ijkllab),bl(ijklsiz),
int_fock.f:     $        bl(ixint2),  bl(ixint4), bl(ixint8), bl(ijkllab),
int_fock.f:     $        bl(ijklsiz), bl(nquarts),iqstore,    iblstore,
int_fock.f:     $        bl(ixint2),  bl(ixint4),  bl(ixint8), bl(ijkllab),
int_fock.f:     $        bl(ijklsiz), bl(nquarts), iqstore,    iblstore,
int_fock.f:     $        bl(ixint4),  bl(ixint8),  bl(ijkllab),bl(ijklsiz),
int_fock.f:     $        bl(ixint4),  bl(ixint8),  bl(ijkllab),bl(ijklsiz),
int_fock.f:      ijklp=0
int_fock.f:            ijklp=ijklp+1
int_fock.f:            icff=ilab(ijklp)
int_fock.f:            jcff=jlab(ijklp)
int_fock.f:            kcff=klab(ijklp)
int_fock.f:            lcff=llab(ijklp)
int_fock.f:c        write(6,*)' ijklp=',ijklp
int_fock.f:                     ij=ii+jff
int_fock.f:                     fock(ij)=fock(ij)+xin4*dens(kl)
int_fock.f:                     fock(kl)=fock(kl)+xin4*dens(ij)
int_fock.f:     $        xinteg4,     xinteg8,    ijkllab,    ijklsiz,
int_fock.f:      integer*2 ijkllab(4,iqstore) !   ilab,jlab,klab,llab
int_fock.f:      integer*2 ijklsiz(4,iblstore)!   isiz(isbl),jsiz,ksiz,lsiz  
int_fock.f:      call read_int2(iunit1,ijklsiz,4*iblstore)
int_fock.f:      call read_int2(iunit3,ijkllab,4*iqstore)
int_fock.f:      ijklp=0
int_fock.f:         ilen=ijklsiz(1,isbl)
int_fock.f:         jlen=ijklsiz(2,isbl)
int_fock.f:         klen=ijklsiz(3,isbl)
int_fock.f:         llen=ijklsiz(4,isbl)
int_fock.f:            ijklp=ijklp+1
int_fock.f:            icff=ijkllab(1,ijklp)
int_fock.f:            jcff=ijkllab(2,ijklp)
int_fock.f:            kcff=ijkllab(3,ijklp)
int_fock.f:            lcff=ijkllab(4,ijklp)
int_fock.f:c          dij=densp(ics,jcs)
int_fock.f:c          dmax1=max(4.0d0*dij,4.0d0*dkl,dik,dil,djk,djl)
int_fock.f:      common /howmany/ ntotal,noijkl,nopres,nohalf,nrimtot,nrimret
int_fock.f:         noijkl=0
int_fock.f:      common /howmany/ ntotal,noijkl,nopres,nohalf,nrimtot,nrimret
int_fock.f:      write(i9,*)'has been reduced by molecular symmetry to ',noijkl
int_fock.f:      ij=0
int_fock.f:          ij=ij+1
int_fock.f:          iarray(i,j)=ij
int_fock.f:          iarray(j,i)=ij
int_fock.f:      ij=0
int_fock.f:          ij=ij+1
int_fock.f:            fock(ifock,ij)=fock(ifock,ij)*thinv2
int_fock.f:          if(icf.eq.jcf) fock(ifock,ij)=fock(ifock,ij)+fock(ifock,ij)
int_fock.f:      ij=0
int_fock.f:      ij=ij+1
int_fock.f:      fockA(ij)=fockA(ij)*thres
int_fock.f:      fockB(ij)=fockB(ij)*thres
int_fock.f:c -- WARNING! next 2 lines depend on ij retaining
int_fock.f:      fockA(ij) = fockA(ij) + fockA(ij)
int_fock.f:      fockB(ij) = fockB(ij) + fockB(ij)
int_fock.f:      ijcf=0
int_fock.f:      ijcf=ijcf+1
int_fock.f:      dijcf=abs(densmat(ijcf))
int_fock.f:      dijcs=denspar(ics,jcs)
int_fock.f:      if(dijcf.gt.dijcs) then
int_fock.f:         denspar(ics,jcs)=dijcf
int_fock.f:         denspar(jcs,ics)=dijcf
int_fock.f:         if(dijcf.gt.dens_max_el) dens_max_el=dijcf
int_fock.f:      ijcf=0
int_fock.f:      ijcf=ijcf+1
int_fock.f:      dijcf=abs(densmat(ijcf))
int_fock.f:      dijcs=denspar(ics,jcs)
int_fock.f:      if(dijcf.gt.dijcs) then
int_fock.f:         denspar(ics,jcs)=dijcf
int_fock.f:         denspar(jcs,ics)=dijcf
int_fock.f:         if(dijcf.gt.dens_max_el) dens_max_el=dijcf
int_fock.f:      dijcf=densmat(icf,jcf)
int_fock.f:      dijcs=denspar(ics,jcs)
int_fock.f:      if(dijcf.gt.dijcs) denspar(ics,jcs)=dijcf
int_fock.f:                     ij=ii+jff
int_fock.f:                     fock(ij)=fock(ij)+xin4*dens(kl)
int_fock.f:                     fock(kl)=fock(kl)+xin4*dens(ij)
int_fock.f:                     ij=ii+jff
int_fock.f:                     fock(ij)=fock(ij)+xin4*dens(kl)
int_fock.f:                     fock(kl)=fock(kl)+xin4*dens(ij)
int_fock.f:                     ij=ii+jff
int_fock.f:                     fock(ij)=fock(ij)+xin4*dens(kl)
int_fock.f:                     fock(kl)=fock(kl)+xin4*dens(ij)
int_fock.f:     $        xinteg4,     xinteg8,    ijkllab,    ijklsiz,
int_fock.f:      integer*2 ijkllab(4,iqstore) !   ilab,jlab,klab,llab
int_fock.f:      integer*2 ijklsiz(4,iblstore)!   isiz(isbl),jsiz,ksiz,lsiz  
int_fock.f:      call read_int2(iunit1,ijklsiz,4*iblstore)
int_fock.f:      call read_int2(iunit3,ijkllab,4*iqstore)
int_fock.f:      ijklp=0
int_fock.f:         ilen=ijklsiz(1,isbl)
int_fock.f:         jlen=ijklsiz(2,isbl)
int_fock.f:         klen=ijklsiz(3,isbl)
int_fock.f:         llen=ijklsiz(4,isbl)
int_fock.f:            ijklp=ijklp+1
int_fock.f:            icff=ijkllab(1,ijklp)
int_fock.f:            jcff=ijkllab(2,ijklp)
int_fock.f:            kcff=ijkllab(3,ijklp)
int_fock.f:            lcff=ijkllab(4,ijklp)
int_fock.f:c          dij=densp(ics,jcs)
int_fock.f:c          dmax1=4.0d0*max(dij,dkl)
int_fock.f:                     ij=ii+jff
int_fock.f:                     fock(ij)=fock(ij)+xin4*dens(kl)
int_fock.f:                     fock(kl)=fock(kl)+xin4*dens(ij)
int_fock.f:                     ij=ii+jff
int_fock.f:                     fock(ij)=fock(ij)+xin4*dens(kl)
int_fock.f:                     fock(kl)=fock(kl)+xin4*dens(ij)
int_fock.f:                     ij=ii+jff
int_fock.f:                     fock(ij)=fock(ij)+xin4*dens(kl)
int_fock.f:                     fock(kl)=fock(kl)+xin4*dens(ij)
int_giao.f:     *                     nbls,ngcd,lnijkl, labels,length,lgenct )
int_giao.f:      dimension buf(6,nbls,lnijkl,ngcd)
int_giao.f:        do 100 ijklp=1,nbls
int_giao.f:        ngcq=lgenct(ijklp)
int_giao.f:          icff=labels(1,iqu,ijklp)
int_giao.f:          jcff=labels(2,iqu,ijklp)
int_giao.f:          kcff=labels(3,iqu,ijklp)
int_giao.f:          lcff=labels(4,iqu,ijklp)
int_giao.f:c  Indices and integrals in the quartet ijkl :
int_giao.f:                 ijf=ii+jcf
int_giao.f:                 fij=1.d0
int_giao.f:                 ijf=jj+icf
int_giao.f:                 fij=-1.d0
int_giao.f:             xder1=buf(1,ijklp,integ,iqu)
int_giao.f:             yder1=buf(3,ijklp,integ,iqu)
int_giao.f:             zder1=buf(5,ijklp,integ,iqu)
int_giao.f:             xder2=buf(2,ijklp,integ,iqu)
int_giao.f:             yder2=buf(4,ijklp,integ,iqu)
int_giao.f:             zder2=buf(6,ijklp,integ,iqu)
int_giao.f:               dklij=fkl*dens(ijf)
int_giao.f:               dijkl=fij*dens(klf)
int_giao.f:c  ***  ij, kl  ***
int_giao.f:                fock(ijf,1)=fock(ijf,1)+dijkl*(xder1-xder2)
int_giao.f:                fock(klf,1)=fock(klf,1)+dklij*(xder1+xder2)
int_giao.f:                fock(ijf,2)=fock(ijf,2)+dijkl*(yder1-yder2)
int_giao.f:                fock(klf,2)=fock(klf,2)+dklij*(yder1+yder2)
int_giao.f:                fock(ijf,3)=fock(ijf,3)+dijkl*(zder1-zder2)
int_giao.f:                fock(klf,3)=fock(klf,3)+dklij*(zder1+zder2)
int_giao.f:      subroutine get_ranges(nbls,ngcd,lnijkl,labels,length,lgenct,
int_giao.f:        do 100 ijklp=1,nbls
int_giao.f:        ngcq=lgenct(ijklp)
int_giao.f:          icff=labels(1,iqu,ijklp)
int_giao.f:          jcff=labels(2,iqu,ijklp)
int_giao.f:          kcff=labels(3,iqu,ijklp)
int_giao.f:          lcff=labels(4,iqu,ijklp)
int_grad.f:c Integral derivatives g1=(ij|kl)(Xn,Yn,Zn) are calculated only once
int_grad.f:c transform ordinary density dens(ij) into denspar(ics,jcs)
int_grad.f:     *                     lind,ntri,nbls,ngcd,lnijkl,
int_grad.f:c  lnijkl   - number of integrals from one quartet
int_grad.f:      dimension buf(9,nbls,lnijkl,ngcd)
int_grad.f:        do 100 ijklp=1,nbls
int_grad.f:          icff=labels(1,iqu,ijklp)
int_grad.f:          jcff=labels(2,iqu,ijklp)
int_grad.f:          kcff=labels(3,iqu,ijklp)
int_grad.f:          lcff=labels(4,iqu,ijklp)
int_grad.f:c  Indices and integrals in the quartet ijkl :
int_grad.f:                ijf=ii+jcf
int_grad.f:                if(jcf.gt.icf) ijf=jj+icf
int_grad.f:                dij4=dens(ijf)*4.d0
int_grad.f:                      dijkl=dij4*dkl - dik*djl -dil*djk
int_grad.f:cslower              call daxpy(9,dijkl,buf(1,ijklp,integ,iqu),1,vec,1)
int_grad.f:                       vec(iel)=vec(iel)+dijkl*buf(iel,ijklp,integ,iqu)
int_grad.f:c                     xinta=buf(1,ijklp,integ,iqu)
int_grad.f:c                     xintb=buf(2,ijklp,integ,iqu)
int_grad.f:c                     xintc=buf(3,ijklp,integ,iqu)
int_grad.f:c                     yinta=buf(4,ijklp,integ,iqu)
int_grad.f:c                     yintb=buf(5,ijklp,integ,iqu)
int_grad.f:c                     yintc=buf(6,ijklp,integ,iqu)
int_grad.f:c                     zinta=buf(7,ijklp,integ,iqu)
int_grad.f:c                     zintb=buf(8,ijklp,integ,iqu)
int_grad.f:c                     zintc=buf(9,ijklp,integ,iqu)
int_grad.f:     *                     lind,ntri,nbls,ngcd,lnijkl,
int_grad.f:c lnijkl   - number of integrals from one quartet
int_grad.f:      dimension buf(9,nbls,lnijkl,ngcd)
int_grad.f:        do 100 ijklp=1,nbls
int_grad.f:          icff=labels(1,iqu,ijklp)
int_grad.f:          jcff=labels(2,iqu,ijklp)
int_grad.f:          kcff=labels(3,iqu,ijklp)
int_grad.f:          lcff=labels(4,iqu,ijklp)
int_grad.f:c  Indices and integrals in the quartet ijkl :
int_grad.f:                ijf=ii+jcf
int_grad.f:                if(jcf.gt.icf) ijf=jj+icf
int_grad.f:                dij4=dens(ijf)*4.d0
int_grad.f:                      dijkl=dij4*dkl - dik*djl - dil*djk
int_grad.f:                      xinta=buf(1,ijklp,integ,iqu)
int_grad.f:                      xintb=buf(2,ijklp,integ,iqu)
int_grad.f:                      xintc=buf(3,ijklp,integ,iqu)
int_grad.f:                      yinta=buf(4,ijklp,integ,iqu)
int_grad.f:                      yintb=buf(5,ijklp,integ,iqu)
int_grad.f:                      yintc=buf(6,ijklp,integ,iqu)
int_grad.f:                      zinta=buf(7,ijklp,integ,iqu)
int_grad.f:                      zintb=buf(8,ijklp,integ,iqu)
int_grad.f:                      zintc=buf(9,ijklp,integ,iqu)
int_grad.f:                      xyz(1,1)=xyz(1,1)-dijkl*xinta
int_grad.f:                      xyz(1,2)=xyz(1,2)-dijkl*xintb
int_grad.f:                      xyz(1,3)=xyz(1,3)-dijkl*xintc
int_grad.f:cdonotdoit            xyz(1,4)=xyz(1,4)-dijkl*xintd
int_grad.f:                      xyz(2,1)=xyz(2,1)-dijkl*yinta
int_grad.f:                      xyz(2,2)=xyz(2,2)-dijkl*yintb
int_grad.f:                      xyz(2,3)=xyz(2,3)-dijkl*yintc
int_grad.f:cdonotdoit            xyz(2,4)=xyz(2,4)-dijkl*yintd
int_grad.f:                      xyz(3,1)=xyz(3,1)-dijkl*zinta
int_grad.f:                      xyz(3,2)=xyz(3,2)-dijkl*zintb
int_grad.f:                      xyz(3,3)=xyz(3,3)-dijkl*zintc
int_grad.f:cdonotdoit            xyz(3,4)=xyz(3,4)-dijkl*zintd
int_grad.f:     *                     lind,ntri,nbls,ngcd,lnijkl,
int_grad.f:c lnijkl   - number of integrals from one quartet
int_grad.f:      dimension buf(9,nbls,lnijkl,ngcd)
int_grad.f:        do 100 ijklp=1,nbls
int_grad.f:          icff=labels(1,iqu,ijklp)
int_grad.f:          jcff=labels(2,iqu,ijklp)
int_grad.f:          kcff=labels(3,iqu,ijklp)
int_grad.f:          lcff=labels(4,iqu,ijklp)
int_grad.f:c  Indices and integrals in the quartet ijkl :
int_grad.f:                ijf=ii+jcf
int_grad.f:                if(jcf.gt.icf) ijf=jj+icf
int_grad.f:                dij4=dens(ijf)*4.d0
int_grad.f:                      dijkl=dij4*dens(klf)
int_grad.f:                      xinta=buf(1,ijklp,integ,iqu)
int_grad.f:                      xintb=buf(2,ijklp,integ,iqu)
int_grad.f:                      xintc=buf(3,ijklp,integ,iqu)
int_grad.f:                      yinta=buf(4,ijklp,integ,iqu)
int_grad.f:                      yintb=buf(5,ijklp,integ,iqu)
int_grad.f:                      yintc=buf(6,ijklp,integ,iqu)
int_grad.f:                      zinta=buf(7,ijklp,integ,iqu)
int_grad.f:                      zintb=buf(8,ijklp,integ,iqu)
int_grad.f:                      zintc=buf(9,ijklp,integ,iqu)
int_grad.f:                      xyz(1,1)=xyz(1,1)-dijkl*xinta
int_grad.f:                      xyz(1,2)=xyz(1,2)-dijkl*xintb
int_grad.f:                      xyz(1,3)=xyz(1,3)-dijkl*xintc
int_grad.f:cdonotdoit            xyz(1,4)=xyz(1,4)-dijkl*xintd
int_grad.f:                      xyz(2,1)=xyz(2,1)-dijkl*yinta
int_grad.f:                      xyz(2,2)=xyz(2,2)-dijkl*yintb
int_grad.f:                      xyz(2,3)=xyz(2,3)-dijkl*yintc
int_grad.f:cdonotdoit            xyz(2,4)=xyz(2,4)-dijkl*yintd
int_grad.f:                      xyz(3,1)=xyz(3,1)-dijkl*zinta
int_grad.f:                      xyz(3,2)=xyz(3,2)-dijkl*zintb
int_grad.f:                      xyz(3,3)=xyz(3,3)-dijkl*zintc
int_grad.f:cdonotdoit            xyz(3,4)=xyz(3,4)-dijkl*zintd
int_hess2e1.f:c Integral derivatives g1=(ij|kl)(Xn,Yn,Zn) are calculated only once
int_hess2e1.f:     *                     lind,ntri,nbls,ngcd,lnijkl,
int_hess2e1.f:c  lnijkl   - number of integrals from one quartet
int_hess2e1.f:      dimension buf(9,nbls,lnijkl,ngcd)
int_hess2e1.f:        do 100 ijklp=1,nbls
int_hess2e1.f:          icff=labels(1,iqu,ijklp)
int_hess2e1.f:          jcff=labels(2,iqu,ijklp)
int_hess2e1.f:          kcff=labels(3,iqu,ijklp)
int_hess2e1.f:          lcff=labels(4,iqu,ijklp)
int_hess2e1.f:c  Indices and integrals in the quartet ijkl :
int_hess2e1.f:                ijf=ii+jcf
int_hess2e1.f:                if(jcf.gt.icf) ijf=jj+icf
int_hess2e1.f:                      xinta=buf(1,ijklp,integ,iqu)
int_hess2e1.f:                      xintb=buf(2,ijklp,integ,iqu)
int_hess2e1.f:                      xintc=buf(3,ijklp,integ,iqu)
int_hess2e1.f:                      yinta=buf(4,ijklp,integ,iqu)
int_hess2e1.f:                      yintb=buf(5,ijklp,integ,iqu)
int_hess2e1.f:                      yintc=buf(6,ijklp,integ,iqu)
int_hess2e1.f:                      zinta=buf(7,ijklp,integ,iqu)
int_hess2e1.f:                      zintb=buf(8,ijklp,integ,iqu)
int_hess2e1.f:                      zintc=buf(9,ijklp,integ,iqu)
int_hess2e1.f:     *                  ntri,nbls,ngcd,lnijkl,ncenter,
int_hess2e1.f:c  lnijkl   - number of integrals from one quartet
int_hess2e1.f:      dimension buf(9,nbls,lnijkl,ngcd)
int_hess2e1.f:        do 100 ijklp=1,nbls
int_hess2e1.f:          icff=labels(1,iqu,ijklp)
int_hess2e1.f:          jcff=labels(2,iqu,ijklp)
int_hess2e1.f:          kcff=labels(3,iqu,ijklp)
int_hess2e1.f:          lcff=labels(4,iqu,ijklp)
int_hess2e1.f:c  Indices and integrals in the quartet ijkl :
int_hess2e1.f:                ijf=ii+jcf
int_hess2e1.f:                if(jcf.gt.icf) ijf=jj+icf
int_hess2e1.f:                dij4=dens(ijf)*four
int_hess2e1.f:                      xinta=buf(1,ijklp,integ,iqu)
int_hess2e1.f:                      xintb=buf(2,ijklp,integ,iqu)
int_hess2e1.f:                      xintc=buf(3,ijklp,integ,iqu)
int_hess2e1.f:                      yinta=buf(4,ijklp,integ,iqu)
int_hess2e1.f:                      yintb=buf(5,ijklp,integ,iqu)
int_hess2e1.f:                      yintc=buf(6,ijklp,integ,iqu)
int_hess2e1.f:                      zinta=buf(7,ijklp,integ,iqu)
int_hess2e1.f:                      zintb=buf(8,ijklp,integ,iqu)
int_hess2e1.f:                      zintc=buf(9,ijklp,integ,iqu)
int_hess2e1.f:           fder(1,iat,ijf)=fder(1,iat,ijf)+xinta*dkl4
int_hess2e1.f:           fder(2,iat,ijf)=fder(2,iat,ijf)+yinta*dkl4
int_hess2e1.f:           fder(3,iat,ijf)=fder(3,iat,ijf)+zinta*dkl4
int_hess2e1.f:           fder(1,iat,klf)=fder(1,iat,klf)+xinta*dij4
int_hess2e1.f:           fder(2,iat,klf)=fder(2,iat,klf)+yinta*dij4
int_hess2e1.f:           fder(3,iat,klf)=fder(3,iat,klf)+zinta*dij4
int_hess2e1.f:           fder(1,jat,ijf)=fder(1,jat,ijf)+xintb*dkl4
int_hess2e1.f:           fder(2,jat,ijf)=fder(2,jat,ijf)+yintb*dkl4
int_hess2e1.f:           fder(3,jat,ijf)=fder(3,jat,ijf)+zintb*dkl4
int_hess2e1.f:           fder(1,jat,klf)=fder(1,jat,klf)+xintb*dij4
int_hess2e1.f:           fder(2,jat,klf)=fder(2,jat,klf)+yintb*dij4
int_hess2e1.f:           fder(3,jat,klf)=fder(3,jat,klf)+zintb*dij4
int_hess2e1.f:           fder(1,kat,ijf)=fder(1,kat,ijf)+xintc*dkl4
int_hess2e1.f:           fder(2,kat,ijf)=fder(2,kat,ijf)+yintc*dkl4
int_hess2e1.f:           fder(3,kat,ijf)=fder(3,kat,ijf)+zintc*dkl4
int_hess2e1.f:           fder(1,kat,klf)=fder(1,kat,klf)+xintc*dij4
int_hess2e1.f:           fder(2,kat,klf)=fder(2,kat,klf)+yintc*dij4
int_hess2e1.f:           fder(3,kat,klf)=fder(3,kat,klf)+zintc*dij4
int_hess2e1.f:           fder(1,lat,ijf)=fder(1,lat,ijf)+xintd*dkl4
int_hess2e1.f:           fder(2,lat,ijf)=fder(2,lat,ijf)+yintd*dkl4
int_hess2e1.f:           fder(3,lat,ijf)=fder(3,lat,ijf)+zintd*dkl4
int_hess2e1.f:           fder(1,lat,klf)=fder(1,lat,klf)+xintd*dij4
int_hess2e1.f:           fder(2,lat,klf)=fder(2,lat,klf)+yintd*dij4
int_hess2e1.f:           fder(3,lat,klf)=fder(3,lat,klf)+zintd*dij4
int_hess2e1.f:     *                  ntri,nbls,ngcd,lnijkl,ncenter,
int_hess2e1.f:c  lnijkl   - number of integrals from one quartet
int_hess2e1.f:      dimension buf(9,nbls,lnijkl,ngcd)
int_hess2e1.f:        do 100 ijklp=1,nbls
int_hess2e1.f:          icff=labels(1,iqu,ijklp)
int_hess2e1.f:          jcff=labels(2,iqu,ijklp)
int_hess2e1.f:          kcff=labels(3,iqu,ijklp)
int_hess2e1.f:          lcff=labels(4,iqu,ijklp)
int_hess2e1.f:c  Indices and integrals in the quartet ijkl :
int_hess2e1.f:                ijf=ii+jcf
int_hess2e1.f:                if(jcf.gt.icf) ijf=jj+icf
int_hess2e1.f:                dij2=(denA(ijf)+denB(ijf))*two
int_hess2e1.f:                      xinta=buf(1,ijklp,integ,iqu)
int_hess2e1.f:                      xintb=buf(2,ijklp,integ,iqu)
int_hess2e1.f:                      xintc=buf(3,ijklp,integ,iqu)
int_hess2e1.f:                      yinta=buf(4,ijklp,integ,iqu)
int_hess2e1.f:                      yintb=buf(5,ijklp,integ,iqu)
int_hess2e1.f:                      yintc=buf(6,ijklp,integ,iqu)
int_hess2e1.f:                      zinta=buf(7,ijklp,integ,iqu)
int_hess2e1.f:                      zintb=buf(8,ijklp,integ,iqu)
int_hess2e1.f:                      zintc=buf(9,ijklp,integ,iqu)
int_hess2e1.f:           fderA(1,iat,ijf)=fderA(1,iat,ijf)+xinta*dkl2
int_hess2e1.f:           fderA(2,iat,ijf)=fderA(2,iat,ijf)+yinta*dkl2
int_hess2e1.f:           fderA(3,iat,ijf)=fderA(3,iat,ijf)+zinta*dkl2
int_hess2e1.f:           fderB(1,iat,ijf)=fderB(1,iat,ijf)+xinta*dkl2
int_hess2e1.f:           fderB(2,iat,ijf)=fderB(2,iat,ijf)+yinta*dkl2
int_hess2e1.f:           fderB(3,iat,ijf)=fderB(3,iat,ijf)+zinta*dkl2
int_hess2e1.f:           fderA(1,iat,klf)=fderA(1,iat,klf)+xinta*dij2
int_hess2e1.f:           fderA(2,iat,klf)=fderA(2,iat,klf)+yinta*dij2
int_hess2e1.f:           fderA(3,iat,klf)=fderA(3,iat,klf)+zinta*dij2
int_hess2e1.f:           fderB(1,iat,klf)=fderB(1,iat,klf)+xinta*dij2
int_hess2e1.f:           fderB(2,iat,klf)=fderB(2,iat,klf)+yinta*dij2
int_hess2e1.f:           fderB(3,iat,klf)=fderB(3,iat,klf)+zinta*dij2
int_hess2e1.f:           fderA(1,jat,ijf)=fderA(1,jat,ijf)+xintb*dkl2
int_hess2e1.f:           fderA(2,jat,ijf)=fderA(2,jat,ijf)+yintb*dkl2
int_hess2e1.f:           fderA(3,jat,ijf)=fderA(3,jat,ijf)+zintb*dkl2
int_hess2e1.f:           fderB(1,jat,ijf)=fderB(1,jat,ijf)+xintb*dkl2
int_hess2e1.f:           fderB(2,jat,ijf)=fderB(2,jat,ijf)+yintb*dkl2
int_hess2e1.f:           fderB(3,jat,ijf)=fderB(3,jat,ijf)+zintb*dkl2
int_hess2e1.f:           fderA(1,jat,klf)=fderA(1,jat,klf)+xintb*dij2
int_hess2e1.f:           fderA(2,jat,klf)=fderA(2,jat,klf)+yintb*dij2
int_hess2e1.f:           fderA(3,jat,klf)=fderA(3,jat,klf)+zintb*dij2
int_hess2e1.f:           fderB(1,jat,klf)=fderB(1,jat,klf)+xintb*dij2
int_hess2e1.f:           fderB(2,jat,klf)=fderB(2,jat,klf)+yintb*dij2
int_hess2e1.f:           fderB(3,jat,klf)=fderB(3,jat,klf)+zintb*dij2
int_hess2e1.f:           fderA(1,kat,ijf)=fderA(1,kat,ijf)+xintc*dkl2
int_hess2e1.f:           fderA(2,kat,ijf)=fderA(2,kat,ijf)+yintc*dkl2
int_hess2e1.f:           fderA(3,kat,ijf)=fderA(3,kat,ijf)+zintc*dkl2
int_hess2e1.f:           fderB(1,kat,ijf)=fderB(1,kat,ijf)+xintc*dkl2
int_hess2e1.f:           fderB(2,kat,ijf)=fderB(2,kat,ijf)+yintc*dkl2
int_hess2e1.f:           fderB(3,kat,ijf)=fderB(3,kat,ijf)+zintc*dkl2
int_hess2e1.f:           fderA(1,kat,klf)=fderA(1,kat,klf)+xintc*dij2
int_hess2e1.f:           fderA(2,kat,klf)=fderA(2,kat,klf)+yintc*dij2
int_hess2e1.f:           fderA(3,kat,klf)=fderA(3,kat,klf)+zintc*dij2
int_hess2e1.f:           fderB(1,kat,klf)=fderB(1,kat,klf)+xintc*dij2
int_hess2e1.f:           fderB(2,kat,klf)=fderB(2,kat,klf)+yintc*dij2
int_hess2e1.f:           fderB(3,kat,klf)=fderB(3,kat,klf)+zintc*dij2
int_hess2e1.f:           fderA(1,lat,ijf)=fderA(1,lat,ijf)+xintd*dkl2
int_hess2e1.f:           fderA(2,lat,ijf)=fderA(2,lat,ijf)+yintd*dkl2
int_hess2e1.f:           fderA(3,lat,ijf)=fderA(3,lat,ijf)+zintd*dkl2
int_hess2e1.f:           fderB(1,lat,ijf)=fderB(1,lat,ijf)+xintd*dkl2
int_hess2e1.f:           fderB(2,lat,ijf)=fderB(2,lat,ijf)+yintd*dkl2
int_hess2e1.f:           fderB(3,lat,ijf)=fderB(3,lat,ijf)+zintd*dkl2
int_hess2e1.f:           fderA(1,lat,klf)=fderA(1,lat,klf)+xintd*dij2
int_hess2e1.f:           fderA(2,lat,klf)=fderA(2,lat,klf)+yintd*dij2
int_hess2e1.f:           fderA(3,lat,klf)=fderA(3,lat,klf)+zintd*dij2
int_hess2e1.f:           fderB(1,lat,klf)=fderB(1,lat,klf)+xintd*dij2
int_hess2e1.f:           fderB(2,lat,klf)=fderB(2,lat,klf)+yintd*dij2
int_hess2e1.f:           fderB(3,lat,klf)=fderB(3,lat,klf)+zintd*dij2
int_hess2e1.f:     *                     ntri,nbls,ngcd,lnijkl,ncenter,
int_hess2e1.f:c  lnijkl   - number of integrals from one quartet
int_hess2e1.f:      dimension buf(9,nbls,lnijkl,ngcd)
int_hess2e1.f:        do 100 ijklp=1,nbls
int_hess2e1.f:          icff=labels(1,iqu,ijklp)
int_hess2e1.f:          jcff=labels(2,iqu,ijklp)
int_hess2e1.f:          kcff=labels(3,iqu,ijklp)
int_hess2e1.f:          lcff=labels(4,iqu,ijklp)
int_hess2e1.f:c  Indices and integrals in the quartet ijkl :
int_hess2e1.f:                ijf=ii+jcf
int_hess2e1.f:                if(jcf.gt.icf) ijf=jj+icf
int_hess2e1.f:                dij4=dens(ijf)*four
int_hess2e1.f:                      xinta=buf(1,ijklp,integ,iqu)
int_hess2e1.f:                      xintb=buf(2,ijklp,integ,iqu)
int_hess2e1.f:                      xintc=buf(3,ijklp,integ,iqu)
int_hess2e1.f:                      yinta=buf(4,ijklp,integ,iqu)
int_hess2e1.f:                      yintb=buf(5,ijklp,integ,iqu)
int_hess2e1.f:                      yintc=buf(6,ijklp,integ,iqu)
int_hess2e1.f:                      zinta=buf(7,ijklp,integ,iqu)
int_hess2e1.f:                      zintb=buf(8,ijklp,integ,iqu)
int_hess2e1.f:                      zintc=buf(9,ijklp,integ,iqu)
int_hess2e1.f:           fder(1,iat,ijf)=fder(1,iat,ijf)+xinta*dkl4
int_hess2e1.f:           fder(2,iat,ijf)=fder(2,iat,ijf)+yinta*dkl4
int_hess2e1.f:           fder(3,iat,ijf)=fder(3,iat,ijf)+zinta*dkl4
int_hess2e1.f:           fder(1,iat,klf)=fder(1,iat,klf)+xinta*dij4
int_hess2e1.f:           fder(2,iat,klf)=fder(2,iat,klf)+yinta*dij4
int_hess2e1.f:           fder(3,iat,klf)=fder(3,iat,klf)+zinta*dij4
int_hess2e1.f:           fder(1,jat,ijf)=fder(1,jat,ijf)+xintb*dkl4
int_hess2e1.f:           fder(2,jat,ijf)=fder(2,jat,ijf)+yintb*dkl4
int_hess2e1.f:           fder(3,jat,ijf)=fder(3,jat,ijf)+zintb*dkl4
int_hess2e1.f:           fder(1,jat,klf)=fder(1,jat,klf)+xintb*dij4
int_hess2e1.f:           fder(2,jat,klf)=fder(2,jat,klf)+yintb*dij4
int_hess2e1.f:           fder(3,jat,klf)=fder(3,jat,klf)+zintb*dij4
int_hess2e1.f:           fder(1,kat,ijf)=fder(1,kat,ijf)+xintc*dkl4
int_hess2e1.f:           fder(2,kat,ijf)=fder(2,kat,ijf)+yintc*dkl4
int_hess2e1.f:           fder(3,kat,ijf)=fder(3,kat,ijf)+zintc*dkl4
int_hess2e1.f:           fder(1,kat,klf)=fder(1,kat,klf)+xintc*dij4
int_hess2e1.f:           fder(2,kat,klf)=fder(2,kat,klf)+yintc*dij4
int_hess2e1.f:           fder(3,kat,klf)=fder(3,kat,klf)+zintc*dij4
int_hess2e1.f:           fder(1,lat,ijf)=fder(1,lat,ijf)+xintd*dkl4
int_hess2e1.f:           fder(2,lat,ijf)=fder(2,lat,ijf)+yintd*dkl4
int_hess2e1.f:           fder(3,lat,ijf)=fder(3,lat,ijf)+zintd*dkl4
int_hess2e1.f:           fder(1,lat,klf)=fder(1,lat,klf)+xintd*dij4
int_hess2e1.f:           fder(2,lat,klf)=fder(2,lat,klf)+yintd*dij4
int_hess2e1.f:           fder(3,lat,klf)=fder(3,lat,klf)+zintd*dij4
int_hess2e1.f:     *                     ntri,nbls,ngcd,lnijkl,ncenter,
int_hess2e1.f:c  lnijkl   - number of integrals from one quartet
int_hess2e1.f:      dimension buf(9,nbls,lnijkl,ngcd)
int_hess2e1.f:        do 100 ijklp=1,nbls
int_hess2e1.f:          icff=labels(1,iqu,ijklp)
int_hess2e1.f:          jcff=labels(2,iqu,ijklp)
int_hess2e1.f:          kcff=labels(3,iqu,ijklp)
int_hess2e1.f:          lcff=labels(4,iqu,ijklp)
int_hess2e1.f:c  Indices and integrals in the quartet ijkl :
int_hess2e1.f:                ijf=ii+jcf
int_hess2e1.f:                if(jcf.gt.icf) ijf=jj+icf
int_hess2e1.f:                dij4=dens(ijf)*four
int_hess2e1.f:                      xinta=buf(1,ijklp,integ,iqu)
int_hess2e1.f:                      xintb=buf(2,ijklp,integ,iqu)
int_hess2e1.f:                      xintc=buf(3,ijklp,integ,iqu)
int_hess2e1.f:                      yinta=buf(4,ijklp,integ,iqu)
int_hess2e1.f:                      yintb=buf(5,ijklp,integ,iqu)
int_hess2e1.f:                      yintc=buf(6,ijklp,integ,iqu)
int_hess2e1.f:                      zinta=buf(7,ijklp,integ,iqu)
int_hess2e1.f:                      zintb=buf(8,ijklp,integ,iqu)
int_hess2e1.f:                      zintc=buf(9,ijklp,integ,iqu)
int_hess2e1.f:           fder(1,iat,ijf)=fder(1,iat,ijf)+xinta*dkl4
int_hess2e1.f:           fder(2,iat,ijf)=fder(2,iat,ijf)+yinta*dkl4
int_hess2e1.f:           fder(3,iat,ijf)=fder(3,iat,ijf)+zinta*dkl4
int_hess2e1.f:           fder(1,iat,klf)=fder(1,iat,klf)+xinta*dij4
int_hess2e1.f:           fder(2,iat,klf)=fder(2,iat,klf)+yinta*dij4
int_hess2e1.f:           fder(3,iat,klf)=fder(3,iat,klf)+zinta*dij4
int_hess2e1.f:           fder(1,jat,ijf)=fder(1,jat,ijf)+xintb*dkl4
int_hess2e1.f:           fder(2,jat,ijf)=fder(2,jat,ijf)+yintb*dkl4
int_hess2e1.f:           fder(3,jat,ijf)=fder(3,jat,ijf)+zintb*dkl4
int_hess2e1.f:           fder(1,jat,klf)=fder(1,jat,klf)+xintb*dij4
int_hess2e1.f:           fder(2,jat,klf)=fder(2,jat,klf)+yintb*dij4
int_hess2e1.f:           fder(3,jat,klf)=fder(3,jat,klf)+zintb*dij4
int_hess2e1.f:           fder(1,kat,ijf)=fder(1,kat,ijf)+xintc*dkl4
int_hess2e1.f:           fder(2,kat,ijf)=fder(2,kat,ijf)+yintc*dkl4
int_hess2e1.f:           fder(3,kat,ijf)=fder(3,kat,ijf)+zintc*dkl4
int_hess2e1.f:           fder(1,kat,klf)=fder(1,kat,klf)+xintc*dij4
int_hess2e1.f:           fder(2,kat,klf)=fder(2,kat,klf)+yintc*dij4
int_hess2e1.f:           fder(3,kat,klf)=fder(3,kat,klf)+zintc*dij4
int_hess2e1.f:           fder(1,lat,ijf)=fder(1,lat,ijf)+xintd*dkl4
int_hess2e1.f:           fder(2,lat,ijf)=fder(2,lat,ijf)+yintd*dkl4
int_hess2e1.f:           fder(3,lat,ijf)=fder(3,lat,ijf)+zintd*dkl4
int_hess2e1.f:           fder(1,lat,klf)=fder(1,lat,klf)+xintd*dij4
int_hess2e1.f:           fder(2,lat,klf)=fder(2,lat,klf)+yintd*dij4
int_hess2e1.f:           fder(3,lat,klf)=fder(3,lat,klf)+zintd*dij4
int_hess2e1.f:     *                  ntri,nbls,ngcd,lnijkl,ncenter,
int_hess2e1.f:c  lnijkl   - number of integrals from one quartet
int_hess2e1.f:      dimension buf(9,nbls,lnijkl,ngcd)
int_hess2e1.f:        do 100 ijklp=1,nbls
int_hess2e1.f:          icff=labels(1,iqu,ijklp)
int_hess2e1.f:          jcff=labels(2,iqu,ijklp)
int_hess2e1.f:          kcff=labels(3,iqu,ijklp)
int_hess2e1.f:          lcff=labels(4,iqu,ijklp)
int_hess2e1.f:c  Indices and integrals in the quartet ijkl :
int_hess2e1.f:                ijf=ii+jcf
int_hess2e1.f:                if(jcf.gt.icf) ijf=jj+icf
int_hess2e1.f:                dij4=dens(ijf)*four
int_hess2e1.f:c                     xinta=buf(1,ijklp,integ,iqu)
int_hess2e1.f:c                     xintb=buf(2,ijklp,integ,iqu)
int_hess2e1.f:c                     xintc=buf(3,ijklp,integ,iqu)
int_hess2e1.f:c                     yinta=buf(4,ijklp,integ,iqu)
int_hess2e1.f:c                     yintb=buf(5,ijklp,integ,iqu)
int_hess2e1.f:c                     yintc=buf(6,ijklp,integ,iqu)
int_hess2e1.f:c                     zinta=buf(7,ijklp,integ,iqu)
int_hess2e1.f:c                     zintb=buf(8,ijklp,integ,iqu)
int_hess2e1.f:c                     zintc=buf(9,ijklp,integ,iqu)
int_hess2e1.f:                      xyzA(1)=buf(1,ijklp,integ,iqu)
int_hess2e1.f:                      xyzA(2)=buf(4,ijklp,integ,iqu)
int_hess2e1.f:                      xyzA(3)=buf(7,ijklp,integ,iqu)
int_hess2e1.f:                      xyzB(1)=buf(2,ijklp,integ,iqu)
int_hess2e1.f:                      xyzB(2)=buf(5,ijklp,integ,iqu)
int_hess2e1.f:                      xyzB(3)=buf(8,ijklp,integ,iqu)
int_hess2e1.f:                      xyzC(1)=buf(3,ijklp,integ,iqu)
int_hess2e1.f:                      xyzC(2)=buf(6,ijklp,integ,iqu)
int_hess2e1.f:                      xyzC(3)=buf(9,ijklp,integ,iqu)
int_hess2e1.f:             fder(icr,iau,ijf)=fder(icr,iau,ijf)+xyzA(icr)*dkl4
int_hess2e1.f:             fder(icr,iau,klf)=fder(icr,iau,klf)+xyzA(icr)*dij4
int_hess2e1.f:             fder(icr,jau,ijf)=fder(icr,jau,ijf)+xyzB(icr)*dkl4
int_hess2e1.f:             fder(icr,jau,klf)=fder(icr,jau,klf)+xyzB(icr)*dij4
int_hess2e1.f:             fder(icr,kau,ijf)=fder(icr,kau,ijf)+xyzC(icr)*dkl4
int_hess2e1.f:             fder(icr,kau,klf)=fder(icr,kau,klf)+xyzC(icr)*dij4
int_hess2e1.f:             fder(icr,lau,ijf)=fder(icr,lau,ijf)+xyzD(icr)*dkl4
int_hess2e1.f:             fder(icr,lau,klf)=fder(icr,lau,klf)+xyzD(icr)*dij4
int_hess2e1.f:            ijf1 = ii1+jc1
int_hess2e1.f:            ijf1 = jj1+ic1
int_hess2e1.f:          fij4=fct*dens(ijf1)*four
int_hess2e1.f:             fder(icr,iau1,ijf1)=fder(icr,iau1,ijf1)+xyzAs*fkl4
int_hess2e1.f:             fder(icr,iau1,klf1)=fder(icr,iau1,klf1)+xyzAs*fij4
int_hess2e1.f:             fder(icr,jau1,ijf1)=fder(icr,jau1,ijf1)+xyzBs*fkl4
int_hess2e1.f:             fder(icr,jau1,klf1)=fder(icr,jau1,klf1)+xyzBs*fij4
int_hess2e1.f:             fder(icr,kau1,ijf1)=fder(icr,kau1,ijf1)+xyzCs*fkl4
int_hess2e1.f:             fder(icr,kau1,klf1)=fder(icr,kau1,klf1)+xyzCs*fij4
int_hess2e1.f:             fder(icr,lau1,ijf1)=fder(icr,lau1,ijf1)+xyzDs*fkl4
int_hess2e1.f:             fder(icr,lau1,klf1)=fder(icr,lau1,klf1)+xyzDs*fij4
int_hess2e1.f:     *                  ntri,nbls,ngcd,lnijkl,ncenter,
int_hess2e1.f:     *                     ntri,nbls,ngcd,lnijkl,ncenter,
int_hess2e1.f:     *                     ntri,nbls,ngcd,lnijkl,ncenter,
int_hess2e1.f:     *                     ntri,nbls,ngcd,lnijkl,ncenter,
int_hess2e1.f:     *                     ntri,nbls,ngcd,lnijkl,ncenter,
int_hess2e2.f:      subroutine prtn_der2(buf, lind,ntri,nbls,ngcd,lnijkl,
int_hess2e2.f:c  lnijkl   - number of integrals from one quartet
int_hess2e2.f:      dimension buf(45,nbls,lnijkl,ngcd)
int_hess2e2.f:        do 100 ijklp=1,nbls
int_hess2e2.f:          icff=labels(1,iqu,ijklp)
int_hess2e2.f:          jcff=labels(2,iqu,ijklp)
int_hess2e2.f:          kcff=labels(3,iqu,ijklp)
int_hess2e2.f:          lcff=labels(4,iqu,ijklp)
int_hess2e2.f:cccccc    write(6,*)' Ncent=',nc,' are : ',iat,jat,kat,lat,' qrt=',ijklp
int_hess2e2.f:c  Indices and integrals in the quartet ijkl :
int_hess2e2.f:                ijf=ii+jcf
int_hess2e2.f:                if(jcf.gt.icf) ijf=jj+icf
int_hess2e2.f:        call make_78_from_45(buf(1,ijklp,integ,iqu),work)
int_hess2e2.f:                   write(6,61)'d2/dAidAj: ijkl=', icf,jcf,kcf,lcf,
int_hess2e2.f:                   write(6,62)'d2/dAidBj: ijkl=', icf,jcf,kcf,lcf,
int_hess2e2.f:                   write(6,62)'d2/dAidCj: ijkl=', icf,jcf,kcf,lcf,
int_hess2e2.f:                   write(6,62)'d2/dAidDj: ijkl=', icf,jcf,kcf,lcf,
int_hess2e2.f:                   write(6,61)'d2/dBidBj: ijkl=', icf,jcf,kcf,lcf,
int_hess2e2.f:                   write(6,62)'d2/dBidCj: ijkl=', icf,jcf,kcf,lcf,
int_hess2e2.f:                   write(6,62)'d2/dBidDj: ijkl=', icf,jcf,kcf,lcf,
int_hess2e2.f:                   write(6,61)'d2/dCidCj: ijkl=', icf,jcf,kcf,lcf,
int_hess2e2.f:                   write(6,62)'d2/dCidDj: ijkl=', icf,jcf,kcf,lcf,
int_hess2e2.f:                   write(6,61)'d2/dDidDj: ijkl=', icf,jcf,kcf,lcf,
int_hess2e2.f:     *                     ntri,nbls, ngcd, lnijkl,
int_hess2e2.f:c  lnijkl   - number of integrals from one quartet
int_hess2e2.f:c    der2_AxAx=buf(1,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_AxAy=buf(2,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_AxAz=buf(3,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_AyAy=buf(4,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_AyAz=buf(5,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_AzAz=buf(6,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_AxBx= buf(7,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_AxBy= buf(8,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_AxBz= buf(9,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_AyBx=buf(10,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_AyBy=buf(11,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_AyBz=buf(12,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_AzBx=buf(13,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_AzBy=buf(14,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_AzBz=buf(15,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_AxCx=buf(16,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_AxCy=buf(17,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_AxCz=buf(18,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_AyCx=buf(19,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_AyCy=buf(20,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_AyCz=buf(21,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_AzCx=buf(22,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_AzCy=buf(23,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_AzCz=buf(24,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_BxBx=buf(25,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_BxBy=buf(26,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_BxBz=buf(27,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_ByBy=buf(28,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_ByBz=buf(29,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_BzBz=buf(30,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_BxCx=buf(31,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_BxCy=buf(32,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_BxCz=buf(33,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_ByCx=buf(34,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_ByCy=buf(35,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_ByCz=buf(36,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_BzCx=buf(37,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_BzCy=buf(38,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_BzCz=buf(39,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_CxCx=buf(40,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_CxCy=buf(41,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_CxCz=buf(42,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_CyCy=buf(43,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_CyCz=buf(44,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_CzCz=buf(45,nbls,lnijkl,ngcd),
int_hess2e2.f:      dimension buf(45,nbls,lnijkl,ngcd)
int_hess2e2.f:        do 100 ijklp=1,nbls
int_hess2e2.f:          icff=labels(1,iqu,ijklp)
int_hess2e2.f:          jcff=labels(2,iqu,ijklp)
int_hess2e2.f:          kcff=labels(3,iqu,ijklp)
int_hess2e2.f:          lcff=labels(4,iqu,ijklp)
int_hess2e2.f:c  Indices and integrals in the quartet ijkl :
int_hess2e2.f:                ijf=ii+jcf
int_hess2e2.f:                if(jcf.gt.icf) ijf=jj+icf
int_hess2e2.f:                dij4=dens(ijf)*4.d0
int_hess2e2.f:                        dijkl=dij4*dkl - dik*djl -dil*djk
int_hess2e2.f:                        dijkl=dij4*dkl - ax*(dik*djl +dil*djk)
int_hess2e2.f:          if(abs(dijkl).lt.thres1) go to 350
int_hess2e2.f:        call daxpy(45,dijkl,buf(1,ijklp,integ,iqu),1,work,1)
int_hess2e2.f:c          work(iel)=work(iel)+dijkl*buf(iel,ijklp,integ,iqu)
int_hess2e2.f:     *                      ntri,nbls, ngcd, lnijkl,
int_hess2e2.f:c  lnijkl   - number of integrals from one quartet
int_hess2e2.f:c    der2_AxAx=buf(1,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_AxAy=buf(2,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_AxAz=buf(3,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_AyAy=buf(4,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_AyAz=buf(5,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_AzAz=buf(6,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_AxBx= buf(7,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_AxBy= buf(8,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_AxBz= buf(9,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_AyBx=buf(10,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_AyBy=buf(11,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_AyBz=buf(12,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_AzBx=buf(13,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_AzBy=buf(14,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_AzBz=buf(15,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_AxCx=buf(16,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_AxCy=buf(17,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_AxCz=buf(18,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_AyCx=buf(19,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_AyCy=buf(20,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_AyCz=buf(21,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_AzCx=buf(22,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_AzCy=buf(23,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_AzCz=buf(24,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_BxBx=buf(25,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_BxBy=buf(26,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_BxBz=buf(27,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_ByBy=buf(28,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_ByBz=buf(29,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_BzBz=buf(30,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_BxCx=buf(31,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_BxCy=buf(32,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_BxCz=buf(33,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_ByCx=buf(34,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_ByCy=buf(35,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_ByCz=buf(36,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_BzCx=buf(37,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_BzCy=buf(38,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_BzCz=buf(39,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_CxCx=buf(40,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_CxCy=buf(41,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_CxCz=buf(42,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_CyCy=buf(43,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_CyCz=buf(44,nbls,lnijkl,ngcd),
int_hess2e2.f:c    der2_CzCz=buf(45,nbls,lnijkl,ngcd),
int_hess2e2.f:      dimension buf(45,nbls,lnijkl,ngcd)
int_hess2e2.f:        do 100 ijklp=1,nbls
int_hess2e2.f:          icff=labels(1,iqu,ijklp)
int_hess2e2.f:          jcff=labels(2,iqu,ijklp)
int_hess2e2.f:          kcff=labels(3,iqu,ijklp)
int_hess2e2.f:          lcff=labels(4,iqu,ijklp)
int_hess2e2.f:c  Indices and integrals in the quartet ijkl :
int_hess2e2.f:                ijf=ii+jcf
int_hess2e2.f:                if(jcf.gt.icf) ijf=jj+icf
int_hess2e2.f:                dij4=dens(ijf)*4.d0
int_hess2e2.f:                      dijkl=dij4*dkl
int_hess2e2.f:          if(abs(dijkl).lt.thres1) go to 350
int_hess2e2.f:        call dscal(45,dijkl,buf(1,ijklp,integ,iqu),1)
int_hess2e2.f:        call make_78_from_45(buf(1,ijklp,integ,iqu),work)
int_hess2e2.f:c   ider2=ider1 + 9*nbls *lnijkl*ngcd
int_lmp2.f:      common /memor1c/ map_ij_bl2
int_lmp2.f:      subroutine lmp2_bldr(ncf,   buf,   nbls,  ngcd,  lnijkl,
int_lmp2.f:c lnijkl= size of an integral quartet (number of integrals)
int_lmp2.f:      dimension buf(nbls,lnijkl,ngcd)
int_lmp2.f:        do 100 ijklp=1,nbls
int_lmp2.f:              icff=labels(1,iqu,ijklp)
int_lmp2.f:              jcff=labels(2,iqu,ijklp)
int_lmp2.f:              kcff=labels(3,iqu,ijklp)
int_lmp2.f:              lcff=labels(4,iqu,ijklp)
int_lmp2.f:c Four possible cases without swiching ijblock2 & klblock2
int_lmp2.f:c Four possible cases with    swiching ijblock2 & klblock2
int_lmp2.f:                    xmp2int(lcf,jcf,kcf,icf)=buf(ijklp,intct,iqu)
int_lmp2.f:                    xmp2int(kcf,jcf,Lcf,icf)=buf(ijklp,intct,iqu)
int_lmp2.f:                    xmp2int(lcf,icf,kcf,Jcf)=buf(ijklp,intct,iqu)
int_lmp2.f:                    xmp2int(kcf,icf,Lcf,Jcf)=buf(ijklp,intct,iqu)
int_lmp2.f:                    xmp2int(jcf,lcf,icf,kcf)=buf(ijklp,intct,iqu)
int_lmp2.f:                    xmp2int(jcf,kcf,icf,lcf)=buf(ijklp,intct,iqu)
int_lmp2.f:                    xmp2int(icf,lcf,jcf,kcf)=buf(ijklp,intct,iqu)
int_lmp2.f:                    xmp2int(icf,kcf,jcf,lcf)=buf(ijklp,intct,iqu)
int_lmp2.f:c FOR LEFT side pairs in (ij|kl) :
int_lmp2.f:c make pair-blocks for left side of (ij|kl):
int_lmp2.f:      call blocking2_same(bl,'ijpairs',inx,
int_lmp2.f:c FOR RIGHT side pairs in (ij|kl) :
int_lmp2.f:c make pair-blocks for right side of (ij|kl):
int_lmp2.f:         call getival('nparx',npar_ij)
int_lmp2.f:         call getival('ijblx',ijbl)
int_lmp2.f:c....... call getival('mapijblx',map_ij_bl2_ij)
int_lmp2.f:         call getival('blocksij',nbl2_ij)
int_lmp2.f:         call getival('blpredij',nbl2_ijd)
int_lmp2.f:         call getival('ijbly',klbl)
int_lmp2.f:c....... call getival('mapijbly',map_ij_bl2_kl)
int_lmp2.f:c ijbl2=nblock4(1,ibl4)
int_lmp2.f:      call getint(2*nbl2_ij*nbl2_kl, nblock4)
int_lmp2.f:     * bl(ijbl),nbl2_ijd,nbl2_ij,bl(npar_ij),bl(inx_1),bl(inx_2),
int_lmp2.f:      common /memor1c/ map_ij_bl2
int_lmp2.f:      subroutine lmp2_bldrb(ncf,buf,nbls,ngcd,lnijkl,
int_lmp2.f:c lnijkl= size of an integral quartet (number of integrals)
int_lmp2.f:      dimension buf(nbls,lnijkl,ngcd)
int_lmp2.f:        do 100 ijklp=1,nbls
int_lmp2.f:              icff=labels(1,iqu,ijklp)
int_lmp2.f:              jcff=labels(2,iqu,ijklp)
int_lmp2.f:              kcff=labels(3,iqu,ijklp)
int_lmp2.f:              lcff=labels(4,iqu,ijklp)
int_lmp2.f:c Four possible cases without swiching ijblock2 & klblock2
int_lmp2.f:c Four possible cases with    swiching ijblock2 & klblock2
int_lmp2.f:c                   xint=buf(ijklp,intct,iqu)
int_lmp2.f:      call storeint(nbls,ijklp,icsh,kcsh,icsc,
int_lmp2.f:      subroutine storeint(nbls,ijklp,ifirst,ithird,icsc,
int_lmp2.f:      store(intstore)=buf(ijklp,ll,kk,jj,ii)
int_lmp2.f:      store(intstore)=buf(ijklp,ll,kk,jj,ii)
int_lmp2.f:      store(intstore)=buf(ijklp,ll,kk,jj,ii)
int_lmp2.f:      store(intstore)=buf(ijklp,ll,kk,jj,ii)
int_lmp2.f:      store(intstore)=buf(ijklp,ll,kk,jj,ii)
int_lmp2.f:      store(intstore)=buf(ijklp,ll,kk,jj,ii)
int_lmp2.f:      store(intstore)=buf(ijklp,ll,kk,jj,ii)
int_lmp2.f:      store(intstore)=buf(ijklp,ll,kk,jj,ii)
int_lmp2.f:      subroutine lmp2Ebldr(ncf,   buf,   nbls,  ngcd,  lnijkl,
int_lmp2.f:c lnijkl= size of an integral quartet (number of integrals)
int_lmp2.f:      dimension buf(nbls,lnijkl,ngcd)
int_lmp2.f:        do 100 ijklp=1,nbls
int_lmp2.f:              icff=labels(1,iqu,ijklp)
int_lmp2.f:              jcff=labels(2,iqu,ijklp)
int_lmp2.f:              kcff=labels(3,iqu,ijklp)
int_lmp2.f:              lcff=labels(4,iqu,ijklp)
int_lmp2.f:c Four possible cases without swiching ijblock2 & klblock2
int_lmp2.f:c Four possible cases with    swiching ijblock2 & klblock2
int_lmp2.f:                    xmp2int(lcf,jcf,kcf,icf)=buf(ijklp,intct,iqu)
int_lmp2.f:                    xmp2int(jcf,lcf,icf,kcf)=buf(ijklp,intct,iqu)
int_lmp2.f:c                   xa=buf(ijklp,intct,iqu)*1.0d-9
int_lmp2.f:                    xmp2int(kcf,jcf,Lcf,icf)=buf(ijklp,intct,iqu)
int_lmp2.f:                    xmp2int(jcf,kcf,icf,lcf)=buf(ijklp,intct,iqu)
int_lmp2.f:c                   xa=buf(ijklp,intct,iqu)*1.0d-9
int_lmp2.f:                    xmp2int(lcf,icf,kcf,Jcf)=buf(ijklp,intct,iqu)
int_lmp2.f:                    xmp2int(icf,lcf,jcf,kcf)=buf(ijklp,intct,iqu)
int_lmp2.f:c                      xa=buf(ijklp,intct,iqu)*1.0d-9
int_lmp2.f:                    xmp2int(kcf,icf,Lcf,Jcf)=buf(ijklp,intct,iqu)
int_lmp2.f:                    xmp2int(icf,kcf,jcf,lcf)=buf(ijklp,intct,iqu)
int_lmp2.f:c                      xa=buf(ijklp,intct,iqu)*1.0d-9
int_lmp2.f:      subroutine lmp2Nbldr(ncf,   buf,   nbls,  ngcd,  lnijkl,
int_lmp2.f:c lnijkl= size of an integral quartet (number of integrals)
int_lmp2.f:      dimension buf(nbls,lnijkl,ngcd)
int_lmp2.f:        do 100 ijklp=1,nbls
int_lmp2.f:              icff=labels(1,iqu,ijklp)
int_lmp2.f:              jcff=labels(2,iqu,ijklp)
int_lmp2.f:              kcff=labels(3,iqu,ijklp)
int_lmp2.f:              lcff=labels(4,iqu,ijklp)
int_lmp2.f:c Four possible cases without swiching ijblock2 & klblock2
int_lmp2.f:c Four possible cases with    swiching ijblock2 & klblock2
int_lmp2.f:                    xmp2int(lcf,jcf,kcf,icf)=buf(ijklp,intct,iqu)
int_lmp2.f:c                xa=buf(ijklp,intct,iqu)*1.0d-9
int_lmp2.f:                    xmp2int(kcf,jcf,Lcf,icf)=buf(ijklp,intct,iqu)
int_lmp2.f:c                xa=buf(ijklp,intct,iqu)*1.0d-9
int_lmp2.f:                    xmp2int(lcf,icf,kcf,Jcf)=buf(ijklp,intct,iqu)
int_lmp2.f:c                xa=buf(ijklp,intct,iqu)*1.0d-9
int_lmp2.f:                    xmp2int(kcf,icf,Lcf,Jcf)=buf(ijklp,intct,iqu)
int_lmp2.f:c                xa=buf(ijklp,intct,iqu)*1.0d-9
int_lmp2.f:      subroutine lmp2NbldX(ncf,   buf,   nbls,  ngcd,  lnijkl,
int_lmp2.f:c lnijkl= size of an integral quartet (number of integrals)
int_lmp2.f:      dimension buf(nbls,lnijkl,ngcd)
int_lmp2.f:        do 100 ijklp=1,nbls
int_lmp2.f:              icff=labels(1,iqu,ijklp)
int_lmp2.f:              jcff=labels(2,iqu,ijklp)
int_lmp2.f:              kcff=labels(3,iqu,ijklp)
int_lmp2.f:              lcff=labels(4,iqu,ijklp)
int_lmp2.f:c Four possible cases without swiching ijblock2 & klblock2
int_lmp2.f:c Four possible cases with    swiching ijblock2 & klblock2
int_lmp2.f:                 ij=ii+j
int_lmp2.f:                 ijij=(ij-1)*klen
int_lmp2.f:                 ijk=ijij+k
int_lmp2.f:                 ijkijk=(ijk-1)*llen
int_lmp2.f:                 intct=ijkijk+l
int_lmp2.f:                    xmp2int(lcf,jcf,kcf,icf)=buf(ijklp,intct,iqu)
int_lmp2.f:c                xa=buf(ijklp,intct,iqu)*1.0d-9
int_lmp2.f:                 ij=ii+j
int_lmp2.f:                 ijij=(ij-1)*klen
int_lmp2.f:                 ijk=ijij+k
int_lmp2.f:                 ijkijk=(ijk-1)*llen
int_lmp2.f:                 intct=ijkijk+l
int_lmp2.f:                    xmp2int(kcf,jcf,Lcf,icf)=buf(ijklp,intct,iqu)
int_lmp2.f:c                xa=buf(ijklp,intct,iqu)*1.0d-9
int_lmp2.f:                 ij=ii+j
int_lmp2.f:                 ijij=(ij-1)*klen
int_lmp2.f:                 ijk=ijij+k
int_lmp2.f:                 ijkijk=(ijk-1)*llen
int_lmp2.f:                 intct=ijkijk+l
int_lmp2.f:                    xmp2int(lcf,icf,kcf,Jcf)=buf(ijklp,intct,iqu)
int_lmp2.f:c                xa=buf(ijklp,intct,iqu)*1.0d-9
int_lmp2.f:                 ij=ii+j
int_lmp2.f:                 ijij=(ij-1)*klen
int_lmp2.f:                 ijk=ijij+k
int_lmp2.f:                 ijkijk=(ijk-1)*llen
int_lmp2.f:                 intct=ijkijk+l
int_lmp2.f:                    xmp2int(kcf,icf,Lcf,Jcf)=buf(ijklp,intct,iqu)
int_lmp2.f:c                xa=buf(ijklp,intct,iqu)*1.0d-9
int_lmp2.f:      subroutine lmp2Ebldx(ncf,   buf,   nbls,  ngcd,  lnijkl,
int_lmp2.f:c lnijkl= size of an integral quartet (number of integrals)
int_lmp2.f:      dimension buf(nbls,lnijkl,ngcd)
int_lmp2.f:        do 100 ijklp=1,nbls
int_lmp2.f:              icff=labels(1,iqu,ijklp)
int_lmp2.f:              jcff=labels(2,iqu,ijklp)
int_lmp2.f:              kcff=labels(3,iqu,ijklp)
int_lmp2.f:              lcff=labels(4,iqu,ijklp)
int_lmp2.f:c Four possible cases without swiching ijblock2 & klblock2
int_lmp2.f:c Four possible cases with    swiching ijblock2 & klblock2
int_lmp2.f:                 ij=ii+j
int_lmp2.f:                 ijij=(ij-1)*klen
int_lmp2.f:                 ijk=ijij+k
int_lmp2.f:                 ijkijk=(ijk-1)*llen
int_lmp2.f:                 intct=ijkijk+l
int_lmp2.f:                    xmp2int(lcf,jcf,kcf,icf)=buf(ijklp,intct,iqu)
int_lmp2.f:                 ij=ii+j
int_lmp2.f:                 ijij=(ij-1)*klen
int_lmp2.f:                 ijk=ijij+k
int_lmp2.f:                 ijkijk=(ijk-1)*llen
int_lmp2.f:                 intct=ijkijk+l
int_lmp2.f:                    xmp2int(kcf,jcf,Lcf,icf)=buf(ijklp,intct,iqu)
int_lmp2.f:                 ij=ii+j
int_lmp2.f:                 ijij=(ij-1)*klen
int_lmp2.f:                 ijk=ijij+k
int_lmp2.f:                 ijkijk=(ijk-1)*llen
int_lmp2.f:                 intct=ijkijk+l
int_lmp2.f:                    xmp2int(lcf,icf,kcf,Jcf)=buf(ijklp,intct,iqu)
int_lmp2.f:                 ij=ii+j
int_lmp2.f:                 ijij=(ij-1)*klen
int_lmp2.f:                 ijk=ijij+k
int_lmp2.f:                 ijkijk=(ijk-1)*llen
int_lmp2.f:                 intct=ijkijk+l
int_lmp2.f:                    xmp2int(kcf,icf,Lcf,Jcf)=buf(ijklp,intct,iqu)
int_lmp2.f:                 ij=ii+j
int_lmp2.f:                 ijij=(ij-1)*klen
int_lmp2.f:                 ijk=ijij+k
int_lmp2.f:                 ijkijk=(ijk-1)*llen
int_lmp2.f:                 intct=ijkijk+l
int_lmp2.f:                    xmp2int(jcf,lcf,icf,kcf)=buf(ijklp,intct,iqu)
int_lmp2.f:                 ij=ii+j
int_lmp2.f:                 ijij=(ij-1)*klen
int_lmp2.f:                 ijk=ijij+k
int_lmp2.f:                 ijkijk=(ijk-1)*llen
int_lmp2.f:                 intct=ijkijk+l
int_lmp2.f:                    xmp2int(jcf,kcf,icf,lcf)=buf(ijklp,intct,iqu)
int_lmp2.f:                 ij=ii+j
int_lmp2.f:                 ijij=(ij-1)*klen
int_lmp2.f:                 ijk=ijij+k
int_lmp2.f:                 ijkijk=(ijk-1)*llen
int_lmp2.f:                 intct=ijkijk+l
int_lmp2.f:                    xmp2int(icf,lcf,jcf,kcf)=buf(ijklp,intct,iqu)
int_lmp2.f:                 ij=ii+j
int_lmp2.f:                 ijij=(ij-1)*klen
int_lmp2.f:                 ijk=ijij+k
int_lmp2.f:                 ijkijk=(ijk-1)*llen
int_lmp2.f:                 intct=ijkijk+l
int_lmp2.f:                    xmp2int(icf,kcf,jcf,lcf)=buf(ijklp,intct,iqu)
int_lmp2.f:      subroutine lmp2_bldx(ncf,   buf,   nbls,  ngcd,  lnijkl,
int_lmp2.f:c lnijkl= size of an integral quartet (number of integrals)
int_lmp2.f:      dimension buf(nbls,lnijkl,ngcd)
int_lmp2.f:        do 100 ijklp=1,nbls
int_lmp2.f:              icff=labels(1,iqu,ijklp)
int_lmp2.f:              jcff=labels(2,iqu,ijklp)
int_lmp2.f:              kcff=labels(3,iqu,ijklp)
int_lmp2.f:              lcff=labels(4,iqu,ijklp)
int_lmp2.f:c Four possible cases without swiching ijblock2 & klblock2
int_lmp2.f:c Four possible cases with    swiching ijblock2 & klblock2
int_lmp2.f:                    xmp2int(lcf,jcf,kcf,icf)=buf(ijklp,intct,iqu)
int_lmp2.f:                    xmp2int(kcf,jcf,Lcf,icf)=buf(ijklp,intct,iqu)
int_lmp2.f:                    xmp2int(lcf,icf,kcf,Jcf)=buf(ijklp,intct,iqu)
int_lmp2.f:                    xmp2int(kcf,icf,Lcf,Jcf)=buf(ijklp,intct,iqu)
int_lmp2.f:                    xmp2int(jcf,lcf,icf,kcf)=buf(ijklp,intct,iqu)
int_lmp2.f:                    xmp2int(jcf,kcf,icf,lcf)=buf(ijklp,intct,iqu)
int_lmp2.f:                    xmp2int(icf,lcf,jcf,kcf)=buf(ijklp,intct,iqu)
int_lmp2.f:                    xmp2int(icf,kcf,jcf,lcf)=buf(ijklp,intct,iqu)
int_mp2d.f:      common /memor1c/ map_ij_bl2
int_mp2d.f:      subroutine mp2d_bldr(ncf, buf, nbls, ngcd, lnijkl,
int_mp2d.f:c lnijkl= size of an integral quartet (number of integrals)
int_mp2d.f:      dimension buf(9,nbls,lnijkl,ngcd)
int_mp2d.f:        do 100 ijklp=1,nbls
int_mp2d.f:              icff=labels(1,iqu,ijklp)
int_mp2d.f:              jcff=labels(2,iqu,ijklp)
int_mp2d.f:              kcff=labels(3,iqu,ijklp)
int_mp2d.f:              lcff=labels(4,iqu,ijklp)
int_mp2d.f:                 ijcs=icsc*(icsc-1)/2+jcsc
int_mp2d.f:                 ijcs=jcsc*(jcsc-1)/2+icsc
int_mp2d.f:              if(ijcs.eq.klcs) permut=permut*0.5d0
int_mp2d.f:c Four possible cases without swiching ijblock2 & klblock2
int_mp2d.f:c Four possible cases with    swiching ijblock2 & klblock2
int_mp2d.f:                          xa=buf(1,ijklp,integ,iqu)
int_mp2d.f:                          xb=buf(2,ijklp,integ,iqu)
int_mp2d.f:                          xc=buf(3,ijklp,integ,iqu)
int_mp2d.f:                          ya=buf(4,ijklp,integ,iqu)
int_mp2d.f:                          yb=buf(5,ijklp,integ,iqu)
int_mp2d.f:                          yc=buf(6,ijklp,integ,iqu)
int_mp2d.f:                          za=buf(7,ijklp,integ,iqu)
int_mp2d.f:                          zb=buf(8,ijklp,integ,iqu)
int_mp2d.f:                          zc=buf(9,ijklp,integ,iqu)
int_mp2d.f:                    call daxpy(9,tikjl,buf(1,ijklp,intct,iqu),1,vec,1)
int_mp2d.f:                    call daxpy(9,tikjl,buf(1,ijklp,intct,iqu),1,vec,1)
int_mp2d.f:                    call daxpy(9,tikjl,buf(1,ijklp,intct,iqu),1,vec,1)
int_mp2d.f:                    call daxpy(9,tikjl,buf(1,ijklp,intct,iqu),1,vec,1)
int_mp2d.f:                    call daxpy(9,tikjl,buf(1,ijklp,intct,iqu),1,vec,1)
int_mp2d.f:                    call daxpy(9,tikjl,buf(1,ijklp,intct,iqu),1,vec,1)
int_mp2d.f:                    call daxpy(9,tikjl,buf(1,ijklp,intct,iqu),1,vec,1)
int_mp2d.f:                    call daxpy(9,tikjl,buf(1,ijklp,intct,iqu),1,vec,1)
int_mp2d.f:c    *'   quart=',ijklp,' cent=',iat,jat,kat,lat,' perm=',permut,
int_mp2d.f:c    *'   quart=',ijklp,' cent=',iat,jat,kat,lat,' perm=',permut
inton2.f:          iij=0
inton2.f:                       iij=iij+1
inton2.f:                  oneint(iff,jff)=bl(iij)
inton2.f:cc       write(6,*) ' just set oneint  iff:',iff,' jff:',jff,' iij:',iij
inton2.f:              ij=0
inton2.f:                  ij=ij+1
inton2.f:                  ss(j1,i1,jgc,igc)=ss(j1,i1,jgc,igc)+s(ij)*coefi*coefj
inton2.f:      ij=0
inton2.f:         ij=ij+1
inton2.f:         xint(ij)=yint(ij)*ft
inton2.f:      ij=0
inton2.f:         ij=ij+1
inton2.f:         xint(ij)=xint(ij)-yint(ij)*ft
inton2.f:      ij=0
inton2.f:         ij=ij+1
inton2.f:         xint(ij)=xint(ij)-yint(ij)*ft
inton2.f:      ij=0
inton2.f:         ij=ij+1
inton2.f:         xint(ij)=xint(ij)-yint(ij)*ft
int_schw.f:c This routine calls two-el. program for Schwarz integrals only (ij|ij)
int_schw.f:c  schwarz    = an array holding (ij|ij) integrals
int_schw.f:      DO ijbl2=1,nbl2
int_schw.f:        isupbl=ijbl2*(ijbl2+1)/2
int_schw.f:      subroutine schw_bldr(ncs,ncf,buf,ndim,nbls,ngcd,lnijkl,map_cf_cs,
int_schw.f:cccc  dimension buf(nbls,lnijkl,ngcd)
int_schw.f:      dimension buf(ndim,nbls,lnijkl,ngcd)
int_schw.f:      permut1=2.d0     ! because (ij|kl) with ij=kl
int_schw.f:        do 100 ijklp=1,nbls
int_schw.f:              icff=labels(1, 1 ,ijklp)
int_schw.f:              jcff=labels(2, 1 ,ijklp)
int_schw.f:              kcff=labels(3, 1 ,ijklp)
int_schw.f:              lcff=labels(4, 1 ,ijklp)
int_schw.f:                    xint=buf(ider,ijklp,intct,iqu)
int_stor.f:        call getint_2(4*ibpac , ijklsiz) ! I*2
int_stor.f:        call getint_2(4*iqpac , ijkllab) ! I*2
int_stor.f:     *        bl(ixint8),     thres,         bl(ibuffz),    bl(ijklsiz),
int_stor.f:     *        bl(nquarts),    bl(ijkllab),   iblstore,      iqstore,
int_stor.f:c       write on disk ijklsiz, nquarts and ijkllab
int_stor.f:          call write_int2(iunit1,bl(ijklsiz),4*iblstore)
int_stor.f:          call write_int2(iunit3,bl(ijkllab),4*iqstore)
int_stor.f:     *        ngcd,        lnijkl,      labels,      length,
int_stor.f:      dimension buf(nbls,lnijkl,ngcd)
int_stor.f:        do 100 ijklp=1,nbls
int_stor.f:                xint=buf(ijklp,intct,iqu)
int_stor.f:                ilab(nqstore)=labels(1,iqu,ijklp)
int_stor.f:                jlab(nqstore)=labels(2,iqu,ijklp)
int_stor.f:                klab(nqstore)=labels(3,iqu,ijklp)
int_stor.f:                llab(nqstore)=labels(4,iqu,ijklp)
int_stor.f:     *        xinteg8,        thres,         buf,           ijklsiz,
int_stor.f:     *        nquarts,        ijkllab,       iblstore,      iqstore,  
int_stor.f:     *        integrals,      nbls,          ngcd,          lnijkl,
int_stor.f:      integer*2 ijkllab(4,*)      ! iqstore
int_stor.f:      integer*2 ijklsiz(4,*)      ! iblstore
int_stor.f:      dimension buf(nbls,lnijkl,ngcd)
int_stor.f:        do 100 ijklp=1,nbls
int_stor.f:                xint=buf(ijklp,intct,iqu)
int_stor.f:                      xinteg8(ibegin8+intct)=buf(ijklp,intct,iqu)
int_stor.f:                         xinteg4(ibegin4+intct)=buf(ijklp,intct,iqu)
int_stor.f:                            xinteg2(ibegin2+intct)=buf(ijklp,intct,iqu)
int_stor.f:                            xinte62(ibegi62+intct)=buf(ijklp,intct,iqu)
int_stor.f:                            xinte72(ibegi72+intct)=buf(ijklp,intct,iqu)
int_stor.f:                icff=1+labels(1,iqu,ijklp)
int_stor.f:                jcff=1+labels(2,iqu,ijklp)
int_stor.f:                kcff=1+labels(3,iqu,ijklp)
int_stor.f:                lcff=1+labels(4,iqu,ijklp)
int_stor.f:                ijkllab(1,iqstore)=icff
int_stor.f:                ijkllab(2,iqstore)=jcff
int_stor.f:                ijkllab(3,iqstore)=kcff
int_stor.f:                ijkllab(4,iqstore)=lcff
int_stor.f:         ijklsiz(1,iblstore)=ilen
int_stor.f:         ijklsiz(2,iblstore)=jlen
int_stor.f:         ijklsiz(3,iblstore)=klen
int_stor.f:         ijklsiz(4,iblstore)=llen
lmp2_iter.f:     4                   clim,erhf,weak,lbasij,idmij,
lmp2_iter.f:     7                   dsijx,coro,remf,jdm,jdmij,
lmp2_iter.f:C       basis are on disk: unit ndisk4,nkunit  (xxxx.kij)
lmp2_iter.f:       dimension isorb(nval,*),ifunpair(7,*),dsijx(nval,*)
lmp2_iter.f:       integer*2 idmw(*),lbasw(*),listw(nval,*),jdm(*),jdmij(*)
lmp2_iter.f:       integer*2 lbas(*),idm(*),lbasij(*),idmij(*),inndp(*)
lmp2_iter.f:       trij=zero
lmp2_iter.f:      write(6,*) 'kij: ', nkunix+1
lmp2_iter.f:      write(6,*) 'Tij: ', ntunit
lmp2_iter.f:       idd=idmij(llp)
lmp2_iter.f:       filname0=scrfile(1:len)//'.Tij'
lmp2_iter.f:      Do itij=1,NStripe
lmp2_iter.f:      write(ch3,'(I3)') itij
lmp2_iter.f:      If(itij.lt.10) ch3(2:2) = '0'
lmp2_iter.f:      KUnit =ntunit+itij
lmp2_iter.f:     1            bl(lbtb),idmx,nsym,idmij,lbasij,
lmp2_iter.f:       call tsetup(ijfum,nval,nstron,idm,itst,
lmp2_iter.f:     1                iprint,uniq,idmij,idmw,nweak,
lmp2_iter.f:      if(iprint.ge.2)write(6,*)'tful',ijfum
lmp2_iter.f:       call matdef('tful','v',ijfum,ijfum)
lmp2_iter.f:       meme=meme+idmij(ixxx)
lmp2_iter.f:C       generate initial Tijs and leave in memory for the duration
lmp2_iter.f:       ijdm=idd*idd
lmp2_iter.f:       call matdef('Rij','q',idd,idd)
lmp2_iter.f:       ikadr=mataddr('Rij')
lmp2_iter.f:C       read internal exchange operator from xx.kij (unit nkunut)
lmp2_iter.f:       call reaarr(bl(ikadr),ijdm,nkunit)
lmp2_iter.f:      call wrida(bl(ikadr),bl(itmxa),ijdm,idmxs,irec,nunit)
lmp2_iter.f:       call matrem('Rij')
lmp2_iter.f:       idd=idmij(lpt)
lmp2_iter.f:       ijdm=idd*idd
lmp2_iter.f:       call matdef('Rij','q',idd,idd)
lmp2_iter.f:       ikadr=mataddr('Rij')
lmp2_iter.f:        call neworb2n(ncf,lbasij(iff),idd,jdd,noru,
lmp2_iter.f:       jdmij(lpt)=jdd
lmp2_iter.f:       call neworb2(ncf,lbasij(iff),idd,norx,tno2,
lmp2_iter.f:       call reaarr(bl(ikadr),ijdm,nkunit)
lmp2_iter.f:      call wrida(bl(ikadr),bl(itmxa),ijdm,idmxs,irec,nunit)
lmp2_iter.f:       call matrem('Rij')
lmp2_iter.f:       ijdm=idd*jdd
lmp2_iter.f:       call matdef('Rij','r',idd,jdd)
lmp2_iter.f:       ikadr=mataddr('Rij')
lmp2_iter.f:       call reaarr(bl(ikadr),ijdm,nkunit)
lmp2_iter.f:       call moveTw(lppr,ijdm,itst)
lmp2_iter.f:       call matrem('Rij')
lmp2_iter.f:       disij=zero
lmp2_iter.f:       ijdm=idd*idd
lmp2_iter.f:       call matdef('Rij','q',idd,idd)
lmp2_iter.f:C       read in Kij and put into Rij
lmp2_iter.f:       ikadr=mataddr('Rij')
lmp2_iter.f:       wrdw=wrdw+ijdm+idd
lmp2_iter.f:       wrdw=ijdm+idd
lmp2_iter.f:       call reaarr(bl(ikadr),ijdm,nkunit)
lmp2_iter.f:      call pener(lpar,ii,jj,eij,idd,
lmp2_iter.f:       write(6,500) ii,jj,eij,multi,disij
lmp2_iter.f:       emp2=emp2+eij*multi
lmp2_iter.f:       call matrem('Rij')
lmp2_iter.f:       idd=idmij(lpt)
lmp2_iter.f:       ijdm=idd*idd
lmp2_iter.f:       call matdef('Rij','q',idd,idd)
lmp2_iter.f:C       read in Kij and put into Rij
lmp2_iter.f:       ikadr=mataddr('Rij')
lmp2_iter.f:       wrdw=wrdw+ijdm+idd
lmp2_iter.f:       wrdw=ijdm+idd
lmp2_iter.f:       call reaarr(bl(ikadr),ijdm,nkunit)
lmp2_iter.f:      call pener(lpar,ii,jj,eij,idd,
lmp2_iter.f:       disij=0.529167d0/dsijx(ii,jj)
lmp2_iter.f:       dsav=dsav+disij*multi
lmp2_iter.f:       write(6,500) ii,jj,eij,multi,disij
lmp2_iter.f:       emps=emps+eij*multi
lmp2_iter.f:       call matrem('Rij')
lmp2_iter.f:       ijdm=idd*jdd
lmp2_iter.f:C       read in Kij and put into Rij
lmp2_iter.f:       call matdef('Rij','r',idd,jdd)
lmp2_iter.f:       ikadr=mataddr('Rij')
lmp2_iter.f:       wrdw=wrdw+ijdm
lmp2_iter.f:       wrdw=ijdm
lmp2_iter.f:       call reaarr(bl(ikadr),ijdm,nkunit)
lmp2_iter.f:      call penw(llpr,ii,jj,eij,idd,
lmp2_iter.f:       disij=0.529167d0/dsijx(ii,jj)
lmp2_iter.f:       dsav=dsav+disij*multi
lmp2_iter.f:       write(6,500) ii,jj,eij,multi,disij
lmp2_iter.f:       eweak=eweak+eij*multi
lmp2_iter.f:       call matrem('Rij')
lmp2_iter.f:      call RijMP2(lpar,ii,jj,idm,lbas,
lmp2_iter.f:     4            jlist,trij,bl(lbtb),idmx,idmij,
lmp2_iter.f:     5            lbasij,lpt,ndiag,inndp,idd,
lmp2_iter.f:       call matdef('Tij','q',idd,idd)
lmp2_iter.f:       itij=mataddr('Tij')
lmp2_iter.f:      call reada(bl(itij),bl(itmxa),idd*idd,idmxs,irec,nunit)
lmp2_iter.f:       call matadd('Rij','Tij')
lmp2_iter.f:      call wrida(bl(itij),bl(itmxa),idd*idd,idmxs,irec,nunit)
lmp2_iter.f:       call matrem('Tij')
lmp2_iter.f:       call matrem('Rij')
lmp2_iter.f:       idd=idmij(lpt)
lmp2_iter.f:      call RijMP2(lpar,ii,jj,idm,lbas,
lmp2_iter.f:     4            jlist,trij,bl(lbtb),idmx,idmij,
lmp2_iter.f:     5            lbasij,lpt,ndiag,inndp,idd,
lmp2_iter.f:       jdd=jdmij(lpt)
lmp2_iter.f:       call matdef('Tij','q',idd,idd)
lmp2_iter.f:       itij=mataddr('Tij')
lmp2_iter.f:      call reada(bl(itij),bl(itmxa),idd*idd,idmxs,irec,nunit)
lmp2_iter.f:       call matadd('Rij','Tij')
lmp2_iter.f:      call wrida(bl(itij),bl(itmxa),idd*idd,idmxs,irec,nunit)
lmp2_iter.f:       call matrem('Tij')
lmp2_iter.f:       call matrem('Rij')
lmp2_iter.f:      call RijMP2w(lppw,ii,jj,idm,lbas,
lmp2_iter.f:     4             jlist,trij,bl(lbtb),idmx,idmij,
lmp2_iter.f:     5             lbasij,lpt,ndiag,inndp,idd,
lmp2_iter.f:       ikadr=mataddr('Rij')
lmp2_iter.f:       call matrem('Rij')
lmp2_iter.f:       ttrij=trij/60.00d0
lmp2_iter.f:       write(6,*) 'Generation of MP2-residua: ',ttrij,' min.'
lmp2_iter.f:C================rijmp2============================================
lmp2_iter.f:      subroutine RijMP2(lpar,ii,jj,idm,lbas,
lmp2_iter.f:     4                  jlist,trij,lbtab,idmx,idmij,
lmp2_iter.f:     5                  lbasij,lpt,ndiag,inndp,idd,
lmp2_iter.f:C       The final residuum will be in 'Rij' in local dimension
lmp2_iter.f:       integer*2 lbas(*),idm(*),idmij(*),lbasij(*)
lmp2_iter.f:       call secund(t1rij)
lmp2_iter.f:       ijdim=idd*idd
lmp2_iter.f:       call matdef('Rij','q',idd,idd)
lmp2_iter.f:       irad=mataddr('Rij')
lmp2_iter.f:       call matdef('Tij','q',idd,idd)
lmp2_iter.f:       itij=mataddr('Tij')
lmp2_iter.f:      call reada(bl(itij),bl(itmxa),ijdim,idmxs,irec,nunit)
lmp2_iter.f:     1                 itst,lpt,lbasij,ndiag)
lmp2_iter.f:       callmatrem('Tij')
lmp2_iter.f:C       FCijS-term
lmp2_iter.f:C    calculate F*Cij --> Y1
lmp2_iter.f:       call matdef('FCij','q',idd,idd)
lmp2_iter.f:     1             lbasij(iff),lbasij(iff))
lmp2_iter.f:       call matmmult('Fii','Tij','FCij')
lmp2_iter.f:C    multiply with S from the right and add to Rij
lmp2_iter.f:     1             lbasij(iff),lbasij(iff))
lmp2_iter.f:       call matmmult('FCij','Sjj','FCS')
lmp2_iter.f:       call matadd('FCS','Rij')
lmp2_iter.f:C       SCijF-terms
lmp2_iter.f:C       calculate SCij --> FCij
lmp2_iter.f:     1             lbasij(iff),lbasij(iff))
lmp2_iter.f:       call matmmult('Sii','Tij','FCij')
lmp2_iter.f:C    multiply with F from the right and add to Rij
lmp2_iter.f:     1             lbasij(iff),lbasij(iff))
lmp2_iter.f:       call matmmult('FCij','Fjj','FCS')
lmp2_iter.f:       call matrem('FCij')
lmp2_iter.f:       call matadd('FCS','Rij')
lmp2_iter.f:       call matrem('Tij')
lmp2_iter.f:     2             itst,ilist,jlist,idmij,lbasij,
lmp2_iter.f:     2             itst,ilist,jlist,idmij,lbasij,
lmp2_iter.f:     4             idmij,lbasij,lpt,ndiag,inndp,
lmp2_iter.f:     4             idmij,lbasij,lpt,ndiag,inndp,
lmp2_iter.f:       call secund(t2rij)
lmp2_iter.f:       trij=trij+t2rij-t1rij
lmp2_iter.f:C       R for this pair is in 'Rij' T for this pair in 'tful'
lmp2_iter.f:C       the Rij in MO basis is now in  'Rmo'
lmp2_iter.f:C       R for this pair is in 'Rij' T for this pair in 'tful'
lmp2_iter.f:C       the Rij in MO basis is now in  'Rmo'
lmp2_iter.f:C       the residuum must be in 'Rij'
lmp2_iter.f:       call matmmult('orbi','Rij','tmp1')
lmp2_iter.f:C       the residuum must be in 'Rij'
lmp2_iter.f:       call matmmult('orbt','Rij','tmp1')
lmp2_iter.f:C       R in AO basis put in 'Rij'
lmp2_iter.f:       call matmmult('tmp1','orbi','Rij')
lmp2_iter.f:C       R in AO basis put in 'Rij'
lmp2_iter.f:       call matmmult('tmp1','orbt','Rij')
lmp2_iter.f:       subroutine tsetup(ijdim,nval,nstron,idm,itst,
lmp2_iter.f:     1                      iprint,uniq,idmij,idmw,nweak,
lmp2_iter.f:C       this subroutine also returns ijdim which is the total
lmp2_iter.f:       integer*2 idm(*),idmij(*),idmw(*),listw(nval,*)
lmp2_iter.f:       ijdim=0
lmp2_iter.f:       ijdfm=0
lmp2_iter.f:       idd=idmij(lpt)
lmp2_iter.f:       ijdfm=ijdfm+idd*idd
lmp2_iter.f:       itst(lpar)=ijdim
lmp2_iter.f:       itst(lpar)=ijdim
lmp2_iter.f:       ijdim=ijdim+idd*idd
lmp2_iter.f:          ijdim=0
lmp2_iter.f:       ijdfm=ijdfm+idsq
lmp2_iter.f:       itst(lpar)=ijdim
lmp2_iter.f:       itst(lpar)=ijdim
lmp2_iter.f:       ijdim=ijdim+idsq
lmp2_iter.f:       ijdim=ijdim+1
lmp2_iter.f:       write(6,*)'Dimension of all amplitudes: ',ijdim,itst(lpar),lpar
lmp2_iter.f:       write(6,*)'Formal dimension of all amplitudes: ',ijdfm
lmp2_iter.f:      subroutine pener(lpar,ii,jj,eij,idd,
lmp2_iter.f:C       result in eij
lmp2_iter.f:       call matdef('Tij','q',idd,idd)
lmp2_iter.f:       itij=mataddr('Tij')
lmp2_iter.f:       ijdim=idd*idd
lmp2_iter.f:      call reada(bl(itij),bl(itmxa),ijdim,idmxs,irec,nunit)
lmp2_iter.f:        irij=mataddr('Rij')
lmp2_iter.f:       call atoap(bl(irij),idd)
lmp2_iter.f:       call ptrac2(bl(irij),bl(itij),ijdim,eij)
lmp2_iter.f:       eij=eij+eij
lmp2_iter.f:       if(ii.ne.jj) eij=eij+eij
lmp2_iter.f:        if(eij.lt.-0.5d0.or.eij.gt.1.0d-7) Then
lmp2_iter.f:        write(6,*) 'Pair energy absurd:', eij
lmp2_iter.f:        imxxt=idamax(ijdim,bl(itij),1)
lmp2_iter.f:        imxxu=idamax(ijdim,bl(irij),1)
lmp2_iter.f:        write(6,*) 'T:',imxxt,bl(itij-1+imxxt)
lmp2_iter.f:        write(6,*) 'R:',imxxu,bl(irij-1+imxxu)
lmp2_iter.f:       call matrem('Tij')
lmp2_iter.f:       do ij=1,mn
lmp2_iter.f:       sum=sum+a(ij)*b(ij)
lmp2_iter.f:       idtst=mataddr('Rij')-1
lmp2_iter.f:       idij=idd*idd
lmp2_iter.f:        do imv=1,idij
lmp2_iter.f:C       result in 'Tij'
lmp2_iter.f:       itijs=mataddr('Tij')-1
lmp2_iter.f:       idij=idd*idd
lmp2_iter.f:       do imv=1,idij
lmp2_iter.f:       bl(itijs+imv)=bl(itfus+imv)
lmp2_iter.f:     4                   idmij,lbasij,lpt,ndiag,inndp,
lmp2_iter.f:       integer*2 idmij(*),lbasij(*),idmw(*),listw(nval,*)
lmp2_iter.f:     1             lbasij,idmij,invl,listp,nstron,
lmp2_iter.f:       kdkj=idmij(lpx)
lmp2_iter.f:       call matdef('Tij','q',kdkj,kdkj)
lmp2_iter.f:       itij=mataddr('Tij')
lmp2_iter.f:      call reada(bl(itij),bl(itmxa),kjdim,idmxs,irec,nunit)
lmp2_iter.f:C       getts does the same as gett (puts T into 'Tij') when kjpar
lmp2_iter.f:     2           jlist,ipt,isym,idmij,lbasij,
lmp2_iter.f:       call matpose2('Tij','Tkj','n')
lmp2_iter.f:       call matrem('Tij')
lmp2_iter.f:       call matdef('Tij','q',kdkj,kdkj)
lmp2_iter.f:       itij=mataddr('Tij')
lmp2_iter.f:      call reada(bl(itij),bl(itmxa),kjdim,idmxs,irec,nunit)
lmp2_iter.f:     2           jlist,ipt,isym,idmij,lbasij,
lmp2_iter.f:       call matredef('Tij','Tkj','q',kdkj,kdkj)
lmp2_iter.f:       call matdef('Tij','r',jdkj,kdkj)
lmp2_iter.f:       call matpose2('Tij','Tkj','n')
lmp2_iter.f:       call matrem('Tij')
lmp2_iter.f:       call matdef('Tij','r',kdkj,jdkj)
lmp2_iter.f:       call matredef('Tij','Tkj','r',kdkj,jdkj)
lmp2_iter.f:       call scatad(bl(ixadr),bl(itadr),ncf,kdkj,kdkj,lbasij(kfkj),
lmp2_iter.f:     1 lbasij(kfkj))
lmp2_iter.f:     1               lbasij(iff),lbasun)
lmp2_iter.f:        call matadd('FCS','Rij')
lmp2_iter.f:       call matadd('FCS','Rij')
lmp2_iter.f:     1             lbasij,idmij,invl,listp,nstron,
lmp2_iter.f:       idik=idmij(lpx)
lmp2_iter.f:       call matdef('Tij','q',idik,idik)
lmp2_iter.f:       itij=mataddr('Tij')
lmp2_iter.f:      call reada(bl(itij),bl(itmxa),ikdim,idmxs,irec,nunit)
lmp2_iter.f:     2            jlist,ipt,isym,idmij,lbasij,
lmp2_iter.f:       call matpose2('Tij','Tik','n')
lmp2_iter.f:       call matrem('Tij')
lmp2_iter.f:       call matdef('Tij','q',idik,idik)
lmp2_iter.f:       itij=mataddr('Tij')
lmp2_iter.f:      call reada(bl(itij),bl(itmxa),ikdim,idmxs,irec,nunit)
lmp2_iter.f:     2            jlist,ipt,isym,idmij,lbasij,
lmp2_iter.f:       call matredef('Tij','Tik','q',idik,idik)
lmp2_iter.f:       call matdef('Tij','r',kdik,idik)
lmp2_iter.f:       call matpose2('Tij','Tik','n')
lmp2_iter.f:       call matrem('Tij')
lmp2_iter.f:       call matdef('Tij','r',idik,kdik)
lmp2_iter.f:        call matredef('Tij','Tik','r',idik,kdik)
lmp2_iter.f:       call scatad(bl(ixadr),bl(itadr),ncf,idik,idik,lbasij(ifik),
lmp2_iter.f:     1 lbasij(ifik))
lmp2_iter.f:     1               lbasij(iff),lbasun)
lmp2_iter.f:        call matadd('FCS','Rij')
lmp2_iter.f:     2                  jlist,iix,isym,idmij,lbasij,
lmp2_iter.f:C       it returns pair lpar in local dimension in Tij
lmp2_iter.f:       integer*2 lbasij(*),idmij(*)
lmp2_iter.f:       idd=idmij(lpx)
lmp2_iter.f:       call matrem('Tij')
lmp2_iter.f:       call matdef('Tij','q',idd,idd)
lmp2_iter.f:        itt1s=mataddr('Tij')
lmp2_iter.f:     1           idd,lbasij,ifunpair,jsig,ktrnsp)
lmp2_iter.f:C       it returns pair lpar in local dimension in Tij
lmp2_iter.f:       call matdef('Tij','r',idd,jdd)
lmp2_iter.f:        itt1s=mataddr('Tij')
lmp2_iter.f:       call matrem('Tij')
lmp2_iter.f:       call matredef('tt1','Tij','r',id3,jd3)
lmp2_iter.f:     1                  lbtab,idmx,nsym,idmij,lbasij,
lmp2_iter.f:       integer*2 lbasij(ncf,*),idmij(*)
lmp2_iter.f:       idd=idmij(lpn)
lmp2_iter.f:       iao=lbasij(icp,lpn)
lmp2_iter.f:     4                   idmij,lbasij,lpt,ndiag,inndp,
lmp2_iter.f:       integer*2 idmij(*),lbasij(*),listw(nval,*)
lmp2_iter.f:       kdkj=idmij(lpx)
lmp2_iter.f:       call matdef('Tij','q',kdkj,kdkj)
lmp2_iter.f:       itij=mataddr('Tij')
lmp2_iter.f:      call reada(bl(itij),bl(itmxa),kjdim,idmxs,irec,nunit)
lmp2_iter.f:C       getts does the same as gett (puts T into 'Tij') when kjpar
lmp2_iter.f:     2           jlist,ipt,isym,idmij,lbasij,
lmp2_iter.f:       call matpose2('Tij','Tkj','n')
lmp2_iter.f:       call matrem('Tij')
lmp2_iter.f:       call matdef('Tij','q',kdkj,kdkj)
lmp2_iter.f:       itij=mataddr('Tij')
lmp2_iter.f:      call reada(bl(itij),bl(itmxa),kjdim,idmxs,irec,nunit)
lmp2_iter.f:     2           jlist,ipt,isym,idmij,lbasij,
lmp2_iter.f:       call matredef('Tij','Tkj','q',kdkj,kdkj)
lmp2_iter.f:       call matdef('Tij','r',jdkj,kdkj)
lmp2_iter.f:       call matpose2('Tij','Tkj','n')
lmp2_iter.f:       call matrem('Tij')
lmp2_iter.f:       call matdef('Tij','r',kdkj,jdkj)
lmp2_iter.f:       call matredef('Tij','Tkj','r',kdkj,jdkj)
lmp2_iter.f:        call compab(bl(ioadr),bl(iovifa),ncf,idd,kdkj,lbasij(iff),
lmp2_iter.f:        call compab(bl(ioadr),bl(iovifa),ncf,idd,kdkj,lbasij(iff),
lmp2_iter.f:       call compab(bl(ioadr),bl(iovifa),ncf,idd,kdkj,lbasij(iff),
lmp2_iter.f:       call compab(bl(ioadr),bl(iovifa),ncf,idd,kdkj,lbasij(iff),
lmp2_iter.f:     1 lbasij(kfkj))
lmp2_iter.f:       call compab(bl(ioadr),bl(iovifa),ncf,idd,kdkj,lbasij(iff),
lmp2_iter.f:     1 lbasij(kfkj))
lmp2_iter.f:     1                lbasw(1,jj),lbasij(iff))
lmp2_iter.f:     1                lbtab(1,isym,ipt),lbasij(iff))
lmp2_iter.f:       call matadd('FCS','Rij')
lmp2_iter.f:       call matadd('FCS','Rij')
lmp2_iter.f:       idik=idmij(lpx)
lmp2_iter.f:       call matdef('Tij','q',idik,idik)
lmp2_iter.f:       itij=mataddr('Tij')
lmp2_iter.f:      call reada(bl(itij),bl(itmxa),ikdim,idmxs,irec,nunit)
lmp2_iter.f:     2            jlist,ipt,isym,idmij,lbasij,
lmp2_iter.f:       call matpose2('Tij','Tik','n')
lmp2_iter.f:       call matrem('Tij')
lmp2_iter.f:       call matdef('Tij','q',idik,idik)
lmp2_iter.f:       itij=mataddr('Tij')
lmp2_iter.f:      call reada(bl(itij),bl(itmxa),ikdim,idmxs,irec,nunit)
lmp2_iter.f:     2            jlist,ipt,isym,idmij,lbasij,
lmp2_iter.f:       call matredef('Tij','Tik','q',idik,idik)
lmp2_iter.f:       call matdef('Tij','r',kdik,idik)
lmp2_iter.f:       call matpose2('Tij','Tik','n')
lmp2_iter.f:       call matrem('Tij')
lmp2_iter.f:       call matdef('Tij','r',idik,kdik)
lmp2_iter.f:       call matredef('Tij','Tik','r',idik,kdik)
lmp2_iter.f:        call compab(bl(ioadr),bl(iovifa),ncf,idd,idik,lbasij(iff),
lmp2_iter.f:        call compab(bl(ioadr),bl(iovifa),ncf,idd,idik,lbasij(iff),
lmp2_iter.f:       call compab(bl(ioadr),bl(iovifa),ncf,idd,idik,lbasij(iff),
lmp2_iter.f:       call compab(bl(ioadr),bl(iovifa),ncf,idd,idik,lbasij(iff),
lmp2_iter.f:     1 lbasij(ifik))
lmp2_iter.f:       call compab(bl(ioadr),bl(iovifa),ncf,idd,idik,lbasij(iff),
lmp2_iter.f:     1 lbasij(ifik))
lmp2_iter.f:     1                lbasw(1,kk),lbasij(iff))
lmp2_iter.f:     1                lbtab(1,isym,ipt),lbasij(iff))
lmp2_iter.f:       call matadd('FCS','Rij')
lmp2_iter.f:     2                   itst,ilist,jlist,idmij,lbasij,
lmp2_iter.f:     4                   ttmat,lbasw,weak,idijw,listw,
lmp2_iter.f:       integer*2 idmij(*),lbasij(*),lbasw(ncf,*),idijw(*)
lmp2_iter.f:       kdkj=idmij(lpx)
lmp2_iter.f:       call matdef('Tij','q',kdkj,kdkj)
lmp2_iter.f:       itij=mataddr('Tij')
lmp2_iter.f:      call reada(bl(itij),bl(itmxa),kjdim,idmxs,irec,nunit)
lmp2_iter.f:       call matpose2('Tij','Tkj','n')
lmp2_iter.f:       call matrem('Tij')
lmp2_iter.f:       call matdef('Tij','q',kdkj,kdkj)
lmp2_iter.f:       itij=mataddr('Tij')
lmp2_iter.f:      call reada(bl(itij),bl(itmxa),kjdim,idmxs,irec,nunit)
lmp2_iter.f:       call matredef('Tij','Tkj','q',kdkj,kdkj)
lmp2_iter.f:       kdkj=idijw(kk)
lmp2_iter.f:       jdkj=idijw(jj)
lmp2_iter.f:       call matdef('Tij','r',jdkj,kdkj)
lmp2_iter.f:       call matpose2('Tij','Tkj','n')
lmp2_iter.f:       call matrem('Tij')
lmp2_iter.f:       call matdef('Tij','r',kdkj,jdkj)
lmp2_iter.f:       call matredef('Tij','Tkj','r',kdkj,jdkj)
lmp2_iter.f:     1                lbasij(iff),lbasw(1,kk))
lmp2_iter.f:       call compab(bl(ioadr),bl(iovifa),ncf,idd,kdkj,lbasij(iff),
lmp2_iter.f:       call compab(bl(ioadr),bl(iovifa),ncf,idd,kdkj,lbasij(iff),
lmp2_iter.f:     1 lbasij(kfkj))
lmp2_iter.f:     1 lbasij(kfkj))
lmp2_iter.f:     1                lbasw(1,jj),lbasij(iff))
lmp2_iter.f:       call matadd('FCS','Rij')
lmp2_iter.f:       call matadd('FCS','Rij')
lmp2_iter.f:       idik=idmij(lpx)
lmp2_iter.f:       call matdef('Tij','q',idik,idik)
lmp2_iter.f:       itij=mataddr('Tij')
lmp2_iter.f:      call reada(bl(itij),bl(itmxa),ikdim,idmxs,irec,nunit)
lmp2_iter.f:       call matpose2('Tij','Tik','n')
lmp2_iter.f:       call matrem('Tij')
lmp2_iter.f:       call matdef('Tij','q',idik,idik)
lmp2_iter.f:       itij=mataddr('Tij')
lmp2_iter.f:      call reada(bl(itij),bl(itmxa),ikdim,idmxs,irec,nunit)
lmp2_iter.f:       call matredef('Tij','Tik','q',idik,idik)
lmp2_iter.f:       idik=idijw(ii)
lmp2_iter.f:       kdik=idijw(kk)
lmp2_iter.f:       call matdef('Tij','r',kdik,idik)
lmp2_iter.f:       call matpose2('Tij','Tik','n')
lmp2_iter.f:       call matrem('Tij')
lmp2_iter.f:       call matdef('Tij','r',idik,kdik)
lmp2_iter.f:       call matredef('Tij','Tik','r',idik,kdik)
lmp2_iter.f:     1                lbasij(iff),lbasw(1,ii))
lmp2_iter.f:       call compab(bl(ioadr),bl(iovifa),ncf,idd,idik,lbasij(iff),
lmp2_iter.f:       call compab(bl(ioadr),bl(iovifa),ncf,idd,idik,lbasij(iff),
lmp2_iter.f:     1 lbasij(ifik))
lmp2_iter.f:     1 lbasij(ifik))
lmp2_iter.f:     1                lbasw(1,kk),lbasij(iff))
lmp2_iter.f:       call matadd('FCS','Rij')
lmp2_iter.f:     2                   itst,ilist,jlist,idmij,lbasij,
lmp2_iter.f:       integer*2 idmij(*),lbasij(*),lbasw(ncf,*)
lmp2_iter.f:     1            lbasij,idmij,invl,listp,nstron,
lmp2_iter.f:       kdkj=idmij(lpx)
lmp2_iter.f:       call matdef('Tij','q',kdkj,kdkj)
lmp2_iter.f:       itij=mataddr('Tij')
lmp2_iter.f:      call reada(bl(itij),bl(itmxa),kjdim,idmxs,irec,nunit)
lmp2_iter.f:       call matpose2('Tij','Tkj','n')
lmp2_iter.f:       call matrem('Tij')
lmp2_iter.f:       call matdef('Tij','q',kdkj,kdkj)
lmp2_iter.f:       itij=mataddr('Tij')
lmp2_iter.f:      call reada(bl(itij),bl(itmxa),kjdim,idmxs,irec,nunit)
lmp2_iter.f:       call matredef('Tij','Tkj','q',kdkj,kdkj)
lmp2_iter.f:       call matdef('Tij','r',jdkj,kdkj)
lmp2_iter.f:       call matpose2('Tij','Tkj','n')
lmp2_iter.f:       call matrem('Tij')
lmp2_iter.f:       call matdef('Tij','r',kdkj,jdkj)
lmp2_iter.f:       call matredef('Tij','Tkj','r',kdkj,jdkj)
lmp2_iter.f:      call scatad(bl(ixadr),bl(itadr),ncf,kdkj,kdkj,lbasij(kfkj),
lmp2_iter.f:     1 lbasij(kfkj))
lmp2_iter.f:     1               lbasij(iff),lbasun)
lmp2_iter.f:        call matadd('FCS','Rij')
lmp2_iter.f:       call matadd('FCS','Rij')
lmp2_iter.f:     1            lbasij,idmij,invl,listp,nstron,
lmp2_iter.f:       idik=idmij(lpx)
lmp2_iter.f:       call matdef('Tij','q',idik,idik)
lmp2_iter.f:       itij=mataddr('Tij')
lmp2_iter.f:      call reada(bl(itij),bl(itmxa),ikdim,idmxs,irec,nunit)
lmp2_iter.f:       call matpose2('Tij','Tik','n')
lmp2_iter.f:       call matrem('Tij')
lmp2_iter.f:       call matdef('Tij','q',idik,idik)
lmp2_iter.f:       itij=mataddr('Tij')
lmp2_iter.f:      call reada(bl(itij),bl(itmxa),ikdim,idmxs,irec,nunit)
lmp2_iter.f:       call matredef('Tij','Tik','q',idik,idik)
lmp2_iter.f:       call matdef('Tij','r',kdik,idik)
lmp2_iter.f:       call matpose2('Tij','Tik','n')
lmp2_iter.f:       call matrem('Tij')
lmp2_iter.f:       call matdef('Tij','r',idik,kdik)
lmp2_iter.f:       call matredef('Tij','Tik','r',idik,kdik)
lmp2_iter.f:       call scatad(bl(ixadr),bl(itadr),ncf,idik,idik,lbasij(ifik),
lmp2_iter.f:     1 lbasij(ifik))
lmp2_iter.f:     1               lbasij(iff),lbasun)
lmp2_iter.f:        call matadd('FCS','Rij')
lmp2_iter.f:     1                   lbasij,idmij,invl,listp,nstron,
lmp2_iter.f:       integer*2 lbasij(ncf,*),idmij(*),inndp(*),en
lmp2_iter.f:       idik=idmij(lpx)
lmp2_iter.f:       iao=lbasij(ild,lpx)
lmp2_iter.f:     1                   lbasij,idmij,invl,listp,nstron,
lmp2_iter.f:       integer*2 lbasij(ncf,*),idmij(*),inndp(*),en,listw(nval,*)
lmp2_iter.f:       idik=idmij(lpx)
lmp2_iter.f:       iao=lbasij(ild,lpx)
lmp2_iter.f:     1                       itst,lpt,lbasij,ndiag)
lmp2_iter.f:       integer*2 lbas(*),lbasij(*)
lmp2_iter.f:       call matprint('Rij',6)
lmp2_iter.f:     1  lbasij(ifu),lbasij(ifu))       
lmp2_iter.f:       call matprint('Tij',6)
lmp2_iter.f:       call matmmult('lsds','Tij','TSDS')
lmp2_iter.f:       call matadd('TSDS','Rij')       
lmp2_iter.f:       ij=0
lmp2_iter.f:       ij=ij+1
lmp2_iter.f:       if(listp(ij).eq.0) then
lmp2_sym.f:      ij=invl(ii,jj)
lmp2_sym.f:      ijw=listp(ij)
lmp2_sym.f:      if(ijw.ne.0)cycle
lmp2_sym.f:      ijny=invl(in1,jn1)
lmp2_sym.f:      kpar=listp(ijny)
lmp2_sym.f:       ijny=invl(in1,jn1)
lmp2_sym.f:       kpar=listp(ijny)
lmp2_sym.f:      ijny=invl(in1,jn1)
lmp2_sym.f:      kpar=listp(ijny)
lmp2_sym.f:       ijny=invl(in1,jn1)
lmp2_sym.f:       kpar=listp(ijny)
lmp2_sym.f:      ij=listw(ii,jj)
lmp2_sym.f:      if(ij.eq.0) cycle
lmp2_sym.f:      ij=listw(ii,jj)
lmp2_sym.f:      if(ij.eq.0) cycle
lmp2_sym.f:      ijx=invli(ii,jj)
lmp2_sym.f:      ijs=listp(ijx)
lmp2_sym.f:      if(ijs.ne.lpar) then
lmp2_sym.f:      write(6,*) 'ERROR', ii,jj,lpar,ijs
lmp2_sym.f:      ij=uniq(ijs)
lmp2_sym.f:      if(ij.gt.0.and.iiun.le.0) then
lmp2_sym.f:      write(6,*)'WARNING',ii,jj,ijs,ij,iiun,unorb(2,ii)
lmp2_sym.f:      if(ij.le.0.and.iiun.gt.0) then
lmp2_sym.f:      write(6,*)'WARNING',ii,jj,ijs,ij,iiun,unorb(2,ii)
lmp2_sym.f:      if(ktrnsp) call matpose2('tt1','Tij','n')
lmp2_sym.f:      ijny=invl(in1,jn1)
lmp2_sym.f:      kpar=listp(ijny)
lmp2_sym.f:      if(ijny.gt.lpar) goto 1000
lmp2_sym.f:       ijny=invl(in1,jn1)
lmp2_sym.f:      if(ijny.lt.lpar.and.equiw(kpar).eq.0) then
lmp2_trans.f:      data opnames  /'prin','nofr','pmij','orbs','thre','core','epsi',
lmp2_trans.f:      ipmij=0
lmp2_trans.f:        ipmij=iopv(1,3)
lmp2_trans.f:C         threshold for neglecting unprojected kij elements
lmp2_trans.f:C       eij estimated pair energy based on the volumes and the
lmp2_trans.f:C       if eij < epsnp  the pair is dropped from the calculation
lmp2_trans.f:C       if epsnp < eij < epswp  the pair energy is calculated using
lmp2_trans.f:C       Rij>7 Bohrs
lmp2_trans.f:       write(6,*) 'File xxxx.kij required'
lmp2_trans.f:c     call getmem((ncf*nud)/4+1,lbasij)
lmp2_trans.f:      call getint_2(ncf*nud,lbasij)
lmp2_trans.f:c     call getmem(nud/4+1,idiij)
lmp2_trans.f:      call getint_2(nud,idiij)
lmp2_trans.f:c     call getmem(nud/4+1,jdiij)
lmp2_trans.f:      call getint_2(nud,jdiij)
lmp2_trans.f:c             lindex(1,iqu,ijkl)=icf_start,
lmp2_trans.f:c             lindex(2,iqu,ijkl)=jcf_start etc.
lmp2_trans.f:c calculate Schwarz integrals (ij|ij) :
lmp2_trans.f:C       most nonzero integrals contribute to the diagonal Kijs
lmp2_trans.f:     5            full,bl(ictr),lalb,bl(lbasij),bl(idiij),
lmp2_trans.f:c  to projected basis, and write out on file XXXXX.kij
lmp2_trans.f:       filname0=scrfile(1:len)//'.kij'
lmp2_trans.f:      Do ikij=1,nfexr
lmp2_trans.f:      write(ch3,'(I3)') ikij
lmp2_trans.f:      If(ikij.lt.10) ch3(2:2) = '0'
lmp2_trans.f:      MUnit = ndisk4+ikij
lmp2_trans.f:C       do phase 2 of bin sort + project the final Kij + write out
lmp2_trans.f:          ndskij=ndisk4-1
lmp2_trans.f:      call Phase2(ncf,nval,ndisk2,ndskij,lbin2,
lmp2_trans.f:     4            nsym,iprint,thres3,bl(ictr),bl(lbasij),
lmp2_trans.f:     5            bl(idiij),bl(iekvi),bl(invpd),redu,nud,
lmp2_trans.f:      close(unit=ndskij+iclo,status='delete')
lmp2_trans.f:      write(6,*)'Number of files used for Kij-operators: ',nfiles
lmp2_trans.f:     1              iprint,nweak,ndskij,bl(iplis),mstrong,
lmp2_trans.f:       call matdef('dsijx','q',nval,nval)
lmp2_trans.f:       call matdef('dsijs','s',nval,nval)
lmp2_trans.f:       call matread('dsijs',np4,'Rijinv')
lmp2_trans.f:       call matcopy('dsijs','dsijx')
lmp2_trans.f:       ixija=mataddr('dsijx')
lmp2_trans.f:       call matrem('dsijs')
lmp2_trans.f:     4             clim,erhf,weak,bl(lbasij),bl(idiij),
lmp2_trans.f:     7             bl(ixija),coro,remf,bl(jdimp),bl(jdiij),
lmp2_trans.f:C   nstro   logical*1 array nstro(i,j) is false  if ij is a strong pair
lmp2_trans.f:      subroutine ReadBin_loc(ncf,nval,ij,ndisk2,lbin2,
lmp2_trans.f:c  contributions to pair (ij); this should be replaced by a
lmp2_trans.f:        if(ibinctr(k).ne.ij) cycle
lmp2_trans.f:c       if(ibinctr(k).ne.ij) cycle
lmp2_trans.f:       ij=0
lmp2_trans.f:       ij=ij+1
lmp2_trans.f:       ipar(ip)=ij
lmp2_trans.f:C       we'll also need the Rij vector components
lmp2_trans.f:       call matdef('Rijx','s',nval,nval)
lmp2_trans.f:       call matdef('Rijy','s',nval,nval)
lmp2_trans.f:       call matdef('Rijz','s',nval,nval)
lmp2_trans.f:       irijx=mataddr('Rijx')-1
lmp2_trans.f:       irijy=mataddr('Rijy')-1
lmp2_trans.f:       irijz=mataddr('Rijz')-1
lmp2_trans.f:       bl(irijx+npar)=zero
lmp2_trans.f:       bl(irijy+npar)=zero
lmp2_trans.f:       bl(irijz+npar)=zero
lmp2_trans.f:       bl(irijx+npar)=rx2/R
lmp2_trans.f:       bl(irijy+npar)=ry2/R
lmp2_trans.f:       bl(irijz+npar)=rz2/R
lmp2_trans.f:       call matwrite('Rijx',np4,0,'Rijx')
lmp2_trans.f:       call matwrite('Rijy',np4,0,'Rijy')
lmp2_trans.f:       call matwrite('Rijz',np4,0,'Rijz')
lmp2_trans.f:       call matwrite('dmo',np4,0,'Rijinv')
lmp2_trans.f:       call matrem('Rijz')
lmp2_trans.f:       call matrem('Rijy')
lmp2_trans.f:       call matrem('Rijx')
lmp2_trans.f:       ij=0
lmp2_trans.f:       ij=ij+1
lmp2_trans.f:       if(listp(ij).ne.0) cycle
lmp2_trans.f:         ijp=0
lmp2_trans.f:         write(6,*) Imo,':',(listp(ijp+jmo),jmo=1,imo)
lmp2_trans.f:         ijp=ijp+imo
lmp2_trans.f:C       nstro lohical arrays nstro(i,j) is false if ij is a strong pair
lmp2_trans.f:C========dmaxij===============================================
lmp2_trans.f:C       Calculates Max (over ij strong) of C(my,i) * C(lam,j)
lmp2_trans.f:C========dmaxij_new===============================================
lmp2_trans.f:C       Calculates Max (over ij strong) of C(my,i) * C(lam,j)
lmp2_trans.f:     5                  full,inx,lalb,lbasij,idmij,
lmp2_trans.f:C                  is true if ij is not a strong pair.
lmp2_trans.f:      integer*2 lbasij(ncf,*),idmij(*),inndp(*)
lmp2_trans.f:       lbasij(iz,iy)=null
lmp2_trans.f:         iijj=invl(ii,jj)
lmp2_trans.f:         ijs=listp(iijj)
lmp2_trans.f:       lpa=inndp(ijs)
lmp2_trans.f:       lbasij(my,lpa)=en
lmp2_trans.f:       lbasij(lam,lpa)=en
lmp2_trans.f:       ij=uniq(ijs)
lmp2_trans.f:       if(ij.le.0) goto 1000
lmp2_trans.f:C       ijs       strong pair list
lmp2_trans.f:C       ij       symmetry unique pair list       
lmp2_trans.f:           if(icounter(ij).ge.lbin2) then
lmp2_trans.f:              ibinctr(nbin)=ij
lmp2_trans.f:              call WriteBin1(ndisk2+nbnfil,nnbn,lbin2,ibins(1,ij))
lmp2_trans.f:              icounter(ij)=0
lmp2_trans.f:            icounter(ij)=icounter(ij)+2
lmp2_trans.f:       if(icounter(ij).gt.lbin2)call nerror(1,'binsloc','overflow'
lmp2_trans.f:     1 ,ij,icounter(ij))
lmp2_trans.f:            ibins(icounter(ij)-1,ij)=ibuf(nwo)
lmp2_trans.f:            ibins(icounter(ij),ij)=longint
lmp2_trans.f:            ibins(icounter(ij),ij)=longint1
lmp2_trans.f:            ibins(icounter(ij),ij)=longint
lmp2_trans.f:           if(icounter(ij).ge.lbin2) then
lmp2_trans.f:              ibinctr(nbin)=ij
lmp2_trans.f:              call WriteBin1(ndisk2+nbnfil,nnbn,lbin2,ibins(1,ij))
lmp2_trans.f:              icounter(ij)=0
lmp2_trans.f:           icounter(ij)=icounter(ij)+2
lmp2_trans.f:      if(icounter(ij).gt.lbin2)call nerror(2,'binsloc','overflow'
lmp2_trans.f:     1 ,ij,icounter(ij))
lmp2_trans.f:            ibins(icounter(ij)-1,ij)=ibuf(nwo)
lmp2_trans.f:            ibins(icounter(ij),ij)=longint1
lmp2_trans.f:          ibins(icounter(ij),ij)=longint
lmp2_trans.f:        iijj=invl(iip2,jjp2)
lmp2_trans.f:        ijs=listp(iijj)
lmp2_trans.f:      if(ijs.le.0.or.ijs.ge.nval*nval) then
lmp2_trans.f:      write(6,*) iip2,jjp2,ijs
lmp2_trans.f:      ij=uniq(ijs)
lmp2_trans.f:      lpa=inndp(ijs)
lmp2_trans.f:      lbasij(my2,lpa)=en
lmp2_trans.f:      lbasij(lam2,lpa)=en
lmp2_trans.f:      if(ij.le.0) cycle
lmp2_trans.f:           if(icounter(ij).ge.lbin2) then
lmp2_trans.f:              ibinctr(nbin)=ij
lmp2_trans.f:              call WriteBin1(ndisk2+nbnfil,nnbn,lbin2,ibins(1,ij))
lmp2_trans.f:              icounter(ij)=0
lmp2_trans.f:            icounter(ij)=icounter(ij)+2
lmp2_trans.f:            ibins(icounter(ij)-1,ij)=jsign*ibuf(nwo)
lmp2_trans.f:            ibins(icounter(ij),ij)=longint
lmp2_trans.f:            ibins(icounter(ij),ij)=longint1
lmp2_trans.f:            ibins(icounter(ij),ij)=longint
lmp2_trans.f:           if(icounter(ij).ge.lbin2) then
lmp2_trans.f:              ibinctr(nbin)=ij
lmp2_trans.f:              call WriteBin1(ndisk2+nbnfil,nnbn,lbin2,ibins(1,ij))
lmp2_trans.f:              icounter(ij)=0
lmp2_trans.f:           icounter(ij)=icounter(ij)+2
lmp2_trans.f:            ibins(icounter(ij)-1,ij)=jsign*ibuf(nwo)
lmp2_trans.f:            ibins(icounter(ij),ij)=longint1
lmp2_trans.f:          ibins(icounter(ij),ij)=longint
lmp2_trans.f:      do ij=1,npairs
lmp2_trans.f:           if(icounter(ij).eq.lbin2) then
lmp2_trans.f:              ibinctr(nbin)=ij
lmp2_trans.f:              call WriteBin1(ndisk2+nbnfil,nnbn,lbin2,ibins(1,ij))
lmp2_trans.f:              icounter(ij)=0
lmp2_trans.f:        if(icounter(ij).gt.0) then
lmp2_trans.f:          ibinctr(nbin)=ij
lmp2_trans.f:      icounter(ij)=icounter(ij)+2
lmp2_trans.f:            ibins(icounter(ij)-1,ij)=0
lmp2_trans.f:            ibins(icounter(ij),ij)=0
lmp2_trans.f:C         do j=icounter(ij)+1,lbin2
lmp2_trans.f:c           ibins(j,ij)=0
lmp2_trans.f:C           ibins(j,ij)=0
lmp2_trans.f:          call WriteBin1(ndisk2+nbnfil,nnbn,lbin2,ibins(1,ij))
lmp2_trans.f:              icounter(ij)=0
lmp2_trans.f:      if(lbasij(iy,ipp).eq.en) then
lmp2_trans.f:      lbasij(iao,ipp)=iy
lmp2_trans.f:      idmij(ipp)=iddm
lmp2_trans.f:          write(6,*) 'number of files needed for kij: ',nfiles,dimbt
lmp2_trans.f:     4                  nsym,iprint,thres3,inx,lbasij,
lmp2_trans.f:     5                  idmij,equi,inndp,redu,nud,
lmp2_trans.f:      integer*2 lbasij(*),idmij(*),inndp(*)
lmp2_trans.f:      ijs=0
lmp2_trans.f:      ijs=ijs+1
lmp2_trans.f:      ij=uniq(ijs)
lmp2_trans.f:      if(ij.le.0) cycle
lmp2_trans.f:      call ReadBin_loc(ncf,nval,ij,ndisk2,lbin2,
lmp2_trans.f:c     call getmem((nud*ncf)/4+1,lbijt)
lmp2_trans.f:      call getint_2(nud*ncf,lbijt)
lmp2_trans.f:c     call getmem(nud/4+1,idijt)
lmp2_trans.f:      call getint_2(nud,idijt)
lmp2_trans.f:      call bascop(lbasij,idmij,bl(lbijt),bl(idijt),nud,ncf)
lmp2_trans.f:     1             lbasij,idmij,nstron)
lmp2_trans.f:     1                ifunpair,nsym,lbasij,idmij,epsix,
lmp2_trans.f:     1  call symche2(equi,ifunpair,lbasij,idmij,nval,
lmp2_trans.f:      ijs=0
lmp2_trans.f:      ijs=ijs+1
lmp2_trans.f:      ij=uniq(ijs)
lmp2_trans.f:      if(ij.le.0) cycle
lmp2_trans.f:      call ReadBin_loc(ncf,nval,ij,ndisk2,lbin2,
lmp2_trans.f:      idd=idmij(lpt)
lmp2_trans.f:     1                lbasij(ifu),lbasij(ifu))
lmp2_trans.f:      call writeK2(ncf,ndiskx,idmij,lbasij,lpt,
lmp2_trans.f:     1             tpro,bl(lbijt),bl(idijt),wrdw,ifil,
lmp2_trans.f:      subroutine writeK2(ncf,ndiskx,idmij,lbasij,lpt,
lmp2_trans.f:     1                   tpro,lbsijt,idmijt,wrdw,ifil,
lmp2_trans.f:C      convert a full Kij to local basis and writes it out on disk
lmp2_trans.f:C      unprojected (sparce but full) Kij is in 'xmat'
lmp2_trans.f:      integer*2 idmij(*),lbasij(*),lbsijt(*),idmijt(*)
lmp2_trans.f:      idd=idmij(lpt)
lmp2_trans.f:      ijdm=idd*idd
lmp2_trans.f:      iddi=idmijt(lpt)
lmp2_trans.f:      ikija=mataddr('rkc')
lmp2_trans.f:     1 lbsijt(ifu),lbsijt(ifu))
lmp2_trans.f:     1 lbsijt(ifu),lbasij(ifu))
lmp2_trans.f:      wrdw=wrdw+ijdm+idd
lmp2_trans.f:      wrdw=ijdm+idd
lmp2_trans.f:      call wriarr(bl(ikija),ijdm,ndisk4)
lmp2_trans.f:C      convert a full Kij to local basis and writes it out on disk
lmp2_trans.f:C      unprojected (sparce but full) Kij is in 'xmat'
lmp2_trans.f:C      file xxx.kij will thus contain K-0.5K(tr) in projected local
lmp2_trans.f:      ikija=mataddr('rkc')
lmp2_trans.f:C      projected Kij in rkc for this pair, check if dimensions
lmp2_trans.f:C      call remzerk(bl(ikija),bl(ikija),ncf,idd,idm,
lmp2_trans.f:       call RemZerK2(bl(ikija),idd,lbas,nval,bl(jrem),
lmp2_trans.f:      ijdm=idd*idd
lmp2_trans.f:      call regenK2(idd,lbas(ifu),idmo,bl(lbaso),bl(ikija),
lmp2_trans.f:C    1                bl(lbaso),nstron,ii,bl(ikija),ndisk4,
lmp2_trans.f:      wrdw=wrdw+ijdm+idd
lmp2_trans.f:      wrdw=ijdm+idd
lmp2_trans.f:      call wriarr(bl(ikija),ijdm,ndisk4)
lmp2_trans.f:     1                  lbaso,nstron,ii,rkij,nkunix,
lmp2_trans.f:      dimension rkij(*)
lmp2_trans.f:      ijo=ido*ido
lmp2_trans.f:      ijn=idd*idd
lmp2_trans.f:      call matdef('kij','q',idd,idd)
lmp2_trans.f:      kladr=mataddr('kij')
lmp2_trans.f:      call scatad(bl(kfadr),rkij,ncf,ido,ido,
lmp2_trans.f:      wrdw=wrdw+ijn+idd
lmp2_trans.f:      wrdw=ijn+idd
lmp2_trans.f:      call wriarr(bl(kladr),ijn,nkuni2)
lmp2_trans.f:      call matrem('kij')
lmp2_trans.f:      subroutine regenK2(idd,lbas,ido,lbaso,rkij,
lmp2_trans.f:      dimension rkij(*)
lmp2_trans.f:      call matdef('kij','q',idd,idd)
lmp2_trans.f:      kladr=mataddr('kij')
lmp2_trans.f:        call compab(rkij,bl(kladr),ido,idd,idd,lbdif,
lmp2_trans.f:      ijn=idd*idd
lmp2_trans.f:      wrdw=wrdw+ijn+idd
lmp2_trans.f:      wrdw=ijn+idd
lmp2_trans.f:      call wriarr(bl(kladr),ijn,nkuni2)
lmp2_trans.f:      call matrem('kij')
lmp2_trans.f:      subroutine regenK3(idd,lbas,ido,lbaso,rkij,
lmp2_trans.f:      dimension rkij(*)
lmp2_trans.f:      call matdef('kij','q',idd,idd)
lmp2_trans.f:      kladr=mataddr('kij')
lmp2_trans.f:        call compab(rkij,bl(kladr),ido,idd,idd,lbdif,
lmp2_trans.f:      call move(bl(kladr),rkij,iddsq)
lmp2_trans.f:      call matrem('kij')
lmp2_trans.f:     1                      ifunpair,nsym,lbasij,idmij,epsx,
lmp2_trans.f:      integer*2 lbasij(ncf,*),idmij(*),inndp(*)
lmp2_trans.f:      idd=idmij(lpnd)
lmp2_trans.f:      call checLB(idd,lbasij(1,lpnd),ncf,epsx,-lpnd,
lmp2_trans.f:      idmij(lpnd)=idd
lmp2_trans.f:     1  call symche2(equi,ifunpair,lbasij,idmij,nval,
lmp2_trans.f:     1                   lbasij,idmij,nstron)
lmp2_trans.f:C      and the union if the domains of ij
lmp2_trans.f:      integer*2 lbasij(ncf,*),idmij(*),en
lmp2_trans.f:C      now construct lbasij for strong nondiagonal pairs
lmp2_trans.f:      ij=0
lmp2_trans.f:      ij=ij+1
lmp2_trans.f:      idij=0
lmp2_trans.f:      idij=idij+1
lmp2_trans.f:      lbasij(idij,ij)=ik
lmp2_trans.f:      idmij(ij)=idij
lmp2_trans.f:      subroutine bascop(lbasij,idmij,lbasijt,idmijt,nud,ncf)
lmp2_trans.f:      integer*2 lbasij(ncf,*),idmij(*),lbasijt(ncf,*),idmijt(*)
lmp2_trans.f:      idd=idmij(iii)
lmp2_trans.f:      idmijt(iii)=idd
lmp2_trans.f:      lbasijt(imv,iii)=lbasij(imv,iii)
lmp2_trans.f:      ij=listp(lpar)
lmp2_trans.f:      if(ij.gt.0) cycle
lmp2_weak.f:C        lbas,idm,lbasij,idmij are the original local bases used
lmp2_weak.f:        call matread('rinv',np4,'Rijinv')
lmp2_weak.f:        call matdef('Rijx','s',nval,nval)
lmp2_weak.f:        call matdef('Rijy','s',nval,nval)
lmp2_weak.f:        call matdef('Rijz','s',nval,nval)
lmp2_weak.f:        irijx=mataddr('Rijx')-1
lmp2_weak.f:        irijy=mataddr('Rijy')-1
lmp2_weak.f:        irijz=mataddr('Rijz')-1
lmp2_weak.f:        call matread('Rijx',np4,'Rijx')
lmp2_weak.f:        call matread('Rijy',np4,'Rijy')
lmp2_weak.f:        call matread('Rijz',np4,'Rijz')
lmp2_weak.f:        Rij3=Rinv*Rinv*Rinv
lmp2_weak.f:        Rij4=Rij3*Rinv
lmp2_weak.f:        Rij=one/Rinv
lmp2_weak.f:        rmin=min(rmin,rij)
lmp2_weak.f:        rmax=max(rmax,rij)
lmp2_weak.f:        rsum=rsum+rij
lmp2_weak.f:        Rx=bl(irijx+npar)
lmp2_weak.f:        Ry=bl(irijy+npar)
lmp2_weak.f:        Rz=bl(irijz+npar)
lmp2_weak.f:C     write(6,*)'rinv= ',Rinv,'Rij= ',Rij,RIJ3,Rij4
lmp2_weak.f:C        mkkweak contructs Kij for the weak pair ij, result in 'kweak'
lmp2_weak.f:     2                 jdd,Rij3,Rij4,Rx,Ry,
lmp2_weak.f:     2                    jdd,rij3,rij4,Rx,Ry,
lmp2_weak.f:C        exchange matrix Kij for a single pair using multipoles
lmp2_weak.f:        Rk(iao,jao)=Rij3*(aribrj-3.0d0*Raxi*Rbxj)
lmp2_weak.f:     1               +Rij4*(t23+t45+t67)
lmp2_weak.f:          call matscal('Rij',2.0d0)
lmp2_weak.f:C        the Rij in MO basis is now in  'Rmo'
lmp2_weak.f:        ij=invl(ii,jj)
lmp2_weak.f:        ijp=listp(ij)
lmp2_weak.f:        if(ijp.eq.0) then
lmp2_weak.f:     1                   lbasij,idmij,listp,iddmx,iprint)
lmp2_weak.f:C        and the union if the domains of ij
lmp2_weak.f:        integer*2 lbasij(iddmx,*),idmij(*),en,to
lmp2_weak.f:        ij=0
lmp2_weak.f:        ij=ij+1
lmp2_weak.f:        if(listp(ij).ne.0) cycle
lmp2_weak.f:        ij=0
lmp2_weak.f:        ij=ij+1
lmp2_weak.f:        if(listp(ij).ne.0) cycle
lmp2_weak.f:        lbasij(im,nweak)=lbas(im,ii)
lmp2_weak.f:        lbasij(idd+jm,nweak)=lbas(jm,jj)
lmp2_weak.f:      call checLBw(idds,lbasij(1,nweak),ncf,epsx,ix,
lmp2_weak.f:        idmij(nweak)=idds
lmp2_weak.f:        write(6,*) (idmij(iw),iw=1,nweak)
lmp2_weak.f:        iav=iav+idmij(iw)
lmp2_weak.f:        call matmmult('orbi','Rij','tmp1')
lmp2_weak.f:        call matmmult('tmp1','orbj','Rij')
lmp2_weak.f:        subroutine moveTw(lpar,idij,itst)
lmp2_weak.f:        idtst=mataddr('Rij')-1
lmp2_weak.f:        do imv=1,idij
lmp2_weak.f:      subroutine penw(lpar,ii,jj,eij,idd,
lmp2_weak.f:       ijdim=idd*jdd
lmp2_weak.f:        call matdef('Tij','r',idd,jdd)
lmp2_weak.f:        call gettw(lpar,ijdim,itst)
lmp2_weak.f:        itij=mataddr('Tij')
lmp2_weak.f:         irij=mataddr('Rij')
lmp2_weak.f:        call ptrac2(bl(irij),bl(itij),ijdim,eij)
lmp2_weak.f:         eij=4.0d0*eij
lmp2_weak.f:        call matrem('Tij')
lmp2_weak.f:        itijs=mataddr('Tij')-1
lmp2_weak.f:        bl(itijs+imv)=bl(itfus+imv)
lmp2_weak.f:C================rijmp2w===========================================
lmp2_weak.f:      subroutine RijMP2w(lpar,ii,jj,idm,lbas,
lmp2_weak.f:     4                  jlist,trij,lbtab,idmx,idmij,
lmp2_weak.f:     5                  lbasij,lpt,ndiag,inndp,idd,
lmp2_weak.f:C        The final residuum will be in 'Rij' in local dimension
lmp2_weak.f:        integer*2 lbas(*),idm(*),idmij(*),lbasij(*)
lmp2_weak.f:        call secund(t1rij)
lmp2_weak.f:        ijdim=idd*jdd
lmp2_weak.f:        call matdef('Rij','r',idd,jdd)
lmp2_weak.f:        irad=mataddr('Rij')
lmp2_weak.f:        call matdef('Tij','r',idd,jdd)
lmp2_weak.f:        call getTw(lpar,ijdim,itst)
lmp2_weak.f:        wrdw=wrdw+ijdim
lmp2_weak.f:        wrdw=ijdim
lmp2_weak.f:        call reaarr(bl(irad),ijdim,nkunit)
lmp2_weak.f:C        FCijS-term
lmp2_weak.f:C    calculate F*Cij --> Y1
lmp2_weak.f:        call matdef('FCij','r',idd,jdd)
lmp2_weak.f:        call matmmult('Fii','Tij','FCij')
lmp2_weak.f:C    multiply with S from the right and add to Rij
lmp2_weak.f:        call matmmult('FCij','Sjj','FCS')
lmp2_weak.f:        call matadd('FCS','Rij')
lmp2_weak.f:C        SCijF-terms
lmp2_weak.f:C        calculate SCij --> FCij
lmp2_weak.f:        call matmmult('Sii','Tij','FCij')
lmp2_weak.f:C    multiply with F from the right and add to Rij
lmp2_weak.f:        call matmmult('FCij','Fjj','FCS')
lmp2_weak.f:        call matrem('FCij')
lmp2_weak.f:        call matadd('FCS','Rij')
lmp2_weak.f:        call matpose2('Tij','Tji','n')
lmp2_weak.f:        call matdef('Fij','r',idd,jdd)
lmp2_weak.f:        call matdef('Sij','r',idd,jdd)
lmp2_weak.f:        ifija=mataddr('Fij')
lmp2_weak.f:        isija=mataddr('Sij')
lmp2_weak.f:      call compab(bl(ifoca),bl(ifija),ncf,idd,jdd,
lmp2_weak.f:        call matmmult('Fij','Tji','FCji')
lmp2_weak.f:C    multiply with S from the right and add to Rij
lmp2_weak.f:      call compab(bl(iovad),bl(isija),ncf,idd,jdd,
lmp2_weak.f:        call matmmult('FCji','Sij','FCS')
lmp2_weak.f:        call matadd('FCS','Rij')
lmp2_weak.f:        call matmmult('Sij','Tji','FCji')
lmp2_weak.f:        call matrem('Sij')
lmp2_weak.f:C    multiply with F from the right and add to Rij
lmp2_weak.f:        call matmmult('FCji','Fij','FCS')
lmp2_weak.f:        call matrem('Fij')
lmp2_weak.f:        call matadd('FCS','Rij')
lmp2_weak.f:        call matrem('Tij')
lmp2_weak.f:     4                   idmij,lbasij,lpt,ndiag,inndp,
lmp2_weak.f:     1                 itst,lpt,lbasij,ndiag)
lmp2_weak.f:        call secund(t2rij)
lmp2_weak.f:        trij=trij+t2rij-t1rij
lmp2_weak.f:     4                   idmij,lbasij,lpt,ndiag,inndp,
lmp2_weak.f:        integer*2 idmij(*),lbasij(*),idmw(*),listw(nval,*)
lmp2_weak.f:     1             lbasij,idmij,invl,listp,nstron,
lmp2_weak.f:        kdkj=idmij(lpx)
lmp2_weak.f:        call matdef('Tij','q',kdkj,kdkj)
lmp2_weak.f:        itij=mataddr('Tij')
lmp2_weak.f:      call reada(bl(itij),bl(itmxa),kjdim,idmxs,irec,nunit)
lmp2_weak.f:C        getts does the same as gett (puts T into 'Tij') when kjpar
lmp2_weak.f:     2           jlist,ipt,isym,idmij,lbasij,
lmp2_weak.f:        call matpose2('Tij','Tkj','n')
lmp2_weak.f:        call matrem('Tij')
lmp2_weak.f:        call matdef('Tij','q',kdkj,kdkj)
lmp2_weak.f:        itij=mataddr('Tij')
lmp2_weak.f:      call reada(bl(itij),bl(itmxa),kjdim,idmxs,irec,nunit)
lmp2_weak.f:     2           jlist,ipt,isym,idmij,lbasij,
lmp2_weak.f:        call matredef('Tij','Tkj','q',kdkj,kdkj)
lmp2_weak.f:        call scatad(bl(ixadr),bl(itadr),ncf,kdkj,kdkj,lbasij(kfkj),
lmp2_weak.f:     1 lbasij(kfkj))
lmp2_weak.f:         call matadd('FCS','Rij')
lmp2_weak.f:     1             lbasij,idmij,invl,listp,nstron,
lmp2_weak.f:        idik=idmij(lpx)
lmp2_weak.f:        call matdef('Tij','q',idik,idik)
lmp2_weak.f:        itij=mataddr('Tij')
lmp2_weak.f:      call reada(bl(itij),bl(itmxa),ikdim,idmxs,irec,nunit)
lmp2_weak.f:     2            jlist,ipt,isym,idmij,lbasij,
lmp2_weak.f:        call matpose2('Tij','Tik','n')
lmp2_weak.f:        call matrem('Tij')
lmp2_weak.f:        call matdef('Tij','q',idik,idik)
lmp2_weak.f:        itij=mataddr('Tij')
lmp2_weak.f:      call reada(bl(itij),bl(itmxa),ikdim,idmxs,irec,nunit)
lmp2_weak.f:     2            jlist,ipt,isym,idmij,lbasij,
lmp2_weak.f:        call matredef('Tij','Tik','q',idik,idik)
lmp2_weak.f:        call scatad(bl(ixadr),bl(itadr),ncf,idik,idik,lbasij(ifik),
lmp2_weak.f:     1 lbasij(ifik))
lmp2_weak.f:         call matadd('FCS','Rij')
lmp2_weak.f:     1                      nsym,lbasij,idmij,epsx,equi,
lmp2_weak.f:        integer*2 lbasij(ncf,*),idmij(*)
lmp2_weak.f:        idd=idmij(ii)
lmp2_weak.f:      call checLB(idd,lbasij(1,ii),ncf,epsx,-ii,
lmp2_weak.f:        idmij(ii)=idd
lmp2_weak.f:C    1  call symche2(equi,ifunpair,lbasij,idmij,nval,
lmp2_weak.f:      ijdif=idd-jdd
lmp2_weak.f:      if(ijdif.ge.0) then
lmp2_weak.f:      if(ijdif.le.0) then
lmp2_weak.f:      idia=(-ijdif-1)*idd -1
lmp2_weak.f:      idia=ijdif-idd-1
loca.f:      xij=x(ii+j)
loca.f:      yij=y(ii+j)
loca.f:      zij=z(ii+j)
loca.f:      tt=xij*(xii-xjj)+yij*(yii-yjj)+zij*(zii-zjj)
loca.f:      den=xij**2+yij**2+zij**2-0.25d0*((xii-xjj)**2+(yii-yjj)**2
loca.f:      xij=x(ii+j)
loca.f:      x(ii+i)=c**2*xii+s**2*xjj-cs2*xij
loca.f:      x(jj+j)=s**2*xii+c**2*xjj+cs2*xij
loca.f:      x(ii+j)=(xii-xjj)*cs+xij*(c**2-s**2)
loca.f:c reserve memory for qia, qja, qija
loca.f:      call getmem(na,iqij)
loca.f:     1     bl(ictr),bl(iqi),bl(iqj),bl(iqij))
loca.f:      subroutine piprot(i,j,mval,ncf,na,cmat,sc,s,inx,qi,qj,qij)
loca.f:c  qia,qja,qija: Storage
loca.f:     1 qij(na)
loca.f:c  zero out qi, qj, qij
loca.f:      call zeroit(qij,na)
loca.f:      qija=zero
loca.f:           qija=qija+cmat(icf,i)*sc(icf,j)+cmat(icf,j)*sc(icf,i)
loca.f:     1  qija')
loca.f:c  this qij is the double of the quantity in the Boughton paper
loca.f:      qij(nat)=qij(nat)+qija
loca.f:        a=a+(qi(nat)-qj(nat))**2-qij(nat)**2
loca.f:        b=b+(qi(nat)-qj(nat))*qij(nat)
makehess.f:          abdaij=abs(daij)
makehess.f:          abdaijm=abdaij*vmx
makehess.f:          if(doxx.and.abdaijm.gt.thrxx)then
makehess.f:          abdaijm=abs(da(ij))*valm*vmx
makehess.f:          if(doxx.and.abdaijm.gt.thrxx)then
makehess.f:          abdaij=abs(daij)
makehess.f:          abdaijm=abdaij*vmx
makehess.f:          if(doxx.and.abdaijm.gt.thrxx)then
makehess.f:          abdaijm=abs(da(ij))*valm*vmx
makehess.f:          if(doxx.and.abdaijm.gt.thrxx)then
makehess.f:            abijt=abs(daijt)
makehess.f:            abij=abs(daij)
makehess.f:            if(abij*valm.gt.thrsh)then
makehess.f:            if(abijt*(abvj*valmm+abvvj*valm).gt.thrsh)then
makehess.f:            if(abij*valmm.gt.thrsh)then
makehess.f:            if(abijt*(abvj*vmx+abvvj*valmm).gt.thrsh)then
makehess.f:            if(abijt*abvvj*valm.gt.thrsh)then
makehess.f:            if(abijt*(abvvj*valmm+vmx*valm).gt.thrsh)then
makehess.f:            abijt=abs(daijt)
makehess.f:            abij=abs(daij)
makehess.f:            if(abij*valm.gt.thrsh)then
makehess.f:            if(abijt*(abvj*valmm+abvvj*valm).gt.thrsh)then
makehess.f:            if(abij*valmm.gt.thrsh)then
makehess.f:            if(abijt*(abvj*vmx+abvvj*valmm).gt.thrsh)then
makehess.f:            if(abijt*abvvj*valm.gt.thrsh)then
makehess.f:            if(abijt*(abvvj*valmm+vmx*valm).gt.thrsh)then
makehess.f:              if(svmax*abs(vij)+swmax*abs(vijx+vijy+vijz).GT.thrsh)then
makehess.f:          abdij=max(abs(daij),abs(dbij))
makehess.f:          abdijm=abdij*vmx
makehess.f:          if(doxx.and.abdijm.gt.thrxx)then
makehess.f:          abdijm=max(abs(da(ij)),abs(db(ij)))*valm*vmx
makehess.f:          if(doxx.and.abdijm.gt.thrxx)then
makehess.f:          abdij=max(abs(daij),abs(dbij))
makehess.f:          abdijm=abdij*vmx
makehess.f:          if(doxx.and.abdijm.gt.thrxx)then
makehess.f:          abdijm=max(abs(da(ij)),abs(db(ij)))*valm*vmx
makehess.f:          if(doxx.and.abdijm.gt.thrxx)then
makehess.f:            abijt=max(abs(daij2),abs(dbij2))
makehess.f:            abij=max(abs(daij),abs(dbij))
makehess.f:            if(abij*valm.gt.thrsh)then
makehess.f:            if(abijt*(abvj*valmm+abvvj*valm).gt.thrsh)then
makehess.f:            if(abij*valmm.gt.thrsh)then
makehess.f:            if(dogradxx.and.abijt*(abvj*vmx+abvvj*valmm).gt.thrsh)then
makehess.f:            if(abijt*abvvj*valm.gt.thrsh)then
makehess.f:            if(dogradxx.and.abijt*(abvvj*valmm+vmx*valm).gt.thrsh)then
makehess.f:            abijt=max(abs(daij2),abs(dbij2))
makehess.f:            abij=max(abs(daij),abs(dbij))
makehess.f:            if(abij*valm.gt.thrsh)then
makehess.f:            if(abijt*(abvj*valmm+abvvj*valm).gt.thrsh)then
makehess.f:            if(abij*valmm.gt.thrsh)then
makehess.f:            if(dogradxx.and.abijt*(abvj*vmx+abvvj*valmm).gt.thrsh)then
makehess.f:            if(abijt*abvvj*valm.gt.thrsh)then
makehess.f:            if(dogradxx.and.abijt*(abvvj*valmm+vmx*valm).gt.thrsh)then
makehess.f:              if(svmax*abs(vij)+swmax*abs(vijx+vijy+vijz).GT.thrsh)then
makehess.f:          abdaij=abs(daij)
makehess.f:          abdaijm=abdaij*vmx
makehess.f:          abdaij=abs(daij)
makehess.f:          abdaijm=abdaij*vmx
makehess.f:            abijt=abs(daijt)
makehess.f:            abij=abs(daij)
makehess.f:            if(abij*valm.gt.thrsh)then
makehess.f:            if(abijt*(abvj*valmm+abvvj*valm).gt.thrsh)then
makehess.f:            abijt=abs(daijt)
makehess.f:            abij=abs(daij)
makehess.f:            if(abij*valm.gt.thrsh)then
makehess.f:            if(abijt*(abvj*valmm+abvvj*valm).gt.thrsh)then
makehess.f:              if(svmax*abs(vij)+swmax*abs(vijx+vijy+vijz).GT.thrsh)then
makehess.f:          abdij=max(abs(daij),abs(dbij))
makehess.f:          abdijm=abdij*vmx
makehess.f:          abdij=max(abs(daij),abs(dbij))
makehess.f:          abdijm=abdij*vmx
makehess.f:            abijt=max(abs(daij2),abs(dbij2))
makehess.f:            abij=max(abs(daij),abs(dbij))
makehess.f:            if(abij*valm.gt.thrsh)then
makehess.f:            if(abijt*(abvj*valmm+abvvj*valm).gt.thrsh)then
makehess.f:            abijt=max(abs(daij2),abs(dbij2))
makehess.f:            abij=max(abs(daij),abs(dbij))
makehess.f:            if(abij*valm.gt.thrsh)then
makehess.f:            if(abijt*(abvj*valmm+abvvj*valm).gt.thrsh)then
makehess.f:              if(svmax*abs(vij)+swmax*abs(vijx+vijy+vijz).GT.thrsh)then
matrix.f:         ij=0
matrix.f:             ij=ij+1
matrix.f:             c(ij)=bb*a(i,k)+c(ij)
matrix.f:       ij=0
matrix.f:        ij=ij+1
matrix.f:        s=c(ij)
matrix.f:           c(ij)=s
matrix.f:         ij=0
matrix.f:          ij=ij+1
matrix.f:          c(ij)=c(ij)+a(i,k)*b(j,k)
matrix.f:        ij=0
matrix.f:          ij=ij+1
matrix.f:           c(ij)=c(ij)+a(k,i)*b(j,k)
matrix.f:        ij=-1
matrix.f:            ij=ij+1
matrix.f:            trace=trace+bl(iadr1+ij)*bl(iadr2+ij)
memoha.f:      common /memor2/ nqrtd, nibld,nkbld, nijbd,nijed, nklbd,nkled
memoha.f:      call getint(ndim,nijbd)     ! for nijb array
memoha.f:      call getint(ndim,nijed)     ! for nije array
memoha.f:      common /memors/ nsym,ijshp,isymm
memoha.f:      common /contr/ ngci,ngcj,ngck,ngcl,lci,lcj,lck,lcl,lcij,lckl
memoha.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,MMAX,
memoha.f:     * NQIJ,NQIJ1,NSIJ1,NQKL,NQKL1,NSKL1,ijbeg,klbeg
memoha.f:     * ibfij1,ibfij2,ibfkl1,ibfkl2,
memoha.f:     * ibf2l1,ibf2l2,ibf2l3,ibf2l4,ibfij3,ibfkl3,
memoha.f:     * ixij,iyij,izij, iwij,ivij,iuij,isij
memoha.f:      common /dimasse/ lqij,lqkl,lqmx,lij3,lkl3,l3l,lsss
memoha.f:c  buf2(nbls,lnij,lnkl), bfij1(nbls,lqij,lnkl), bfkl1(nbls,lnij,lqkl)
memoha.f:c                        bfij2(nbls,lqij,lnkl), bfkl2(nbls,lnij,lqkl)
memoha.f:c                        bfij3(nbls,lij3,lnkl), bfkl3(nbls,lnij,lkl3)
memoha.f:c                        bf2l1(nbls,lqij,lqkl), bf2l2(nbls,lqij,lqkl)
memoha.f:c                        bf2l3(nbls,lqij,lqkl), bf2l4(nbls,lqij,lqkl)
memoha.f:       lqij=nfu(nqij +1)
memoha.f:       lij3=1
memoha.f:          lqij=nfu(nqij1+1)
memoha.f:            lij3=4
memoha.f:       lqmx=max( lqij,lqkl )
memoha.f:       ibfij1=1
memoha.f:       ibfij2=1
memoha.f:       ibfij3=1
memoha.f:      mem0=lnij*lnkl
memoha.f:      ngcijkl=(ngci+1)*(ngcj+1)*(ngck+1)*(ngcl+1)
memoha.f:      nblsg=nbls*ngcijkl
memoha.f:        call getmem(nblsg*lnijkl,ibuf)  ! for buf(nbls,lnijkl)
memoha.f:        call getmem(nblsg*mem0,ibuf2)  ! for buf2(nbls,lnij,lnkl)
memoha.f:        call getmem(7*nblsg*lnijkl,ibuf)  ! for buf(nbls,lnijkl)
memoha.f:        ixxx=nblsg*mem0 + 6*nblsg*nfu(nsij)*nfu(nskl)
memoha.f:        call getmem(ixxx      ,ibuf2)  ! for buf2(nbls,lnij,lnkl)
memoha.f:        iyyy=nblsg*max(9*lnijkl,4*mem0)
memoha.f:        ixxx=               10*nblsg*nfu(nsij)*nfu(nskl)
memoha.f:c     instead of ixxx=4*nblsg*mem0 + 10*nblsg*nfu(nsij)*nfu(nskl)
memoha.f:c 4*nblsg*mem0 is probably ALWAYS greater than 9*nblsg*lnijkl
memoha.f:        call getmem(iyyy  ,ibuf )  ! for buf (nbls,lnijkl)
memoha.f:        call getmem(ixxx  ,ibuf2)  ! for buf2(nbls,lnij,lnkl)
memoha.f:        iyyy=nblsg*max(54*lnijkl,10*mem0)
memoha.f:        ixxx=55*nblsg*nfu(nsij)*nfu(nskl)
memoha.f:        call getmem(iyyy  ,ibuf )  ! for buf (nbls,lnijkl)
memoha.f:        call getmem(ixxx  ,ibuf2)  ! for buf2(nbls,lnij,lnkl)
memoha.f:           mbfkl12=lnij*nfu(nqkl+1)*nbls
memoha.f:           mbfij12=nfu(nqij+1)*lnkl*nbls
memoha.f:           mbfkl12=lnij*nfu(nqkl1+1)*nbls + 6*nfu(nsij)*nfu(nqkl+1)*nbls
memoha.f:           mbfij12=nfu(nqij1+1)*lnkl*nbls + 6*nfu(nqij+1)*nfu(nskl)*nbls
memoha.f:           mbfkl12=4*lnij*nfu(nqkl1+1)*nbls
memoha.f:     *            +10*nfu(nsij)*nfu(nqkl+1)*nbls
memoha.f:           mbfij12=4*nfu(nqij1+1)*lnkl*nbls
memoha.f:     *            +10*nfu(nqij+1)*nfu(nskl)*nbls
memoha.f:            call getmem(mbfij12,ibfij1)  ! for bfij1
memoha.f:            call getmem(mbfij12,ibfij2)  ! for bfij2
memoha.f:            call getmem(mbfij12,ibfij1)  ! for bfij1
memoha.f:            ibfij2=ibfij1
memoha.f:            mbf2l=nfu(nqij+1)*nfu(nqkl+1)*nbls
memoha.f:            mbfkl3=lnij*nbls
memoha.f:            mbfij3=lnkl*nbls
memoha.f:            mbf2l=nfu(nqij1+1)*nfu(nqkl1+1)*nbls
memoha.f:     *         +6*nfu(nqij +1)*nfu(nqkl +1)*nbls
memoha.f:            mbfkl3=lnij*4*nbls + 6*nfu(nsij)*nbls
memoha.f:            mbfij3=4*lnkl*nbls + 6*nfu(nskl)*nbls
memoha.f:            mbf2l=4*nfu(nqij1+1)*nfu(nqkl1+1)*nbls
memoha.f:     *           +10*nfu(nqij +1)*nfu(nqkl +1)*nbls
memoha.f:            mbfkl3=4*(lnij*4*nbls) + 10*nfu(nsij)*nbls
memoha.f:            mbfij3=4*(4*lnkl*nbls) + 10*nfu(nskl)*nbls
memoha.f:            call getmem(mbfij3,ibfij3)  ! for bfij3
memoha.f:            mbf3l0=max( nfu(nqij +1),nfu(nqkl +1) )
memoha.f:            mbf3l1=max( nfu(nqij1+1),nfu(nqkl1+1) )
memoha.f:            mbf3l0=max( nfu(nqij +1),nfu(nqkl +1) )
memoha.f:            mbf3l1=max( nfu(nqij1+1),nfu(nqkl1+1) )
memoha.f:            mbf3l0=max( nfu(nqij +1),nfu(nqkl +1) )
memoha.f:c     0) for target classes WT0 or XT0(nbls,lnij,lnkl)
memoha.f:c        from xt1(lensm(mmax),1) to  xt1(lensm(nsij),lensm(nskl))
memoha.f:cccc  if(nsij.ge.nskl) then
memoha.f:        do 10 ijstep=mmax,nsij,-1
memoha.f:        ijdim=lensm(ijstep)
memoha.f:        ijkld=ijdim*kldim
memoha.f:        mem2_13=mem2_13+ijkld
memoha.f:        ijstep=0
memoha.f:        ijstep=ijstep+1
memoha.f:        ijdim=lensm(ijstep)
memoha.f:        ijkld=ijdim*kldim
memoha.f:        mem2_31=mem2_31+ijkld
memoha.f:      call getmem(nbls*mem0,iwt0)   ! for wt0(nbls,lnij,lnkl)
memoha.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,MMAX,
memoha.f:     * NQIJ,NQIJ1,NSIJ1,NQKL,NQKL1,NSKL1,ijbeg,klbeg
memoha.f:     * ibfij1,ibfij2,ibfkl1,ibfkl2,
memoha.f:     * ibf2l1,ibf2l2,ibf2l3,ibf2l4,ibfij3,ibfkl3,
memoha.f:     * ixij,iyij,izij, iwij,ivij,iuij,isij
memoha.f:       ixij=1
memoha.f:       iyij=1
memoha.f:       izij=1
memoha.f:       iwij=1
memoha.f:       ivij=1
memoha.f:       iuij=1
memoha.f:       isij=1
memoha.f:c* for wij and xij :
memoha.f:            mwvus=max(lnij,lnkl)*max(nfu(nqj+1),nfu(nql+1))
memoha.f:            mxij=nfu(nqi+1)*nfu(nqij+1)*lnkl
memoha.f:            mwij=mwvus
memoha.f:            mwij=mwij*nbls
memoha.f:            mxij=mxij*nbls
memoha.f:            mwij=6*mwij
memoha.f:            mxij=6*mxij
memoha.f:            mwij=10*mwij
memoha.f:            mxij=10*mxij
memoha.f:            mwij=55*mwij
memoha.f:            mxij=55*mxij
memoha.f:            call getmem(mwij,iwij)    ! for wij
memoha.f:            call getmem(mxij,ixij)    ! for xij
memoha.f:c* for vij10:
memoha.f:c--new--    mvus=lnij2
memoha.f:            call getmem(mvus,ivij)      ! for vij
memoha.f:            call getmem(myz ,iyij)      ! for yij
memoha.f:            mbf2l=nfu(nqij+1)*nfu(nqkl+1) *nbls
memoha.f:c* for x2l1-4, uij and sij:
memoha.f:            call getmem(mvus,iuij)      ! for uij
memoha.f:            call getmem(mvus,isij)      ! for sij
memoha.f:            call getmem(myz ,izij)      ! for zij
memoha.f:            call getmem(mnbls*nfu(nqij+1), ix3l3) ! for x3l3
memoha.f:            call getmem(mnbls*nfu(nqij+1), ix3l4) ! for x3l4
memoha.f:            call getmem(mnbls*nfu(nqij+1), ix3l3) ! for x3l3
memoha.f:      subroutine memo5a_2(npij,mmax1)
memoha.f:c 2: for : xab(ijpar,3) and xp, xpn, xpp all (ijpar,3,lcij)
memoha.f:c 3: for : apb, rapb, factij, (lcij)
memoha.f:c          ceofij and sij all (ijpar,lcij)
memoha.f:c 4. for : txab(ijpar,3,lcij)
memoha.f:      common /contr/ ngci,ngcj,ngck,ngcl,lci,lcj,lck,lcl,lcij,lckl
memoha.f:     * ixab,ixp,ixpn,ixpp,iabnia,iapb,i1apb,ifij,icij,isab,
memoha.f:     *                 icfg,jcfg,kcfg,lcfg, igcij,igckl
memoha.f:      ijpar=npij
memoha.f:       ndi=   ijpar*lci
memoha.f:       ndj=   ijpar*lcj
memoha.f:      call getmem(ijpar*3,ixab)   ! for xab(ijpar,3)             3
memoha.f:       ndij=ndi*lcj
memoha.f:       ndij3=ndij*3
memoha.f:      call getmem(ndij3,ixp)     ! for xp(ijpar,3,lcij)          4
memoha.f:      call getmem(ndij3,ixpn)    ! for xpn(ijpar,3,lcij)         5
memoha.f:      call getmem(ndij3,ixpp)    ! for xpp(ijpar,3,lcij)         6
memoha.f:      call getmem(lcij,ifij)     ! for factij(lcij)              7
memoha.f:      call getmem(ndij,icij)     ! for coefij(ijpar,lcij)        8
memoha.f:      call getmem(ndij,ieab)     ! for eab(ijpar,lcij)           9
memoha.f:      call getmem(ndij3,itxab)   ! for txab(ijpar,3,lcij)       10
memoha.f:      ndijm=lcij*mmax1
memoha.f:      call getmem(ndijm,iabnia)  ! for abnia(mmax-1,lcij)       11
memoha.f:      igcij=1
memoha.f:        ndijg=lcij*ngci1*ngcj1
memoha.f:        call getmem(ndijg,igcij)              !               12
memoha.f:c2000    call getmem(ndi,iaa)     ! for  aa(ijpar,lci)        13
memoha.f:c2000    call getmem(ndj,ibb)     ! for  bb(ijpar,lcj)        14
memoha.f:      common /contr/ ngci,ngcj,ngck,ngcl,lci,lcj,lck,lcl,lcij,lckl
memoha.f:     * ixab,ixp,ixpn,ixpp,iabnia,iapb,i1apb,ifij,icij,isab,
memoha.f:     *                 icfg,jcfg,kcfg,lcfg, igcij,igckl
memoha.f:      subroutine memo5c_2(nbls,mmax1,npij,npkl,nfumax)
memoha.f:      common /contr/ ngci,ngcj,ngck,ngcl,lci,lcj,lck,lcl,lcij,lckl
memoha.f:     * ixab,ixp,ixpn,ixpp,iabnia,iapb,i1apb,ifij,icij,isab,
memoha.f:     *                 icfg,jcfg,kcfg,lcfg, igcij,igckl
memoha.f:c reserve memory for quartets ijkl
memoha.f:      call getint(nblsi,idx1)    ! for indxij         2
memoha.f:      nfha=3*nfumax*max(lcij,lckl)
memoha.f:      subroutine memo6(npij,npkl)
memoha.f:c  ( Xa*Yb - Ya*Xb ) = xyab(ijpar,3)  - contributes to Z deriv.
memoha.f:c  (-Xa*Zb + Za*Xb ) = xyab(ijpar,2)  - contributes to Y deriv.
memoha.f:c  ( Ya*Zb + Za*Yb ) = xyab(ijpar,1)  - contributes to X deriv.
memoha.f:      npij3=3*npij
memoha.f:      call getmem(npij3,ixyab)
memoha.f:      subroutine memo5a_1(npij,mmax1)
memoha.f:      common /contr/ ngci,ngcj,ngck,ngcl,lci,lcj,lck,lcl,lcij,lckl
memoha.f:c  dimensions are (ijpar,lcij)
memoha.f:c 2: for : xab(ijpar,3) and xp, xpn, xpp all (ijpar,3,lcij)
memoha.f:c 3: for : apb, rapb, factij, ceofij and sij all (ijpar,lcij)
memoha.f:c 4. for : txab(ijpar,3,lcij)
memoha.f:     * ixab,ixp,ixpn,ixpp,iabnia,iapb,i1apb,ifij,icij,isab,
memoha.f:     *                 icfg,jcfg,kcfg,lcfg, igcij,igckl
memoha.f:      ijpar=npij
memoha.f:       ndi=   ijpar*lci
memoha.f:       ndj=   ijpar*lcj
memoha.f:      call getmem(ndi,iaa)        ! for  aa(ijpar,lci)           1
memoha.f:      call getmem(ndj,ibb)        ! for  bb(ijpar,lcj)           2
memoha.f:      call getmem(ndi,icis)       ! for cis(ijpar,lci)           3
memoha.f:      call getmem(ndj,icjs)       ! for cjs(ijpar,lcj)           4
memoha.f:      call getmem(ijpar*3,ixab)   ! for xab(ijpar,3)              5
memoha.f:       ndij=ndi*lcj
memoha.f:       ndij3=ndij*3
memoha.f:      call getmem(ndij3,ixp)     ! for xp(ijpar,3,lcij)          6
memoha.f:      call getmem(ndij3,ixpn)    ! for xpn(ijpar,3,lcij)         7
memoha.f:      call getmem(ndij3,ixpp)    ! for xpp(ijpar,3,lcij)         8
memoha.f:c     call getmem(ndij,iapb)     ! for apb(ijpar,lcij)
memoha.f:c     call getmem(ndij,i1apb)    ! for rapb(ijpar,lcij)
memoha.f:      call getmem(ndij,ifij)     ! for factij(ijpar,lcij)        9
memoha.f:      call getmem(ndij,icij)     ! for coefij(ijpar,lcij)       10
memoha.f:      call getmem(ndij,ieab)     ! for eab(ijpar,lcij)
memoha.f:      call getmem(ndij3,itxab)   ! for txab(ijpar,3,lcij)       11
memoha.f:      ndijm=ndij*mmax1
memoha.f:      call getmem(ndijm,iabnia)  ! for abnia(ijpar,mmax-1,lcij) 12
memoha.f:      common /contr/ ngci,ngcj,ngck,ngcl,lci,lcj,lck,lcl,lcij,lckl
memoha.f:c  dimensions are (klpar,lcij)
memoha.f:c 2: for : xcd(ijpar,3) and xq, xqn, xqq all (klpar,3,lckl)
memoha.f:     * ixab,ixp,ixpn,ixpp,iabnia,iapb,i1apb,ifij,icij,isab,
memoha.f:     *                 icfg,jcfg,kcfg,lcfg, igcij,igckl
memoha.f:      subroutine memo5c_1(nbls,mmax1,npij,npkl,nfha,nfumax)
memoha.f:      common /contr/ ngci,ngcj,ngck,ngcl,lci,lcj,lck,lcl,lcij,lckl
memoha.f:     * ixab,ixp,ixpn,ixpp,iabnia,iapb,i1apb,ifij,icij,isab,
memoha.f:     *                 icfg,jcfg,kcfg,lcfg, igcij,igckl
memoha.f:c reserve memory for quartets ijkl
memoha.f:      call getint(nblsi,idx1)    ! for indxij         4
mpi_lib.F:C  isize   -  size of present granule (in "ij units")
newpara_core.f:c the negative value of ijob signals the switch to the slaves
newpara_core.f:            ijob=0
newpara_core.f:            ijob=-iwork
newpara_core.f:         call para_send(ijob,islave,TxBlockAssign)
newpara_fock.f:      iij=-1
newpara_fock.f:      iij=iij+1
newpara_fock.f:        ij=ii+jff
newpara_fock.f:        oneint(ij)=bl(is+iij)
newpara_ftc_slave.f:                  indxij=indxi+jfunc
newpara_ftc_slave.f:                  Fockmx(indxij)=Fockmx(indxij)+
newpara_ftc_slave.f:                  indxij=indxi+jfunc*(jfunc-1)/2
newpara_ftc_slave.f:                  Fockmx(indxij)=Fockmx(indxij)+
newpara_ftc_slave.f:                  indxij=indxi+jfunc
newpara_ftc_slave.f:                  Fockmx(indxij)=Fockmx(indxij)+
newpara_ftc_slave.f:                  indxij=indxi+jfunc*(jfunc-1)/2
newpara_ftc_slave.f:                  Fockmx(indxij)=Fockmx(indxij)+
newpara_rmp2.f:c  If gradient: filname3=Tij amplitudes;  filname4=Kov amplitudes
newpara_rmp2.f:         filname3=scrfile(1:len)//'.Tij'
newpara_rmp2.f:c                9 because of bin size with indices. +2 because ij pars
newpara_rmp2.f:     *       'WARNING!!! Some slave will have empty ij list!'
newpara_rmp2.f:c            overflow  bins    numij               prevrec
newpara_rmp2.f:     *       'WARNING!!! Some slave will have empty ij list!'
newpara_rmp2.f:     2   nbin,      ijfirst,   ijlast,      binlist,   ibins,
newpara_rmp2.f:c  ijfirst -  index of first I,J pair to be sorted
newpara_rmp2.f:c  ijlast  -  index of last  I,J pair to be sorted
newpara_rmp2.f:      ij=0
newpara_rmp2.f:            ij=ij+1
newpara_rmp2.f:            if(ij.lt.ijfirst) cycle
newpara_rmp2.f:            if(ij.gt.ijlast) exit outer
newpara_rmp2.f:               if (icounter(ij).ge.lbin2) then
newpara_rmp2.f:                  igran=ipair2gran(ij)
newpara_rmp2.f:               icounter(ij)=icounter(ij)+2
newpara_rmp2.f:               ibins(icounter(ij)-1,ij)=i1pair(i,j)
newpara_rmp2.f:               ibins(icounter(ij),ij)=longint
newpara_rmp2.f:               ibin1(icounter(ij)/2,ij)=int1(i,j)
newpara_rmp2.f:                  if (icounter(ij).ge.lbin2) then
newpara_rmp2.f:                     igran=ipair2gran(ij)
newpara_rmp2.f:                  icounter(ij)=icounter(ij)+2
newpara_rmp2.f:                  ibins(icounter(ij)-1,ij)=i1pair(j,i)
newpara_rmp2.f:                  ibins(icounter(ij),ij)=longint1
newpara_rmp2.f:                  ibin1(icounter(ij)/2,ij)=int1(j,i)
newpara_rmp2.f:      do ij=1,npairs
newpara_rmp2.f:         if (icounter(ij).gt.0) then
newpara_rmp2.f:c the number of cells occupied is 2*icounter(ij)
newpara_rmp2.f:            do j=icounter(ij)/2+1,lbin
newpara_rmp2.f:               ibins(2*j-1,ij)=0
newpara_rmp2.f:               ibins(2*j,ij)=0
newpara_rmp2.f:               ibin1(j,ij)=0
newpara_rmp2.f:      do ij=1,npairs
newpara_rmp2.f:         if (icounter(ij).gt.0) then
newpara_rmp2.f:            igran=ipair2gran(ij)
newpara_rmp2.f:      ijstart=igran2pair(1,igranule)
newpara_rmp2.f:      ijstop =igran2pair(2,igranule)
newpara_rmp2.f:      isize=ijstop-ijstart+1
newpara_rmp2.f:c     print *,'icount,irec,ngran: ',icount,irec,igranule,ijstart,ijstop
newpara_rmp2.f:      ij0=0
newpara_rmp2.f:      do ij=ijstart,ijstop
newpara_rmp2.f:      ij0=ij0+1
newpara_rmp2.f:      numij=icounter(ij0)
newpara_rmp2.f:      call get_ij_half(ij,ip,jp)
newpara_rmp2.f:      DO 40 J=1,numij/2
newpara_rmp2.f:      longint = IBins(2,J,ij0)
newpara_rmp2.f:cc      call reconstruct(ibins(1,j,ij0),ibin1(j,ij0),xx)
newpara_rmp2.f:      If(IBin1(J,ij0).eq.0) Then
newpara_rmp2.f:        xx = IBins(1,J,ij0)*thresh
newpara_rmp2.f:      Else If(IBin1(J,ij0).gt.0) Then
newpara_rmp2.f:        xx = IBins(1,J,ij0)*thresh
newpara_rmp2.f:        xx = xx + SIGN(IBin1(J,ij0)*dblcmp,xx)
newpara_rmp2.f:        xx = IBins(1,J,ij0)*thresh*10.0d0**(-IBin1(J,ij0))
newpara_rmp2.f:      xmat(mu,lam,ij0) = xx
newpara_rmp2.f:        xmat(mu2,lam2,ij0) = xxx
newpara_rmp2.f:      subroutine PSaveTij(ncf,    nmo,    nval,   nvir,   i,
newpara_rmp2.f:     2                    int1,   x,      ndisk,  ij)
newpara_rmp2.f:C  This subroutine starts with the internal exchange matrix Kij in
newpara_rmp2.f:C  (virtual) MO basis, generates the amplitudes Tij by dividing by
newpara_rmp2.f:C  and the A1-terms are best calculated using Tij in MO basis.
newpara_rmp2.f:C  intres:    integer matrix for residuum Tij in AO basis
newpara_rmp2.f:C  x:         matrix with Tij in virtual basis
newpara_rmp2.f:C  ij:        record number
newpara_rmp2.f:cc          write(6,*) ' Threshold Tij - ia:',ia,' ib:',ib,' i1:',i1
newpara_rmp2.f:      write(ndisk,rec=ij) i-ncore,j-ncore,int1,ibins
newpara_rmp2.f:C  Converts <Kij> to AO basis and saves to local direct access file.
newpara_rmp2.f:        call matmmult('tss02','occa','kijvo')
newpara_rmp2.f:        call matmmult('tss02','occu','kijvo')
newpara_rmp2.f:      call matscal('kijvo',one/thresh)
newpara_rmp2.f:cc          write(6,*) ' Threshold Kij - imv:',imv,' i1:',i1
newpara_rmp2.f:        call matmmult('tss02','occa','kijvo')
newpara_rmp2.f:        call matmmult('tss02','occu','kijvo')
newpara_rmp2.f:      call matscal('kijvo',one/thresh)
newpara_rmp2.f:cc          write(6,*) ' Threshold Kij - imv:',imv,' i1:',i1
newpara_rmp2.f:         ijfirst = 1      ! first ij pair in this current pass
newpara_rmp2.f:            ijlast=igran2pair(2,binlist(nslv))! last ij pair in this pass
newpara_rmp2.f:     2           bl(ibin),  ijfirst,   ijlast,      binlist,   bl(i1),
newpara_rmp2.f:c  first ij pair on current slave
newpara_rmp2.f:                  ijfirsts=ijfirst
newpara_rmp2.f:                  ijfirsts=igran2pair(2,binlist(MY_GID-1)) + 1
newpara_rmp2.f:c  last ij pair on current slave
newpara_rmp2.f:               ijlasts=igran2pair(2,binlist(MY_GID))
newpara_rmp2.f:               istart=ipair2gran(ijfirsts) ! first granule on slave
newpara_rmp2.f:               istop =ipair2gran(ijlasts)  ! last granule on slave
newpara_rmp2.f:c -- Kij in AO basis now in xmat [i.e., in bl(ixm)]
newpara_rmp2.f:cc        call PSaveKIJ(ncf,    nval,   nvirt, bl(ikij),bl(i1),
newpara_rmp2.f:c              also the matrix 'kijvo' which is the same as bl(ikij)
newpara_rmp2.f:                  i_ij_start=igran2pair(1,II)  ! Convert to pair number, first pair
newpara_rmp2.f:                  i_ij_stop =igran2pair(2,II)  ! Convert to pair number, last  pair
newpara_rmp2.f:                  do i_ij=i_ij_start,i_ij_stop
newpara_rmp2.f:                     iaddress=ixm+(i_ij-i_ij_start)*ncf*ncf
newpara_rmp2.f:                     call get_ij_half(i_ij,I,J)     ! get separate indices
newpara_rmp2.f:     &                             bl(ieorb),eij,xnorm,eijs,eijt,eijpar,
newpara_rmp2.f:     &                             eijanti)
newpara_rmp2.f:                     emp2 = emp2 + eij
newpara_rmp2.f:                     emps=emps+eijs
newpara_rmp2.f:                     empt=empt+eijt
newpara_rmp2.f:                     emppar=emppar+eijpar
newpara_rmp2.f:                     empanti=empanti+eijanti
newpara_rmp2.f:            ijfirst = ijlast+1
newpara_slave.f:      common /dftpnt/ ird,iaij,idst,iixx,iiwt,ipre,iexp,
newpara_slave.f:     $                 bl(idst),bl(iaij),bl(ird),bl(iixx),bl(iiwt),
newpara_slave.f:     $                 bl(idst),bl(iaij),bl(ird),bl(iixx),bl(iiwt),
newpara_slave.f:      common /dftpnt/ ird,iaij,idst,iixx,iiwt,ipre,iexp,
newpara_slave.f:     $                 bl(idst),bl(iaij),bl(ird),bl(iixx),bl(iiwt),
newpara_slave.f:     $                 bl(idst),bl(iaij),bl(ird),bl(iixx),bl(iiwt),
newpara_slave.f:     *                  bl(idst),bl(iaij),bl(ird),bl(iixx),bl(iiwt),
newpara_slave.f:      call getmem(natom**2,iaij)              ! precomputed Becke weights
newpara_slave.f:c -- calculate inverse atomic distances, Becke aij parameters
newpara_slave.f:     $             bl(idst),bl(irst),bl(iaij),bl(ixxa),bl(iwta))
newpara_slave.f:     $                  bl(iaij),bl(irst),bl(ixxa),bl(iwta),thrsh,
newpara_slave.f:     $                  bl(iaij),bl(irst),bl(ixxa),bl(iwta),thrsh,
newpara_slave.f:     $                factor, bl(idst),bl(iaij),bl(irst),bl(ixxa),
newpara_slave.f:      common /dftpnt/ ird,iaij,idst,iixx,iiwt,ipre,iexp,
newpara_slave.f:     $                factor,   NBatch,  bl(idst),  bl(iaij), bl(ird),
newpara_slave.f:     $              factor,   NBatch,  bl(idst), bl(iaij),  bl(ird),
newpara_slave.f:     $                 bl(iaij),bl(ird),bl(iixx),bl(iiwt),bl(ixgd),
newpara_slave.f:     $                 bl(iaij),bl(ird),bl(iixx),bl(iiwt),bl(ixgd),
newpara_ump2.f:     2               'grad','pmij','scs ','sos ','noio','test'/
newpara_ump2.f:      ipmij=0
newpara_ump2.f:        ipmij=iopv(1,12)
newpara_ump2.f:cc        filname3=scrfile(1:len)//'.Tij'
newpara_ump2.f:      call get_ij_full(IJ,nval,I,J)
newpara_ump2.f:      call get_ij_full(IJ,nvalB,I,J)
nmr_tens.f:            iijxx=0
nmr_tens.f:               iijxx=iijxx+1
nmr_tens.f:               iijxy=iijxx+len
nmr_tens.f:               iijxz=iijxy+len
nmr_tens.f:               iijyx=iijxz+len
nmr_tens.f:               iijyy=iijyx+len
nmr_tens.f:               iijyz=iijyy+len
nmr_tens.f:               iijzx=iijyz+len
nmr_tens.f:               iijzy=iijzx+len
nmr_tens.f:               iijzz=iijzy+len
nmr_tens.f:               ij=ii+jff
nmr_tens.f:               d00=den(ij)
nmr_tens.f:            hna(ij,1)=hna(ij,1) + s2(len*9+iijxx)
nmr_tens.f:            hna(ij,2)=hna(ij,2) + s2(len*9+iijxy)
nmr_tens.f:            hna(ij,3)=hna(ij,3) + s2(len*9+iijxz)
nmr_tens.f:            shie(1,1,nra)=shie(1,1,nra) + s2(iijxx)*d00
nmr_tens.f:            shie(2,1,nra)=shie(2,1,nra) + s2(iijxy)*d00
nmr_tens.f:            shie(3,1,nra)=shie(3,1,nra) + s2(iijxz)*d00
nmr_tens.f:            shie(1,2,nra)=shie(1,2,nra) + s2(iijyx)*d00
nmr_tens.f:            shie(2,2,nra)=shie(2,2,nra) + s2(iijyy)*d00
nmr_tens.f:            shie(3,2,nra)=shie(3,2,nra) + s2(iijyz)*d00
nmr_tens.f:            shie(1,3,nra)=shie(1,3,nra) + s2(iijzx)*d00
nmr_tens.f:            shie(2,3,nra)=shie(2,3,nra) + s2(iijzy)*d00
nmr_tens.f:            shie(3,3,nra)=shie(3,3,nra) + s2(iijzz)*d00
nmr_tens.f:            iijxx=0
nmr_tens.f:               iijxx=iijxx+1
nmr_tens.f:               iijxy=iijxx+len
nmr_tens.f:               iijxz=iijxy+len
nmr_tens.f:               iijyx=iijxz+len
nmr_tens.f:               iijyy=iijyx+len
nmr_tens.f:               iijyz=iijyy+len
nmr_tens.f:               iijzx=iijyz+len
nmr_tens.f:               iijzy=iijzx+len
nmr_tens.f:               iijzz=iijzy+len
nmr_tens.f:               ij=ii+jff
nmr_tens.f:               d00=den(ij)
nmr_tens.f:            hna(ij,1)=hna(ij,1) + s2(len*9+iijxx)
nmr_tens.f:            hna(ij,2)=hna(ij,2) + s2(len*9+iijxy)
nmr_tens.f:            hna(ij,3)=hna(ij,3) + s2(len*9+iijxz)
nmr_tens.f:            shie(1,1,nra)=shie(1,1,nra) + s2(iijxx)*d00
nmr_tens.f:            shie(2,1,nra)=shie(2,1,nra) + s2(iijxy)*d00
nmr_tens.f:            shie(3,1,nra)=shie(3,1,nra) + s2(iijxz)*d00
nmr_tens.f:            shie(1,2,nra)=shie(1,2,nra) + s2(iijyx)*d00
nmr_tens.f:            shie(2,2,nra)=shie(2,2,nra) + s2(iijyy)*d00
nmr_tens.f:            shie(3,2,nra)=shie(3,2,nra) + s2(iijyz)*d00
nmr_tens.f:            shie(1,3,nra)=shie(1,3,nra) + s2(iijzx)*d00
nmr_tens.f:            shie(2,3,nra)=shie(2,3,nra) + s2(iijzy)*d00
nmr_tens.f:            shie(3,3,nra)=shie(3,3,nra) + s2(iijzz)*d00
nmr_tens.f:            ij=ii-1+j
nmr_tens.f:            datnic(1,ij  )=x2
nmr_tens.f:            datnic(2,ij  )=y2
nmr_tens.f:            datnic(3,ij  )=z2
nmr_tens.f:        ij=n2+1
nmr_tens.f:        igeoc=(ij-1)*ngrid+ij
nuclin.f:      ijat_q=iat_q*jat_q
nuclin.f:      ijat_d=max(iat_q,jat_q)-min(iat_q,jat_q)
nuclin.f:      if(ijat_q.eq.6 .and. ijat_d.eq.5) then
nuclin.f:      if(ijat_q.eq.7 .and. ijat_d.eq.6) then
nuclin.f:      if(ijat_q.eq.8 .and. ijat_d.eq.7) then
nuclin.f:      if(ijat_q.eq.42 .and. ijat_d.eq.1) then
nuclin.f:      if(ijat_q.eq.48 .and. ijat_d.eq.2) then
nuclin.f:      if(ijat_q.eq.56 .and. ijat_d.eq.1) then
Binary file open_shell.tar.bz2 matches
optimRZ.f:      SUBROUTINE rij2cart( n,  nrij,  rijindx, rijlst, M,
optimRZ.f:      INTEGER n, nrij
optimRZ.f:      INTEGER rijindx(4,nrij)
optimRZ.f:      DOUBLE PRECISION rijlst(nrij), xyzlst(3,n)
optimRZ.f:c Given a list of distances rijlst and an index array rijindx
optimRZ.f:c with the distances rij
optimRZ.f:c     mij = xi.xj = ri0 rj0 cos(a) = 1/2 (ri0^2 + rj0^2 - rij^2)
optimRZ.f:c You really should have all n(n-1)/2 distances dij to get a
optimRZ.f:c  nrij     -  (int) number of distances rij
optimRZ.f:c  rijindx  -  (int 4xnrij Array) index set for distances
optimRZ.f:c				[ the last 2 columns of rijindx are not used ]
optimRZ.f:c  rijlst   -  (dbl nrij Array)  values for the distances
optimRZ.f:c     first fill off diag of M with squared distances rij^2
optimRZ.f:      DO k=1,nrij
optimRZ.f:          i = rijindx(1,k)
optimRZ.f:          j = rijindx(2,k)
optimRZ.f:          M(i,j) = rijlst(k)*rijlst(k)
optimRZ.f:c     mij = xi.xj = 1/2 (ri0^2 + rj0^2 - rij^2)
optimRZ-routines:      SUBROUTINE rij2cart( n,  nrij,  rijindx, rijlst, M,
para_cimsub.f:      real*8,allocatable::x_QCMO(:,:,:),tij1_QCMO(:,:,:)
para_cimsub.f:      real*8,allocatable::x_LMO(:,:,:,:),tij1_LMO(:,:,:,:)
para_cimsub.f:C      real*8,allocatable::Sij(:,:),SOVER(:,:),tmp(:)
para_cimsub.f:C      allocate(tmp(127008),Sij(ncf,ncf),SOVER(ncf,ncf))
para_cimsub.f:C      call inton2(0,natoms,Sij,INX2,INX2,0,0,BASDAT,BASDAT,XC,IAN,
para_cimsub.f:C      call ReorderFock2(ncf,ncf,Z(1),Sij,SOVER)
para_cimsub.f:c  If gradient: filname3=Tij amplitudes;  filname4=Kov amplitudes
para_cimsub.f:c                9 because of bin size with indices. +2 because ij pars
para_cimsub.f:     *       'WARNING!!! Some slave will have empty ij list!'
para_cimsub.f:c            overflow  bins    numij               prevrec
para_cimsub.f:     *       'WARNING!!! Some slave will have empty ij list!'
para_cimsub.f:      allocate(tij1_QCMO(nmo*(nmo+1)/2,nvirt,nvirt))     
para_cimsub.f:     &                    x_QCMO,tij1_QCMO)
para_cimsub.f:      allocate(x_LMO(nmo,nmo,nvirt,nvirt),tij1_LMO(nmo,nmo,nvirt,nvirt))
para_cimsub.f:      x_LMO=0.0D0; tij1_LMO=0.0D0
para_cimsub.f:                     ij=ii*(ii-1)/2+j
para_cimsub.f:                     xqcmo2(ii,j)=x_QCMO(ij,k,l)
para_cimsub.f:                     tqcmo2(ii,j)=tij1_QCMO(ij,k,l)
para_cimsub.f:                     ij=j*(j-1)/2+ii
para_cimsub.f:                     xqcmo2(ii,j)=x_QCMO(ij,l,k)
para_cimsub.f:                     tqcmo2(ii,j)=tij1_QCMO(ij,l,k)
para_cimsub.f:     &                 tqcmo2,nmo,0.0D0,tij1_LMO(:,:,k,l),nmo)
para_cimsub.f:C                     tij1_LMO(i,j,k,l)=tij1_LMO(i,j,k,l)
para_cimsub.f:C     &                                 +tij1_QCMO(ii,j,k,l)*trans(ii,i)
para_cimsub.f:                  tij1=tij1_LMO(i,j,k,l)
para_cimsub.f:                  energypair_CIM(i,j)=energypair_CIM(i,j)+tij1*x
para_cimsub.f:      ijfirst = 1      ! first ij pair in this current pass
para_cimsub.f:C MO integrals by ij pair index
para_cimsub.f:         ijlast=igran2pair(2,binlist(nslv))! last ij pair in this pass
para_cimsub.f:     2      bl(ibin),  ijfirst,   ijlast,      binlist,   bl(i1),
para_cimsub.f:c  first ij pair on current slave
para_cimsub.f:               ijfirsts=ijfirst
para_cimsub.f:               ijfirsts=igran2pair(2,binlist(MY_GID-1)) + 1
para_cimsub.f:c  last ij pair on current slave
para_cimsub.f:            ijlasts=igran2pair(2,binlist(MY_GID))
para_cimsub.f:            istart=ipair2gran(ijfirsts) ! first granule on slave
para_cimsub.f:            istop =ipair2gran(ijlasts)  ! last granule on slave
para_cimsub.f:c -- Kij in AO basis now in xmat [i.e., in bl(ixm)]
para_cimsub.f:cc        call PSaveKIJ(ncf,    nval,   nvirt, bl(ikij),bl(i1),
para_cimsub.f:c              also the matrix 'kijvo' which is the same as bl(ikij)
para_cimsub.f:               i_ij_start=igran2pair(1,II)  ! Convert to pair number, first pair
para_cimsub.f:               i_ij_stop =igran2pair(2,II)  ! Convert to pair number, last  pair
para_cimsub.f:               do i_ij=i_ij_start,i_ij_stop
para_cimsub.f:                  iaddress=ixm+(i_ij-i_ij_start)*ncf*ncf
para_cimsub.f:                  call get_ij_half(i_ij,I,J)
para_cimsub.f:     $              bl(ixmo),bl(ieorb),   eij,    xnorm,  eijs,
para_cimsub.f:     $              eijt,   eijpar, eijanti)
para_cimsub.f:                  emp2 = emp2 + eij
para_cimsub.f:                  emps=emps+eijs
para_cimsub.f:                  empt=empt+eijt
para_cimsub.f:                  emppar=emppar+eijpar
para_cimsub.f:                  empanti=empanti+eijanti
para_cimsub.f:         ijfirst = ijlast+1
para_cimsub.f:      dimension cctimesij(4),ccsdcpu(itim_no),ccsdela(itim_no)
para_cimsub.f:         call dynamic_getmem((nval*nval+1)*8,ijtable)
para_cimsub.f:         call ijtab_generator(nsym,nval,ichar_count,bl(ichatacters),
para_cimsub.f:     *                        bl(im_table),bl(iorevtable),bl(ijtable))
para_cimsub.f:      ij=0
para_cimsub.f:      ij_unique=0
para_cimsub.f:c Let us assume that all UNIQUE ij pairs are arranged in row in
para_cimsub.f:c allocate memory for array which maps ij->ij_unique (from the row
para_cimsub.f:c described above), or ij->0 if ij is a mirror of any pair
para_cimsub.f:            ij=ij+1
para_cimsub.f:            call pair_searcher(i,  j,     iprim, jprim, ijprim,
para_cimsub.f:               ij_unique=ij_unique+1
para_cimsub.f:               call int_array_write(bl(isympairs),ij,ij_unique)
para_cimsub.f:               call int_array_write(bl(isympairs),ij,0)
para_cimsub.f:            ival=int_array(bl(ipairimages),ijprim)
para_cimsub.f:            call int_array_write(bl(ipairimages),ijprim,ival)
para_cimsub.f:      call para_pack_int(ij_unique,1)
para_cimsub.f:         call para_pack_int(bl(ijtable),(nval*nval+1)*8)
para_cimsub.f:     *                bl(ilist),bl(isympairs),ij_unique,iprnt,nbf)
para_cimsub.f:     *                bl(ilist),bl(isympairs),ij_unique,iprint,nbf)
para_cimsub.f:     *                   bl(ilist),bl(isympairs),ij_unique,iprint,nbf)
para_cimsub.f:     *                     nsym,  nval,nvirt,      ij_unique,isympairs,
para_cimsub.f:         call Kijk_Vec_Mast(bl(irecadrx),npairs,ndiskx,lbinx,ncf,thresh,
para_cimsub.f:     *                      nfirst,nlast,byt8,nmo,vorb,.true.,kijkndisk,
para_cimsub.f:         call CreateKijklDisk(nval,kijklndisk,af)
para_cimsub.f:c     call KijklInit(bl(irecadrx),npairs,ndiskx,lbinx,ncf,thresh,
para_cimsub.f:c    *             nfirst,nlast,bl(ifockMO),byt8,nmo,vorb,kijklndisk,af)
para_cimsub.f:         call KijklInit_Master(bl(irecadrx),npairs,ndiskx,lbinx,ncf,
para_cimsub.f:     *                         nmo,vorb,kijklndisk,af,nslv)
para_cimsub.f:            write(6,9)'KijklInit ELAPS: ',et1-et0
para_cimsub.f:            write(6,9)'KijklInit   CPU: ',t1-t0
para_cimsub.f:c Space (temporary) for one K_ij matrix
para_cimsub.f:      ij=0
para_cimsub.f:      ij=0
para_cimsub.f:            ij=ij+1
para_cimsub.f:               call para_unpack_real(sqij,1)
para_cimsub.f:               square=square+sqij
para_cimsub.f:            call para_pack_int(ij,1)
para_cimsub.f:            call para_unpack_real(sqij,1)
para_cimsub.f:            square=square+sqij
para_cimsub.f:     *                     nsym,  nval,nvirt,      ij_unique,isympairs,
para_cimsub.f:      ij=0
para_cimsub.f:      sqij=0.0d0
para_cimsub.f:            ij=ij+1
para_cimsub.f:            call pair_searcher(i,  j,     iprim, jprim, ijprim,
para_cimsub.f:               call para_unpack_real(sqij_sl,1)
para_cimsub.f:               sqij=sqij+sqij_sl
para_cimsub.f:            call para_pack_int(ij,1)
para_cimsub.f:            call para_unpack_real(sqij_sl,1)
para_cimsub.f:            sqij=sqij+sqij_sl
para_cimsub.f:     *                     nsym,  nval,nvirt,      ij_unique,isympairs,
para_cimsub.f:      write(6,'(A,E20.10E2)') 'Sum of squares of the residuum:',sqij
para_cimsub.f:      write(6,3232) mp2_iter,xxenergy,xdelta,xmaxele,sqij,(et1-et0)/6d1
para_cimsub.f:     *                 ichar_count,bl(ivtable),bl(im_table),bl(ijtable),
para_cimsub.f:     *                   bl(ilist),bl(isympairs),ij_unique,iprint,nbf)
para_cimsub.f:     *                   bl(ilist),bl(isympairs),ij_unique,iprint,nbf)
para_cimsub.f:     *                              kijklndisk,af,do_mp4,nbf)
para_cimsub.f:      ij=0
para_cimsub.f:     *      call calculate_ij_chunk(ichunk,jchunk,nslv,idimen,nval)
para_cimsub.f:         if (calchunks)  call check_ijchunk_reduce(icalc_pairs,nval,
para_cimsub.f:     *       call calculate_ij_chunk(ichunk,jchunk,nslv,idimen,nval)
para_cimsub.f:         if (calchunks) call check_ijchunk_reduce(icalc_pairs,nval,
para_cimsub.f:      ij=0
para_cimsub.f:            ij=ij+1
para_cimsub.f:            call pair_searcher(i,  j,     iprim, jprim, ijprim,
para_cimsub.f:               call para_unpack_real(sqij,1)
para_cimsub.f:               call para_unpack_real(xnormij,1)
para_cimsub.f:               square=square+sqij
para_cimsub.f:               totnorm=totnorm+xnormij
para_cimsub.f:            call para_pack_int(ij,1)
para_cimsub.f:               xiterenergy=bl(iepairr+ij-1)
para_cimsub.f:            call para_unpack_real(sqij,1)
para_cimsub.f:            call para_unpack_real(xnormij,1)
para_cimsub.f:            square=square+sqij
para_cimsub.f:            totnorm=totnorm+xnormij
para_cimsub.f:     *                     nsym,  nval,nvirt,      ij_unique,isympairs,
para_cimsub.f:C                        ij=ii*(ii-1)/2+j
para_cimsub.f:C                        eqcmo=exc_QCMO(ij,k,l)
para_cimsub.f:C                        cqcmo=coef_QCMO(ij,k,l)
para_cimsub.f:C                        rqcmo=resi_QCMO(ij,k,l)
para_cimsub.f:C                        ij=j*(j-1)/2+ii
para_cimsub.f:C                        eqcmo=exc_QCMO(ij,l,k)
para_cimsub.f:C                        cqcmo=coef_QCMO(ij,l,k)
para_cimsub.f:C                        rqcmo=resi_QCMO(ij,l,k)
para_cimsub.f:                     ij=ii*(ii-1)/2+j
para_cimsub.f:                     eqcmo2(ii,j)=exc_QCMO(ij,k,l)
para_cimsub.f:                     cqcmo2(ii,j)=coef_QCMO(ij,k,l)
para_cimsub.f:                     rqcmo2(ii,j)=resi_QCMO(ij,k,l)
para_cimsub.f:                     ij=j*(j-1)/2+ii
para_cimsub.f:                     eqcmo2(ii,j)=exc_QCMO(ij,l,k)
para_cimsub.f:                     cqcmo2(ii,j)=coef_QCMO(ij,l,k)
para_cimsub.f:                     rqcmo2(ii,j)=resi_QCMO(ij,l,k)
para_cimsub.f:     &                        ij_unique,isympairs,l_restart,ndisk_dump,
para_cimsub.f:     *                 ichar_count,bl(ivtable),bl(im_table),bl(ijtable),
para_cimsub.f:      integer iwork2,iwork3,iresult,iwork,j,ij,icoeAO,iresult_iter,ibeta
para_cimsub.f:      integer ifockAO,ifockMO,ioverlap,icorefock,icoeffAO,kijklndisk
para_cimsub.f:      real*8 epair,epairr,sqij,xmaxele,xepair,xepairr,xnormij
para_cimsub.f:      integer :: isympairs,ipairimages,ivalpair,ivirpair,ij_unique
para_cimsub.f:      integer ncore,iiR,iiS,iotable,ivtable,ivrevtable,im_table,ijtable
para_cimsub.f:      call para_unpack_int(ij_unique,1)
para_cimsub.f:         call dynamic_getmem((nval*nval+1)*8,ijtable)
para_cimsub.f:         call para_unpack_int(bl(ijtable),(nval*nval+1)*8)
para_cimsub.f:     &                  bl(isympairs),ij_unique,nbf)
para_cimsub.f:     *               nstrong,bl(isympairs),ij_unique,nbf)
para_cimsub.f:     &                  bl(isympairs),ij_unique,nbf)
para_cimsub.f:     *                    ij_unique,isympairs,nbf)
para_cimsub.f:         call Kijk_Vec_Slave(bl(irecadrx),npairs,ndiskx,lbinx,thresh,
para_cimsub.f:     *                          byt8,kijklndisk,ncf,nmo,nval,
para_cimsub.f:         call KijklInit_Slave(bl(irecadrx),npairs,ndiskx,lbinx,ncf,
para_cimsub.f:c Space for one K_ij matrix
para_cimsub.f:            call para_pack_real(sqij,1)
para_cimsub.f:         call para_unpack_int(ij,1)
para_cimsub.f:     *                   sqij,    xmaxele,bl(ilist),bl(ipairimages),
para_cimsub.f:c       print '(A15,I5,5X,F20.10)', "Pair energy: ",ij,epair
para_cimsub.f:     *                    ij_unique,isympairs,nbf)
para_cimsub.f:         do           ! ij loop
para_cimsub.f:               call para_pack_int(ij,1)
para_cimsub.f:               call para_pack_real(sqij,1)
para_cimsub.f:            call para_unpack_int(ij,1)
para_cimsub.f:               call fafread(ndisk_mp3,bl(iexchAO),8,idimen*idimen,1,ij,
para_cimsub.f:     &                      ndiskdiisr,ndiskdiisc,sqij,xmaxele,
para_cimsub.f:         enddo        ! ij loop
para_cimsub.f:     *                       ij_unique,isympairs,nbf)
para_cimsub.f:     &                    bl(ivrevtable),bl(im_table),bl(ijtable),
para_cimsub.f:     &                     ij_unique,nbf)
para_cimsub.f:     &                     ij_unique,nbf)
para_cimsub.f:         do           ! ij loop
para_cimsub.f:               call para_pack_int(ij,1)
para_cimsub.f:               call para_pack_real(sqij,1)
para_cimsub.f:               call para_pack_real(xnormij,1)
para_cimsub.f:            call para_unpack_int(ij,1)
para_cimsub.f:            if (int_array(bl(ilist),ij).eq.1) then
para_cimsub.f:c  Qgen, iwork1=Qij, iwork2=Qji(T), probably OK, order of en. OK
para_cimsub.f:c   S*Qij and add to residuum
para_cimsub.f:c   Read Gij and Gji(T) with part of CCSD
para_cimsub.f:            else ! if (int_array(bl(ilist),ij).eq.1) then
para_cimsub.f:               sqij=0.0d0
para_cimsub.f:     *                                       idimen*idimen,1,ij,istatus)
para_cimsub.f:            if (omit.and.int_array(bl(ilist),ij).ne.1) epairr=epair
para_cimsub.f:               call CINorm(icoeffAO,xnormij,ncf,equal,nmo,vorb,nbf)
para_cimsub.f:               if (.not.omit.or.int_array(bl(ilist),ij).eq.1) then
para_cimsub.f:     &                            singles,ndiskdiisr,ndiskdiisc,sqij,
para_cimsub.f:                  sqij=0.0d0
para_cimsub.f:            if (omit.and.int_array(bl(ilist),ij).ne.1) xepairr=xepair
para_cimsub.f:     *                       ij_unique,isympairs,nbf)
para_cimsub.f:     *                       ij_unique,isympairs,nbf)
para_cimsub.f:     *              bl(im_table),bl(ijtable),ichar_count)
para_cph.f:c transform selected density bl(lselect) dens(ij) into dscreen(ics,jcs)
para_cph_xyz.f:         ij=0
para_cph_xyz.f:            ij=ij+1
para_cph_xyz.f:            ij1=i1*(i1-1)/2 +j1
para_cph_xyz.f:              ij1=j1*(j1-1)/2 +i1
para_cph_xyz.f:            ffx=fock(lrix+ij)+fct*fock(lrix+ij1)*negx(ns)
para_cph_xyz.f:            ffy=fock(lriy+ij)+fct*fock(lriy+ij1)*negy(ns)
para_cph_xyz.f:            ffz=fock(lriz+ij)+fct*fock(lriz+ij1)*negz(ns)
para_cph_xyz.f:            if (ij.gt.ij1) then
para_cph_xyz.f:            fock(lrix+ij)=ffx
para_cph_xyz.f:            fock(lrix+ij1)=fct*ffx*negx(ns)
para_cph_xyz.f:            fock(lriy+ij)=ffy
para_cph_xyz.f:            fock(lriy+ij1)=fct*ffy*negy(ns)
para_cph_xyz.f:            fock(lriz+ij)=ffz
para_cph_xyz.f:            fock(lriz+ij1)=fct*ffz*negz(ns)
para_cph_xyz.f:C  calculate inverse atomic distances, Becke aij parameters
para_cph_xyz.f:       ij=0
para_cph_xyz.f:             ij=ij+1
para_cph_xyz.f:             dx=abs(den1(ij,k))
para_cph_xyz.f:      ij=0
para_cph_xyz.f:            ij=ij+1
para_cph_xyz.f:            dx=max( abs(den1a(ij,k)),abs(den1b(ij,k))) 
para_cph_xyz.f:          denomij=max(abs(prr+fdxyz*prg),abs(dx*pfprod+fpg),
para_cph_xyz.f:          if(denomij.gt.epsi)then
para_cph_xyz.f:             thrshm=thrsh1/denomij
para_cph_xyz.f:              valt=max(Abs(vaij),Abs(V1X),Abs(V1Y),Abs(V1Z))
para_cph_xyz.f:              if(svmax*abs(vij)+swmax*(abs(vijx)+abs(vijy)+
para_cph_xyz.f:     $            abs(vijz)).lt.thrsh)  GO TO 80
para_pvm.f:      subroutine afwritebin(ndisk,lbin,ibin4,ibin1,indxbin,irecord,ij,
para_pvm.f:      subroutine afwritebingr(ndisk,lbin,ibin4,ibin1,indxbin,irecord,ij,
para_single.f:      subroutine afwritebin(ndisk,lbin,ibin4,ibin1,indxbin,irecord,ij,
para_single.f:      subroutine afwritebingr(ndisk,lbin,ibin4,ibin1,indxbin,irecord,ij,
polar1.f:c calculate dipole integrals i.e. Hij=(i|x|j) for x=x,y,z
polar1.f:c S1ij=(i1|j) + (i|j1) and T1ij=(i1|T|j)+(i|T|j1)
polar1.f:c V1ij=(i1|V|j)+(i|V|j1)
polariz.f:c  Hij =  (ix|h0|j) + (i|x|j) + (i|h0|jx)
polariz.f:c we need also (ix|h0|j)+(i|h0|jx) and S1ij=(i1|j)+(i|j1)
polariz.f:c                          4*nbls*lnijkl*ngcd if ngcd>1 (transpose)
polariz.f:c what we have now is 2*d2E/dFidFj , polij=-2*d2E/dFidFj
precalc.f:      subroutine prec2ij(ibl, bl,inx,npar,nbl2, iis,jjs,ijbl)
precalc.f:      common /primij/ iabprim, ijdim ,ijpar1
precalc.f:      dimension inx(12,*),iis(*),jjs(*), ijbl(nbl2,*), npar(*)
precalc.f:      nparij=npar(ibl)
precalc.f:      call dimenij(ibl,inx,nparij,nbl2, iis,jjs,ijbl,ijdim,ijcont)
precalc.f:      ijpar1=nparij
precalc.f:         call getmem(3*ijdim,iabprim)
precalc.f:         call ab_prim_1(ibl,nparij,ijbl,nbl2,
precalc.f:     *                  bl(iabprim),ijcont)
precalc.f:         call getmem(2*ijcont+ijdim,iabprim)
precalc.f:         i1apb=iabprim+ijcont
precalc.f:         isab =iabprim+ijcont*2
precalc.f:         call ab_prim_2(ibl,nparij,ijbl,nbl2,
precalc.f:     *                  bl(iapb),bl(i1apb),bl(isab),ijcont)
precalc.f:      subroutine prec2kl(ibl, bl,inx,npar,nbl2, iis,jjs,ijbl)
precalc.f:      dimension inx(12,*),iis(*),jjs(*), ijbl(nbl2,*), npar(*)
precalc.f:      call dimenij(ibl,inx,nparkl,nbl2, iis,jjs,ijbl,kldim,klcont)
precalc.f:         call ab_prim_1(ibl,nparkl,ijbl,nbl2,
precalc.f:         call ab_prim_2(ibl,nparkl,ijbl,nbl2,
precalc.f:      subroutine dimenij(ibl,inx,nparij,nbl2, iis,jjs,ijbl,ijdim,ijcont)
precalc.f:      dimension inx(12,*),iis(*),jjs(*), ijbl(nbl2,*)
precalc.f:      ijcs1=ijbl(ibl,1)
precalc.f:      ics1=iis(ijcs1)
precalc.f:      jcs1=jjs(ijcs1)
precalc.f:      ijcont=icont*jcont
precalc.f:      ijdim=nparij*ijcont
precalc.f:      subroutine indexp(npij,npkl,npklx,nijbeg,nijend, nklbeg,nklend,
precalc.f:     *                  indxij,indxkl,ipres,indxp,indxr,nblsp)
precalc.f:      dimension indxij(*),indxkl(*),ipres(*),indxp(*),indxr(*)
precalc.f:c            ijklp and ijpar=1,..., and klpar=1,...
precalc.f:      ijklp=0
precalc.f:      ijkl=0
precalc.f:      ijpar=0
precalc.f:      do ijp=nijbeg,nijend
precalc.f:         ijpar=ijpar+1
precalc.f:         if(npklx.eq.0) nklendx=ijp
precalc.f:            ijkl=ijkl+1
precalc.f:            indxr(ijkl )=0
precalc.f:            if(ipres(ijkl).ne.0) then
precalc.f:               ijklp=ijklp+1
precalc.f:               indxij(ijklp)=ijpar
precalc.f:               indxkl(ijklp)=klpar
precalc.f:                indxp(ijklp)=ijkl
precalc.f:                indxr(ijkl )=ijklp
precalc.f:      nblsp=ijklp
precalc.f:c         write(8,88) (indxij(ii),ii=1,nblsp)
precalc.f:c 88      format('from index4 ;indxij,kl=',5i3)
precalc.f:      subroutine specasg(bl,first,nbls,nbls1, index,indxij,indxkl,
precalc.f:     *                   ngcd,indgc,gcoef,ijkln)
precalc.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,mmax,
precalc.f:     * nqi,nqj,nqk,nql,nsij,nskl,
precalc.f:     * nqij,nqij1,nsij1,nqkl,nqkl1,nskl1,ijbeg,klbeg
precalc.f:      dimension index(*),indxij(*),indxkl(*)
precalc.f:      dimension buf(ngcd,nbls,ijkln),buf1(nbls1,*)
precalc.f:c  buf(ngcd,nbls,ijkln) - contains final integrals
precalc.f:           do 204 icx=1,lnijkl
precalc.f:             ijkl=index(i)
precalc.f:ckw          ngcq=indgc(ijkl)
precalc.f:             buf(iqu,ijkl,icx)=xint*gcoef(iqu,ijkl)
precalc.f:           do 205 icx=1,lnijkl
precalc.f:             ijkl=index(i)
precalc.f:ckw          ngcq=indgc(ijkl)
precalc.f:             buf(iqu,ijkl,icx)=buf(iqu,ijkl,icx)+xint*gcoef(iqu,ijkl)
precalc.f:c1999 subroutine reuseij(ibl,nbls,mmax,nblok1,reuse)
precalc.f:      subroutine reuseij(ibl,mmax,ijcurr_f,ijcurr_l,reuse)
precalc.f:      common /ijcsfl/ ijblokp,ijprevf,ijprevl,ijtprev,maxprev,ngcprev
precalc.f:c keep it in common /ijcsfl/ and use it
precalc.f:c1999 ijcurrf=nblok1(1,1)
precalc.f:c1999 ijcurrl=nblok1(1,nbls)
precalc.f:      ijcurrf=ijcurr_f
precalc.f:      ijcurrl=ijcurr_l
precalc.f:      ijtcurr=0
precalc.f:        if(itype1.gt.1 .or. jtype1.gt.1) ijtcurr=2
precalc.f:      if(ibl.ne.ijblokp) go to 1000
precalc.f:        if(ijcurrf.eq.ijprevf .and. ijcurrl.eq.ijprevl) cond1=.true.
precalc.f:c ijtprev and ijtcurr may have value of 0 or 2. They are needed only
precalc.f:          if(ijtprev.eq.2 .and. ijtcurr.ne.2) then
precalc.f:c keep it in common /ijcsfl/ and use it in precalc...
precalc.f:      ijblokp=ibl
precalc.f:      ijprevf=ijcurrf
precalc.f:      ijprevl=ijcurrl
precalc.f:      ijtprev=ijtcurr
precalc.f:     * ixab,ixp,ixpn,ixpp,iabnia,iapb,i1apb,ifij,icij,isab,
precalc.f:     *                 icfg,jcfg,kcfg,lcfg, igcij,igckl
precalc.f:      ickl=icij
precalc.f:      ifkl=ifij
precalc.f:        igckl=igcij
precalc.f:      subroutine ab_prim_1(ibl,nparij,ijbl,nbl2,
precalc.f:     *                   abprim,ijcont)
precalc.f:      dimension abprim(nparij,ijcont,3)
precalc.f:      dimension inx(12,*),iis(*),jjs(*),ijbl(nbl2,*)
precalc.f:      do 100 ijpar=1,nparij
precalc.f:      ijcs=ijbl(ibl,ijpar)
precalc.f:      ics=iis(ijcs)
precalc.f:      jcs=jjs(ijcs)
precalc.f:        ij=0
precalc.f:             ij=ij+1
precalc.f:             abprim(ijpar,ij,1)=apb
precalc.f:             abprim(ijpar,ij,2)=apb1
precalc.f:c98          abprim(ijpar,ij,3)=apb1*sqrt(sqrt(axb))**3*exp(-e*rr)
precalc.f:             abprim(ijpar,ij,3)=apb1*sqrt(sqrt(axb))**3*exp_err
precalc.f:     *                       inx,iis,jjs,ijbl,nblok1,
precalc.f:     *                       ibl,nijbeg,nijend,npij,
precalc.f:      common /begin/ ijbegin,klbegin
precalc.f:      common /primij/ iabprim, ijdim ,ijpar1
precalc.f:      common /contr/ ngci,ngcj,ngck,ngcl,lci,lcj,lck,lcl,lcij,lckl
precalc.f:     * ixab,ixp,ixpn,ixpp,iabnia,iapb,i1apb,ifij,icij,isab,
precalc.f:     *                 icfg,jcfg,kcfg,lcfg, igcij,igckl
precalc.f:      dimension bl(*), inx(12,*),iis(*),jjs(*), ijbl(nbl2,*)
precalc.f:      ijcurr_f=ijbl(ibl,nijbeg)
precalc.f:      ijcurr_l=ijbl(ibl,nijend)
precalc.f:      call reuseij(ibl,mmax,ijcurr_f,ijcurr_l,reuse)
precalc.f:      ijbegin=nijbeg
precalc.f:c precalculations for pairs ij
precalc.f:      call precal2x_1(iabprim,ijdim,iapb,i1apb,isab)
precalc.f:          call precal2a_1(bl(ibas),bl(inuc),iis,jjs,inx, npij,
precalc.f:     *                  ibl,ijbl,nbl2,nijbeg,nijend,
precalc.f:     *                  bl(iabprim      ),ijpar1 ,
precalc.f:     *                  lcij,bl(iaa),bl(ibb),bl(ieab),bl(icis),bl(icjs),
precalc.f:     *                  bl(ixab),bl(ixp),bl(icij),bl(ifij), bl(itxab),
precalc.f:             call precal2b_1(mmax1,lcij,npij, bl(i1apb),
precalc.f:     *                       ijpar1,ijbegin, bl(iabnia))
precalc.f:          kldim  =ijdim
precalc.f:          klpar1 =ijpar1
precalc.f:     *                  kbl,ijbl,nbl2,nklbeg,nklend,
precalc.f:      subroutine precal2a_1(datbas,datnuc,iis,jjs,inx,npij,
precalc.f:     * ibl,ijbl,nbl2,nijbeg,nijend,
precalc.f:     * abprim,ijpar1,lcij, aaa,bbb,estab,cis,cjs,
precalc.f:     * xab,xparij,coefij,factij,txab, gci,gcj,ngci1,ngcj1,which,par268)
precalc.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,MMAX,
precalc.f:     * NQIJ,NQIJ1,NSIJ1,NQKL,NQKL1,NSKL1,ijbeg,klbeg
precalc.f:      dimension abprim(ijpar1,lcij,3)
precalc.f:      dimension inx(12,*),iis(*),jjs(*),ijbl(nbl2,*)
precalc.f:      dimension aaa(npij,*),bbb(npij,*), cis(npij,*),cjs(npij,*)
precalc.f:      dimension xab(npij,3), xparij(npij,3,lcij,3)
precalc.f:      dimension estab(npij,lcij)
precalc.f:      dimension coefij(npij,lcij), factij(npij,lcij)
precalc.f:      dimension xa(3),xb(3),txab(npij,3,*)
precalc.f:      dimension gci(npij,ngci1,*),gcj(npij,ngcj1,*)
precalc.f:c98   contrij=dble(lcii*lcjj)
precalc.f:c98   contrij=sqrt(contrij)
precalc.f:      ijpar=0
precalc.f:      do 100 ijp=nijbeg,nijend
precalc.f:      ijpar=ijpar+1
precalc.f:        ijcs=ijbl(ibl,ijp)
precalc.f:        ics=iis(ijcs)
precalc.f:        jcs=jjs(ijcs)
precalc.f:          xab(ijpar,i)=xa(i)-xb(i)
precalc.f:            aaa(ijpar,is1)=aa
precalc.f:                  cis(ijpar,is1)=csi
precalc.f:                  gci(ijpar,ig+1,is1)=datbas(ig+2,is)
precalc.f:            bbb(ijpar,js1)=bb
precalc.f:                  coefij(ijpar,ji )=coefi*coefj
precalc.f:                  estab(ijpar,ji)=est_i*est_j
precalc.f:cvc?????          estab(ijpar,ji)=est_i*coefj
precalc.f:                       factij(ijpar,ji  )=facti*factj
precalc.f:                     cjs(ijpar,js1)=csj
precalc.f:                  coefij(ijpar,ji )=fact1
precalc.f:                  estab(ijpar,ji)=coefij(ijpar,ji)
precalc.f:                  if(which.eq.'right') coefij(ijpar,ji)=fact1*par268
precalc.f:                  gcj(ijpar,jg+1,js1)=datbas(jg+2,js)
precalc.f:c              factab=abs(estab(ijpar,ji))
precalc.f:            rapb=abprim(ijp,ji,2)
precalc.f:            sab =abprim(ijp,ji,3)
precalc.f:            aa1=aa*abprim(ijp,ji,2)
precalc.f:            bb1=bb*abprim(ijp,ji,2)
precalc.f:            coefij(ijpar,ji)=coefij(ijpar,ji)     *sab
precalc.f:            estab(ijpar,ji)=estab(ijpar,ji)*sab
precalc.f:            xparij(ijpar,l,ji,1)=aa1*xa(l) + bb1*xb(l)  ! xp(ijpar,l,ji
precalc.f:            xparij(ijpar,l,ji,2)=xparij(ijpar,l,ji,1)-xxl  ! xpn
precalc.f:            xparij(ijpar,l,ji,3)=aa*xa(l)+bb*xb(l)         ! xpp
precalc.f:            xpn_abs=abs( xparij(ijpar,l,ji,2) )
precalc.f:               xparij(ijpar,l,ji,2)=zero
precalc.f:            estab(ijpar,ji)=estab(ijpar,ji)*xpn_max
precalc.f:            estab(ijpar,ji)=estab(ijpar,ji)*estab(ijpar,ji)
precalc.f:c        do ijprim=1,lcii*lcjj
precalc.f:c           estab(ijpar,ijprim)=estab(ijpar,ijprim)*factab_norm
precalc.f:         ijs1=0
precalc.f:         ijs1=ijs1+1
precalc.f:         do 151 ijpar=1,npij
precalc.f:            txab(ijpar,1,ijs1)=-bbb(ijpar,js1)*xab(ijpar,1)
precalc.f:            txab(ijpar,2,ijs1)=-bbb(ijpar,js1)*xab(ijpar,2)
precalc.f:            txab(ijpar,3,ijs1)=-bbb(ijpar,js1)*xab(ijpar,3)
precalc.f:            aa=aaa(ijpar,is1)
precalc.f:               txab(ijpar,1,ijs1)=zero
precalc.f:               txab(ijpar,2,ijs1)=zero
precalc.f:               txab(ijpar,3,ijs1)=zero
precalc.f:         ijs1=0
precalc.f:         ijs1=ijs1+1
precalc.f:         do 152 ijpar=1,npij
precalc.f:            txab(ijpar,1,ijs1)= aaa(ijpar,is1)*xab(ijpar,1)
precalc.f:            txab(ijpar,2,ijs1)= aaa(ijpar,is1)*xab(ijpar,2)
precalc.f:            txab(ijpar,3,ijs1)= aaa(ijpar,is1)*xab(ijpar,3)
precalc.f:            bb=bbb(ijpar,js1)
precalc.f:               txab(ijpar,1,ijs1)=zero
precalc.f:               txab(ijpar,2,ijs1)=zero
precalc.f:               txab(ijpar,3,ijs1)=zero
precalc.f:           do 153 ijs1=1,lcij
precalc.f:           do 153 ijpar=1,npij
precalc.f:            rapb1=abprim(nijbeg-1+ijpar,ijs1,2)
precalc.f:            txab(ijpar,1,ijs1)=txab(ijpar,1,ijs1)*rapb1
precalc.f:            txab(ijpar,2,ijs1)=txab(ijpar,2,ijs1)*rapb1
precalc.f:            txab(ijpar,3,ijs1)=txab(ijpar,3,ijs1)*rapb1
precalc.f:      subroutine precal2b_1(mmax1,lcij,npij, rapb,ijpar1,ijbegin, abnia)
precalc.f:c  RAPB(ij,lcij) - 1/(a+b) : reversed sum of exponents of each
precalc.f:c  For each pair of primitive shells ij (kl) from IJ (KL) contracted
precalc.f:c  1. ABNIA(IJ,L,ij) -   L*( 0.5/(a+b) )  with L=1,2,...MMAX-1
precalc.f:c---> dimension rapb(npij,*), abnia(npij,mmax1,*)
precalc.f:      dimension rapb(ijpar1,*), abnia(npij,mmax1,*)
precalc.f:      ijstart=ijbegin-1
precalc.f:      do 150 ij=1,lcij
precalc.f:         do 200 ijpar=1,npij
precalc.f:            apb2=half*rapb(ijstart+ijpar,ij)
precalc.f:            abnia(ijpar,1,ij)=apb2
precalc.f:               abnia(ijpar,i,ij)=abnia(ijpar,i-1,ij)+apb2
precalc.f:      common /begin/ ijbegin,klbegin
precalc.f:      subroutine prec4neg_1(nbls,npij,npkl,ndiag,ij,kl,
precalc.f:     1     ijpar1,lc12, klpar1,lc34,indxij,indxkl,
precalc.f:     *     apb,cpd,coefij,coefkl,xp,xq, nsym,isymm,
precalc.f:      common /begin/ ijbegin,klbegin
precalc.f:      dimension indxij(*),indxkl(*),index(*)
precalc.f:      dimension apb(ijpar1,lc12),cpd(klpar1,lc34)
precalc.f:      dimension coefij(npij,lc12),coefkl(npkl,lc34)
precalc.f:      dimension  estab(npij,lc12), estcd(npkl,lc34)
precalc.f:      dimension xp(npij,3,*),xq(npkl,3,*)
precalc.f:      ijstart=ijbegin-1
precalc.f:      ijkl=0
precalc.f:      ijkl1=0
precalc.f:      ijklp=0
precalc.f:      do 100 ijpar=1,npij
precalc.f:         coef1=coefij(ijpar,ij)
precalc.f:            npx=ijpar
precalc.f:            if(jump(ijpar)) then
precalc.f:               ijkl=ijkl+npx
precalc.f:         apb1=apb(ijstart+ijpar,ij)
precalc.f:         esti1=estab (ijpar,ij)
precalc.f:         xp1= xp(ijpar,1,ij)
precalc.f:         xp2= xp(ijpar,2,ij)
precalc.f:         xp3= xp(ijpar,3,ij)
precalc.f:      ijkl=ijkl+1
precalc.f:      ijklsm=isymm(ijkl)
precalc.f:      if(ijklsm.eq.0) go to 150
precalc.f:ckw99    if(nsym.gt.0)  symfac=rnsym*dble(ijklsm)
precalc.f:         ijklp=ijklp+1
precalc.f:         estim=estim*densmax(ijkl)
precalc.f:            ijkl1=ijkl1+1
precalc.f:c------->   index(ijkl1)=ijkl
precalc.f:            index(ijkl1)=ijklp
precalc.f:            rppq(ijkl1)=abpcdr
precalc.f:            rhoapb(ijkl1)=abpcdr*cpd1
precalc.f:            rhocpd(ijkl1)=abpcdr*apb1
precalc.f:            rys(ijkl1)=rr2*rho1
precalc.f:            const(ijkl1)=coef12*sqrpold
precalc.f:            if(ndiag.eq.0.and.ijpar.eq.klpar) then
precalc.f:               const(ijkl1)=const(ijkl1)*permut
precalc.f:ckw99       if(nsym.gt.0) const(ijkl1)=const(ijkl1)*symfac
precalc.f:            if(nsym.gt.0) const(ijkl1)=const(ijkl1)*symfac(ijkl)
precalc.f:      nbls1=ijkl1
precalc.f:      subroutine precspec_1(nbls,npij,npkl,ndiag, ij,kl,
precalc.f:     1     ijpar1,lc12, klpar1,lc34, indxij,indxkl,
precalc.f:     *     apb,cpd,coefij,coefkl,xp,xq, rapb,rcpd,txab,txcd,
precalc.f:      common /begin/ ijbegin,klbegin
precalc.f:      dimension indxij(*),indxkl(*),index(*)
precalc.f:      dimension apb(ijpar1,lc12),cpd(klpar1,lc34)
precalc.f:      dimension rapb(ijpar1,*),rcpd(klpar1,*)
precalc.f:      dimension coefij(npij,lc12),coefkl(npkl,lc34)
precalc.f:      dimension  estab(npij,lc12), estcd(npkl,lc34)
precalc.f:      dimension txab(npij,3,*),txcd(npkl,3,*)
precalc.f:      dimension xp(npij,3,*),xq(npkl,3,*)
precalc.f:      ijstart=ijbegin-1
precalc.f:      ijkl=0
precalc.f:      ijkl1=0
precalc.f:      ijklp=0
precalc.f:      do 100 ijpar=1,npij
precalc.f:         coef1=coefij(ijpar,ij)
precalc.f:            npx=ijpar
precalc.f:            if(jump(ijpar)) then
precalc.f:               ijkl=ijkl+npx
precalc.f:         apb1=apb(ijstart+ijpar,ij)
precalc.f:         esti1=estab (ijpar,ij)
precalc.f:         xp1= xp(ijpar,1,ij)
precalc.f:         xp2= xp(ijpar,2,ij)
precalc.f:         xp3= xp(ijpar,3,ij)
precalc.f:      ijkl=ijkl+1
precalc.f:      ijklsm=isymm(ijkl)
precalc.f:      if(ijklsm.eq.0) go to 150
precalc.f:ckw99    if(nsym.gt.0) symfac=rnsym*dble(ijklsm)
precalc.f:         ijklp=ijklp+1
precalc.f:         estim=estim*densmax(ijkl)
precalc.f:c 66  format(' estij=',e15.5,' estkl=',e15.5,' estim=',e15.5)
precalc.f:            ijkl1=ijkl1+1
precalc.f:c---->      index(ijkl1)=ijkl
precalc.f:            index(ijkl1)=ijklp
precalc.f:            xpqr(1,ijkl1)=x1*rho1
precalc.f:            xpqr(2,ijkl1)=x2*rho1
precalc.f:            xpqr(3,ijkl1)=x3*rho1
precalc.f:            rys(ijkl1)=rr2*rho1
precalc.f:            const(ijkl1)=coef12*sqrpold
precalc.f:            if(ndiag.eq.0.and.ijpar.eq.klpar) then
precalc.f:               const(ijkl1)=const(ijkl1)*permut
precalc.f:ckw99       if(nsym.gt.0) const(ijkl1)=const(ijkl1)*symfac
precalc.f:            if(nsym.gt.0) const(ijkl1)=const(ijkl1)*symfac(ijkl)
precalc.f:      nbls1=ijkl1
precalc.f:        ijkl=index(i)
precalc.f:        ijpar=indxij(ijkl)
precalc.f:        xpqr(1,i)=xpqr(1,i)*rapb(ijstart+ijpar,ij)
precalc.f:        xpqr(2,i)=xpqr(2,i)*rapb(ijstart+ijpar,ij)
precalc.f:        xpqr(3,i)=xpqr(3,i)*rapb(ijstart+ijpar,ij)
precalc.f:        txxr(1,i)=txab(ijpar,1,ij)
precalc.f:        txxr(2,i)=txab(ijpar,2,ij)
precalc.f:        txxr(3,i)=txab(ijpar,3,ij)
precalc.f:        ijkl=index(i)
precalc.f:        klpar=indxkl(ijkl)
precalc.f:      subroutine xwpq_1(nbls1,xwp,xwq,p1234, ijpar1,lc12, klpar1,lc34,
precalc.f:     *                  lcij,lckl,npij,npkl, indxij,indxkl,index,
precalc.f:c  For two primitive pairs lcij and lckl which contribute
precalc.f:c  lcij, lckl - pairs of primitive shells
precalc.f:c  INDEX(ijkl1) - for ijkl1 quartet in Reduced block shows
precalc.f:c                 the ijkl  quartet in Original block
precalc.f:c  INDXIJ(ijkl) - shows the contracted pair IJPAR for ijkl quartet
precalc.f:c  INDXKL(ijkl) - shows the contracted pair KLPAR for ijkl quartet
precalc.f:c  RPPQ(ijkl1)  = 1/(a+b+c+d)         where a,b,c,d, are exponents
precalc.f:c  XP(ijpar,3,lcij) - coordinates of P
precalc.f:c  XPP(ijpar,3,lcij)- coordinates of ( a*A + b*B)
precalc.f:c  TXAB(ijpar,3,  )  - coordinates XAB re-scaled by exponents a or b
precalc.f:c  APB(ijpar,lcij) =a+b
precalc.f:c  RAPB(ijpar,lcij)=1/(a+b)
precalc.f:c  XWP(ijkl1) - coordinates of W-P,  where W=(XPP+XQQ)/(a+b+c+d)
precalc.f:c  XWQ(ijkl1) - coordinates of W-Q
precalc.f:c  P1234(ijkl1)=(txab+txcd)*(rcpd OR rapb)
precalc.f:c  ABCD(ijkl1)= apb*rcpd   OR  cpd*rapb
precalc.f:      common /begin/ ijbegin,klbegin
precalc.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,mmax,
precalc.f:     * nqi,nqj,nqk,nql,nsij,nskl,
precalc.f:     * nqij,nqij1,nsij1,nqkl,nqkl1,nskl1,ijbeg,klbeg
precalc.f:      dimension indxij(*),indxkl(*),index(*)
precalc.f:      dimension xp(npij,3,*),xq(npkl,3,*)
precalc.f:      dimension xpp(npij,3,*),xqq(npkl,3,*)
precalc.f:      dimension txab(npij,3,*),txcd(npkl,3,*)
precalc.f:cnowy dimension apb(npij,*),rapb(npij,*),cpd(npkl,*),rcpd(npkl,*)
precalc.f:      dimension apb(ijpar1,*),rapb(ijpar1,*)
precalc.f:      ijstart=ijbegin-1
precalc.f:         ijkl=index(i)
precalc.f:         ijpar=indxij(ijkl)
precalc.f:         klpar=indxkl(ijkl)
precalc.f:         xwl=( xpp(ijpar,1,lcij) + xqq(klpar,1,lckl) )*rppq1
precalc.f:         ywl=( xpp(ijpar,2,lcij) + xqq(klpar,2,lckl) )*rppq1
precalc.f:         zwl=( xpp(ijpar,3,lcij) + xqq(klpar,3,lckl) )*rppq1
precalc.f:         xwp(i,1)=xwl-xp(ijpar,1,lcij)
precalc.f:         xwp(i,2)=ywl-xp(ijpar,2,lcij)
precalc.f:         xwp(i,3)=zwl-xp(ijpar,3,lcij)
precalc.f:c        for tracij_1, & trackl_1
precalc.f:         abcd(i)=apb(ijstart+ijpar,lcij)*rcpd1
precalc.f:         p1234(i,1)=(txab(ijpar,1,lcij)+txcd(klpar,1,lckl))*rcpd1
precalc.f:         p1234(i,2)=(txab(ijpar,2,lcij)+txcd(klpar,2,lckl))*rcpd1
precalc.f:         p1234(i,3)=(txab(ijpar,3,lcij)+txcd(klpar,3,lckl))*rcpd1
precalc.f:c for shifting from 1 to 3    abcd=(a+b)/(c+d)     tracij_1 & _2
precalc.f:c     if( nsij.ge.nskl) then shift from 1 to 3
precalc.f:c     if( nsij.lt.nskl) then shift from 3 to 1
precalc.f:      if( nsij.lt.nskl ) then
precalc.f:            ijkl=index(i)
precalc.f:            ijpar=indxij(ijkl)
precalc.f:            klpar=indxkl(ijkl)
precalc.f:            abcd(i)=rapb(ijstart+ijpar,lcij)*cpd(klstart+klpar,lckl)
precalc.f:      subroutine specase_1(bl,first,nbls,nbls1, index,indxij,indxkl,
precalc.f:     *                   npij,npkl,ii,jj,kk,ll,
precalc.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,mmax,
precalc.f:     * nqi,nqj,nqk,nql,nsij,nskl,
precalc.f:     * nqij,nqij1,nsij1,nqkl,nqkl1,nskl1,ijbeg,klbeg
precalc.f:      dimension index(*),indxij(*),indxkl(*)
precalc.f:      dimension cis(npij,*),cjs(npij,*),cks(npkl,*),cls(npkl,*)
precalc.f:            ijkl=index(i)
precalc.f:            ijpar=indxij(ijkl)
precalc.f:            concoe(i)=const(i)*cis(ijpar,ii)
precalc.f:            ijkl=index(i)
precalc.f:            ijpar=indxij(ijkl)
precalc.f:            concoe(i)=const(i)*cjs(ijpar,jj)
precalc.f:            ijkl=index(i)
precalc.f:            klpar=indxkl(ijkl)
precalc.f:            ijkl=index(i)
precalc.f:            klpar=indxkl(ijkl)
precalc.f:         do 204 icx=1,lnijkl
precalc.f:         ijkl=index(i)
precalc.f:         buf(ijkl,icx)=buf1(i,icx)
precalc.f:         do 205 icx=1,lnijkl
precalc.f:         ijkl=index(i)
precalc.f:         buf(ijkl,icx)=buf(ijkl,icx)+buf1(i,icx)
precalc.f:      subroutine precal2x_1(iabprim,ijdim,iapb,i1apb,isab)
precalc.f:      i1apb=iabprim   + ijdim
precalc.f:      isab =iabprim   + ijdim*2
precalc.f:      subroutine ab_prim_2(ibl,nparij,ijbl,nbl2,
precalc.f:     *                     apb,rapb,sab,ijcont)
precalc.f:      dimension apb(ijcont),rapb(ijcont),sab(nparij,ijcont)
precalc.f:      dimension inx(12,*),iis(*),jjs(*),ijbl(nbl2,*)
precalc.f:      ijcs1=ijbl(ibl,  1  )
precalc.f:      ics1=iis(ijcs1)
precalc.f:      jcs1=jjs(ijcs1)
precalc.f:      ij=0
precalc.f:            ij=ij+1
precalc.f:            apb(ij)=aa+bb
precalc.f:            rapb(ij)=one/apb(ij)
precalc.f:            e=axb*rapb(ij)
precalc.f:            eexx(ij)=e
precalc.f:            sqrtx(ij)=rapb(ij)*sqrt(sqrt(axb))**3
precalc.f:      do 100 ijpar=1,nparij
precalc.f:      ijcs=ijbl(ibl,ijpar)
precalc.f:      ics=iis(ijcs)
precalc.f:      jcs=jjs(ijcs)
precalc.f:           ij=0
precalc.f:             ij=ij+1
precalc.f:             e=eexx(ij)
precalc.f:c......         sab(ijpar,ij)=rapb(ij)*sqrt3*exp_err
precalc.f:                sab(ijpar,ij)=0.d0
precalc.f:c.............  sab(ijpar,ij)=rapb(ij)*sqrt3*exp_err
precalc.f:                sqrt3=sqrtx(ij)    ! already multiplied by rapb(ij)
precalc.f:                sab(ijpar,ij)=         sqrt3*exp_err
precalc.f:     *                       inx,iis,jjs,ijbl,nblok1,
precalc.f:     *                       ibl,nijbeg,nijend,npij,
precalc.f:      common /begin/ ijbegin,klbegin
precalc.f:      common /primij/ iabprim, ijdim ,ijpar1
precalc.f:      common /contr/ ngci,ngcj,ngck,ngcl,lci,lcj,lck,lcl,lcij,lckl
precalc.f:     * ixab,ixp,ixpn,ixpp,iabnia,iapb,i1apb,ifij,icij,isab,
precalc.f:     *                 icfg,jcfg,kcfg,lcfg, igcij,igckl
precalc.f:      dimension bl(*), inx(12,*),iis(*),jjs(*), ijbl(nbl2,*)
precalc.f:      ijcurr_f=ijbl(ibl,nijbeg)
precalc.f:      ijcurr_l=ijbl(ibl,nijend)
precalc.f:      call reuseij(ibl,mmax,ijcurr_f,ijcurr_l,reuse)
precalc.f:      ijbegin=nijbeg
precalc.f:c precalculations for pairs ij
precalc.f:      call precal2x_2(iabprim,lcij,iapb,i1apb,isab)
precalc.f:          call precal2a_2(bl(ibas),bl(inuc),iis,jjs,inx, npij,
precalc.f:     *                  ibl,ijbl,nbl2,nijbeg,nijend,
precalc.f:     *                  bl(iabprim+lcij),bl(iabprim+2*lcij),ijpar1,
precalc.f:     *                  lcij,
precalc.f:     *                  bl(ixab),bl(ixp),bl(icij),bl(ifij), bl(itxab),
precalc.f:     *                  bl(igcij),ngci1,ngcj1,'left ',par268)
precalc.f:             call precal2b_2(mmax1,lcij, bl(i1apb),bl(iabnia))
precalc.f:          kldim  =ijdim
precalc.f:          klpar1 =ijpar1
precalc.f:          lckl=lcij
precalc.f:     *                  kbl,ijbl,nbl2,nklbeg,nklend,
precalc.f:c  RAPB(ij,lcij) - 1/(a+b) : reversed sum of exponents of each
precalc.f:c  For each pair of primitive shells ij (kl) from IJ (KL) contracted
precalc.f:c  1. ABNIA(IJ,L,ij) -   L*( 0.5/(a+b) )  with L=1,2,...MMAX-1
precalc.f:      subroutine precal2b_2(mmax1,lcij, rapb, abnia)
precalc.f:cccc  dimension rapb(ijpar1,*), abnia(npij,mmax1,*)
precalc.f:c     ijstart=ijbegin-1
precalc.f:      do 150 ij=1,lcij
precalc.f:            apb2=half*rapb(ij)
precalc.f:            abnia(1,ij)=apb2
precalc.f:               abnia(i,ij)=abnia(i-1,ij)+apb2
precalc.f:      subroutine prec4neg_2(nbls,npij,npkl,ndiag,ij,kl,
precalc.f:     1     lc12,lc34,indxij,indxkl,indxr,
precalc.f:     *     apb,cpd,coefij,coefkl,xp,xq, nsym,isymm,
precalc.f:      dimension indxij(*),indxkl(*),indxr(*),index(*)
precalc.f:ccccc dimension apb(ijpar1,lc12),cpd(klpar1,lc34)
precalc.f:      dimension coefij(npij,lc12),coefkl(npkl,lc34)
precalc.f:      dimension  estab(npij,lc12), estcd(npkl,lc34)
precalc.f:      dimension xp(npij,3,*),xq(npkl,3,*)
precalc.f:      apb1=apb(ij)
precalc.f:      ijkl=0
precalc.f:      ijkl1=0
precalc.f:         do 100 ijpar=1,npij
precalc.f:            if(ndiag.eq.0) npklx=ijpar
precalc.f:            esti1=estab(ijpar,ij)*abpcdr
precalc.f:               ijkl=ijkl+npklx
precalc.f:            coef1=coefij(ijpar,ij)*sqrpold
precalc.f:            xp1= xp(ijpar,1,ij)
precalc.f:            xp2= xp(ijpar,2,ij)
precalc.f:            xp3= xp(ijpar,3,ij)
precalc.f:               ijkl=ijkl+1
precalc.f:               ijklsm=isymm(ijkl)
precalc.f:               if(ijklsm.eq.0) go to 50
precalc.f:               estim=esti1*estcd(klpar,kl)*densmax(ijkl)
precalc.f:                  ijkl1=ijkl1+1
precalc.f:                  index(ijkl1)=indxr(ijkl)
precalc.f:                  rys(ijkl1)=rr2*rho1
precalc.f:                  const(ijkl1)=coef1*coefkl(klpar,kl)
precalc.f:                  if(ndiag.eq.0.and.ijpar.eq.klpar) then
precalc.f:                     const(ijkl1)=const(ijkl1)*permut
precalc.f:         do 200 ijpar=1,npij
precalc.f:            if(ndiag.eq.0) npklx=ijpar
precalc.f:               if(jump(ijpar)) then
precalc.f:                  ijkl=ijkl+npklx
precalc.f:            esti1=estab(ijpar,ij)*abpcdr
precalc.f:               ijkl=ijkl+npklx
precalc.f:            coef1=coefij(ijpar,ij)*sqrpold
precalc.f:            xp1= xp(ijpar,1,ij)
precalc.f:            xp2= xp(ijpar,2,ij)
precalc.f:            xp3= xp(ijpar,3,ij)
precalc.f:               ijkl=ijkl+1
precalc.f:               ijklsm=isymm(ijkl)
precalc.f:               if(ijklsm.eq.0) go to 150
precalc.f:               estim=esti1*estcd(klpar,kl)*densmax(ijkl)
precalc.f:                  ijkl1=ijkl1+1
precalc.f:                  index(ijkl1)=indxr(ijkl)
precalc.f:                  rys(ijkl1)=rr2*rho1
precalc.f:                  const(ijkl1)=coef1*coefkl(klpar,kl)*symfac(ijkl)
precalc.f:                  if(ndiag.eq.0.and.ijpar.eq.klpar) then
precalc.f:                     const(ijkl1)=const(ijkl1)*permut
precalc.f:      nbls1=ijkl1
precalc.f:     $    nbls,          npij,          npkl,          ndiag,
precalc.f:     $    ij,            kl,            lc12,          lc34,
precalc.f:     $    indxij,        indxkl,        indxr,         estab,
precalc.f:     $    symfac,        apb,           cpd,           coefij,
precalc.f:      dimension indxij(*),indxkl(*),indxr(*),index(*)
precalc.f:      dimension coefij(npij,lc12),coefkl(npkl,lc34)
precalc.f:      dimension  estab(npij,lc12), estcd(npkl,lc34)
precalc.f:      dimension txab(npij,3,*),txcd(npkl,3,*)
precalc.f:      dimension xp(npij,3,*),xq(npkl,3,*)
precalc.f:      apb1=apb(ij)
precalc.f:      if(ityp.gt.1.or.jtyp.gt.1) rho2=rho2*rapb(ij)
precalc.f:      ijkl=0
precalc.f:      ijkl1=0
precalc.f:         do 100 ijpar=1,npij
precalc.f:            if(ndiag.eq.0) npklx=ijpar
precalc.f:            esti1=estab(ijpar,ij)*abpcdr
precalc.f:               ijkl=ijkl+npklx
precalc.f:            coef1=coefij(ijpar,ij)*sqrpold
precalc.f:            xp1= xp(ijpar,1,ij)
precalc.f:            xp2= xp(ijpar,2,ij)
precalc.f:            xp3= xp(ijpar,3,ij)
precalc.f:               ijkl=ijkl+1
precalc.f:               ijklsm=isymm(ijkl)
precalc.f:               if(ijklsm.eq.0) go to 50
precalc.f:               estim=esti1*estcd(klpar,kl)*densmax(ijkl)
precalc.f:                  ijkl1=ijkl1+1
precalc.f:                  index(ijkl1)=indxr(ijkl)
precalc.f:                  xpqr(1,ijkl1)=x1*rho2
precalc.f:                  xpqr(2,ijkl1)=x2*rho2
precalc.f:                  xpqr(3,ijkl1)=x3*rho2
precalc.f:                  rys(ijkl1)=rr2*rho1
precalc.f:                  const(ijkl1)=coef1*coefkl(klpar,kl)
precalc.f:                  if(ndiag.eq.0.and.ijpar.eq.klpar) then
precalc.f:                     const(ijkl1)=const(ijkl1)*permut
precalc.f:         do 200 ijpar=1,npij
precalc.f:            if(ndiag.eq.0) npklx=ijpar
precalc.f:            if(jump(ijpar)) then
precalc.f:               ijkl=ijkl+npklx
precalc.f:            esti1=estab(ijpar,ij)*abpcdr
precalc.f:               ijkl=ijkl+npklx
precalc.f:            coef1=coefij(ijpar,ij)*sqrpold
precalc.f:            xp1= xp(ijpar,1,ij)
precalc.f:            xp2= xp(ijpar,2,ij)
precalc.f:            xp3= xp(ijpar,3,ij)
precalc.f:               ijkl=ijkl+1
precalc.f:               ijklsm=isymm(ijkl)
precalc.f:               if(ijklsm.eq.0) go to 150
precalc.f:               estim=esti1*estcd(klpar,kl)*densmax(ijkl)
precalc.f:                  ijkl1=ijkl1+1
precalc.f:                  index(ijkl1)=indxr(ijkl)
precalc.f:                  xpqr(1,ijkl1)=x1*rho2
precalc.f:                  xpqr(2,ijkl1)=x2*rho2
precalc.f:                  xpqr(3,ijkl1)=x3*rho2
precalc.f:                  rys(ijkl1)=rr2*rho1
precalc.f:                  const(ijkl1)=coef1*coefkl(klpar,kl)*symfac(ijkl)
precalc.f:                  if(ndiag.eq.0.and.ijpar.eq.klpar) then
precalc.f:                     const(ijkl1)=const(ijkl1)*permut
precalc.f:      nbls1=ijkl1
precalc.f:        ijkl=index(i)
precalc.f:        ijpar=indxij(ijkl)
precalc.f:        txxr(1,i)=txab(ijpar,1,ij)
precalc.f:        txxr(2,i)=txab(ijpar,2,ij)
precalc.f:        txxr(3,i)=txab(ijpar,3,ij)
precalc.f:        ijkl=index(i)
precalc.f:        klpar=indxkl(ijkl)
precalc.f:      subroutine xwpq_2(nbls1,xwp,xwq,p1234, ijpar1,lc12, klpar1,lc34,
precalc.f:     *                  lcij,lckl,npij,npkl, indxij,indxkl,index,
precalc.f:c  For two primitive pairs lcij and lckl which contribute
precalc.f:c  lcij, lckl - pairs of primitive shells
precalc.f:c  INDEX(ijkl1) - for ijkl1 quartet in Reduced block shows
precalc.f:c                 the ijkl  quartet in Original block
precalc.f:c  INDXIJ(ijkl) - shows the contracted pair IJPAR for ijkl quartet
precalc.f:c  INDXKL(ijkl) - shows the contracted pair KLPAR for ijkl quartet
precalc.f:c  RPPQ(ijkl1)  = 1/(a+b+c+d)         where a,b,c,d, are exponents
precalc.f:c  XP(ijpar,3,lcij) - coordinates of P
precalc.f:c  XPP(ijpar,3,lcij)- coordinates of ( a*A + b*B)
precalc.f:c  TXAB(ijpar,3,  )  - coordinates XAB re-scaled by exponents a or b
precalc.f:c  APB(ijpar,lcij) =a+b
precalc.f:c  RAPB(ijpar,lcij)=1/(a+b)
precalc.f:c  XWP(ijkl1) - coordinates of W-P,  where W=(XPP+XQQ)/(a+b+c+d)
precalc.f:c  XWQ(ijkl1) - coordinates of W-Q
precalc.f:c  P1234(ijkl1)=(txab+txcd)*rcpd
precalc.f:c  ABCD(ijkl1)= apb*rcpd
precalc.f:c     common /begin/ ijbegin,klbegin
precalc.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,mmax,
precalc.f:     * nqi,nqj,nqk,nql,nsij,nskl,
precalc.f:     * nqij,nqij1,nsij1,nqkl,nqkl1,nskl1,ijbeg,klbeg
precalc.f:      dimension indxij(*),indxkl(*),index(*)
precalc.f:      dimension xp(npij,3,*),xq(npkl,3,*)
precalc.f:      dimension xpp(npij,3,*),xqq(npkl,3,*)
precalc.f:      dimension txab(npij,3,*),txcd(npkl,3,*)
precalc.f:cnowy dimension apb(npij,*),rapb(npij,*),cpd(npkl,*),rcpd(npkl,*)
precalc.f:c     dimension apb(ijpar1,*),rapb(ijpar1,*)
precalc.f:c     ijstart=ijbegin-1
precalc.f:      if( nsij.ge.nskl ) then
precalc.f:         abcd=apb(lcij)*rcpd1
precalc.f:         abcd=rapb(lcij)*cpd(lckl)
precalc.f:         ijkl=index(i)
precalc.f:         ijpar=indxij(ijkl)
precalc.f:         klpar=indxkl(ijkl)
precalc.f:         xwl=( xpp(ijpar,1,lcij) + xqq(klpar,1,lckl) )*rppq1
precalc.f:         ywl=( xpp(ijpar,2,lcij) + xqq(klpar,2,lckl) )*rppq1
precalc.f:         zwl=( xpp(ijpar,3,lcij) + xqq(klpar,3,lckl) )*rppq1
precalc.f:         xwp(i,1)=xwl-xp(ijpar,1,lcij)
precalc.f:         xwp(i,2)=ywl-xp(ijpar,2,lcij)
precalc.f:         xwp(i,3)=zwl-xp(ijpar,3,lcij)
precalc.f:c        for tracij_2 & trackl_2
precalc.f:         p1234(i,1)=(txab(ijpar,1,lcij)+txcd(klpar,1,lckl))*rcpd1
precalc.f:         p1234(i,2)=(txab(ijpar,2,lcij)+txcd(klpar,2,lckl))*rcpd1
precalc.f:         p1234(i,3)=(txab(ijpar,3,lcij)+txcd(klpar,3,lckl))*rcpd1
precalc.f:     *                     npij,npkl,ii,jj,kk,ll,
precalc.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,mmax,
precalc.f:     * nqi,nqj,nqk,nql,nsij,nskl,
precalc.f:     * nqij,nqij1,nsij1,nqkl,nqkl1,nskl1,ijbeg,klbeg
precalc.f:         do 204 icx=1,lnijkl
precalc.f:         ijkl=index(i)
precalc.f:         buf(ijkl,icx)=buf1(i,icx)
precalc.f:         do 205 icx=1,lnijkl
precalc.f:         ijkl=index(i)
precalc.f:         buf(ijkl,icx)=buf(ijkl,icx)+buf1(i,icx)
precalc.f:      subroutine precal2x_2(iabprim,lcij, iapb,i1apb,isab)
precalc.f:c     i1apb=iabprim   + ijdim
precalc.f:c     isab =iabprim   + ijdim*2
precalc.f:      i1apb=iabprim+lcij
precalc.f:      isab =iabprim+2*lcij
precalc.f:      subroutine precal2a_2(datbas,datnuc,iis,jjs,inx,npij,
precalc.f:     *                    ibl,ijbl,nbl2,nijbeg,nijend,
precalc.f:     *                    rapb,sab,ijpar1, lcij,
precalc.f:     *                    xab,xparij,coefij,factij,txab,
precalc.f:     *                    gcij,ngci1,ngcj1,which,par268 )
precalc.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,MMAX,
precalc.f:     * NQIJ,NQIJ1,NSIJ1,NQKL,NQKL1,NSKL1,ijbeg,klbeg
precalc.f:      dimension rapb(lcij),sab(ijpar1,lcij)
precalc.f:      dimension inx(12,*),iis(*),jjs(*),ijbl(nbl2,*)
precalc.f:      dimension xab(npij,3), xparij(npij,3,lcij,3)
precalc.f:      dimension estab (npij,lcij)
precalc.f:      dimension coefij(npij,lcij), factij(lcij)
precalc.f:      dimension xa(3),xb(3),txab(npij,3,*)
precalc.f:      dimension gcij(ngci1,ngcj1,lcij)
precalc.f:      dimension est_ijx(30,30),coef_ijx(30,30)
precalc.f:c98   contrij=dble(lcii*lcjj)
precalc.f:c98   contrij=sqrt(contrij)
precalc.f:      ijp1=nijbeg
precalc.f:      call first_pair(nbl2,ibl,ijbl,inx,ijp1,itypp,jtypp,
precalc.f:     *                est_ijx,coef_ijx,factij,
precalc.f:     *                gcij,ngcii,ngcjj)
precalc.f:      ijpar=0
precalc.f:      do 100 ijp=nijbeg,nijend
precalc.f:      ijpar=ijpar+1
precalc.f:        ijcs=ijbl(ibl,ijp)
precalc.f:        ics=iis(ijcs)
precalc.f:        jcs=jjs(ijcs)
precalc.f:          xab(ijpar,i)=xa(i)-xb(i)
precalc.f:c                 coefij(ijpar,ji)=coef_ijx(is1,js1)*fact1
precalc.f:c                 estab(ijpar,ji)=est_ijx(is1,js1)
precalc.f:c                 coefij(ijpar,ji )=fact1
precalc.f:c                 estab(ijpar,ji)= one      ! should be =fact1
precalc.f:c                 if(which.eq.'right') coefij(ijpar,ji)=fact1*par268
precalc.f:               coefij(ijpar,ji)=coef_ijx(is1,js1)*fact1
precalc.f:               estab(ijpar,ji)=est_ijx(is1,js1)
precalc.f:            sab1 =sab(ijp,ji)
precalc.f:c-overlap   coefij(ijpar,ji)=coefij(ijpar,ji)*rapb1*sab1
precalc.f:            coefij(ijpar,ji)=coefij(ijpar,ji)*sab1
precalc.f:            estab(ijpar,ji)=estab(ijpar,ji)*sab1
precalc.f:               xparij(ijpar,l,ji,1)=aa1*xa(l)+bb1*xb(l) ! xp(ijpar,l,ji
precalc.f:               xparij(ijpar,l,ji,2)=xparij(ijpar,l,ji,1)-xxl  ! xpn
precalc.f:               xparij(ijpar,l,ji,3)=aa*xa(l)+bb*xb(l)         ! xpp
precalc.f:                  xparij(ijpar,l,ji,2)=zero
precalc.f:               xpn_abs=abs( xparij(ijpar,l,ji,2) )
precalc.f:            estab(ijpar,ji)=estab(ijpar,ji)*xpn_max
precalc.f:            estab(ijpar,ji)=estab(ijpar,ji)*estab(ijpar,ji)
precalc.f:         ijs1=0
precalc.f:         ijs1=ijs1+1
precalc.f:         do 151 ijpar=1,npij
precalc.f:            txab(ijpar,1,ijs1)=-bb1*xab(ijpar,1)
precalc.f:            txab(ijpar,2,ijs1)=-bb1*xab(ijpar,2)
precalc.f:            txab(ijpar,3,ijs1)=-bb1*xab(ijpar,3)
precalc.f:               txab(ijpar,1,ijs1)=zero
precalc.f:               txab(ijpar,2,ijs1)=zero
precalc.f:               txab(ijpar,3,ijs1)=zero
precalc.f:         ijs1=0
precalc.f:         ijs1=ijs1+1
precalc.f:         do 152 ijpar=1,npij
precalc.f:            txab(ijpar,1,ijs1)= aa1*xab(ijpar,1)
precalc.f:            txab(ijpar,2,ijs1)= aa1*xab(ijpar,2)
precalc.f:            txab(ijpar,3,ijs1)= aa1*xab(ijpar,3)
precalc.f:               txab(ijpar,1,ijs1)=zero
precalc.f:               txab(ijpar,2,ijs1)=zero
precalc.f:               txab(ijpar,3,ijs1)=zero
precalc.f:           do 153 ijs1=1,lcij
precalc.f:           rapb1=rapb(ijs1)
precalc.f:           do 153 ijpar=1,npij
precalc.f:            txab(ijpar,1,ijs1)=txab(ijpar,1,ijs1)*rapb1
precalc.f:            txab(ijpar,2,ijs1)=txab(ijpar,2,ijs1)*rapb1
precalc.f:            txab(ijpar,3,ijs1)=txab(ijpar,3,ijs1)*rapb1
precalc.f:      subroutine first_pair(nbl2,ibl,ijbl,inx,ijp1,itypp,jtypp,
precalc.f:     *                      est_ijx,coef_ijx,factij,
precalc.f:     *                      gcij,ngcii,ngcjj)
precalc.f:ccc   dimension inx(12,*),iis(*),jjs(*),ijbl(nbl2,*)
precalc.f:      dimension inx(12,*),ijbl(nbl2,*)
precalc.f:      dimension est_ijx(30,30),coef_ijx(30,30)
precalc.f:      dimension factij(*)
precalc.f:      dimension gcij(ngcii+1,ngcjj+1,*)
precalc.f:c     factij(ji)=csi*csj
precalc.f:c     coef_ijx(is1,js1)=coefi*coefj
precalc.f:c     est_ijx(is1,js1)=max(abs(csi),abs(cpi))*max(abs(csj),abs(cpj))
precalc.f:       ijcs=ijbl(ibl,ijp1)
precalc.f:ccc    ics=iis(ijcs)
precalc.f:ccc    jcs=jjs(ijcs)
precalc.f:       call get_ij_half(ijcs, ics, jcs)
precalc.f:                est_ijx(is1,js1)=est_i*est_j
precalc.f:                   if(itypp.eq.3) factij(ji)=csi*csj
precalc.f:                coef_ijx(is1,js1)=coefi*coefj
precalc.f:                est_ijx(is1,js1)=1.d0
precalc.f:                coef_ijx(is1,js1)=1.d0
precalc.f:                if(which.eq.'right') coef_ijx(is1,js1)=par268
precalc.f:                     gcij(ig+1,jg+1,ji)=gcj
precalc.f:      subroutine xwpq_11(nbls1,xwp,xwq,p1234, ijpar1,lc12, klpar1,lc34,
precalc.f:     *                  lcij,lckl,npij,npkl, indxij,indxkl,index,
precalc.f:c  For two primitive pairs lcij and lckl which contribute
precalc.f:c  lcij, lckl - pairs of primitive shells
precalc.f:c  INDEX(ijkl1) - for ijkl1 quartet in Reduced block shows
precalc.f:c                 the ijkl  quartet in Original block
precalc.f:c  INDXIJ(ijkl) - shows the contracted pair IJPAR for ijkl quartet
precalc.f:c  INDXKL(ijkl) - shows the contracted pair KLPAR for ijkl quartet
precalc.f:c  RPPQ(ijkl1)  = 1/(a+b+c+d)         where a,b,c,d, are exponents
precalc.f:c  XP(ijpar,3,lcij) - coordinates of P
precalc.f:c  XPP(ijpar,3,lcij)- coordinates of ( a*A + b*B)
precalc.f:c  TXAB(ijpar,3,  )  - coordinates XAB re-scaled by exponents a or b
precalc.f:c  APB(ijpar,lcij) =a+b
precalc.f:c  RAPB(ijpar,lcij)=1/(a+b)
precalc.f:c  XWP(ijkl1) - coordinates of W-P,  where W=(XPP+XQQ)/(a+b+c+d)
precalc.f:c  XWQ(ijkl1) - coordinates of W-Q
precalc.f:c  P1234(ijkl1)=(txab+txcd)*(rcpd OR rapb)
precalc.f:c  ABCD(ijkl1)= apb*rcpd   OR  cpd*rapb
precalc.f:      common /begin/ ijbegin,klbegin
precalc.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,mmax,
precalc.f:     * nqi,nqj,nqk,nql,nsij,nskl,
precalc.f:     * nqij,nqij1,nsij1,nqkl,nqkl1,nskl1,ijbeg,klbeg
precalc.f:      common/shell/lshellt,lshelij,lshelkl,lhelp,lcas2(4),lcas3(4)
precalc.f:      dimension indxij(*),indxkl(*),index(*)
precalc.f:      dimension xp(npij,3,*),xq(npkl,3,*)
precalc.f:      dimension xpp(npij,3,*),xqq(npkl,3,*)
precalc.f:      dimension txab(npij,3,*),txcd(npkl,3,*)
precalc.f:cnowy dimension apb(npij,*),rapb(npij,*),cpd(npkl,*),rcpd(npkl,*)
precalc.f:      dimension apb(ijpar1,*),rapb(ijpar1,*)
precalc.f:      ijstart=ijbegin-1
precalc.f:         ijkl=index(i)
precalc.f:         ijpar=indxij(ijkl)
precalc.f:         klpar=indxkl(ijkl)
precalc.f:         xwl=( xpp(ijpar,1,lcij) + xqq(klpar,1,lckl) )*rppq1
precalc.f:         ywl=( xpp(ijpar,2,lcij) + xqq(klpar,2,lckl) )*rppq1
precalc.f:         zwl=( xpp(ijpar,3,lcij) + xqq(klpar,3,lckl) )*rppq1
precalc.f:         xwp(i,1)=xwl-xp(ijpar,1,lcij)
precalc.f:         xwp(i,2)=ywl-xp(ijpar,2,lcij)
precalc.f:         xwp(i,3)=zwl-xp(ijpar,3,lcij)
precalc.f:c        for tracij_1, & trackl_1
precalc.f:         abcd(i)=apb(ijstart+ijpar,lcij)*rcpd1
precalc.f:         p1234(i,1)=(txab(ijpar,1,lcij)+txcd(klpar,1,lckl))*rcpd1
precalc.f:         p1234(i,2)=(txab(ijpar,2,lcij)+txcd(klpar,2,lckl))*rcpd1
precalc.f:         p1234(i,3)=(txab(ijpar,3,lcij)+txcd(klpar,3,lckl))*rcpd1
precalc.f:         rapb1=rapb(ijstart+ijpar,lcij)
precalc.f:c for shifting from 1 to 3    abcd=(a+b)/(c+d)     tracij_1 & _2
precalc.f:      nshifts=min(nsij,nskl)-1
precalc.f:      if(nsij.ge.nskl) then
precalc.f:            if(lshelij.gt.0) lobsa=1
precalc.f:            immax=nsij-2
precalc.f:      if(nsij.lt.nskl) then
precalc.f:            immax=nsij-2
precalc.f:            if(lshelij.gt.0) lobsa=1
precalc.f:      subroutine xwpq_22(nbls1,xwp,xwq,p1234, ijpar1,lc12, klpar1,lc34,
precalc.f:     *                  lcij,lckl,npij,npkl, indxij,indxkl,index,
precalc.f:c  For two primitive pairs lcij and lckl which contribute
precalc.f:c  lcij, lckl - pairs of primitive shells
precalc.f:c  INDEX(ijkl1) - for ijkl1 quartet in Reduced block shows
precalc.f:c                 the ijkl  quartet in Original block
precalc.f:c  INDXIJ(ijkl) - shows the contracted pair IJPAR for ijkl quartet
precalc.f:c  INDXKL(ijkl) - shows the contracted pair KLPAR for ijkl quartet
precalc.f:c  RPPQ(ijkl1)  = 1/(a+b+c+d)         where a,b,c,d, are exponents
precalc.f:c  XP(ijpar,3,lcij) - coordinates of P
precalc.f:c  XPP(ijpar,3,lcij)- coordinates of ( a*A + b*B)
precalc.f:c  TXAB(ijpar,3,  )  - coordinates XAB re-scaled by exponents a or b
precalc.f:c  APB(ijpar,lcij) =a+b
precalc.f:c  RAPB(ijpar,lcij)=1/(a+b)
precalc.f:c  XWP(ijkl1) - coordinates of W-P,  where W=(XPP+XQQ)/(a+b+c+d)
precalc.f:c  XWQ(ijkl1) - coordinates of W-Q
precalc.f:c  P1234(ijkl1)=(txab+txcd)*rcpd
precalc.f:c  ABCD(ijkl1)= apb*rcpd
precalc.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,mmax,
precalc.f:     * nqi,nqj,nqk,nql,nsij,nskl,
precalc.f:     * nqij,nqij1,nsij1,nqkl,nqkl1,nskl1,ijbeg,klbeg
precalc.f:      common/shell/lshellt,lshelij,lshelkl,lhelp,lcas2(4),lcas3(4)
precalc.f:      dimension indxij(*),indxkl(*),index(*)
precalc.f:      dimension xp(npij,3,*),xq(npkl,3,*)
precalc.f:      dimension xpp(npij,3,*),xqq(npkl,3,*)
precalc.f:      dimension txab(npij,3,*),txcd(npkl,3,*)
precalc.f:      abcd=apb(lcij)*rcpd1
precalc.f:         ijkl=index(i)
precalc.f:         ijpar=indxij(ijkl)
precalc.f:         klpar=indxkl(ijkl)
precalc.f:         xwl=( xpp(ijpar,1,lcij) + xqq(klpar,1,lckl) )*rppq1
precalc.f:         ywl=( xpp(ijpar,2,lcij) + xqq(klpar,2,lckl) )*rppq1
precalc.f:         zwl=( xpp(ijpar,3,lcij) + xqq(klpar,3,lckl) )*rppq1
precalc.f:         xwp(i,1)=xwl-xp(ijpar,1,lcij)
precalc.f:         xwp(i,2)=ywl-xp(ijpar,2,lcij)
precalc.f:         xwp(i,3)=zwl-xp(ijpar,3,lcij)
precalc.f:c        for tracij_2 & trackl_2
precalc.f:         p1234(i,1)=(txab(ijpar,1,lcij)+txcd(klpar,1,lckl))*rcpd1
precalc.f:         p1234(i,2)=(txab(ijpar,2,lcij)+txcd(klpar,2,lckl))*rcpd1
precalc.f:         p1234(i,3)=(txab(ijpar,3,lcij)+txcd(klpar,3,lckl))*rcpd1
precalc.f:      nshifts=min(nsij,nskl)-1
precalc.f:      if(nsij.ge.nskl) then
precalc.f:            if(lshelij.gt.0) lobsa=1
precalc.f:            immax=nsij-2
precalc.f:      if(nsij.lt.nskl) then
precalc.f:         rapb1=rapb(lcij)
precalc.f:            immax=nsij-2
precalc.f:            if(lshelij.gt.0) lobsa=1
precalc.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,mmax,
precalc.f:     * nqi,nqj,nqk,nql,nsij,nskl,
precalc.f:     * nqij,nqij1,nsij1,nqkl,nqkl1,nskl1,ijbeg,klbeg
precalc.f:      nshifts=min(nsij,nskl)-1
precalc.f:      if(nsij.ge.nskl) then
precalc.f:      if(nsij.lt.nskl) then
precalc_new.f:      subroutine prec2ij_new(ibl, bl)
precalc_new.f:      common /primij/ iabprim, ijdim ,ijpar1
precalc_new.f:      call getival('ijblx',ijblx)
precalc_new.f:      call getival('mapijblx',map_ij_blx)
precalc_new.f:ctemp call getival('blocksij',nbl2)
precalc_new.f:      call getival('blocksij',nbl2_ij)
precalc_new.f:      call getival('blpredij',nbl2_pred)
precalc_new.f:      call dimenij_new(ibl,bl(inx_1),bl(inx_2),
precalc_new.f:     *                 bl(nparx),bl(ijblx),nbl2_dim,
precalc_new.f:     *                 nparij,ijdim,ijcont)    ! output
precalc_new.f:      ijpar1=nparij
precalc_new.f:         call getmem(3*ijdim,iabprim)
precalc_new.f:         call ab_prim_1_new(ibl,bl(inuc),nparij,bl(ijblx),nbl2_dim,
precalc_new.f:     *                      bl(iabprim),ijcont )
precalc_new.f:         call getmem(2*ijcont+ijdim,iabprim)
precalc_new.f:         i1apb=iabprim+ijcont
precalc_new.f:         isab =iabprim+ijcont*2
precalc_new.f:         call ab_prim_2_new(ibl,bl(inuc),nparij,bl(ijblx),nbl2_dim,
precalc_new.f:     *                      bl(iapb),bl(i1apb),bl(isab),ijcont)
precalc_new.f:      call getival('ijbly',ijbly)
precalc_new.f:      call getival('mapijbly',map_ij_bly)
precalc_new.f:      call dimenij_new(ibl,bl(inx_3),bl(inx_4),
precalc_new.f:     *                 bl(npary),bl(ijbly),nbl2_dim,
precalc_new.f:         call ab_prim_1_new(ibl,bl(inuc),nparkl,bl(ijbly),nbl2_dim,
precalc_new.f:         call ab_prim_2_new(ibl,bl(inuc),nparkl,bl(ijbly),nbl2_dim,
precalc_new.f:     *                       ibl,nijbeg,nijend,npij,
precalc_new.f:      common /begin/ ijbegin,klbegin
precalc_new.f:      common /primij/ iabprim, ijdim ,ijpar1
precalc_new.f:      common /contr/ ngci,ngcj,ngck,ngcl,lci,lcj,lck,lcl,lcij,lckl
precalc_new.f:     * ixab,ixp,ixpn,ixpp,iabnia,iapb,i1apb,ifij,icij,isab,
precalc_new.f:     *                 icfg,jcfg,kcfg,lcfg, igcij,igckl
precalc_new.f:      call getival('ijblx',ijblx)
precalc_new.f:      call getival('blocksij',nbl2_ij)
precalc_new.f:      call getival('blpredij',nbl2_dimij) ! for dim only
precalc_new.f:      call getival('ijbly',ijbly)
precalc_new.f:      ijbegin=nijbeg
precalc_new.f:c precalculations for pairs ij
precalc_new.f:      call precal2x_1(iabprim,ijdim,iapb,i1apb,isab)
precalc_new.f:          call precal2a_1_new(ibl,npij,nijbeg,nijend,bl(inuc),
precalc_new.f:     *                        bl(ijblx),nbl2_dimij,
precalc_new.f:     *                  bl(iabprim      ),ijpar1 ,
precalc_new.f:     *                  lcij,bl(iaa),bl(ibb),bl(ieab),bl(icis),bl(icjs),
precalc_new.f:     *                  bl(ixab),bl(ixp),bl(icij),bl(ifij), bl(itxab),
precalc_new.f:             call precal2b_1(mmax1,lcij,npij, bl(i1apb),
precalc_new.f:     *                       ijpar1,ijbegin, bl(iabnia))
precalc_new.f:          kldim  =ijdim
precalc_new.f:          klpar1 =ijpar1
precalc_new.f:     *                          bl(ijbly),nbl2_dimkl,
precalc_new.f:     *                          ibl,nijbeg,nijend,npij,
precalc_new.f:      common /begin/ ijbegin,klbegin
precalc_new.f:      common /primij/ iabprim, ijdim ,ijpar1
precalc_new.f:      common /contr/ ngci,ngcj,ngck,ngcl,lci,lcj,lck,lcl,lcij,lckl
precalc_new.f:     * ixab,ixp,ixpn,ixpp,iabnia,iapb,i1apb,ifij,icij,isab,
precalc_new.f:     *                 icfg,jcfg,kcfg,lcfg, igcij,igckl
precalc_new.f:      call getival('ijblx',ijblx)
precalc_new.f:      call getival('blocksij',nbl2_ij)
precalc_new.f:      call getival('blpredij',nbl2_dimij) ! for dim only
precalc_new.f:      call getival('ijbly',ijbly)
precalc_new.f:      ijbegin=nijbeg
precalc_new.f:c precalculations for pairs ij
precalc_new.f:      call precal2x_2(iabprim,lcij,iapb,i1apb,isab)
precalc_new.f:            call precal2a_2_new(ibl,npij,nijbeg,nijend,bl(inuc),
precalc_new.f:     *                          bl(ijblx),nbl2_dimij,
precalc_new.f:     *                  bl(iabprim+lcij),bl(iabprim+2*lcij),ijpar1,lcij,
precalc_new.f:     *                  bl(ixab),bl(ixp),bl(icij),bl(ifij), bl(itxab),
precalc_new.f:     *                  bl(igcij),ngci1,ngcj1,'left ',par268)
precalc_new.f:             call precal2b_2(mmax1,lcij, bl(i1apb),bl(iabnia))
precalc_new.f:          kldim  =ijdim
precalc_new.f:          klpar1 =ijpar1
precalc_new.f:          lckl=lcij
precalc_new.f:     *                          bl(ijbly),nbl2_dimkl,
precalc_new.f:      subroutine dimenij_new(ibl,inx_1,inx_2,npar,ijbl,nbl2_dim,
precalc_new.f:     *                       nparij,ijdim,ijcont)
precalc_new.f:      dimension npar(nbl2_dim),ijbl(nbl2_dim,*)
precalc_new.f:      nparij=npar(ibl)
precalc_new.f:      ijcs1=ijbl(ibl,1)
precalc_new.f:      call get_ij_half(ijcs1,ics1,jcs1)
precalc_new.f:      ijcont=icont*jcont
precalc_new.f:      ijdim=nparij*ijcont
precalc_new.f:      subroutine ab_prim_2_new(ibl,datnuc,nparij,ijbl, nbl2_dim,
precalc_new.f:     *                         apb,rapb,sab,ijcont)
precalc_new.f:      dimension inx_1(12,*), inx_2(12,*), ijbl(nbl2_dim,*)
precalc_new.f:      dimension apb(ijcont),rapb(ijcont),sab(nparij,ijcont)
precalc_new.f:      ijcs1=ijbl(ibl,  1  )
precalc_new.f:      call get_ij_half(ijcs1,ics1,jcs1)
precalc_new.f:      ij=0
precalc_new.f:            ij=ij+1
precalc_new.f:            apb(ij)=aa+bb
precalc_new.f:            rapb(ij)=one/apb(ij)
precalc_new.f:            e=axb*rapb(ij)
precalc_new.f:            eexx(ij)=e
precalc_new.f:            sqrtx(ij)=rapb(ij)*sqrt(sqrt(axb))**3
precalc_new.f:      do 100 ijpar=1,nparij
precalc_new.f:      ijcs=ijbl(ibl,ijpar)
precalc_new.f:      call get_ij_half(ijcs,ics,jcs)
precalc_new.f:           ij=0
precalc_new.f:             ij=ij+1
precalc_new.f:             e=eexx(ij)
precalc_new.f:c......         sab(ijpar,ij)=rapb(ij)*sqrt3*exp_err
precalc_new.f:                sab(ijpar,ij)=0.d0
precalc_new.f:c.............  sab(ijpar,ij)=rapb(ij)*sqrt3*exp_err
precalc_new.f:                sqrt3=sqrtx(ij)    ! already multiplied by rapb(ij)
precalc_new.f:                sab(ijpar,ij)=         sqrt3*exp_err
precalc_new.f:      subroutine first_pair_new(ijcs,datbas_1,inx_1, datbas_2,inx_2,
precalc_new.f:     *                          est_ijx,coef_ijx,factij,
precalc_new.f:     *                          gcij,ngcii,ngcjj)
precalc_new.f:      dimension est_ijx(30,30),coef_ijx(30,30)
precalc_new.f:      dimension factij(*)
precalc_new.f:      dimension gcij(ngcii+1,ngcjj+1,*)
precalc_new.f:c ijcs - first shell-pair of interest
precalc_new.f:c     factij(ji)=csi*csj
precalc_new.f:c     coef_ijx(is1,js1)=coefi*coefj
precalc_new.f:c     est_ijx(is1,js1)=max(abs(csi),abs(cpi))*max(abs(csj),abs(cpj))
precalc_new.f:       call get_ij_half(ijcs, ics, jcs)
precalc_new.f:                est_ijx(is1,js1)=est_i*est_j
precalc_new.f:                   if(itypp.eq.3) factij(ji)=csi*csj
precalc_new.f:                coef_ijx(is1,js1)=coefi*coefj
precalc_new.f:                est_ijx(is1,js1)=1.d0
precalc_new.f:                coef_ijx(is1,js1)=1.d0
precalc_new.f:                if(which.eq.'right') coef_ijx(is1,js1)=par268
precalc_new.f:                     gcij(ig+1,jg+1,ji)=gcj
precalc_new.f:      subroutine precal2a_2_new(ibl,npij,nijbeg,nijend,datnuc,
precalc_new.f:     *                          ijbl,nbl2_dim,
precalc_new.f:     *                    rapb,sab,ijpar1, lcij,
precalc_new.f:     *                    xab,xparij,coefij,factij,txab,
precalc_new.f:     *                    gcij,ngci1,ngcj1,which,par268 )
precalc_new.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,MMAX,
precalc_new.f:     * NQIJ,NQIJ1,NSIJ1,NQKL,NQKL1,NSKL1,ijbeg,klbeg
precalc_new.f:      dimension rapb(lcij),sab(ijpar1,lcij)
precalc_new.f:      dimension inx_1(12,*),inx_2(12,*),  ijbl(nbl2_dim,*)
precalc_new.f:      dimension xab(npij,3), xparij(npij,3,lcij,3)
precalc_new.f:      dimension estab (npij,lcij)
precalc_new.f:      dimension coefij(npij,lcij), factij(lcij)
precalc_new.f:      dimension xa(3),xb(3),txab(npij,3,*)
precalc_new.f:      dimension gcij(ngci1,ngcj1,lcij)
precalc_new.f:      dimension est_ijx(30,30),coef_ijx(30,30)
precalc_new.f:      ijcs_first=ijbl(ibl,nijbeg)
precalc_new.f:      call first_pair_new(ijcs_first,datbas_1,inx_1, datbas_2,inx_2,
precalc_new.f:     *                    est_ijx,coef_ijx,factij,
precalc_new.f:     *                    gcij,ngcii,ngcjj)
precalc_new.f:      ijpar=0
precalc_new.f:      do 100 ijp=nijbeg,nijend
precalc_new.f:      ijpar=ijpar+1
precalc_new.f:        ijcs=ijbl(ibl,ijp)
precalc_new.f:        call get_ij_half(ijcs,ics,jcs)
precalc_new.f:          xab(ijpar,i)=xa(i)-xb(i)
precalc_new.f:cnopermut   coefij(ijpar,ji)=coef_ijx(is1,js1)*fact1
precalc_new.f:            coefij(ijpar,ji)=coef_ijx(is1,js1)
precalc_new.f:            estab(ijpar,ji)=est_ijx(is1,js1)
precalc_new.f:            sab1 =sab(ijp,ji)
precalc_new.f:            coefij(ijpar,ji)=coefij(ijpar,ji)*sab1
precalc_new.f:            estab(ijpar,ji)=estab(ijpar,ji)*sab1
precalc_new.f:               xparij(ijpar,l,ji,1)=aa1*xa(l)+bb1*xb(l) ! xp(ijpar,l,ji
precalc_new.f:               xparij(ijpar,l,ji,2)=xparij(ijpar,l,ji,1)-xxl  ! xpn
precalc_new.f:               xparij(ijpar,l,ji,3)=aa*xa(l)+bb*xb(l)         ! xpp
precalc_new.f:                  xparij(ijpar,l,ji,2)=zero
precalc_new.f:               xpn_abs=abs( xparij(ijpar,l,ji,2) )
precalc_new.f:            estab(ijpar,ji)=estab(ijpar,ji)*xpn_max
precalc_new.f:            estab(ijpar,ji)=estab(ijpar,ji)*estab(ijpar,ji)
precalc_new.f:         ijs1=0
precalc_new.f:         ijs1=ijs1+1
precalc_new.f:         do 151 ijpar=1,npij
precalc_new.f:            txab(ijpar,1,ijs1)=-bb1*xab(ijpar,1)
precalc_new.f:            txab(ijpar,2,ijs1)=-bb1*xab(ijpar,2)
precalc_new.f:            txab(ijpar,3,ijs1)=-bb1*xab(ijpar,3)
precalc_new.f:               txab(ijpar,1,ijs1)=zero
precalc_new.f:               txab(ijpar,2,ijs1)=zero
precalc_new.f:               txab(ijpar,3,ijs1)=zero
precalc_new.f:         ijs1=0
precalc_new.f:         ijs1=ijs1+1
precalc_new.f:         do 152 ijpar=1,npij
precalc_new.f:            txab(ijpar,1,ijs1)= aa1*xab(ijpar,1)
precalc_new.f:            txab(ijpar,2,ijs1)= aa1*xab(ijpar,2)
precalc_new.f:            txab(ijpar,3,ijs1)= aa1*xab(ijpar,3)
precalc_new.f:               txab(ijpar,1,ijs1)=zero
precalc_new.f:               txab(ijpar,2,ijs1)=zero
precalc_new.f:               txab(ijpar,3,ijs1)=zero
precalc_new.f:           do 153 ijs1=1,lcij
precalc_new.f:           rapb1=rapb(ijs1)
precalc_new.f:           do 153 ijpar=1,npij
precalc_new.f:            txab(ijpar,1,ijs1)=txab(ijpar,1,ijs1)*rapb1
precalc_new.f:            txab(ijpar,2,ijs1)=txab(ijpar,2,ijs1)*rapb1
precalc_new.f:            txab(ijpar,3,ijs1)=txab(ijpar,3,ijs1)*rapb1
precalc_new.f:      subroutine ab_prim_1_new(ibl,datnuc,nparij,ijbl, nbl2_dim,
precalc_new.f:     *                         abprim,ijcont)
precalc_new.f:      dimension inx_1(12,*), inx_2(12,*), ijbl(nbl2_dim,*)
precalc_new.f:      dimension abprim(nparij,ijcont,3)
precalc_new.f:      do 100 ijpar=1,nparij
precalc_new.f:         ijcs=ijbl(ibl,ijpar)
precalc_new.f:         call get_ij_half(ijcs,ics,jcs)
precalc_new.f:         ij=0
precalc_new.f:               ij=ij+1
precalc_new.f:               abprim(ijpar,ij,1)=apb
precalc_new.f:               abprim(ijpar,ij,2)=apb1
precalc_new.f:c98            abprim(ijpar,ij,3)=apb1*sqrt(sqrt(axb))**3*exp(-e*rr)
precalc_new.f:               abprim(ijpar,ij,3)=apb1*sqrt(sqrt(axb))**3*exp_err
precalc_new.f:      subroutine precal2a_1_new(ibl,npij,nijbeg,nijend,datnuc,
precalc_new.f:     *                          ijbl,nbl2_dim,
precalc_new.f:     *                          abprim,ijpar1,lcij,
precalc_new.f:     *                          xab,xparij,coefij,factij,txab,
precalc_new.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,MMAX,
precalc_new.f:     * NQIJ,NQIJ1,NSIJ1,NQKL,NQKL1,NSKL1,ijbeg,klbeg
precalc_new.f:      dimension abprim(ijpar1,lcij,3)
precalc_new.f:      dimension inx_1(12,*),inx_2(12,*),  ijbl(nbl2_dim,*)
precalc_new.f:      dimension aaa(npij,*),bbb(npij,*), cis(npij,*),cjs(npij,*)
precalc_new.f:      dimension xab(npij,3), xparij(npij,3,lcij,3)
precalc_new.f:      dimension estab(npij,lcij)
precalc_new.f:      dimension coefij(npij,lcij), factij(npij,lcij)
precalc_new.f:      dimension xa(3),xb(3),txab(npij,3,*)
precalc_new.f:      dimension gci(npij,ngci1,*),gcj(npij,ngcj1,*)
precalc_new.f:      ijpar=0
precalc_new.f:      do 100 ijp=nijbeg,nijend
precalc_new.f:         ijpar=ijpar+1
precalc_new.f:         ijcs=ijbl(ibl,ijp)
precalc_new.f:         call get_ij_half(ijcs,ics,jcs)
precalc_new.f:            xab(ijpar,i)=xa(i)-xb(i)
precalc_new.f:            aaa(ijpar,is1)=aa
precalc_new.f:               cis(ijpar,is1)=csi
precalc_new.f:                  gci(ijpar,ig+1,is1)=datbas_1(ig+2,is)
precalc_new.f:            bbb(ijpar,js1)=bb
precalc_new.f:               coefij(ijpar,ji )=coefi*coefj
precalc_new.f:               estab(ijpar,ji)=est_i*est_j
precalc_new.f:                  if(itypp.eq.3) factij(ijpar,ji  )=facti*factj
precalc_new.f:               cjs(ijpar,js1)=csj
precalc_new.f:cnopermut      coefij(ijpar,ji)=fact1
precalc_new.f:               coefij(ijpar,ji)=1.d0
precalc_new.f:               estab(ijpar,ji)=1.d0
precalc_new.f:cnopermut      if(which.eq.'right') coefij(ijpar,ji)=fact1*par268
precalc_new.f:               if(which.eq.'right') coefij(ijpar,ji)=par268
precalc_new.f:                  gcj(ijpar,jg+1,js1)=datbas_2(jg+2,js)
precalc_new.f:            rapb=abprim(ijp,ji,2)
precalc_new.f:            sab =abprim(ijp,ji,3)
precalc_new.f:            aa1=aa*abprim(ijp,ji,2)
precalc_new.f:            bb1=bb*abprim(ijp,ji,2)
precalc_new.f:            coefij(ijpar,ji)=coefij(ijpar,ji)     *sab
precalc_new.f:            estab(ijpar,ji)=estab(ijpar,ji)*sab
precalc_new.f:               xparij(ijpar,l,ji,1)=aa1*xa(l)+bb1*xb(l)  !xp(ijpar,l,ji
precalc_new.f:               xparij(ijpar,l,ji,2)=xparij(ijpar,l,ji,1)-xxl  ! xpn
precalc_new.f:               xparij(ijpar,l,ji,3)=aa*xa(l)+bb*xb(l)         ! xpp
precalc_new.f:               xpn_abs=abs( xparij(ijpar,l,ji,2) )
precalc_new.f:                  xparij(ijpar,l,ji,2)=zero
precalc_new.f:            estab(ijpar,ji)=estab(ijpar,ji)*xpn_max
precalc_new.f:            estab(ijpar,ji)=estab(ijpar,ji)*estab(ijpar,ji)
precalc_new.f:         ijs1=0
precalc_new.f:         ijs1=ijs1+1
precalc_new.f:         do 151 ijpar=1,npij
precalc_new.f:            txab(ijpar,1,ijs1)=-bbb(ijpar,js1)*xab(ijpar,1)
precalc_new.f:            txab(ijpar,2,ijs1)=-bbb(ijpar,js1)*xab(ijpar,2)
precalc_new.f:            txab(ijpar,3,ijs1)=-bbb(ijpar,js1)*xab(ijpar,3)
precalc_new.f:            aa=aaa(ijpar,is1)
precalc_new.f:               txab(ijpar,1,ijs1)=zero
precalc_new.f:               txab(ijpar,2,ijs1)=zero
precalc_new.f:               txab(ijpar,3,ijs1)=zero
precalc_new.f:         ijs1=0
precalc_new.f:         ijs1=ijs1+1
precalc_new.f:         do 152 ijpar=1,npij
precalc_new.f:            txab(ijpar,1,ijs1)= aaa(ijpar,is1)*xab(ijpar,1)
precalc_new.f:            txab(ijpar,2,ijs1)= aaa(ijpar,is1)*xab(ijpar,2)
precalc_new.f:            txab(ijpar,3,ijs1)= aaa(ijpar,is1)*xab(ijpar,3)
precalc_new.f:            bb=bbb(ijpar,js1)
precalc_new.f:               txab(ijpar,1,ijs1)=zero
precalc_new.f:               txab(ijpar,2,ijs1)=zero
precalc_new.f:               txab(ijpar,3,ijs1)=zero
precalc_new.f:           do 153 ijs1=1,lcij
precalc_new.f:           do 153 ijpar=1,npij
precalc_new.f:            rapb1=abprim(nijbeg-1+ijpar,ijs1,2)
precalc_new.f:            txab(ijpar,1,ijs1)=txab(ijpar,1,ijs1)*rapb1
precalc_new.f:            txab(ijpar,2,ijs1)=txab(ijpar,2,ijs1)*rapb1
precalc_new.f:            txab(ijpar,3,ijs1)=txab(ijpar,3,ijs1)*rapb1
precalc_new.f:      subroutine prec4neg_2_n(nbls,npij,npkl,ndiag,ij,kl,
precalc_new.f:     1     lc12,lc34,indxij,indxkl,indxr,
precalc_new.f:     *     estab,estcd,densmax, esti2ij,esti2kl,
precalc_new.f:     *     list_ij,list_kl,
precalc_new.f:     *     apb,cpd,coefij,coefkl,xp,xq, nsym,isymm,
precalc_new.f:c   esti2ij(ij) - maximum estim for ij-prim.pair
precalc_new.f:      dimension indxij(*),indxkl(*),indxr(*),index(*)
precalc_new.f:      dimension coefij(npij,lc12),coefkl(npkl,lc34)
precalc_new.f:      dimension  estab(npij,lc12), estcd(npkl,lc34)
precalc_new.f:      dimension  esti2ij(lc12), esti2kl(lc34)
precalc_new.f:      dimension  list_ij(npij),list_kl(npkl)
precalc_new.f:      dimension xp(npij,3,*),xq(npkl,3,*)
precalc_new.f:      apb1=apb(ij)
precalc_new.f:         ijkl=0
precalc_new.f:         ijkl1=0
precalc_new.f:         do 100 ijpar=1,npij
precalc_new.f:            npklx=ijpar
precalc_new.f:            esti1=estab(ijpar,ij)
precalc_new.f:               ijkl=ijkl+npklx
precalc_new.f:            coef1=coefij(ijpar,ij)
precalc_new.f:            xp1= xp(ijpar,1,ij)
precalc_new.f:            xp2= xp(ijpar,2,ij)
precalc_new.f:            xp3= xp(ijpar,3,ij)
precalc_new.f:               ijkl=ijkl+1
precalc_new.f:               ijklsm=isymm(ijkl)
precalc_new.f:               if(ijklsm.eq.0) go to 50
precalc_new.f:               estim=esti1*esti2*abpcdr*densmax(ijkl)
precalc_new.f:                  ijkl1=ijkl1+1
precalc_new.f:                  index(ijkl1)=indxr(ijkl)
precalc_new.f:                  rys(ijkl1)=rr2*rho1
precalc_new.f:                  const(ijkl1)=coef1*coef2*sqrpold
precalc_new.f:cnopermut         if(ndiag.eq.0.and.ijpar.eq.klpar) then
precalc_new.f:cnopermut            const(ijkl1)=const(ijkl1)*permut
precalc_new.f:         do 200 ijpar=1,npij
precalc_new.f:            npklx=ijpar
precalc_new.f:            if(jump(ijpar)) then
precalc_new.f:               ijkl=ijkl+npklx
precalc_new.f:            esti1=estab(ijpar,ij)
precalc_new.f:               ijkl=ijkl+npklx
precalc_new.f:            coef1=coefij(ijpar,ij)
precalc_new.f:            xp1= xp(ijpar,1,ij)
precalc_new.f:            xp2= xp(ijpar,2,ij)
precalc_new.f:            xp3= xp(ijpar,3,ij)
precalc_new.f:               ijkl=ijkl+1
precalc_new.f:               ijklsm=isymm(ijkl)
precalc_new.f:               if(ijklsm.eq.0) go to 150
precalc_new.f:               estim=esti1*esti2*abpcdr*densmax(ijkl)
precalc_new.f:                  ijkl1=ijkl1+1
precalc_new.f:                  index(ijkl1)=indxr(ijkl)
precalc_new.f:                  rys(ijkl1)=rr2*rho1
precalc_new.f:                  const(ijkl1)=coef1*coef2*sqrpold
precalc_new.f:cnopermut         if(ndiag.eq.0.and.ijpar.eq.klpar) then
precalc_new.f:cnopermut            const(ijkl1)=const(ijkl1)*permut
precalc_new.f:c-------->        const(ijkl1)=const(ijkl1)*symfac
precalc_new.f:                  const(ijkl1)=const(ijkl1)*symfac(ijkl)
precalc_new.f:         nbls1=ijkl1
precalc_new.f:         ijkl=0
precalc_new.f:         ijkl1=0
precalc_new.f:         do 300 ijpar=1,npij
precalc_new.f:ckw      do 300 ijp  =1,npij
precalc_new.f:ckw         ijpar=list_ij(ijp)
precalc_new.f:            ijij=(ijpar-1)*npkl
precalc_new.f:            esti1=estab(ijpar,ij)
precalc_new.f:               ijkl=ijkl+npklx
precalc_new.f:            coef1=coefij(ijpar,ij)
precalc_new.f:            xp1= xp(ijpar,1,ij)
precalc_new.f:            xp2= xp(ijpar,2,ij)
precalc_new.f:            xp3= xp(ijpar,3,ij)
precalc_new.f:c............. ijkl=ijkl+1
precalc_new.f:               ijkl=ijij+klpar
precalc_new.f:               ijklsm=isymm(ijkl)
precalc_new.f:               if(ijklsm.eq.0) go to 350
precalc_new.f:               estim=esti1*esti2*abpcdr*densmax(ijkl)
precalc_new.f:                  ijkl1=ijkl1+1
precalc_new.f:                  index(ijkl1)=indxr(ijkl)
precalc_new.f:                  rys(ijkl1)=rr2*rho1
precalc_new.f:                  const(ijkl1)=coef1*coef2*sqrpold
precalc_new.f:cnopermut         if(ndiag.eq.0.and.ijpar.eq.klpar) then
precalc_new.f:cnopermut            const(ijkl1)=const(ijkl1)*permut
precalc_new.f:         nbls1=ijkl1
precalc_new.f:      subroutine precspec_2_n(nbls,npij,npkl,ndiag, ij,kl,
precalc_new.f:     1     lc12,lc34,indxij,indxkl,indxr,
precalc_new.f:     *     estab,estcd,densmax, esti2ij,esti2kl,
precalc_new.f:     *     list_ij,list_kl,
precalc_new.f:     *     apb,cpd,coefij,coefkl,xp,xq, rapb,rcpd,txab,txcd,
precalc_new.f:      dimension indxij(*),indxkl(*),indxr(*),index(*)
precalc_new.f:      dimension coefij(npij,lc12),coefkl(npkl,lc34)
precalc_new.f:      dimension  estab(npij,lc12), estcd(npkl,lc34)
precalc_new.f:      dimension  esti2ij(lc12), esti2kl(lc34)
precalc_new.f:      dimension  list_ij(npij),list_kl(npkl)
precalc_new.f:      dimension txab(npij,3,*),txcd(npkl,3,*)
precalc_new.f:      dimension xp(npij,3,*),xq(npkl,3,*)
precalc_new.f:      apb1=apb(ij)
precalc_new.f:      if(ityp.gt.1.or.jtyp.gt.1) rho2=rho2*rapb(ij)
precalc_new.f:         ijkl=0
precalc_new.f:         ijkl1=0
precalc_new.f:         do 100 ijpar=1,npij
precalc_new.f:            npklx=ijpar
precalc_new.f:            esti1=estab(ijpar,ij)
precalc_new.f:               ijkl=ijkl+npklx
precalc_new.f:            coef1=coefij(ijpar,ij)
precalc_new.f:            xp1= xp(ijpar,1,ij)
precalc_new.f:            xp2= xp(ijpar,2,ij)
precalc_new.f:            xp3= xp(ijpar,3,ij)
precalc_new.f:               ijkl=ijkl+1
precalc_new.f:               ijklsm=isymm(ijkl)
precalc_new.f:               if(ijklsm.eq.0) go to 50
precalc_new.f:               estim=esti1*esti2*abpcdr*densmax(ijkl)
precalc_new.f:                  ijkl1=ijkl1+1
precalc_new.f:                  index(ijkl1)=indxr(ijkl)
precalc_new.f:                  xpqr(1,ijkl1)=x1*rho2
precalc_new.f:                  xpqr(2,ijkl1)=x2*rho2
precalc_new.f:                  xpqr(3,ijkl1)=x3*rho2
precalc_new.f:                  rys(ijkl1)=rr2*rho1
precalc_new.f:                  const(ijkl1)=coef1*coef2*sqrpold
precalc_new.f:cnopermut         if(ndiag.eq.0.and.ijpar.eq.klpar) then
precalc_new.f:cnopermut            const(ijkl1)=const(ijkl1)*permut
precalc_new.f:         do 200 ijpar=1,npij
precalc_new.f:            if(ndiag.eq.0) npklx=ijpar
precalc_new.f:            if(jump(ijpar)) then
precalc_new.f:               ijkl=ijkl+npklx
precalc_new.f:            esti1=estab(ijpar,ij)
precalc_new.f:               ijkl=ijkl+npklx
precalc_new.f:            coef1=coefij(ijpar,ij)
precalc_new.f:            xp1= xp(ijpar,1,ij)
precalc_new.f:            xp2= xp(ijpar,2,ij)
precalc_new.f:            xp3= xp(ijpar,3,ij)
precalc_new.f:               ijkl=ijkl+1
precalc_new.f:               ijklsm=isymm(ijkl)
precalc_new.f:               if(ijklsm.eq.0) go to 150
precalc_new.f:               estim=esti1*esti2*abpcdr*densmax(ijkl)
precalc_new.f:                  ijkl1=ijkl1+1
precalc_new.f:                  index(ijkl1)=indxr(ijkl)
precalc_new.f:                  xpqr(1,ijkl1)=x1*rho2
precalc_new.f:                  xpqr(2,ijkl1)=x2*rho2
precalc_new.f:                  xpqr(3,ijkl1)=x3*rho2
precalc_new.f:                  rys(ijkl1)=rr2*rho1
precalc_new.f:                  const(ijkl1)=coef1*coef2*sqrpold
precalc_new.f:cnopermut         if(ndiag.eq.0.and.ijpar.eq.klpar) then
precalc_new.f:cnopermut            const(ijkl1)=const(ijkl1)*permut
precalc_new.f:                  const(ijkl1)=const(ijkl1)*symfac(ijkl)
precalc_new.f:         nbls1=ijkl1
precalc_new.f:         ijkl=0
precalc_new.f:         ijkl1=0
precalc_new.f:         do 300 ijpar=1,npij
precalc_new.f:ckw      do 300 ijp  =1,npij
precalc_new.f:ckw         ijpar=list_ij(ijp)
precalc_new.f:            ijij=(ijpar-1)*npkl
precalc_new.f:            esti1=estab(ijpar,ij)
precalc_new.f:               ijkl=ijkl+npklx
precalc_new.f:            coef1=coefij(ijpar,ij)
precalc_new.f:            xp1= xp(ijpar,1,ij)
precalc_new.f:            xp2= xp(ijpar,2,ij)
precalc_new.f:            xp3= xp(ijpar,3,ij)
precalc_new.f:c............  ijkl=ijkl+1
precalc_new.f:               ijkl=ijij+klpar
precalc_new.f:               ijklsm=isymm(ijkl)
precalc_new.f:               if(ijklsm.eq.0) go to 350
precalc_new.f:               estim=esti1*esti2*abpcdr*densmax(ijkl)
precalc_new.f:                  ijkl1=ijkl1+1
precalc_new.f:                  index(ijkl1)=indxr(ijkl)
precalc_new.f:                  xpqr(1,ijkl1)=x1*rho2
precalc_new.f:                  xpqr(2,ijkl1)=x2*rho2
precalc_new.f:                  xpqr(3,ijkl1)=x3*rho2
precalc_new.f:                  rys(ijkl1)=rr2*rho1
precalc_new.f:                  const(ijkl1)=coef1*coef2*sqrpold
precalc_new.f:cnopermut         if(ndiag.eq.0.and.ijpar.eq.klpar) then
precalc_new.f:cnopermut            const(ijkl1)=const(ijkl1)*permut
precalc_new.f:         nbls1=ijkl1
precalc_new.f:        ijkl=index(i)
precalc_new.f:        ijpar=indxij(ijkl)
precalc_new.f:        txxr(1,i)=txab(ijpar,1,ij)
precalc_new.f:        txxr(2,i)=txab(ijpar,2,ij)
precalc_new.f:        txxr(3,i)=txab(ijpar,3,ij)
precalc_new.f:        ijkl=index(i)
precalc_new.f:        klpar=indxkl(ijkl)
precalc_new.f:      subroutine prec4neg_1_n(nbls,npij,npkl,ndiag,ij,kl,
precalc_new.f:     1     ijpar1,lc12, klpar1,lc34,indxij,indxkl,
precalc_new.f:     *     apb,cpd,coefij,coefkl,xp,xq, nsym,isymm,
precalc_new.f:      common /begin/ ijbegin,klbegin
precalc_new.f:      dimension indxij(*),indxkl(*),index(*)
precalc_new.f:      dimension apb(ijpar1,lc12),cpd(klpar1,lc34)
precalc_new.f:      dimension coefij(npij,lc12),coefkl(npkl,lc34)
precalc_new.f:      dimension  estab(npij,lc12), estcd(npkl,lc34)
precalc_new.f:      dimension xp(npij,3,*),xq(npkl,3,*)
precalc_new.f:      ijstart=ijbegin-1
precalc_new.f:      ijkl=0
precalc_new.f:      ijkl1=0
precalc_new.f:      ijklp=0
precalc_new.f:      do 100 ijpar=1,npij
precalc_new.f:         coef1=coefij(ijpar,ij)
precalc_new.f:            npx=ijpar
precalc_new.f:            if(jump(ijpar)) then
precalc_new.f:               ijkl=ijkl+npx
precalc_new.f:         apb1=apb(ijstart+ijpar,ij)
precalc_new.f:         esti1=estab (ijpar,ij)
precalc_new.f:         xp1= xp(ijpar,1,ij)
precalc_new.f:         xp2= xp(ijpar,2,ij)
precalc_new.f:         xp3= xp(ijpar,3,ij)
precalc_new.f:            ijkl=ijkl+1
precalc_new.f:            ijklsm=isymm(ijkl)
precalc_new.f:            if(ijklsm.eq.0) go to 150
precalc_new.f:            ijklp=ijklp+1
precalc_new.f:            estim=estim*densmax(ijkl)
precalc_new.f:               ijkl1=ijkl1+1
precalc_new.f:c------->      index(ijkl1)=ijkl
precalc_new.f:               index(ijkl1)=ijklp
precalc_new.f:               rppq(ijkl1)=abpcdr
precalc_new.f:               rhoapb(ijkl1)=abpcdr*cpd1
precalc_new.f:               rhocpd(ijkl1)=abpcdr*apb1
precalc_new.f:               rys(ijkl1)=rr2*rho1
precalc_new.f:               const(ijkl1)=coef12*sqrpold
precalc_new.f:cnopermut      if(ndiag.eq.0.and.ijpar.eq.klpar) then
precalc_new.f:cnopermut         const(ijkl1)=const(ijkl1)*permut
precalc_new.f:               if(nsym.gt.0) const(ijkl1)=const(ijkl1)*symfac(ijkl)
precalc_new.f:      nbls1=ijkl1
precalc_new.f:      subroutine precspec_1_n(nbls,npij,npkl,ndiag, ij,kl,
precalc_new.f:     1     ijpar1,lc12, klpar1,lc34, indxij,indxkl,
precalc_new.f:     *     apb,cpd,coefij,coefkl,xp,xq, rapb,rcpd,txab,txcd,
precalc_new.f:      common /begin/ ijbegin,klbegin
precalc_new.f:      dimension indxij(*),indxkl(*),index(*)
precalc_new.f:      dimension apb(ijpar1,lc12),cpd(klpar1,lc34)
precalc_new.f:      dimension rapb(ijpar1,*),rcpd(klpar1,*)
precalc_new.f:      dimension coefij(npij,lc12),coefkl(npkl,lc34)
precalc_new.f:      dimension  estab(npij,lc12), estcd(npkl,lc34)
precalc_new.f:      dimension txab(npij,3,*),txcd(npkl,3,*)
precalc_new.f:      dimension xp(npij,3,*),xq(npkl,3,*)
precalc_new.f:      ijstart=ijbegin-1
precalc_new.f:      ijkl=0
precalc_new.f:      ijkl1=0
precalc_new.f:      ijklp=0
precalc_new.f:      do 100 ijpar=1,npij
precalc_new.f:         coef1=coefij(ijpar,ij)
precalc_new.f:            npx=ijpar
precalc_new.f:            if(jump(ijpar)) then
precalc_new.f:               ijkl=ijkl+npx
precalc_new.f:         apb1=apb(ijstart+ijpar,ij)
precalc_new.f:         esti1=estab (ijpar,ij)
precalc_new.f:         xp1= xp(ijpar,1,ij)
precalc_new.f:         xp2= xp(ijpar,2,ij)
precalc_new.f:         xp3= xp(ijpar,3,ij)
precalc_new.f:            ijkl=ijkl+1
precalc_new.f:            ijklsm=isymm(ijkl)
precalc_new.f:            if(ijklsm.eq.0) go to 150
precalc_new.f:            ijklp=ijklp+1
precalc_new.f:            estim=esti1*esti2*abpcdr*densmax(ijkl)
precalc_new.f:               ijkl1=ijkl1+1
precalc_new.f:c---->         index(ijkl1)=ijkl
precalc_new.f:               index(ijkl1)=ijklp
precalc_new.f:               xpqr(1,ijkl1)=x1*rho1
precalc_new.f:               xpqr(2,ijkl1)=x2*rho1
precalc_new.f:               xpqr(3,ijkl1)=x3*rho1
precalc_new.f:               rys(ijkl1)=rr2*rho1
precalc_new.f:               const(ijkl1)=coef12*sqrpold
precalc_new.f:cnopermut      if(ndiag.eq.0.and.ijpar.eq.klpar) then
precalc_new.f:cnopermut         const(ijkl1)=const(ijkl1)*permut
precalc_new.f:               if(nsym.gt.0) const(ijkl1)=const(ijkl1)*symfac(ijkl)
precalc_new.f:      nbls1=ijkl1
precalc_new.f:           ijkl=index(i)
precalc_new.f:           ijpar=indxij(ijkl)
precalc_new.f:           xpqr(1,i)=xpqr(1,i)*rapb(ijstart+ijpar,ij)
precalc_new.f:           xpqr(2,i)=xpqr(2,i)*rapb(ijstart+ijpar,ij)
precalc_new.f:           xpqr(3,i)=xpqr(3,i)*rapb(ijstart+ijpar,ij)
precalc_new.f:           txxr(1,i)=txab(ijpar,1,ij)
precalc_new.f:           txxr(2,i)=txab(ijpar,2,ij)
precalc_new.f:           txxr(3,i)=txab(ijpar,3,ij)
precalc_new.f:           ijkl=index(i)
precalc_new.f:           klpar=indxkl(ijkl)
pregrid.f:C  AIJ     -  Becke aij coefficients
pregrid.f:C  calculation of aij parameter - Becke article, Eq. (A2)
pregrid.f:cc  |aij| > 1/2 is forbidden
pregrid.f:cc  |aij| > 1/2 is forbidden
prepint2.f:      common /memor1/ iisd,jjsd,ijbld
prepint2.f:      common /memor2/ nqrtd, nibld,nkbld, nijbd,nijed, nklbd,nkled
prepint2.f:      common /memors/ nsymx,ijshp,isymm
prepint2.f:c allocated memory for Schwarz integrals (ij|ij) :
prepint2.f:c calculate Schwarz integrals (ij|ij) :
property.f:c -- calculate inverse atomic distances, Becke aij parameters
psp_ang.f:      subroutine preomega(mijk,xyz)
psp_ang.f:      integer mijk,i,j,k
psp_ang.f:      real*8 xyz(0:mijk,0:mijk,0:mijk)
psp_ang.f:      if(mijk.ge.maxn)
psp_ang.f:     $  call nerror(1,'Preomega','maximum value exceeded',mijk,maxn)
psp_ang.f:      do i=0,mijk,2
psp_ang.f:        do j=0,mijk,2
psp_ang.f:          do k=0,mijk,2
psp_ang.f:            if(k+j+i.le.mijk)then
psp_ang.f:      subroutine omega0(i,j,k,yrk,mijk,xyzi,OMEGA)
psp_ang.f:c...  mijk    maximum exponent value, for dimensioning
psp_ang.f:      integer i,j,k,lmax,mijk,ii
psp_ang.f:      real*8 yrk(*),OMEGA(0:k+j+i),xyzi(0:mijk,0:mijk,0:mijk)
psp_ang.f:      subroutine omega1(i,j,k,yrk,mijk,xyzi,OMEGA)
psp_ang.f:c...  mijk    maximum exponent value, for dimensioning
psp_ang.f:      integer i,j,k,lmax,mijk,ii
psp_ang.f:      real*8 yrk(*),OMEGA(0:k+j+i),xyzi(0:mijk,0:mijk,0:mijk),angi
psp_ang.f:      subroutine omega2one(i,j,k,lp,ii,lpmax,ikang,yrk,mijk,xyzi,o1,OMEG
psp_ang.f:c...  mijk    maximum exponent value, for dimensioning
psp_ang.f:      integer i,j,k,lp,lpmax,ikang,mijk,lmax,ijk,mp,ii
psp_ang.f:      real*8 yrk(*),OMEGA(-lpmax:lpmax),o1,xyzi(0:mijk,0:mijk,0:mijk)
psp_ang.f:      ijk=k+j+i
psp_ang.f:      lmax=lp+ijk
psp_ang.f:            call omega0one(i,j,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i,j,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i,j+1,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i,j,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+1,j,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i,j+1,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i,j,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+1,j,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+1,j+1,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i,j+1,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i,j,k+2,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk)then
psp_ang.f:              call omega0one(i,j,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+1,j,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+2,j,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i,j+2,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+1,j+1,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i,j+1,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i,j,k+2,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk)then
psp_ang.f:              call omega1one(i,j,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+1,j,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+2,j,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i,j+2,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i,j+3,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+2,j+1,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+1,j+1,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i,j+3,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+2,j+1,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+1)then
psp_ang.f:              call omega0one(i,j+1,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i,j,k+3,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+1)then
psp_ang.f:              call omega0one(i,j,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+1,j+2,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+3,j,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+1)then
psp_ang.f:              call omega0one(i+1,j,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+2,j,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i,j+2,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+1,j+2,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+3,j,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i,j+3,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+2,j+1,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+1,j+1,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i,j+3,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+2,j+1,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+1)then
psp_ang.f:              call omega1one(i,j+1,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i,j,k+3,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+1)then
psp_ang.f:              call omega1one(i,j,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+1,j+2,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+3,j,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+1)then
psp_ang.f:              call omega1one(i+1,j,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+2,j,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i,j+2,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+1,j+2,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+3,j,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+3,j+1,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+1,j+3,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i,j+3,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+2,j+1,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+1,j+3,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+3,j+1,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+2)then
psp_ang.f:              call omega0one(i+1,j+1,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i,j+3,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+2,j+1,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+2)then
psp_ang.f:              call omega0one(i,j+1,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i,j,k+4,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+2)then
psp_ang.f:              call omega0one(i,j,k+2,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk)then
psp_ang.f:              call omega0one(i,j,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+1,j+2,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+3,j,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+2)then
psp_ang.f:              call omega0one(i+1,j,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i,j+4,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+2)then
psp_ang.f:              call omega0one(i,j+2,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+4,j,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+2)then
psp_ang.f:              call omega0one(i+2,j,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+1,j+2,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+3,j,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i,j+4,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+2,j+2,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+4,j,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+3,j+1,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+1,j+3,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i,j+3,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+2,j+1,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+1,j+3,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+3,j+1,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+2)then
psp_ang.f:              call omega1one(i+1,j+1,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i,j+3,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+2,j+1,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+2)then
psp_ang.f:              call omega1one(i,j+1,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i,j,k+4,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+2)then
psp_ang.f:              call omega1one(i,j,k+2,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk)then
psp_ang.f:              call omega1one(i,j,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+1,j+2,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+3,j,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+2)then
psp_ang.f:              call omega1one(i+1,j,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i,j+4,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+2)then
psp_ang.f:              call omega1one(i,j+2,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+4,j,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+2)then
psp_ang.f:              call omega1one(i+2,j,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+1,j+2,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+3,j,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i,j+4,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+2,j+2,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+4,j,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i,j+5,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+2,j+3,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+4,j+1,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+3,j+1,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+1,j+3,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i,j+5,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+2,j+3,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+3)then
psp_ang.f:              call omega0one(i,j+3,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+4,j+1,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+3)then
psp_ang.f:              call omega0one(i+2,j+1,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+1,j+3,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+3,j+1,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+3)then
psp_ang.f:              call omega0one(i+1,j+1,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i,j+5,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+2,j+3,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+3)then
psp_ang.f:              call omega0one(i,j+3,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+4,j+1,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+3)then
psp_ang.f:              call omega0one(i+2,j+1,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+1)then
psp_ang.f:              call omega0one(i,j+1,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i,j,k+5,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+3)then
psp_ang.f:              call omega0one(i,j,k+3,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+1)then
psp_ang.f:              call omega0one(i,j,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+1,j+4,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+3,j+2,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+3)then
psp_ang.f:              call omega0one(i+1,j+2,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+5,j,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+3)then
psp_ang.f:              call omega0one(i+3,j,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+1)then
psp_ang.f:              call omega0one(i+1,j,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i,j+4,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+3)then
psp_ang.f:              call omega0one(i,j+2,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+4,j,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+3)then
psp_ang.f:              call omega0one(i+2,j,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+1,j+4,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+3,j+2,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+3)then
psp_ang.f:              call omega0one(i+1,j+2,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+5,j,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+3)then
psp_ang.f:              call omega0one(i+3,j,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i,j+4,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+2,j+2,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+4,j,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+1,j+4,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+3,j+2,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+5,j,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i,j+5,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+2,j+3,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+4,j+1,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+3,j+1,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+1,j+3,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i,j+5,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+2,j+3,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+3)then
psp_ang.f:              call omega1one(i,j+3,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+4,j+1,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+3)then
psp_ang.f:              call omega1one(i+2,j+1,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+1,j+3,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+3,j+1,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+3)then
psp_ang.f:              call omega1one(i+1,j+1,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i,j+5,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+2,j+3,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+3)then
psp_ang.f:              call omega1one(i,j+3,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+4,j+1,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+3)then
psp_ang.f:              call omega1one(i+2,j+1,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+1)then
psp_ang.f:              call omega1one(i,j+1,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i,j,k+5,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+3)then
psp_ang.f:              call omega1one(i,j,k+3,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+1)then
psp_ang.f:              call omega1one(i,j,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+1,j+4,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+3,j+2,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+3)then
psp_ang.f:              call omega1one(i+1,j+2,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+5,j,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+3)then
psp_ang.f:              call omega1one(i+3,j,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+1)then
psp_ang.f:              call omega1one(i+1,j,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i,j+4,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+3)then
psp_ang.f:              call omega1one(i,j+2,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+4,j,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+3)then
psp_ang.f:              call omega1one(i+2,j,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+1,j+4,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+3,j+2,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+3)then
psp_ang.f:              call omega1one(i+1,j+2,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+5,j,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+3)then
psp_ang.f:              call omega1one(i+3,j,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i,j+4,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+2,j+2,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+4,j,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+1,j+4,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+3,j+2,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+5,j,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+1,j+5,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+3,j+3,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+5,j+1,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i,j+5,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+2,j+3,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+4,j+1,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+1,j+5,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+4)then
psp_ang.f:              call omega0one(i+1,j+3,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+5,j+1,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+4)then
psp_ang.f:              call omega0one(i+3,j+1,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i,j+5,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+2,j+3,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+4)then
psp_ang.f:              call omega0one(i,j+3,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+4,j+1,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+4)then
psp_ang.f:              call omega0one(i+2,j+1,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+1,j+5,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+3,j+3,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+4)then
psp_ang.f:              call omega0one(i+1,j+3,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+5,j+1,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+4)then
psp_ang.f:              call omega0one(i+3,j+1,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+2)then
psp_ang.f:              call omega0one(i+1,j+1,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i,j+5,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+2,j+3,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+4)then
psp_ang.f:              call omega0one(i,j+3,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+4,j+1,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+4)then
psp_ang.f:              call omega0one(i+2,j+1,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+2)then
psp_ang.f:              call omega0one(i,j+1,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i,j,k+6,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+4)then
psp_ang.f:              call omega0one(i,j,k+4,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+2)then
psp_ang.f:              call omega0one(i,j,k+2,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk)then
psp_ang.f:              call omega0one(i,j,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+1,j+4,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+3,j+2,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+4)then
psp_ang.f:              call omega0one(i+1,j+2,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+5,j,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+4)then
psp_ang.f:              call omega0one(i+3,j,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+2)then
psp_ang.f:              call omega0one(i+1,j,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i,j+6,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+2,j+4,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+4)then
psp_ang.f:              call omega0one(i,j+4,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+4,j+2,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+2)then
psp_ang.f:              call omega0one(i,j+2,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+6,j,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+4)then
psp_ang.f:              call omega0one(i+4,j,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+2)then
psp_ang.f:              call omega0one(i+2,j,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+1,j+4,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+3,j+2,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+4)then
psp_ang.f:              call omega0one(i+1,j+2,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+5,j,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+4)then
psp_ang.f:              call omega0one(i+3,j,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i,j+6,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+2,j+4,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+4)then
psp_ang.f:              call omega0one(i,j+4,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+4,j+2,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+4)then
psp_ang.f:              call omega0one(i+2,j+2,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+6,j,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+4)then
psp_ang.f:              call omega0one(i+4,j,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+1,j+4,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+3,j+2,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+5,j,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i,j+6,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+2,j+4,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+4,j+2,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega0one(i+6,j,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+1,j+5,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+3,j+3,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+5,j+1,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i,j+5,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+2,j+3,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+4,j+1,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+1,j+5,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+4)then
psp_ang.f:              call omega1one(i+1,j+3,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+5,j+1,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+4)then
psp_ang.f:              call omega1one(i+3,j+1,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i,j+5,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+2,j+3,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+4)then
psp_ang.f:              call omega1one(i,j+3,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+4,j+1,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+4)then
psp_ang.f:              call omega1one(i+2,j+1,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+1,j+5,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+3,j+3,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+4)then
psp_ang.f:              call omega1one(i+1,j+3,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+5,j+1,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+4)then
psp_ang.f:              call omega1one(i+3,j+1,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+2)then
psp_ang.f:              call omega1one(i+1,j+1,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i,j+5,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+2,j+3,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+4)then
psp_ang.f:              call omega1one(i,j+3,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+4,j+1,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+4)then
psp_ang.f:              call omega1one(i+2,j+1,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+2)then
psp_ang.f:              call omega1one(i,j+1,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i,j,k+6,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+4)then
psp_ang.f:              call omega1one(i,j,k+4,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+2)then
psp_ang.f:              call omega1one(i,j,k+2,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk)then
psp_ang.f:              call omega1one(i,j,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+1,j+4,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+3,j+2,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+4)then
psp_ang.f:              call omega1one(i+1,j+2,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+5,j,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+4)then
psp_ang.f:              call omega1one(i+3,j,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+2)then
psp_ang.f:              call omega1one(i+1,j,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i,j+6,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+2,j+4,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+4)then
psp_ang.f:              call omega1one(i,j+4,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+4,j+2,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+2)then
psp_ang.f:              call omega1one(i,j+2,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+6,j,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+4)then
psp_ang.f:              call omega1one(i+4,j,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+2)then
psp_ang.f:              call omega1one(i+2,j,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+1,j+4,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+3,j+2,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+4)then
psp_ang.f:              call omega1one(i+1,j+2,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+5,j,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+4)then
psp_ang.f:              call omega1one(i+3,j,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i,j+6,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+2,j+4,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+4)then
psp_ang.f:              call omega1one(i,j+4,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+4,j+2,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+4)then
psp_ang.f:              call omega1one(i+2,j+2,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+6,j,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            if(ii.le.ijk+4)then
psp_ang.f:              call omega1one(i+4,j,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+1,j+4,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+3,j+2,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+5,j,k+1,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i,j+6,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+2,j+4,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+4,j+2,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:            call omega1one(i+6,j,k,ii,yrk,mijk,xyzi,o1)
psp_ang.f:      subroutine omega1one(i,j,k,lone,yrk,mijk,xyzi,OMEGA)
psp_ang.f:c...  mijk    maximum exponent value, for dimensioning
psp_ang.f:      integer i,j,k,lmax,mijk,lone
psp_ang.f:      real*8 yrk(*),OMEGA,xyzi(0:mijk,0:mijk,0:mijk),angi
psp_ang.f:      subroutine omega0one(i,j,k,lone,yrk,mijk,xyzi,OMEGA)
psp_ang.f:c...  mijk    maximum exponent value, for dimensioning
psp_ang.f:      integer i,j,k,lmax,mijk,lone
psp_ang.f:      real*8 yrk(*),OMEGA,xyzi(0:mijk,0:mijk,0:mijk)
psp.f:      mijk=4*mlp
psp.f:      call preomega(mijk,bl(ixyzi))
psp.f:     $                  ncs,       ncf,    maxlp,     maxl,     mijk,
psp.f:     $                    ncs,  ncf,  maxlp,   maxl,   mijk,
psp.f:c...  mijk       dimension for xyzi array
psp.f:c         write(iout,*)'lpsp,len0,len',lpsp,len0,(len(ijz),ijz=0,lpsp)
psp.f:c         write(iout,*)'nr',(nrrad(irl+ijz),ijz=0,len0-1)
psp.f:c         write(iout,*)'coeff',(cradp(irl+ijz),ijz=0,len0-1)
psp.f:c         write(iout,*)'exp',(aradp(irl+ijz),ijz=0,len0-1)
psp.f:c           write(iout,*)'nr',(nrrad(irs+isk+ijz),ijz=0,len(l)-1)
psp.f:c           write(iout,*)'coeff',(cradp(irs+isk+ijz),ijz=0,len(l)-1)
psp.f:c           write(iout,*)'exp',(aradp(irs+isk+ijz),ijz=0,len(l)-1)
psp.f:     $               lmaxb,      mijk,       yra,       yrb,      xyzi,
psp.f:     $               lmaxb,      mijk,       yra,       yrb,      xyzi,
psp.f:     $               lmaxb,      mijk,       yra,       yrb,      xyzi,
psp.f:     $               lmaxb,      mijk,       yra,       yrb,      xyzi,
psp.f:                  coefij=coefi*coefj
psp.f:     $                                 pspi(ic,ip,jp,i,j)*coefij
psp.f:     $                     nmaxb,  mijk,    yra,   yrb,  xyzi,
psp.f:c...   mijk             maximum exponent in angular integrals
psp.f:     $                mijk,    yra,    yrb,   xyzi,     q,
psp.f:     $                     nmaxb,  mijk,    yra,   yrb,  xyzi,
psp.f:c...   mijk             maximum exponent in angular integrals
psp.f:     $                mijk,    yra,    yrb,   xyzi,     q,
psp.f:     $                     nmaxb,  mijk,    yra,   yrb,   xyzi,
psp.f:c...   mijk             maximum exponent in angular integrals
psp.f:     $                mijk,    yra,    yrb,   xyzi,     q,
psp.f:     $                     nmaxb,  mijk,    yra,   yrb,   xyzi,
psp.f:c...   mijk             maximum exponent in angular integrals
psp.f:     $                mijk,    yra,    yrb,   xyzi,     q,
psp.f:     $                      mijk,   yra,   yrb,  xyzi,     q,
psp.f:c...   mijk             maximum exponent in angular integrals
psp.f:     $                     nmaxb,maxn,maxn,maxn,1,maxn,mijk,ar)
psp.f:     $                    nmaxb,maxn,maxn,maxn,0,maxn,mijk,ar)
psp.f:     $                  maxn,maxn,maxn,maxn,mijk,ar)
psp.f:     $                nmaxb,nmaxb,nmaxb,nmaxa,nmaxb,maxn,maxl,mijk,ar)
psp.f:     $                  im,jm,km,iphik,maxn,mijk,ar1)
psp.f:c...  mijk          maximum exponent for angular integrals,
psp.f:            ijk=i+j+k
psp.f:            if(ijk.le.maxn)then
psp.f:                call omega1(i,j,k,yr,mijk,xyzi,omega)
psp.f:                call omega0(i,j,k,yr,mijk,xyzi,omega)
psp.f:              do l=mod(ijk,2),ijk,2
psp.f:                sum=sum+omega(l)*q1(ijk,l)
psp.f:     $                  im,jm,km,maxn,mijk,ar1)
psp.f:c...  mijk          maximum exponent for angular integrals,
psp.f:      dimension xyzi(0:mijk,0:mijk,0:mijk)
psp.f:            ijk=i+j+k
psp.f:            if(ijk.le.maxn)then
psp.f:                sum=q1(ijk,0)*xyzi(i,j,k)
psp.f:     $                  nmaxa,nmaxb,maxn,maxl,mijk,ar2)
psp.f:c...  mijk          maximum exponent for angular integrals,
psp.f:      integer lp,am,bm,cm,dm,em,fm,maxn,maxl,mijk,ika,ikb,nmaxa,nmaxb
psp.f:     $                               yra,mijk,xyzi,o1,o2a)
psp.f:     $                                  mijk,xyzi,o1,o2b)
psp.f:     $                                mijk,xyzi,o1,o2b)
psp.f:     $                                 yra,mijk,xyzi,o1,o2a)
pspgrad.f:      mijk=4*mlp
pspgrad.f:      call preomega(mijk,bl(ixyzi))
pspgrad.f:     $                     ncs,       ncf,    maxlp,     maxl,     mijk,
pspgrad.f:     $                    ncs,  ncf,  maxlp,   maxl,   mijk,
pspgrad.f:c...  mijk       dimension for xyzi array
pspgrad.f:      nderij=nder
pspgrad.f:      nderc=nder-nderij
pspgrad.f:        if(nderp.ge.nderij+1)then
pspgrad.f:        nder=nderij
pspgrad.f:     $            lmaxb+1,      mijk,       yra,      yrb,       xyzi,
pspgrad.f:                  dij=dens(ii+icj)
pspgrad.f:                  if(ici.ne.icj)dij=dij+dij
pspgrad.f:                    forc(idx)=forc(idx)+dij*pspic(icpx)
pspgrad.f:                    forc(idy)=forc(idy)+dij*pspic(icpy)
pspgrad.f:                    forc(idz)=forc(idz)+dij*pspic(icpz)
pspgrad.f:     $                     nmaxb,  mijk,   yra,   yrb,   xyzi,
pspgrad.f:c...   mijk             maximum exponent in angular integrals
pspgrad.f:     $                    mijk,    yra,   yrb,   xyzi,     q,
psphess.f:      mijk=4*mlp
psphess.f:      call preomega(mijk,bl(ixyzi))
psphess.f:     $                  ncs,      ncf,      maxlp,      maxl,      mijk,
psphess.f:     $                    ncs,     ncf,   maxlp,    maxl,   mijk,
psphess.f:c...  mijk       dimension for xyzi array
psphess.f:      nderij=nder
psphess.f:      nderc=nder-nderij
psphess.f:        if(nderp.ge.nderij+1)then
psphess.f:        nder=nderij
psphess.f:     $            lmaxb+1,      mijk,       yra,      yrb,       xyzi,
psphess.f:                   iijj=ii+icj
psphess.f:                      fda(1,idat,iijj)=fda(1,idat,iijj)-pspic(iab)
psphess.f:                      fda(2,idat,iijj)=fda(2,idat,iijj)-pspic(iab)
psphess.f:                      fda(3,idat,iijj)=fda(3,idat,iijj)-pspic(iab)
psphess.f:                      fda(1,idat,iijj)=fda(1,idat,iijj)-pspic(iab)
psphess.f:                      fdb(1,idat,iijj)=fdb(1,idat,iijj)-pspic(iab)
psphess.f:                      fda(2,idat,iijj)=fda(2,idat,iijj)-pspic(iab)
psphess.f:                      fdb(2,idat,iijj)=fdb(2,idat,iijj)-pspic(iab)
psphess.f:                      fda(3,idat,iijj)=fda(3,idat,iijj)-pspic(iab)
psphess.f:                      fdb(3,idat,iijj)=fdb(3,idat,iijj)-pspic(iab)
psphess.f:      mijk=4*mlp
psphess.f:      call preomega(mijk,bl(ixyzi))
psphess.f:     $                  ncs,       ncf,     maxlp,      maxl,      mijk,
psphess.f:     $                    ncs,  ncf,  maxlp,   maxl,   mijk,
psphess.f:c...  mijk       dimension for xyzi array
psphess.f:      nderij=nder
psphess.f:      nderc=nder-nderij
psphess.f:        if(nderp.ge.nderij+1)then
psphess.f:        nder=nderij
psphess.f:c           write(iout,*)'lpsp,len0,len',lpsp,len0,(len(ijz),ijz=0,lpsp)
psphess.f:c           write(iout,*)'nr',(nrrad(irl+ijz),ijz=0,len0-1)
psphess.f:c           write(iout,*)'coeff',(cradp(irl+ijz),ijz=0,len0-1)
psphess.f:c           write(iout,*)'exp',(aradp(irl+ijz),ijz=0,len0-1)
psphess.f:     $              lmaxb+2,      mijk,       yra,       yrb,      xyzi,
psphess.f:     $                       pspic,  atder, nderij)
psphess.f:                    dij=dens(ii+icj)
psphess.f:                    if(ici.ne.icj)dij=dij+dij
psphess.f:                    do id=1,nderij
psphess.f:                        do jd=1,nderij
psphess.f:                    hess(idx+jdx)=hess(idx+jdx)+dij*pspic(icpx+jcpx)!xx
psphess.f:                    hess(idy+jdx)=hess(idy+jdx)+dij*pspic(icpy+jcpx)!yx
psphess.f:                    hess(idz+jdx)=hess(idz+jdx)+dij*pspic(icpz+jcpx)!zx
psphess.f:                    hess(idx+jdy)=hess(idx+jdy)+dij*pspic(icpx+jcpy)!xy
psphess.f:                    hess(idy+jdy)=hess(idy+jdy)+dij*pspic(icpy+jcpy)!yy
psphess.f:                    hess(idz+jdy)=hess(idz+jdy)+dij*pspic(icpz+jcpy)!zy
psphess.f:                    hess(idx+jdz)=hess(idx+jdz)+dij*pspic(icpx+jcpz)!xz
psphess.f:                    hess(idy+jdz)=hess(idy+jdz)+dij*pspic(icpy+jcpz)!yz
psphess.f:                    hess(idz+jdz)=hess(idz+jdz)+dij*pspic(icpz+jcpz)!zz
psphess.f:                    do id=nderij+1,nder
psphess.f:                        do jd=1,nderij
psphess.f:                    hess(idx+jdx)=hess(idx+jdx)+dij*pspic(icpx+jcpx)!xx
psphess.f:                    hess(idy+jdx)=hess(idy+jdx)+dij*pspic(icpy+jcpx)!yx
psphess.f:                    hess(idz+jdx)=hess(idz+jdx)+dij*pspic(icpz+jcpx)!zx
psphess.f:                    hess(idx+jdy)=hess(idx+jdy)+dij*pspic(icpx+jcpy)!xy
psphess.f:                    hess(idy+jdy)=hess(idy+jdy)+dij*pspic(icpy+jcpy)!yy
psphess.f:                    hess(idz+jdy)=hess(idz+jdy)+dij*pspic(icpz+jcpy)!zy
psphess.f:                    hess(idx+jdz)=hess(idx+jdz)+dij*pspic(icpx+jcpz)!xz
psphess.f:                    hess(idy+jdz)=hess(idy+jdz)+dij*pspic(icpy+jcpz)!yz
psphess.f:                    hess(idz+jdz)=hess(idz+jdz)+dij*pspic(icpz+jcpz)!zz
psphess.f:                    hess(idx+jdx)=hess(idx+jdx)+dij*pspic(icpx+jcpx)!xx
psphess.f:                    hess(idy+jdx)=hess(idy+jdx)+dij*pspic(icpy+jcpx)!yx
psphess.f:                    hess(idz+jdx)=hess(idz+jdx)+dij*pspic(icpz+jcpx)!zx
psphess.f:                    hess(idx+jdy)=hess(idx+jdy)+dij*pspic(icpx+jcpy)!xy
psphess.f:                    hess(idy+jdy)=hess(idy+jdy)+dij*pspic(icpy+jcpy)!yy
psphess.f:                    hess(idz+jdy)=hess(idz+jdy)+dij*pspic(icpz+jcpy)!zy
psphess.f:                    hess(idx+jdz)=hess(idx+jdz)+dij*pspic(icpx+jcpz)!xz
psphess.f:                    hess(idy+jdz)=hess(idy+jdz)+dij*pspic(icpy+jcpz)!yz
psphess.f:                    hess(idz+jdz)=hess(idz+jdz)+dij*pspic(icpz+jcpz)!zz
psphess.f:                        do jd=1,nderij
psphess.f:                    hess(idx+jdx)=hess(idx+jdx)+dij*pspic(icpx+jcpx)!xx
psphess.f:                    hess(idy+jdx)=hess(idy+jdx)+dij*pspic(icpy+jcpx)!yx
psphess.f:                    hess(idz+jdx)=hess(idz+jdx)+dij*pspic(icpz+jcpx)!zx
psphess.f:                    hess(idx+jdy)=hess(idx+jdy)+dij*pspic(icpx+jcpy)!xy
psphess.f:                    hess(idy+jdy)=hess(idy+jdy)+dij*pspic(icpy+jcpy)!yy
psphess.f:                    hess(idz+jdy)=hess(idz+jdy)+dij*pspic(icpz+jcpy)!zy
psphess.f:                    hess(idx+jdz)=hess(idx+jdz)+dij*pspic(icpx+jcpz)!xz
psphess.f:                    hess(idy+jdz)=hess(idy+jdz)+dij*pspic(icpy+jcpz)!yz
psphess.f:                    hess(idz+jdz)=hess(idz+jdz)+dij*pspic(icpz+jcpz)!zz
psphess.f:     $                         pspic,  atder, nderij)
psphess.f:c...  nderij      derivatives with respect basis function center.
psphess.f:                  coefij=coefi*coefj
psphess.f:                  do iat=1,nderij
psphess.f:                      do jat=1,nderij
psphess.f:     $                     pspi(ia3+1,ja3+1,ip,jp,i,j)*coefij
psphess.f:     $                     pspi(ia3+1,ja3+2,ip,jp,i,j)*coefij
psphess.f:     $                     pspi(ia3+1,ja3+3,ip,jp,i,j)*coefij
psphess.f:     $                     pspi(ia3+2,ja3+1,ip,jp,i,j)*coefij
psphess.f:     $                     pspi(ia3+2,ja3+2,ip,jp,i,j)*coefij
psphess.f:     $                     pspi(ia3+2,ja3+3,ip,jp,i,j)*coefij
psphess.f:     $                     pspi(ia3+3,ja3+1,ip,jp,i,j)*coefij
psphess.f:     $                     pspi(ia3+3,ja3+2,ip,jp,i,j)*coefij
psphess.f:     $                     pspi(ia3+3,ja3+3,ip,jp,i,j)*coefij
psphess.f:                  do iat=nderij+1,nder
psphess.f:     $                 pspi(ia3+1,ia3+1,ip,jp,i,j)*coefij
psphess.f:     $                 pspi(ia3+1,ia3+2,ip,jp,i,j)*coefij
psphess.f:     $                 pspi(ia3+1,ia3+3,ip,jp,i,j)*coefij
psphess.f:     $                 pspi(ia3+2,ia3+1,ip,jp,i,j)*coefij
psphess.f:     $                 pspi(ia3+2,ia3+2,ip,jp,i,j)*coefij
psphess.f:     $                 pspi(ia3+2,ia3+3,ip,jp,i,j)*coefij
psphess.f:     $                 pspi(ia3+3,ia3+1,ip,jp,i,j)*coefij
psphess.f:     $                 pspi(ia3+3,ia3+2,ip,jp,i,j)*coefij
psphess.f:     $                 pspi(ia3+3,ia3+3,ip,jp,i,j)*coefij
psphess.f:                      do jat=1,nderij
psphess.f:     $                     pspi(ia3+1,ja3+1,ip,jp,i,j)*coefij
psphess.f:     $                     pspi(ia3+1,ja3+2,ip,jp,i,j)*coefij
psphess.f:     $                     pspi(ia3+1,ja3+3,ip,jp,i,j)*coefij
psphess.f:     $                     pspi(ia3+2,ja3+1,ip,jp,i,j)*coefij
psphess.f:     $                     pspi(ia3+2,ja3+2,ip,jp,i,j)*coefij
psphess.f:     $                     pspi(ia3+2,ja3+3,ip,jp,i,j)*coefij
psphess.f:     $                     pspi(ia3+3,ja3+1,ip,jp,i,j)*coefij
psphess.f:     $                     pspi(ia3+3,ja3+2,ip,jp,i,j)*coefij
psphess.f:     $                     pspi(ia3+3,ja3+3,ip,jp,i,j)*coefij
psphess.f:     $                     pspi(ja3+1,ia3+1,ip,jp,i,j)*coefij
psphess.f:     $                     pspi(ja3+1,ia3+2,ip,jp,i,j)*coefij
psphess.f:     $                     pspi(ja3+1,ia3+3,ip,jp,i,j)*coefij
psphess.f:     $                     pspi(ja3+2,ia3+1,ip,jp,i,j)*coefij
psphess.f:     $                     pspi(ja3+2,ia3+2,ip,jp,i,j)*coefij
psphess.f:     $                     pspi(ja3+2,ia3+3,ip,jp,i,j)*coefij
psphess.f:     $                     pspi(ja3+3,ia3+1,ip,jp,i,j)*coefij
psphess.f:     $                     pspi(ja3+3,ia3+2,ip,jp,i,j)*coefij
psphess.f:     $                     pspi(ja3+3,ia3+3,ip,jp,i,j)*coefij
psphess.f:     $                     nmaxb,  mijk,   yra,   yrb,   xyzi,
psphess.f:c...   mijk             maximum exponent in angular integrals
psphess.f:     $                    mijk,    yra,   yrb,   xyzi,     q,
pspnmr.f:      mijk=4*mlp
pspnmr.f:      call preomega(mijk,bl(ixyzi))
pspnmr.f:     $                  ncs,       ncf,     maxlp,      maxl,      mijk,
pspnmr.f:     $                    ncs,  ncf,  maxlp,   maxl,   mijk,
pspnmr.f:c...  mijk       dimension for xyzi array
pspnmr.f:     $           lmaxb+1,      mijk,       yra,       yrb,      xyzi,
pspnmr.f:                iijj=ii+icj
pspnmr.f:                fd(iijj,1)=fd(iijj,1)-pspic(1+ind)
pspnmr.f:                fd(iijj,2)=fd(iijj,2)-pspic(2+ind)
pspnmr.f:                fd(iijj,3)=fd(iijj,3)-pspic(3+ind)
pspnmr.f:     $                     nmaxb,  mijk,   yra,   yrb,  xyzi,
pspnmr.f:c...   mijk             maximum exponent in angular integrals
pspnmr.f:     $                    mijk,    yra,   yrb,   xyzi,     q,
pvm_lib.f90:!  isize   -  size of present granule (in "ij units")
rhf5.f:      common /dftpnt/ ird,iaij,idst,iixx,iiwt,ipre,iexp,
rhf5.f:c             lindex(1,iqu,ijkl)=icf_start,
rhf5.f:c             lindex(2,iqu,ijkl)=jcf_start etc.
rhf5.f:     $                NBatch, lgrid,  lsemit, bl(idst), bl(iaij),
rhf5.f,v:      common /dftpnt/ ird,iaij,idst,iixx,iiwt,ipre,iexp,
rhf5.f,v:c             lindex(1,iqu,ijkl)=icf_start,
rhf5.f,v:c             lindex(2,iqu,ijkl)=jcf_start etc.
rhf5.f,v:     $                NBatch, lgrid,  lsemit, bl(idst), bl(iaij),
rhf5_OLD.f:      common /dftpnt/ ird,iaij,idst,iixx,iiwt,ipre,iexp,
rhf5_OLD.f:c             lindex(1,iqu,ijkl)=icf_start,
rhf5_OLD.f:c             lindex(2,iqu,ijkl)=jcf_start etc.
rhf5_OLD.f:     $                NBatch, lgrid,  lsemit, bl(idst), bl(iaij),
rmp2.f:     2               'prin','grad','pmij','scs ','type',
rmp2.f:c  If gradient: filname3=Tij amplitudes; filname4=Kov amplitudes
rmp2.f:      ipmij=0
rmp2.f:        ipmij=iopv(1,13)
rmp2.f:         filname3=scrfile(1:len)//'.Tij'
rmp2.f:c -- also open files for virtual occupied blocks of kij
rmp2.f:      ttkij=zero
rmp2.f:     6                iprnt,      ipmij,      ipairpr,    bl(ixmos),
rmp2.f:     $   ttkij,       tmp2e,      ncore,      igran2pair,ipair2gran,
rmp2.f:     6                iprnt,      ipmij,      ipairpr,    bl(ixmos),
rmp2.f:     $   ttkij,       tmp2e,      ncore,      igran2pair,ipair2gran,
rmp2.f:          write(iout,1010) tmbtr/sixty,ttkij/sixty,tmp2e/sixty
rmp2.f: 1010     format(' Time for saving <Tij> in MO basis:',f8.2,' min',/,
rmp2.f:          write(iout,*) ' <Tij>: ',nxrec,' records written on unit ',
rmp2.f:      subroutine TransVirt(ncf,i,j,iprnt,ipmij,ipairpr,virt)
rmp2.f:c  ipmij:  flag (>0) for printing selected AO exchange matrices (test)
rmp2.f:      if(ipmij.ge.1) then
rmp2.f:        ij=i*(i-1)/2+j
rmp2.f:        if(ij.eq.ipairpr) then
rmp2.f:     $                    x,      e,      eij,    tnorm,  eijs,
rmp2.f:     $                    eijt,   eijpar, eijanti)
rmp2.f:c  eij:            pair energy
rmp2.f:c  eijs:           singlet coupled
rmp2.f:c  eijt:           triplet coupled
rmp2.f:c  eijpar:         parallel spin contribution for scaled MP2
rmp2.f:c  eijanti:        antiparallel spin contribution for scaled MP2
rmp2.f:      eij=zero
rmp2.f:      eijs=zero
rmp2.f:      eijt=zero
rmp2.f:      eijpar=zero
rmp2.f:      eijanti=zero
rmp2.f:          tij= x(ia,ib)*rdenom
rmp2.f:          tij1=(x(ia,ib)+x(ia,ib)-x(ib,ia))*rdenom
rmp2.f:          tnorm=tnorm+tij*tij1
rmp2.f:          eij=eij+x(ia,ib)*tij1
rmp2.f:          eijs=eijs+tij*(x(ia,ib)+x(ib,ia))
rmp2.f:          eijt=eijt+tij*(x(ia,ib)-x(ib,ia))
rmp2.f:          eijpar=eijpar+tij*(x(ia,ib)-x(ib,ia))
rmp2.f:          eijanti=eijanti+tij*x(ia,ib)
rmp2.f:      eijs=half*eijs
rmp2.f:      eijt=three*eijt
rmp2.f:      eijpar=eijpar+eijpar
rmp2.f:        eij=eij+eij
rmp2.f:        eijs=eijs+eijs
rmp2.f:        eijanti=eijanti+eijanti
rmp2.f:      subroutine SaveTij(ncf,  nmo,  nval,  nvir,  i,
rmp2.f:     2                   x,   ndisk, ij)
rmp2.f:C  This subroutine starts with the internal exchange matrix Kij in
rmp2.f:C  (virtual) MO basis, generates the amplitudes Tij by dividing by
rmp2.f:C  and the A1-terms are best calculated using Tij in MO basis.
rmp2.f:C  intres:    integer matrix for residuum Tij in AO basis
rmp2.f:C  x:         matrix with Tij in virtual basis
rmp2.f:C  ij:        record number
rmp2.f:cc          write(6,*) ' Threshold Tij - ia:',ia,' ib:',ib,' i1:',i1
rmp2.f:      write(ndisk,rec=ij) int1,intres
rmp2.f:C========SaveKij=====================================================
rmp2.f:      subroutine saveKij(ncf,nval,nvir,x,intres,int1,
rmp2.f:     1                   ij,thresh,length,ndisk,ncore)
rmp2.f:         call matmmult('tss02','occa','kijvo')
rmp2.f:         call matmmult('tss02','occu','kijvo')
rmp2.f:      call matscal('kijvo',one/thresh)
rmp2.f:cc          write(6,*) ' Threshold Kij - imv:',imv,' i1:',i1
rmp2.f:         call matmmult('tss02','occa','kijvo')
rmp2.f:         call matmmult('tss02','occu','kijvo')
rmp2.f:      call matscal('kijvo',one/thresh)
rmp2.f:cc          write(6,*) ' Threshold Kij - imv:',imv,' i1:',i1
rmp2.f:      write(ndisk,rec=ij) int1,intres
rmp2.f:c  ijfirst:first pair to be sorted
rmp2.f:c  ijlast: last pair to be sorted
rmp2.f:c    the pair number (ij) is i*(i-1)/2+j. Integrals (mu,i|j,nu)
rmp2.f:c    where ijfirst<=(ij)<=ijlast will be sorted
rmp2.f:      ijfirst=igran2pair(1,igrfirst)
rmp2.f:      ijlast =igran2pair(2,igrlast)
rmp2.f:cc      write(6,'(A,2I5)') "Binsort: ",ijfirst,ijlast
rmp2.f:        ij=0
rmp2.f:          ij=ij+1
rmp2.f:          if(ij.lt.ijfirst) cycle
rmp2.f:          if(ij.gt.ijlast) cycle
rmp2.f:            icounter(ij)=icounter(ij)+2
rmp2.f:            ibins(icounter(ij)-1,ij)=i1pair(i,j)
rmp2.f:            ibins(icounter(ij),ij)=longint
rmp2.f:            ibin1(icounter(ij)/2,ij)=int1(i,j)
rmp2.f:            if(icounter(ij).ge.2*lbin) then
rmp2.f:              igran=ipair2gran(ij)
rmp2.f:              icounter(ij)=icounter(ij)+2
rmp2.f:              ibins(icounter(ij)-1,ij)=i1pair(j,i)
rmp2.f:              ibins(icounter(ij),ij)=longint1
rmp2.f:              ibin1(icounter(ij)/2,ij)=int1(j,i)
rmp2.f:              if(icounter(ij).ge.2*lbin) then
rmp2.f:                igran=ipair2gran(ij)
rmp2.f:      do ij=1,npairs
rmp2.f:        if(icounter(ij).gt.0) then
rmp2.f:          igran=ipair2gran(ij)
rmp2.f:c  This routine reads all bins belonging to pair ij
rmp2.f:c  scanned for contributions to pair (ij); this should be replaced
rmp2.f:c  j, resp.) of the orbitals i and j consituting the pair (ij) under
rmp2.f:c  ij =     pair under consideration
rmp2.f:      ijstart=igran2pair(1,igran)
rmp2.f:      ijstop =igran2pair(2,igran)
rmp2.f:          do ij=ijstart,ijstop
rmp2.f:            ijind=ij-ijstart
rmp2.f:cc            write(6,*) '-- IJ index is: ',ijind,' --'
rmp2.f:            call get_ij_half(ij,i,j)
rmp2.f:            longint=ibins(2,jj,ijind)
rmp2.f:cc              call reconstruct(ibins(1,jj,ijind),ibin1(jj,ijind),xx)
rmp2.f:              If(ibin1(jj,ijind).eq.0) Then
rmp2.f:                xx = ibins(1,jj,ijind)*thresh
rmp2.f:              Else If(ibin1(jj,ijind).gt.0) Then
rmp2.f:                xx = ibins(1,jj,ijind)*thresh
rmp2.f:                xx = xx + SIGN(ibin1(jj,ijind)*dblcmp,xx)
rmp2.f:                xx = ibins(1,jj,ijind)*thresh*10.0d0**(-ibin1(jj,ijind))
rmp2.f:              xmat(mu,lam,ijind)=xx
rmp2.f:                xmat(mu2,lam2,ijind)=xxx
rmp2.f:cc              write(6,*) '  X(',mu,',',lam,') = ',xmat(mu,lam,ijind)
rmp2.f:     5                iprnt,      ipmij,      ipairpr,    xmos,
rmp2.f:     9   ttkij,       tmp2e,      ncore, igran2pair,ipair2gran,
rmp2.f:        call matdef('kijvo','r',nvirt,nvmo)
rmp2.f:        ikijvo=mataddr('kijvo')
rmp2.f:      ij=0
rmp2.f:      ijstart=igran2pair(1,igran)
rmp2.f:      ijstop =igran2pair(2,igran)
rmp2.f:      do ij=ijstart,ijstop
rmp2.f:        ijind=ij-ijstart
rmp2.f:        call get_ij_half(ij,i,j)
rmp2.f:        call matconn('xmat','q',ncf,ncf,ixmat+ijind*ncf*ncf)
rmp2.f:c -- Kij in AO basis now in xmat
rmp2.f:        call elapsec(tkij1)
rmp2.f:        call SaveKij(ncf,      nvmo,   nvirt,bl(ikijvo),bl(ibins),
rmp2.f:     1               bl(ibin1),ij,     thresh, lengvo,  ndisk5,
rmp2.f:        call elapsec(tkij2)
rmp2.f:        ttkij=ttkij+tkij2-tkij1
rmp2.f:      call TransVirt(ncf,i,j,iprnt,ipmij,ipairpr,virt)
rmp2.f:     $              xmos,   epsi,   eij,    xnorm,  eijs,
rmp2.f:     $              eijt,   eijpar, eijanti)
rmp2.f:      emp2=emp2+eij
rmp2.f:      emps=emps+eijs
rmp2.f:      empt=empt+eijt
rmp2.f:      emppar=emppar+eijpar
rmp2.f:      empanti=empanti+eijanti
rmp2.f:        tmp2e=tmp2e+tt1-tkij2
rmp2.f:        write(6,*) "ij",ij
rmp2.f:        call SaveTij(ncf,    nmo,    nval,   nvirt,  i,
rmp2.f:     2               xmos,   ndisk3, ij)
rmp2.f:      if(iprnt.gt.2) write(iout,100) i,j,ij,eij,xnorm
rmp2.f:      if(.NOT.emp2only) call matrem('kijvo')
rmp2.f:C      Where Rfac(i,j) = sqrt(ri*rj)/(rij**3) * 1/(-ei-ej)
rmp2.f:      call Dmxij_new(bl(idicf), DMax,  ncf,      ncs,      nval,
rmp2.f:c      dmxij_new
rmp2.f:      call dmxijc_new(bl(idicf),  bl(idics),  ncf,  ncs,  norbitals,
rmp2.f:c      Use the accelerated version dmxij_new
rmp2.f:c      This is a much faster version of dmxijc
rmp2.f:c     Dkl *{ (ij|kl) - 0.5(il|kj) } where kl belong to small bs only.
rmp2.f:c transfer density dens(ij) from the smalll basis set to the big basis.
rmp2.f:            ijs=iis+jcf_sm
rmp2.f:            ijb=iib+jcf_bg
rmp2.f:            densbig(ijb)=densmal(ijs)
rmp2.f:c transform ordinary density dens(ij) into denspar(ics,jcs)
run_mode.f:      common /memor1/ iisd,jjsd,ijbld
run_mode.f:      common /memors/ nsym ,ijshp,isymm
run_mode.f:      call statint(inx,bl(iisd),bl(jjsd),bl(ijbld),bl(npard),nbl2,
run_mode.f:     *                  bl(ijbld),bl(iisd),bl(jjsd),inx,
run_mode.f:     *                  bl(ijbld),bl(iisd),bl(jjsd),inx,
run_mode.f:      subroutine statint(inx,iis,jjs,ijbl,npar,nbl2,
run_mode.f:      dimension inx(12,*),iis(*),jjs(*),ijbl(nbl2,*), npar(*)
run_mode.f:      nparij=npar(ibl)
run_mode.f:            ijcs1=ijbl(ibl,1)
run_mode.f:            ics1=iis(ijcs1)
run_mode.f:            jcs1=jjs(ijcs1)
run_mode.f:            ijs1=inx(3,ics1)*inx(3,jcs1)
run_mode.f:            ijg1=(inx(4,ics1)+1)*(inx(4,jcs1)+1)
run_mode.f:ccc   call parinteg(ibl,nparij,ijbl,nbl2,iis,jjs,ijnte,inte,ijxint)
run_mode.f:            klcs1=ijbl(kbl,1)
run_mode.f:            ijkls1=ijs1*kls1
run_mode.f:            ijklg1=ijg1*klg1
run_mode.f:               ijklq=nparij*(nparij+1)/2
run_mode.f:               ijklq=nparij*nparkl
run_mode.f:            ijklq=ijklq*ijklg1
run_mode.f:            qijkl=dble(ijklq)
run_mode.f:            qijkl=qijkl*sparsity
run_mode.f:            xinteg1=qijkl*dble(ijkls1)
run_mode.f:            xqrt_all=xqrt_all + qijkl
run_mode.f:         if(ijkls1.le. 16) then   ! only up to (ll|ss)
run_mode.f:           xqrt_part1=xqrt_part1 + qijkl
run_mode.f:         if(ijkls1.le.256) then   ! only up to (ll|ll)
run_mode.f:           xqrt_part2=xqrt_part2 + qijkl
run_mode.f:      subroutine parinteg(ibl,nparij,ijbl,nbl2,iis,jjs,
run_mode.f:     *                    ijnt,int, ijxint)
run_mode.f:      dimension iis(*),jjs(*),ijbl(nbl2,*)
run_mode.f:       ijeq=0
run_mode.f:       do 1001 ijpar=1,nparij
run_mode.f:        ijcs=ijbl(ibl,ijpar)
run_mode.f:        ics=iis(ijcs)
run_mode.f:        jcs=jjs(ijcs)
run_mode.f:        if(jcs.eq.ics) ijeq=ijeq+1
run_mode.f:       ijxint=(nparij-ijeq)*ijnt + ijeq*int*(int+1)/2
run_mode.f:         ij=lind(icf)+jcf
run_mode.f:         sij=overlap(ij)
run_mode.f:         if(abs(sij).ge.thres) xint1=xint1+1.d0
run_mode.f:            iij=0
run_mode.f:               iij=iij+1
run_mode.f:                   ij=ii+jff
run_mode.f:                   oneint(ij)=s(iij)
run_mode.f:            ij=0
run_mode.f:               ij=ij+1
run_mode.f:               s(ij)=s(ij)+    s0  *coefi*coefj
run_mode.f:      subroutine set_int_price(nbl2,npar,nsupb,ijbl,iis,jjs,inx,
run_mode.f:      dimension npar(nbl2),ijbl(nbl2,*)
run_mode.f:         ijpar=npar(ibl)
run_mode.f:         ijcs1=ijbl(ibl,1)
run_mode.f:         ics1=iis(ijcs1)
run_mode.f:         jcs1=jjs(ijcs1)
run_mode.f:         ijs1=inx(3,ics1)*inx(3,jcs1)
run_mode.f:         ijg1=(inx(4,ics1)+1)*(inx(4,jcs1)+1)
run_mode.f:            klcs1=ijbl(kbl,1)
run_mode.f:               ijklq=ijpar*(ijpar+1)/2
run_mode.f:               ijklq=ijpar*klpar
run_mode.f:            ijklq=ijklq*ijg1*klg1
run_mode.f:            q=dble(ijklq)
run_mode.f:            xinteg=q*dble(ijs1*kls1)
run_mode.f:         ijpar=npar(ibl)
run_mode.f:         ijcs1=ijbl(ibl,1)
run_mode.f:         ics1=iis(ijcs1)
run_mode.f:         jcs1=jjs(ijcs1)
run_mode.f:         ijs1=inx(3,ics1)*inx(3,jcs1)
run_mode.f:         ijg1=(inx(4,ics1)+1)*(inx(4,jcs1)+1)
run_mode.f:            klcs1=ijbl(kbl,1)
run_mode.f:                  ijklq=ijpar*(ijpar+1)/2
run_mode.f:                  ijklq=ijpar*klpar
run_mode.f:               ijklq=ijklq*ijg1*klg1
run_mode.f:               q=dble(ijklq)
run_mode.f:               xinteg=q*dble(ijs1*kls1)
run_mode.f:      common /memor1/ iisd,jjsd,ijbld
run_mode.f:      common /memors/ nsym ,ijshp,isymm
run_mode.f:      call statint_ftc(inx,bl(iisd),bl(jjsd),bl(ijbld),bl(npard),nbl2,
run_mode.f:     *                  bl(ijbld),bl(iisd),bl(jjsd),inx,
run_mode.f:     *                  bl(ijbld),bl(iisd),bl(jjsd),inx,
run_mode.f:      subroutine statint_ftc(inx,iis,jjs,ijbl,npar,nbl2,
run_mode.f:      dimension inx(12,*),iis(*),jjs(*),ijbl(nbl2,*), npar(*)
run_mode.f:      nparij=npar(ibl)
run_mode.f:            ijcs1=ijbl(ibl,1)
run_mode.f:            ics1=iis(ijcs1)
run_mode.f:            jcs1=jjs(ijcs1)
run_mode.f:            ijs1=inx(3,ics1)*inx(3,jcs1)
run_mode.f:            ijg1=(inx(4,ics1)+1)*(inx(4,jcs1)+1)
run_mode.f:            klcs1=ijbl(kbl,1)
run_mode.f:            ijkls1=ijs1*kls1
run_mode.f:            ijklg1=ijg1*klg1
run_mode.f:            ijklq =0
run_mode.f:            do ijpar=1,nparij
run_mode.f:               ijcs=ijbl(ibl,ijpar)
run_mode.f:               ics=iis(ijcs)
run_mode.f:               jcs=jjs(ijcs)
run_mode.f:               ijftc=iftc1(ics)+iftc1(jcs)
run_mode.f:                  nparklx=ijpar
run_mode.f:                  klcs=ijbl(kbl,klpar)
run_mode.f:                  if(ijftc+klftc.gt.1) ijklq=ijklq+1
run_mode.f:            ijklq=ijklq*ijklg1
run_mode.f:            qijkl=dble(ijklq)
run_mode.f:            qijkl=qijkl*sparsity
run_mode.f:            xinteg1=qijkl*dble(ijkls1)
run_mode.f:            xqrt_all=xqrt_all + qijkl
run_mode.f:         if(ijkls1.le. 16) then   ! only up to (ll|ss)
run_mode.f:           xqrt_part1=xqrt_part1 + qijkl
run_mode.f:         if(ijkls1.le.256) then   ! only up to (ll|ll)
run_mode.f:           xqrt_part2=xqrt_part2 + qijkl
run_mode.f:      subroutine set_int_price_ftc(nbl2,npar,nsupb,ijbl,iis,jjs,inx,
run_mode.f:      dimension npar(nbl2),ijbl(nbl2,*)
run_mode.f:         ijpar=npar(ibl)
run_mode.f:         ijcs1=ijbl(ibl,1)
run_mode.f:         ics1=iis(ijcs1)
run_mode.f:         jcs1=jjs(ijcs1)
run_mode.f:         ijs1=inx(3,ics1)*inx(3,jcs1)
run_mode.f:         ijg1=(inx(4,ics1)+1)*(inx(4,jcs1)+1)
run_mode.f:            klcs1=ijbl(kbl,1)
run_mode.f:            ijklq=0
run_mode.f:            do ijp=1,ijpar
run_mode.f:               ijcs=ijbl(ibl,ijp)
run_mode.f:               ics=iis(ijcs)
run_mode.f:               jcs=jjs(ijcs)
run_mode.f:               ijftc=iftc1(ics)+iftc1(jcs)
run_mode.f:               if(ibl.eq.kbl) klparx=ijp
run_mode.f:                  klcs=ijbl(kbl,klp)
run_mode.f:                  if(ijftc+klftc.gt.1) ijklq=ijklq+1
run_mode.f:            if(ijklq.gt.0) then
run_mode.f:            ijklq=ijklq*ijg1*klg1
run_mode.f:            q=dble(ijklq)
run_mode.f:            xinteg=q*dble(ijs1*kls1)
run_mode.f:                  if(ijklq.gt.0) int2=int2+1
run_mode.f:                  if(ijklq.gt.0) nsm2=nsm2+ismall
run_mode.f:                  if(ijklq.gt.0) int0=int0+1
run_mode.f:                  if(ijklq.gt.0) nsm0=nsm0+ismall
run_mode.f:                  if(ijklq.gt.0) nsm0=nsm0+ismall
run_mode.f:         ijpar=npar(ibl)
run_mode.f:         ijcs1=ijbl(ibl,1)
run_mode.f:         ics1=iis(ijcs1)
run_mode.f:         jcs1=jjs(ijcs1)
run_mode.f:         ijs1=inx(3,ics1)*inx(3,jcs1)
run_mode.f:         ijg1=(inx(4,ics1)+1)*(inx(4,jcs1)+1)
run_mode.f:            klcs1=ijbl(kbl,1)
run_mode.f:               ijklq=0
run_mode.f:               do ijp=1,ijpar
run_mode.f:                  ijcs=ijbl(ibl,ijp)
run_mode.f:                  ics=iis(ijcs)
run_mode.f:                  jcs=jjs(ijcs)
run_mode.f:                  ijftc=iftc1(ics)+iftc1(jcs)
run_mode.f:                  if(ibl.eq.kbl) klparx=ijp
run_mode.f:                     klcs=ijbl(kbl,klp)
run_mode.f:                     if(ijftc+klftc.gt.1) ijklq=ijklq+1
run_mode.f:               ijklq=ijklq*ijg1*klg1
run_mode.f:               q=dble(ijklq)
run_mode.f:               xinteg=q*dble(ijs1*kls1)
run_mode.f:                  if(ijklq.gt.0) int2=int2+1
run_mode.f:                  if(ijklq.gt.0) nsm2=nsm2+ismall
run_mode.f:                  if(ijklq.gt.0) int0=int0-1
run_mode.f:                  if(ijklq.gt.0) nsm0=nsm0-ismall
service1.f:      data alpbet / 'abcdefghijklmnopqrstuvwxyz' /
service1.f:      ij=0
service1.f:      ij = ij+1
service1.f:      write(6,*) i,'  ',j,'  ',dens(ij)
service.f:      ij=i*(i-1)/2
service.f:         ij=ij+1
service.f:         if(j.gt.i) ij=ij+j-2
service.f:         sum=sum+amat(ij)*vold(j)
service.f:      ij=0
service.f:            ij=ij+1
service.f:            b(ij)=a(iad+j)
service.f:      ij=0
service.f:            ij=ij+1
service.f:            b(i,j)=c1*a(ij)
service.f:            b(j,i)=con*a(ij)
service.f:cc      ij=0
service.f:cc         ij=ij+1
service.f:cc         a(i,j)=b(ij)
service.f:c         indexing: (ij)=i*(i-1)/2+j where i>=j
service.f:c      ij=0
service.f:c         ij=ij+1
service.f:c         s=s+a(ij)*b(ij)
service.f:c         if (i.eq.j) s=s-a(ij)*b(ij)*half
service.f:      ij=0
service.f:      ij=ij+1
service.f:      sq(ii+j)=t(ij)
service.f:      sq(jj+i)=t(ij)
service.f:            ij=iz+i
service.f:            if (abs(biga)-abs(a(ij))) 10,20,20
service.f:   10       biga=a(ij)
service.f:            ij=i-n
service.f:            ij=ij+n
service.f:  140       kj=ij-i+k
service.f:            a(ij)=a(ik)*a(kj)+a(ij)
service.f:      subroutine get_ij_half(ij, i, j)
service.f:c extracts indices i & j from a common index ij=i*(i-1)/2 + j
service.f:      integer ij, i, j
service.f:      i = sqrt(float(ij + ij))
service.f:      j = ij - i*(i-1)/2
service.f:         j = ij - i*(i-1)/2
service.f:      subroutine get_ij_full(ij,nj, i, j)
service.f:c     extracts indices i and j a from common index ij=(i-1)*nj + j
service.f:      integer ij,nj, i, j
service.f:      i=ij/nj+1
service.f:      j=ij-(i-1)*nj
service.f:         j=ij-(i-1)*nj
service.f:      common /memors/ nsymx,ijshp,isymm
service.f:      common /memors/ nsymx,ijshp,isymm
shells.f:      subroutine shells(inx,iis,jjs,ijcs1,klcs1)
shells.f:      common /contr/ ngci,ngcj,ngck,ngcl,lci,lcj,lck,lcl,lcij,lckl
shells.f:      itype=inx(12,iis(ijcs1))
shells.f:      jtype=inx(12,jjs(ijcs1))
shells.f:      ilen=inx(3,iis(ijcs1) )
shells.f:      jlen=inx(3,jjs(ijcs1) )
shells.f:      ngci=inx(4,iis(ijcs1))
shells.f:      ngcj=inx(4,jjs(ijcs1))
shells.f:      ia=inx(1,iis(ijcs1))+1
shells.f:      ie=inx(5,iis(ijcs1))
shells.f:      ja=inx(1,jjs(ijcs1))+1
shells.f:      je=inx(5,jjs(ijcs1))
shells.f:      lcij=lci*lcj
shells.f:cccc  common /derivat/ ijderiv,klderiv
shells.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,MMAX,
shells.f:     * NQIJ,NQIJ1,NSIJ1,NQKL,NQKL1,NSKL1,ijbeg,klbeg
shells.f:        nsij=nsij+1
shells.f:        nsij=nsij+2
shells.f:         if(lshelij.eq.1)  lcase=2        ! lx/yz
shells.f:         if(lshelij.eq.2)  lcase=3        ! xl/yz
shells.f:         if(lshelij.eq.3)  lcase=6        ! ll/xy
shells.f:      subroutine iobarb(ijderiv,klderiv)
shells.f:c return original value of nsij,nskl and lnij,lnkl
shells.f:c     common /derivat/ ijderiv,klderiv
shells.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,MMAX,
shells.f:     * NQIJ,NQIJ1,NSIJ1,NQKL,NQKL1,NSKL1,ijbeg,klbeg
shells.f:      nsij=nsij-ijderiv
shift1.f:             xij= yi*zj-zi*yj
shift1.f:             yij=-xi*zj+zi*xj
shift1.f:             zij= xi*yj-yi*xj
shift1.f:          bl(ll)=      -zz*s4(l+len) + yy*s4(l+2*len) + xij*s4(l+3*len)
shift1.f:          bl(ll+len)=  +zz*s4(l)      -xx*s4(l+2*len) + yij*s4(l+3*len)
shift1.f:          bl(ll+2*len)=-yy*s4(l)        +xx*s4(l+len) + zij*s4(l+3*len)
shift1.f:         bl(ll)=bl(ll) -zz*s4(l+len) + yy*s4(l+2*len) + xij*s4(l+3*len)
shift1.f:         bl(ll+len)=bl(ll+len) +zz*s4(l)-xx*s4(l+2*len)+yij*s4(l+3*len)
shift1.f:         bl(ll+2*len)=bl(ll+2*len)-yy*s4(l)+xx*s4(l+len)+zij*s4(l+3*len)
shift1.f:             xijf=xij*field
shift1.f:             yijf=yij*field
shift1.f:             zijf=zij*field
shift1.f:     *                -zzf*s4(l+len)+yyf*s4(l+2*len)+xijf*s4(l+3*len)
shift1.f:     *                +zzf*s4(l)-xxf*s4(l+2*len)+yijf*s4(l+3*len)
shift1.f:     *                -yyf*s4(l)+xxf*s4(l+len)+zijf*s4(l+3*len)
shift1.f:             xijf=xij*field
shift1.f:             yijf=yij*field
shift1.f:             zijf=zij*field
shift1.f:     *                -zzf*s4(l+len)+yyf*s4(l+2*len)+xijf*s4(l+3*len)
shift1.f:     *                +zzf*s4(l)-xxf*s4(l+2*len)+yijf*s4(l+3*len)
shift1.f:     *                -yyf*s4(l)+xxf*s4(l+len)+zijf*s4(l+3*len)
shift1.f:            iij=0
shift1.f:               iij=iij+1
shift1.f:               iijy=iij+len
shift1.f:               iijz=iijy+len
shift1.f:               ij=ii+jff
shift1.f:            ove1(ij,1)=ove1(ij,1) + bl(last+iij)
shift1.f:            ove1(ij,2)=ove1(ij,2) + bl(last+iijy)
shift1.f:            ove1(ij,3)=ove1(ij,3) + bl(last+iijz)
shift1.f:            foc1(ij,1)=foc1(ij,1) + bl(last+3*len+iij)
shift1.f:            foc1(ij,2)=foc1(ij,2) + bl(last+3*len+iijy)
shift1.f:            foc1(ij,3)=foc1(ij,3) + bl(last+3*len+iijz)
shift1.f:             xij= yi*zj-zi*yj
shift1.f:             yij=-xi*zj+zi*xj
shift1.f:             zij= xi*yj-yi*xj
shift1.f:          bl(lvx)=bl(lvx) -zz*s4(l+len)+yy*s4(l+2*len)+xij*s4(l+3*len)
shift1.f:          bl(lvy)=bl(lvy) +zz*s4(l)    -xx*s4(l+2*len)+yij*s4(l+3*len)
shift1.f:          bl(lvz)=bl(lvz) -yy*s4(l)    +xx*s4(l+len)  +zij*s4(l+3*len)
shift1.f:            iijxx=0
shift1.f:               iijxx=iijxx+1
shift1.f:               iijxy=iijxx+len
shift1.f:               iijxz=iijxy+len
shift1.f:               ij=ii+jff
shift1.f:            foc1(ij,1)=foc1(ij,1) + bl(lastv+iijxx)
shift1.f:            foc1(ij,2)=foc1(ij,2) + bl(lastv+iijxy)
shift1.f:            foc1(ij,3)=foc1(ij,3) + bl(lastv+iijxz)
shift1.f:          ij=0
shift1.f:               ij=ij+1
shift1.f:               sb(ij)=sb(ij)+rb(ij)*coefi*coefj
shift1.f:      ij=0
shift1.f:      do 730 ij1=1,len
shift1.f:      ij=ij+1
shift1.f:      sb(ij)=sb(iadd+ij1)
shift2.f:c transform ordinary density dens(ij) into denspar(ics,jcs)
shift2.f:      subroutine precal2d(datnuc,iis,jjs,inx,npij,npkl,npklx,
shift2.f:     *           ibl,kbl,ijbl,nbl2,nijbeg,nijend,nklbeg,nklend,
shift2.f:     *           xyab,xycd, ipres,ijcent,klcent)
shift2.f:      dimension inx(12,*),iis(*),jjs(*),ijbl(nbl2,*)
shift2.f:      dimension xyab(npij,3),xycd(npkl,3)
shift2.f:      dimension ijcent(npij),klcent(npkl)
shift2.f:      ijpar=0
shift2.f:      do 100 ijp=nijbeg,nijend
shift2.f:      ijpar=ijpar+1
shift2.f:        ijcs=ijbl(ibl,ijp)
shift2.f:        ics=iis(ijcs)
shift2.f:        jcs=jjs(ijcs)
shift2.f:          ijcent(ijpar)=2
shift2.f:          if(iatom.eq.jatom) ijcent(ijpar)=1
shift2.f:        xyab(ijpar,3)= xa*yb-ya*xb
shift2.f:        xyab(ijpar,2)=-xa*zb+za*xb
shift2.f:        xyab(ijpar,1)= ya*zb-za*yb
shift2.f:          klcs=ijbl(kbl,klp)
shift2.f:        do 300 ijpar=1,npij
shift2.f:           klcent(ijpar)=ijcent(ijpar)
shift2.f:           xycd(ijpar,i)=xyab(ijpar,i)
shift2.f:      ijkl=0
shift2.f:      do 400 ijpar=1,npij
shift2.f:      ijc=ijcent(ijpar)
shift2.f:      if(npklx.eq.0) npklend=ijpar
shift2.f:      ijkl=ijkl+1
shift2.f:      if(ijc.eq.1 .and. klc.eq.1) ipres(ijkl)=0
shift2.f:      subroutine nmrderx(nbls,lnijr,lnklr,npij,npkl,ngcd,
shift2.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,mmax,
shift2.f:     * nqi,nqj,nqk,nql,nsij,nskl,
shift2.f:     * nqij,nqij1,nsij1,nqkl,nqkl1,nskl1,ijbeg,klbeg
shift2.f:     * ibfij1,ibfij2,ibfkl1,ibfkl2,
shift2.f:     * ibf2l1,ibf2l2,ibf2l3,ibf2l4,ibfij3,ibfkl3,
shift2.f:     * ixij,iyij,izij, iwij,ivij,iuij,isij
shift2.f:      common /dimasse/ lqijr,lqklr,lqmxr,lij3,lkl3,l3l,lsss
shift2.f:c     lqijr=nfu(nqij1+1)
shift2.f:c     lqmxr=lqijr
shift2.f:c     if(lqklr.gt.lqijr) lqmxr=lqklr
shift2.f:      lqij=nfu(nqij+1)
shift2.f:      lqmx=lqij
shift2.f:      if(lqkl.gt.lqij) lqmx=lqkl
shift2.f:      call conv24x(nbls,npij,npkl,bl(idx1),bl(idx2),
shift2.f:      incr1=ngcd*nbls*lnijr*lnklr
shift2.f:      ijbex=nfu(nqij)+1
shift2.f:      ijenx=lnij
shift2.f:      call giao_der(ngcd,nbls,bl(ibeg),lnijr,lnklr,lnij,lnkl,
shift2.f:     *             ijbex,ijenx, klbex,klenx,
shift2.f:      if(lshelij.eq.1 .or. lshelij.eq.3) then
shift2.f:c-   --- for bfij1 ---
shift2.f:         ijbex=ijbeg
shift2.f:         ijenx=lqij
shift2.f:         if(nqij.eq.nsij) ijenx=1
shift2.f:         ibeg =ibfij1
shift2.f:         incr1=nbls*lqijr*lnklr
shift2.f:         call giao_der(ngcd,nbls,bl(ibeg),lqijr,lnklr,lqij,lnkl,
shift2.f:     *                ijbex,ijenx, klbex,klenx,
shift2.f:         ibfij1=ibfij1+incr1
shift2.f:      if(lshelij.eq.2 .or. lshelij.eq.3) then
shift2.f:c-   --- for bfij2 ---
shift2.f:         ijbex=ijbeg
shift2.f:         ijenx=lqij
shift2.f:         if(nqij.eq.nsij) ijenx=1  ! ???????????
shift2.f:         ibeg =ibfij2
shift2.f:         incr1=nbls*lqijr*lnklr
shift2.f:         call giao_der(ngcd,nbls,bl(ibeg),lqijr,lnklr,lqij,lnkl,
shift2.f:     *                ijbex,ijenx, klbex,klenx,
shift2.f:         ibfij2=ibfij2+incr1
shift2.f:         ijbex=ijbeg
shift2.f:         ijenx=lnij
shift2.f:         incr1=nbls*lnijr*lqklr
shift2.f:         call giao_der(ngcd,nbls,bl(ibeg),lnijr,lqklr,lnij,lqkl,
shift2.f:     *                ijbex,ijenx, klbex,klenx,
shift2.f:         ijbex=ijbeg
shift2.f:         ijenx=lnij
shift2.f:         incr1=nbls*lnijr*lqklr
shift2.f:         call giao_der(ngcd,nbls,bl(ibeg),lnijr,lqklr,lnij,lqkl,
shift2.f:     *                ijbex,ijenx, klbex,klenx,
shift2.f:      if(lshelij.eq.3) then
shift2.f:c-   --- for bfij3 (nbls,4,lnklr) ; 4 is for nmr only
shift2.f:         ijbex=1
shift2.f:         ijenx=1
shift2.f:         ibeg =ibfij3
shift2.f:     *                ijbex,ijenx, klbex,klenx,
shift2.f:         ibfij3=ibfij3+incr1
shift2.f:c-   --- for bfkl3 (nbls,lnijr,4) ; 4 is for nmr only
shift2.f:         ijbex=ijbeg
shift2.f:         ijenx=lnij
shift2.f:         incr1=4*nbls*lnijr
shift2.f:         call giao_der(ngcd,nbls,bl(ibeg),lnijr,4    ,lnij,1   ,
shift2.f:     *                ijbex,ijenx, klbex,klenx,
shift2.f:         ijbex=ijbeg
shift2.f:         ijenx=lqij
shift2.f:         if(nqij.eq.nsij) ijenx=1
shift2.f:         incr1=nbls*lqijr*lqklr
shift2.f:         call giao_der(ngcd,nbls,bl(ibeg),lqijr,lqklr,lqij,lqkl,
shift2.f:     *                ijbex,ijenx, klbex,klenx,
shift2.f:         ijbex=ijbeg
shift2.f:         ijenx=lqij
shift2.f:         if(nqij.eq.nsij) ijenx=1
shift2.f:         incr1=nbls*lqijr*lqklr
shift2.f:         call giao_der(ngcd,nbls,bl(ibeg),lqijr,lqklr,lqij,lqkl,
shift2.f:     *                ijbex,ijenx, klbex,klenx,
shift2.f:         ijbex=ijbeg
shift2.f:         ijenx=lqij
shift2.f:         if(nqij.eq.nsij) ijenx=1
shift2.f:         incr1=nbls*lqijr*lqklr
shift2.f:         call giao_der(ngcd,nbls,bl(ibeg),lqijr,lqklr,lqij,lqkl,
shift2.f:     *                ijbex,ijenx, klbex,klenx,
shift2.f:         ijbex=ijbeg
shift2.f:         ijenx=lqij
shift2.f:         if(nqij.eq.nsij) ijenx=1
shift2.f:         incr1=nbls*lqijr*lqklr
shift2.f:         call giao_der(ngcd,nbls,bl(ibeg),lqijr,lqklr,lqij,lqkl,
shift2.f:     *                ijbex,ijenx, klbex,klenx,
shift2.f:cccccc   ijbex=ijbeg
shift2.f:         ijbex=1
shift2.f:         ijenx=1
shift2.f:     *                ijbex,ijenx, klbex,klenx,
shift2.f:cccccc   ijbex=ijbeg
shift2.f:         ijbex=1
shift2.f:         ijenx=1
shift2.f:     *                ijbex,ijenx, klbex,klenx,
shift2.f:         ijbex=ijbeg
shift2.f:         ijenx=lqij
shift2.f:     *                ijbex,ijenx, klbex,klenx,
shift2.f:         ijbex=ijbeg
shift2.f:         ijenx=lqij
shift2.f:     *                ijbex,ijenx, klbex,klenx,
shift2.f:         ijbex=1
shift2.f:         ijenx=1
shift2.f:     *                ijbex,ijenx, klbex,klenx,
shift2.f:      subroutine conv24x(nbls,npij,npkl,idx1,idx2 ,
shift2.f:      dimension xab(npij,3) ,xcd(npkl,3) ,xyab(npij,3) ,xycd(npkl,3)
shift2.f:      do 100 ijkl=1,nbls
shift2.f:      ijpar=idx1(ijkl)
shift2.f:      klpar=idx2(ijkl)
shift2.f:        xabq(ijkl,i)=xab(ijpar,i)
shift2.f:        xcdq(ijkl,i)=xcd(klpar,i)
shift2.f:        xyabq(ijkl,i)=xyab(ijpar,i)
shift2.f:        xycdq(ijkl,i)=xycd(klpar,i)
shift2.f:      subroutine giao_der(ngcd,nbls,buf2,lnijr,lnklr,lnij,lnkl,
shift2.f:     *                   ijbex,ijenx, klbex,klenx,
shift2.f:      dimension buf2(nbls,lnijr,lnklr,ngcd)
shift2.f:      dimension deriv(6,nbls,lnij,lnkl,ngcd)
shift2.f:c---> dimension typ1x(nbls,lnij,lnkl,ngcd),
shift2.f:c--->*          typ2x(nbls,lnij,lnkl,ngcd)
shift2.f:c---> dimension typ1y(nbls,lnij,lnkl,ngcd),
shift2.f:c--->*          typ2y(nbls,lnij,lnkl,ngcd)
shift2.f:c---> dimension typ1z(nbls,lnij,lnkl,ngcd),
shift2.f:c--->*          typ2z(nbls,lnij,lnkl,ngcd)
shift2.f:      do 200 ij=ijbex,ijenx
shift2.f:      ijpx=npxyz(1,ij)
shift2.f:      ijpy=npxyz(2,ij)
shift2.f:      ijpz=npxyz(3,ij)
shift2.f:        do 250 ijkl=1,nbls
shift2.f:        abzy= -xab(ijkl,3)*buf2(ijkl,ijpy,kl,iqu)
shift2.f:     *        +xab(ijkl,2)*buf2(ijkl,ijpz,kl,iqu)
shift2.f:     *       +xyab(ijkl,1)*buf2(ijkl,ij,kl,iqu)
shift2.f:        cdzy= -xcd(ijkl,3)*buf2(ijkl,ij,klpy,iqu)
shift2.f:     *        +xcd(ijkl,2)*buf2(ijkl,ij,klpz,iqu)
shift2.f:     *       +xycd(ijkl,1)*buf2(ijkl,ij,kl,iqu)
shift2.f:cccccc  typ1x(ijkl,ij,kl,iqu)= abzy+cdzy
shift2.f:cccccc  typ2x(ijkl,ij,kl,iqu)=-abzy+cdzy
shift2.f:        deriv(1,ijkl,ij,kl,iqu)= abzy+cdzy
shift2.f:        deriv(2,ijkl,ij,kl,iqu)=-abzy+cdzy
shift2.f:        abzx= +xab(ijkl,3)*buf2(ijkl,ijpx,kl,iqu)
shift2.f:     *        -xab(ijkl,1)*buf2(ijkl,ijpz,kl,iqu)
shift2.f:     *       +xyab(ijkl,2)*buf2(ijkl,ij,kl,iqu)
shift2.f:        cdzx= +xcd(ijkl,3)*buf2(ijkl,ij,klpx,iqu)
shift2.f:     *        -xcd(ijkl,1)*buf2(ijkl,ij,klpz,iqu)
shift2.f:     *       +xycd(ijkl,2)*buf2(ijkl,ij,kl,iqu)
shift2.f:cccccc  typ1y(ijkl,ij,kl,iqu)= abzx+cdzx
shift2.f:cccccc  typ2y(ijkl,ij,kl,iqu)=-abzx+cdzx
shift2.f:        deriv(3,ijkl,ij,kl,iqu)= abzx+cdzx
shift2.f:        deriv(4,ijkl,ij,kl,iqu)=-abzx+cdzx
shift2.f:        abyx= -xab(ijkl,2)*buf2(ijkl,ijpx,kl,iqu)
shift2.f:     *        +xab(ijkl,1)*buf2(ijkl,ijpy,kl,iqu)
shift2.f:     *       +xyab(ijkl,3)*buf2(ijkl,ij,kl,iqu)
shift2.f:        cdyx= -xcd(ijkl,2)*buf2(ijkl,ij,klpx,iqu)
shift2.f:     *        +xcd(ijkl,1)*buf2(ijkl,ij,klpy,iqu)
shift2.f:     *       +xycd(ijkl,3)*buf2(ijkl,ij,kl,iqu)
shift2.f:cccccc  typ1z(ijkl,ij,kl,iqu)= abyx+cdyx
shift2.f:cccccc  typ2z(ijkl,ij,kl,iqu)=-abyx+cdyx
shift2.f:        deriv(5,ijkl,ij,kl,iqu)= abyx+cdyx
shift2.f:        deriv(6,ijkl,ij,kl,iqu)=-abyx+cdyx
shift2.f:         ij=0
shift2.f:            ij=ij+1
shift2.f:            ij1=i1*(i1-1)/2 +j1
shift2.f:              ij1=j1*(j1-1)/2 +i1
shift2.f:            ffx=fock(lrix+ij)+fct*fock(lrix+ij1)*negx(ns)
shift2.f:            ffy=fock(lriy+ij)+fct*fock(lriy+ij1)*negy(ns)
shift2.f:            ffz=fock(lriz+ij)+fct*fock(lriz+ij1)*negz(ns)
shift2.f:            if (ij.gt.ij1) then
shift2.f:            fock(lrix+ij)=ffx
shift2.f:            fock(lrix+ij1)=fct*ffx*negx(ns)
shift2.f:            fock(lriy+ij)=ffy
shift2.f:            fock(lriy+ij1)=fct*ffy*negy(ns)
shift2.f:            fock(lriz+ij)=ffz
shift2.f:            fock(lriz+ij1)=fct*ffz*negz(ns)
symlib2.f:      do 1000 ij=1,idisym**2,idisym+1
symlib2.f: 1000   repmat(ij+ntidsq)=a1
symlib2.f:            do 2000 ij=1,idisym**2
symlib2.f: 2000          repmat(ij+itidsq)=genrep(ij+isymsq+(igen-1)*nsymsq)
symlib2.f:         do 4500 ij=1,idisym**2,idisym+1
symlib2.f: 4500       chara=chara+repmat(ij+itidsq)
symlib.f:      ij=1
symlib.f:          term=a(ij)*a(ij)
symlib.f:          ij=ij+1
symlib.f:      ij=2
symlib.f:      if(abs(a(ij)).lt.thresh) go to 104
symlib.f:      sumnd=sumnd-a(ij)*a(ij)
symlib.f:      amax=sign(sqrt(term*term+a(ij)*a(ij)),term)
symlib.f:      s=a(ij)/(c*(amax+amax))
symlib.f:      a(ij)=zero
symlib.f:        kj=ij
symlib.f:  104 ij=ij+1
symlib.f:  112 ij=ij+1
symtrize.f:c  if it got so far, then atom k has a symmetry partner under this plane (ij)
tags:10	intanu.f	/^   10    xint(ij+loc)=zero$/;"	l	subroutine:intamp	file:
tags:10	intanu.f	/^   10    xint(ij+loc)=zero$/;"	l	subroutine:intamx	file:
tags:10	intanu.f	/^   10    xint(ij+loc)=zero$/;"	l	subroutine:intash	file:
tags:10	service.f	/^   10       biga=a(ij)$/;"	l	subroutine:osinv	file:
tags:1000	precalc.f	/^ 1000 continue$/;"	l	subroutine:reuseij	file:
tags:1000	symlib2.f	/^ 1000   repmat(ij+ntidsq)=a1$/;"	l	subroutine:grep	file:
tags:1000	trobsa.f	/^ 1000        continue$/;"	l	subroutine:tracij_1	file:
tags:1001	trobsa.f	/^ 1001           continue$/;"	l	subroutine:tracij_1	file:
tags:1002	trobsa.f	/^ 1002           continue$/;"	l	subroutine:tracij_1	file:
tags:1003	trobsa.f	/^ 1003           continue$/;"	l	subroutine:tracij_1	file:
tags:1010	cmp2.f	/^ 1010     format(' Time for saving <Tij> in MO basis:',f8.2,' min',\/,$/;"	l	subroutine:newtrans	file:
tags:104	symlib.f	/^  104 ij=ij+1$/;"	l	subroutine:erduw	file:
tags:111	hessana.f	/^  111 format('ij=',i3,2x,3(f12.6,1x))$/;"	l	subroutine:fder_print	file:
tags:112	symlib.f	/^  112 ij=ij+1$/;"	l	subroutine:erduw	file:
tags:120	intcal.f	/^  120       xint(ij1)=s(ij)$/;"	l	subroutine:dtran2a	file:
tags:140	service.f	/^  140       kj=ij-i+k$/;"	l	subroutine:osinv	file:
tags:150	trobsa.f	/^  150   continue$/;"	l	subroutine:tracij_1	file:
tags:2000	symlib2.f	/^ 2000          repmat(ij+itidsq)=genrep(ij+isymsq+(igen-1)*nsymsq)$/;"	l	subroutine:grep	file:
tags:2005	trobsa.f	/^ 2005     continue$/;"	l	subroutine:tracij_1	file:
tags:204	calcint.f	/^  204 continue$/;"	l	subroutine:gcparij	file:
tags:204	calcint.f	/^  204 continue$/;"	l	subroutine:gcqijkl	file:
tags:2041	calcint.f	/^ 2041        continue$/;"	l	subroutine:gcparij	file:
tags:2043	calcint.f	/^ 2043    continue$/;"	l	subroutine:gcqijkl	file:
tags:4500	symlib2.f	/^ 4500       chara=chara+repmat(ij+itidsq)$/;"	l	subroutine:grep	file:
tags:70	intcal.f	/^   70    xint(ij1)=s(ij)$/;"	l	subroutine:dtran1a	file:
tags:8888	precalc.f	/^ 8888 continue$/;"	l	subroutine:reuseij	file:
tags:9999	precalc.f	/^ 9999 continue$/;"	l	subroutine:reuseij	file:
tags:PSaveTij	newpara_cmp2.f	/^      subroutine PSaveTij(/;"	s
tags:RijMP2	lmp2_iter.f	/^      subroutine RijMP2(/;"	s
tags:RijMP2w	lmp2_weak.f	/^      subroutine RijMP2w(/;"	s
tags:SaveTij	cmp2.f	/^      subroutine SaveTij(/;"	s
tags:conijkl1	assemblx.f	/^      subroutine conijkl1(/;"	s
tags:conijkl1_2	assemblx.f	/^      subroutine conijkl1_2(/;"	s
tags:conijkl3	assemblx.f	/^      subroutine conijkl3(/;"	s
tags:conijkl3_2	assemblx.f	/^      subroutine conijkl3_2(/;"	s
tags:dimenij	precalc.f	/^      subroutine dimenij(/;"	s
tags:dimenij_new	precalc_new.f	/^      subroutine dimenij_new(/;"	s
tags:gcont	precalc.f	318;"	c	subroutine:reuseij
tags:gcparij	calcint.f	/^      subroutine gcparij(/;"	s
tags:gcqijkl	calcint.f	/^      subroutine gcqijkl(/;"	s
tags:get_dijkl	cshneg.f	/^      subroutine get_dijkl(/;"	s
tags:get_ij_full	service.f	/^      subroutine get_ij_full(/;"	s
tags:get_ij_half	service.f	/^      subroutine get_ij_half(/;"	s
tags:get_nij_data	blocking_new.f	/^      subroutine get_nij_data(/;"	s
tags:ijcsfl	calcint.f	269;"	c	subroutine:onesuper1
tags:ijcsfl	calcint_new.f	231;"	c	subroutine:onesuper1_n
tags:ijcsfl	precalc.f	316;"	c	subroutine:reuseij
tags:infob	precalc.f	22;"	c	subroutine:prec2ij
tags:infob	precalc_new.f	14;"	c	subroutine:prec2ij_new
tags:infor	precalc.f	21;"	c	subroutine:prec2ij
tags:infor	precalc_new.f	13;"	c	subroutine:prec2ij_new
tags:logic10	trobsa.f	890;"	c	subroutine:tracij_1
tags:logic10	trobsa.f	965;"	c	subroutine:tracij_2
tags:logic11	trobsa.f	891;"	c	subroutine:tracij_1
tags:logic11	trobsa.f	966;"	c	subroutine:tracij_2
tags:logic2	blocking_new.f	1468;"	c	subroutine:get_nij_data
tags:logic4	trobsa.f	887;"	c	subroutine:tracij_1
tags:logic4	trobsa.f	962;"	c	subroutine:tracij_2
tags:logic5	trobsa.f	888;"	c	subroutine:tracij_1
tags:logic5	trobsa.f	963;"	c	subroutine:tracij_2
tags:logic7	trobsa.f	889;"	c	subroutine:tracij_1
tags:logic7	trobsa.f	964;"	c	subroutine:tracij_2
tags:minimax_ij	cshneg_new.f	/^      subroutine minimax_ij(/;"	s
tags:obarai	trobsa.f	883;"	c	subroutine:tracij_1
tags:obarai	trobsa.f	958;"	c	subroutine:tracij_2
tags:prec2ij	precalc.f	/^      subroutine prec2ij(/;"	s
tags:prec2ij_new	precalc_new.f	/^      subroutine prec2ij_new(/;"	s
tags:primij	calcint.f	1231;"	c	subroutine:erintsp_1
tags:primij	calcint.f	1409;"	c	subroutine:erinteg_2
tags:primij	calcint.f	1785;"	c	subroutine:erintsp_2
tags:primij	calcint.f	849;"	c	subroutine:erinteg_1
tags:primij	calcint_new.f	1358;"	c	subroutine:erintsp_2_n
tags:primij	calcint_new.f	1565;"	c	subroutine:erinteg_1_n
tags:primij	calcint_new.f	1944;"	c	subroutine:erintsp_1_n
tags:primij	calcint_new.f	964;"	c	subroutine:erinteg_2_n
tags:primij	precalc.f	1724;"	c	subroutine:precalc2_2
tags:primij	precalc.f	23;"	c	subroutine:prec2ij
tags:primij	precalc.f	504;"	c	subroutine:precalc2_1
tags:primij	precalc_new.f	148;"	c	subroutine:precalc2_1_new
tags:primij	precalc_new.f	15;"	c	subroutine:prec2ij_new
tags:primij	precalc_new.f	268;"	c	subroutine:precalc2_2_new
tags:prinTij	forces_mp2.f	/^      subroutine prinTij(/;"	s
tags:reuseij	precalc.f	/^      subroutine reuseij(/;"	s
tags:rij2cart	optimRZ.f	/^      SUBROUTINE rij2cart(/;"	s
tags:route	precalc.f	20;"	c	subroutine:prec2ij
tags:route	precalc_new.f	12;"	c	subroutine:prec2ij_new
tags:saveKij	cmp2.f	/^      subroutine saveKij(/;"	s
tags:time0	precalc.f	24;"	c	subroutine:prec2ij
tags:time0	precalc_new.f	16;"	c	subroutine:prec2ij_new
tags:tracij_1	trobsa.f	/^      subroutine tracij_1(/;"	s
tags:tracij_2	trobsa.f	/^      subroutine tracij_2(/;"	s
tags:tracy	trobsa.f	892;"	c	subroutine:tracij_1
tags:tracy	trobsa.f	967;"	c	subroutine:tracij_2
tags:types	precalc.f	317;"	c	subroutine:reuseij
trobsa.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,mmax,
trobsa.f:     * nqi,nqj,nqk,nql,nsij,nskl,
trobsa.f:     * nqij,nqij1,nsij1,nqkl,nqkl1,nskl1,ijbeg,klbeg
trobsa.f:     * ibfij1,ibfij2,ibfkl1,ibfkl2,
trobsa.f:     * ibf2l1,ibf2l2,ibf2l3,ibf2l4,ibfij3,ibfkl3,
trobsa.f:     * ixij,iyij,izij, iwij,ivij,iuij,isij
trobsa.f:c 6. immax -  mmax-2 for nsij>=nskl and nsij-2 otherwise
trobsa.f:c 7. kmmax -  nskl-2 for nsij>=nskl and mmax-2 otherwise
trobsa.f:c     if(nsij.ge.nskl) then
trobsa.f:c        if(lshelij.gt.0) lobsa=1
trobsa.f:c        immax=nsij-2
trobsa.f:c wt0(nbls1,lnij,lnkl) - containing (i+j,s|k+l,s) integrals
trobsa.f:c  momentum of the first pair ij is greater than the second pair kl
trobsa.f:c  / nsij >= nskl /. Otherwise, integrals in the second form are
trobsa.f:     *              bl(iwt1),l11,l12,bl(iwt0),lnij,lnkl)
trobsa.f:c*  if an ang.mom. of ij >= ang. mom. kl then go to 10 or 20
trobsa.f:c*  if an ang.mom. of ij  < ang. mom. kl then go to 30 or 40
trobsa.f:         call wt0wt1(bl(iwt0),lnij,lnkl,nbls1,bl(iwt1),l11,l12,
trobsa.f:     *               nsij,nskl,2)
trobsa.f:         call wt0wt1(bl(iwt0),lnij,lnkl,nbls1,bl(iwt1),l11,l12,
trobsa.f:     *               nsij,nskl,1)
trobsa.f:            call trac12_1(bl(iwt0),lnij,lnkl,nbls1,bl(iwt2),mem2,
trobsa.f:            call trac12_2(bl(iwt0),lnij,lnkl,nbls1,bl(iwt2),mem2,
trobsa.f:         call wt0wt1(bl(iwt0),lnij,lnkl,nbls1,bl(iwt1),l11,l12,
trobsa.f:     *               nsij,nskl,1)
trobsa.f:         call wt0wt1(bl(iwt0),lnij,lnkl,nbls1,bl(iwt1),l11,l12,
trobsa.f:     *               nsij,nskl,2)
trobsa.f:       if(nsij.gt.1) then
trobsa.f:            call trac34_1(bl(iwt0),lnij,lnkl,nbls1,bl(iwt2),mem2,
trobsa.f:            call trac34_2(bl(iwt0),lnij,lnkl,nbls1,bl(iwt2),mem2,
trobsa.f:c wt1(ijkl,m,1) - integrals (s,s|s,s)(m=1,mmax)
trobsa.f:c wt0(ijkl,1,1) - integrals (s,s|s,s)(m=1)
trobsa.f:      subroutine wt0wt1(wt0,l01,l02,nbls,wt1,l11,l12,nsij,nskl,lab)
trobsa.f:      do 100 inp=2,nfu(nsij +1)
trobsa.f:C***  a recursive step the tracij routine is called with the wt0 and
trobsa.f:C***  two-domensional here but it is three-dim. in tracij. This
trobsa.f:C***  Final intgrals (i+j,s|k+l,s) return from tracij in the wt0 matrix
trobsa.f:C***  Locally in use - the wt2(nbls,mem2) matrix for tracij
trobsa.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,MMAX,
trobsa.f:     * NQIJ,NQIJ1,NSIJ1,NQKL,NQKL1,NSKL1,ijbex,klbex
trobsa.f:       i0e=nqij-nskl+kp
trobsa.f:      call tracij_1(wt2(1,i11),k11,k12,
trobsa.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,MMAX,
trobsa.f:     * NQIJ,NQIJ1,NSIJ1,NQKL,NQKL1,NSKL1,ijbex,klbex
trobsa.f:c--->  i0e=nqij-nskl+kp
trobsa.f:       i0e=nqij-nskl+kp
trobsa.f:      call tracij_2(wt2(1,i11),k11,k12,
trobsa.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,MMAX,
trobsa.f:     * NQIJ,NQIJ1,NSIJ1,NQKL,NQKL1,NSKL1,ijbex,klbex
trobsa.f:      do 2000 ip=2,nsij
trobsa.f:       k0e=nqkl-nsij+ip
trobsa.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,MMAX,
trobsa.f:     * NQIJ,NQIJ1,NSIJ1,NQKL,NQKL1,NSKL1,ijbex,klbex
trobsa.f:      do 2000 ip=2,nsij
trobsa.f:       k0e=nqkl-nsij+ip
trobsa.f:c the if(inm.gt.0) condition has been eleiminted from tracij_2
trobsa.f:c The tracij_1 & _2  routines shift BY ONE an angular momentum from
trobsa.f:c NOTE : tracij_ are called when NSIJ>=NSKL (ang.mom)
trobsa.f:C 1998 : the trackl_1 _2 routines are NOT analogues to tracij_1 &_2
trobsa.f:C     Now both tracij_ & trackl_ have the same P1234() factors
trobsa.f:C     regardless of nsij & nskl relation (it used to be different)
trobsa.f:      subroutine tracij_1(xt1,l1b,l1e,xt2,l2b,l2e,xt3,l3b,l3e,
trobsa.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,mmax,
trobsa.f:     * nqi,nqj,nqk,nql,nsij,nskl,
trobsa.f:     * nqij,nqij1,nsij1,nqkl,nqkl1,nskl1,ijbex,klbex
trobsa.f:c habcd = 1/2 * ang. mom. on ij or kl
trobsa.f:        do 150 in0=nfu(nqij)+1,nfu(nsij+1)
trobsa.f:      subroutine tracij_2(xt1,l1b,l1e,xt2,l2b,l2e,xt3,l3b,l3e,
trobsa.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,MMAX,
trobsa.f:     * NQIJ,NQIJ1,NSIJ1,NQKL,NQKL1,NSKL1,ijbex,klbex
trobsa.f:         in0=nfu(nqij)+1
trobsa.f:         ldcopy=nbls*(nfu(nsij+1)-nfu(nqij))
trobsa.f:c            do in0=nfu(nqij)+1,nfu(nsij+1)
trobsa.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,mmax,
trobsa.f:     * nqi,nqj,nqk,nql,nsij,nskl,
trobsa.f:     * nqij,nqij1,nsij1,nqkl,nqkl1,nskl1,ijbex,klbex
trobsa.f:      if(nrec.ge.nqij) then
trobsa.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,MMAX,
trobsa.f:     * NQIJ,NQIJ1,NSIJ1,NQKL,NQKL1,NSKL1,ijbex,klbex
trobsa.f:c because of different formulation for trackl_ than for tracij_
trobsa.f:      if(nrec.ge.nqij) then
uff.f:C      ES = 1/2 Kij(R-Rij)**2
uff.f:C   Rij is the sum of standard radii for each atom, plus a
uff.f:C      Rij = Ri + Rj - Rbo - Ren
uff.f:C   The stretching force constants Kij are atom-based and are obtained from a
uff.f:C      Kij = 664.12 (Zi*Zj)/(Rij)**3
uff.f:C      EV = Dij[ -2(Xij/X)**6 + (Xij/X)**12 ]
uff.f:C   Dij is the well depth and Xij is the van der Waals bond length
uff.f:C   Dij = SQRT(Di*Dj)       Di,Dj are for individual atoms
uff.f:C   Xij = SQRT(Xi*Xj)       Xi,Xj are for individual atoms
uff.f:C      EB = Kijk(C0+C1*Cos(Th)+C2*Cos(2*Th))
uff.f:C   Th is the current bond angle and Kijk is the bending force
uff.f:C      EB = (Kijk/n**2) (1-cos(n*Th))
uff.f:C      Kijk = (664.12/Rij*Rjk) (Zi*Zk/Rik**5) (Rij*Rjk)
uff.f:C                                [3*Rij*Rjk(1-(Cos(Th0))**2) - Rik Cos(Th0)]
uff.f:C   V=Kijkl is the torsional barrier and Dih0 is the idealized dihedral angle
uff.f:C      EP = Kijkl[C0 + C1 Cos(Yijkl) + C2 Cos(2*Yijkl)]
uff.f:C   Yijkl is the angle between the il axis and the ijk plane
uff.f:C   If carbon is bonded to O.2  Kijkl=50  otherwise  Kijkl=6
uff.f:C   The inversion force constants (Kijkl) for all other atoms are set to zero
uff.f:C      ES = 1/2 Kij(R-Rij)**2
uff.f:C   Rij is the sum of standard radii for each atom, plus a
uff.f:C      Rij = Ri + Rj - Rbo - Ren
uff.f:C   The stretching force constants Kij are atom-based and are obtained from a
uff.f:C      Kij = 664.12 (Zi*Zj)/(Rij)**3
uff.f:C      EV = Dij[ -2(Xij/X)**6 + (Xij/X)**12 ]
uff.f:C   Dij is the well depth and Xij is the van der Waals bond length
uff.f:C   Dij = SQRT(Di*Dj)       Di,Dj are for individual atoms
uff.f:C   Xij = SQRT(Xi*Xj)       Xi,Xj are for individual atoms
uff.f:C      EB = Kijk(C0+C1*Cos(Th)+C2*Cos(2*Th))
uff.f:C   Th is the current bond angle and Kijk is the bending force
uff.f:C      EB = (Kijk/n**2) (1-cos(n*Th))
uff.f:C      Kijk = (664.12/Rij*Rjk) (Zi*Zk/Rik**5) (Rij*Rjk)
uff.f:C                                [3*Rij*Rjk(1-(Cos(Th0))**2) - Rik Cos(Th0)]
uff.f:C   V=Kijkl is the torsional barrier and Dih0 is the idealized dihedral angle
uff.f:C      EP = Kijkl[C0 + C1 Cos(Yijkl) + C2 Cos(2*Yijkl)]
uff.f:C   Yijkl is the angle between the il axis and the ijk plane
uff.f:C   If carbon is bonded to O.2  Kijkl=50  otherwise  Kijkl=6
uff.f:C   The inversion force constants (Kijkl) for all other atoms are set to zero
uhf4.f:      common /dftpnt/ ird,iaij,idst,iixx,iiwt,ipre,iexp,
uhf4.f:c             lindex(1,iqu,ijkl)=icf_start,
uhf4.f:c             lindex(2,iqu,ijkl)=jcf_start etc.
uhf4.f:     $                  NBatch, lgrid,  lsemit, bl(idst),bl(iaij),
uhf4.f,v:      common /dftpnt/ ird,iaij,idst,iixx,iiwt,ipre,iexp,
uhf4.f,v:c             lindex(1,iqu,ijkl)=icf_start,
uhf4.f,v:c             lindex(2,iqu,ijkl)=jcf_start etc.
uhf4.f,v:     $                  NBatch, lgrid,  lsemit, bl(idst),bl(iaij),
uhf_bldr.f:     *                    lnijkl, labels, length, lgenct)
uhf_bldr.f:      dimension buf(nbls,lnijkl,ngcd)
uhf_bldr.f:        do 100 ijklp=1,nbls
uhf_bldr.f:        ngcq=lgenct(ijklp)
uhf_bldr.f:            icff=labels(1,iqu,ijklp)
uhf_bldr.f:            jcff=labels(2,iqu,ijklp)
uhf_bldr.f:            kcff=labels(3,iqu,ijklp)
uhf_bldr.f:            lcff=labels(4,iqu,ijklp)
uhf_bldr.f:             iijf=iarray(jcf,icf)
uhf_bldr.f:             xint=buf(ijklp,intct,iqu)
uhf_bldr.f:          fockA(iijf)=fockA(iijf)+xin2*DenAB(kklf)
uhf_bldr.f:          fockA(kklf)=fockA(kklf)+xin2*DenAB(iijf)
uhf_bldr.f:          fockB(iijf)=fockB(iijf)+xin2*DenAB(kklf)
uhf_bldr.f:          fockB(kklf)=fockB(kklf)+xin2*DenAB(iijf)
uhf_bldr.f:     *                     lnijkl, labels, length, lgenct)
uhf_bldr.f:      dimension buf(nbls,lnijkl,ngcd)
uhf_bldr.f:        do 400 ijklp=1,nbls
uhf_bldr.f:        ngcq=lgenct(ijklp)
uhf_bldr.f:            icff=labels(1,iqu,ijklp)
uhf_bldr.f:            jcff=labels(2,iqu,ijklp)
uhf_bldr.f:            kcff=labels(3,iqu,ijklp)
uhf_bldr.f:            lcff=labels(4,iqu,ijklp)
uhf_bldr.f:             xint=buf(ijklp,intct,iqu)
uhf_bldr.f:                iijf=iarray(jcf,icf)
uhf_bldr.f:          fockA(iijf)=fockA(iijf)+xin2*DenAB(kklf)
uhf_bldr.f:          fockA(kklf)=fockA(kklf)+xin2*DenAB(iijf)
uhf_bldr.f:          fockB(iijf)=fockB(iijf)+xin2*DenAB(kklf)
uhf_bldr.f:          fockB(kklf)=fockB(kklf)+xin2*DenAB(iijf)
uhf_bldr.f:     *                     lnijkl, labels, length, lgenct)
uhf_bldr.f:      dimension buf(nbls,lnijkl,ngcd)
uhf_bldr.f:        do 100 ijklp=1,nbls
uhf_bldr.f:        ngcq=lgenct(ijklp)
uhf_bldr.f:            icff=labels(1,iqu,ijklp)
uhf_bldr.f:            jcff=labels(2,iqu,ijklp)
uhf_bldr.f:            kcff=labels(3,iqu,ijklp)
uhf_bldr.f:            lcf=labels(4,iqu,ijklp)+1
uhf_bldr.f:             xint=buf(ijklp,intct,iqu)
uhf_bldr.f:                iijf=iarray(jcf,icf)
uhf_bldr.f:          fockA(iijf)=fockA(iijf)+xin2*DenAB(kklf)
uhf_bldr.f:          fockA(kklf)=fockA(kklf)+xin2*DenAB(iijf)
uhf_bldr.f:          fockB(iijf)=fockB(iijf)+xin2*DenAB(kklf)
uhf_bldr.f:          fockB(kklf)=fockB(kklf)+xin2*DenAB(iijf)
uhf_bldr.f:      ijklp=0
uhf_bldr.f:            ijklp=ijklp+1
uhf_bldr.f:            icff=ilab(ijklp)
uhf_bldr.f:            jcff=jlab(ijklp)
uhf_bldr.f:            kcff=klab(ijklp)
uhf_bldr.f:            lcff=llab(ijklp)
uhf_bldr.f:                       ij=ii+jff
uhf_bldr.f:                       fockA(ij)=fockA(ij)+xin2*DenAB(kl)
uhf_bldr.f:                       fockA(kl)=fockA(kl)+xin2*DenAB(ij)
uhf_bldr.f:                       fockB(ij)=fockB(ij)+xin2*DenAB(kl)
uhf_bldr.f:                       fockB(kl)=fockB(kl)+xin2*DenAB(ij)
uhf_bldr.f:     $        xinteg4,     xinteg8,    ijkllab,    ijklsiz,
uhf_bldr.f:      integer*2 ijkllab(4,iqstore) !   ilab,jlab,klab,llab
uhf_bldr.f:      integer*2 ijklsiz(4,iblstore)!   isiz(isbl),jsiz,ksiz,lsiz  
uhf_bldr.f:      call read_int2(iunit1,ijklsiz,4*iblstore)
uhf_bldr.f:      call read_int2(iunit3,ijkllab,4*iqstore)
uhf_bldr.f:      ijklp=0
uhf_bldr.f:          ilen=ijklsiz(1,isbl)
uhf_bldr.f:          jlen=ijklsiz(2,isbl)
uhf_bldr.f:          klen=ijklsiz(3,isbl)
uhf_bldr.f:          llen=ijklsiz(4,isbl)
uhf_bldr.f:            ijklp=ijklp+1
uhf_bldr.f:            icff=ijkllab(1,ijklp)
uhf_bldr.f:            jcff=ijkllab(2,ijklp)
uhf_bldr.f:            kcff=ijkllab(3,ijklp)
uhf_bldr.f:            lcff=ijkllab(4,ijklp)
uhf_bldr.f:     $        xinteg2,     xinteg4,    xinteg8,    ijkllab,
uhf_bldr.f:     $        ijklsiz,     nquarts,    iqstore,    iblstore,
uhf_bldr.f:      integer*2 ijkllab(4,iqstore) !   ilab,jlab,klab,llab
uhf_bldr.f:      integer*2 ijklsiz(4,iblstore)!   isiz(isbl),jsiz,ksiz,lsiz  
uhf_bldr.f:      call read_int2(iunit1,ijklsiz,4*iblstore)
uhf_bldr.f:      call read_int2(iunit3,ijkllab,4*iqstore)
uhf_bldr.f:      ijklp=0
uhf_bldr.f:          ilen=ijklsiz(1,isbl)
uhf_bldr.f:          jlen=ijklsiz(2,isbl)
uhf_bldr.f:          klen=ijklsiz(3,isbl)
uhf_bldr.f:          llen=ijklsiz(4,isbl)
uhf_bldr.f:            ijklp=ijklp+1
uhf_bldr.f:            icff=ijkllab(1,ijklp)
uhf_bldr.f:            jcff=ijkllab(2,ijklp)
uhf_bldr.f:            kcff=ijkllab(3,ijklp)
uhf_bldr.f:            lcff=ijkllab(4,ijklp)
uhf_bldr.f:     $        xinteg4,     xinteg8,    ijkllab,    ijklsiz,
uhf_bldr.f:      integer*2 ijkllab(4,iqstore) !   ilab,jlab,klab,llab
uhf_bldr.f:      integer*2 ijklsiz(4,iblstore)!   isiz(isbl),jsiz,ksiz,lsiz  
uhf_bldr.f:      call read_int2(iunit1,ijklsiz,4*iblstore)
uhf_bldr.f:      call read_int2(iunit3,ijkllab,4*iqstore)
uhf_bldr.f:      ijklp=0
uhf_bldr.f:          ilen=ijklsiz(1,isbl)
uhf_bldr.f:          jlen=ijklsiz(2,isbl)
uhf_bldr.f:          klen=ijklsiz(3,isbl)
uhf_bldr.f:          llen=ijklsiz(4,isbl)
uhf_bldr.f:            ijklp=ijklp+1
uhf_bldr.f:            icff=ijkllab(1,ijklp)
uhf_bldr.f:            jcff=ijkllab(2,ijklp)
uhf_bldr.f:            kcff=ijkllab(3,ijklp)
uhf_bldr.f:            lcff=ijkllab(4,ijklp)
uhf_bldr.f:                ij=ii+jff
uhf_bldr.f:                fockA(ij)=fockA(ij)+xin2*DenAB(kl)
uhf_bldr.f:                fockA(kl)=fockA(kl)+xin2*DenAB(ij)
uhf_bldr.f:                fockB(ij)=fockB(ij)+xin2*DenAB(kl)
uhf_bldr.f:                fockB(kl)=fockB(kl)+xin2*DenAB(ij)
uhf_bldr.f:                ij=ii+jff
uhf_bldr.f:                fockA(ij)=fockA(ij)+xin2*DenAB(kl)
uhf_bldr.f:                fockA(kl)=fockA(kl)+xin2*DenAB(ij)
uhf_bldr.f:                fockB(ij)=fockB(ij)+xin2*DenAB(kl)
uhf_bldr.f:                fockB(kl)=fockB(kl)+xin2*DenAB(ij)
uhf_bldr.f:                ij=ii+jff
uhf_bldr.f:                fockA(ij)=fockA(ij)+xin2*DenAB(kl)
uhf_bldr.f:                fockA(kl)=fockA(kl)+xin2*DenAB(ij)
uhf_bldr.f:                fockB(ij)=fockB(ij)+xin2*DenAB(kl)
uhf_bldr.f:                fockB(kl)=fockB(kl)+xin2*DenAB(ij)
uhf_bldr.f:                ij=ii+jff
uhf_bldr.f:                fockA(ij)=fockA(ij)+xin2*DenAB(kl)
uhf_bldr.f:                fockA(kl)=fockA(kl)+xin2*DenAB(ij)
uhf_bldr.f:                fockB(ij)=fockB(ij)+xin2*DenAB(kl)
uhf_bldr.f:                fockB(kl)=fockB(kl)+xin2*DenAB(ij)
uhf_bldr.f:                ij=ii+jff
uhf_bldr.f:                fockA(ij)=fockA(ij)+xin2*DenAB(kl)
uhf_bldr.f:                fockA(kl)=fockA(kl)+xin2*DenAB(ij)
uhf_bldr.f:                fockB(ij)=fockB(ij)+xin2*DenAB(kl)
uhf_bldr.f:                fockB(kl)=fockB(kl)+xin2*DenAB(ij)
uhf_bldr.f:                ij=ii+jff
uhf_bldr.f:                fockA(ij)=fockA(ij)+xin2*DenAB(kl)
uhf_bldr.f:                fockA(kl)=fockA(kl)+xin2*DenAB(ij)
uhf_bldr.f:                fockB(ij)=fockB(ij)+xin2*DenAB(kl)
uhf_bldr.f:                fockB(kl)=fockB(kl)+xin2*DenAB(ij)
uhf_bldr.f:                     ij=ii+jff
uhf_bldr.f:                     fockA(ij)=fockA(ij)+xin2*dens(kl)
uhf_bldr.f:                     fockA(kl)=fockA(kl)+xin2*dens(ij)
uhf_bldr.f:                     fockB(ij)=fockB(ij)+xin2*dens(kl)
uhf_bldr.f:                     fockB(kl)=fockB(kl)+xin2*dens(ij)
uhf_bldr.f:                     ij=ii+jff
uhf_bldr.f:                     fockA(ij)=fockA(ij)+xin2*dens(kl)
uhf_bldr.f:                     fockA(kl)=fockA(kl)+xin2*dens(ij)
uhf_bldr.f:                     fockB(ij)=fockB(ij)+xin2*dens(kl)
uhf_bldr.f:                     fockB(kl)=fockB(kl)+xin2*dens(ij)
uhf_bldr.f:                     ij=ii+jff
uhf_bldr.f:                     fockA(ij)=fockA(ij)+xin2*dens(kl)
uhf_bldr.f:                     fockA(kl)=fockA(kl)+xin2*dens(ij)
uhf_bldr.f:                     fockB(ij)=fockB(ij)+xin2*dens(kl)
uhf_bldr.f:                     fockB(kl)=fockB(kl)+xin2*dens(ij)
uhf_grad.f:     *                     lind,ntri,nbls,ngcd,lnijkl,
uhf_grad.f:c  lnijkl   - number of integrals from one quartet
uhf_grad.f:      dimension buf(9,nbls,lnijkl,ngcd)
uhf_grad.f:        do 100 ijklp=1,nbls
uhf_grad.f:          icff=labels(1,iqu,ijklp)
uhf_grad.f:          jcff=labels(2,iqu,ijklp)
uhf_grad.f:          kcff=labels(3,iqu,ijklp)
uhf_grad.f:          lcff=labels(4,iqu,ijklp)
uhf_grad.f:c  Indices and integrals in the quartet ijkl :
uhf_grad.f:                ijf=ii+jcf
uhf_grad.f:                if(jcf.gt.icf) ijf=jj+icf
uhf_grad.f:                dij2=(denA(ijf)+denB(ijf))*Two
uhf_grad.f:                      dijkl=Two*(dij2*dkl - dikA*djlA - dilA*djkA
uhf_grad.f:                      xinta=buf(1,ijklp,integ,iqu)
uhf_grad.f:                      xintb=buf(2,ijklp,integ,iqu)
uhf_grad.f:                      xintc=buf(3,ijklp,integ,iqu)
uhf_grad.f:                      yinta=buf(4,ijklp,integ,iqu)
uhf_grad.f:                      yintb=buf(5,ijklp,integ,iqu)
uhf_grad.f:                      yintc=buf(6,ijklp,integ,iqu)
uhf_grad.f:                      zinta=buf(7,ijklp,integ,iqu)
uhf_grad.f:                      zintb=buf(8,ijklp,integ,iqu)
uhf_grad.f:                      zintc=buf(9,ijklp,integ,iqu)
uhf_grad.f:                      xyz(1,1)=xyz(1,1)-dijkl*xinta
uhf_grad.f:                      xyz(1,2)=xyz(1,2)-dijkl*xintb
uhf_grad.f:                      xyz(1,3)=xyz(1,3)-dijkl*xintc
uhf_grad.f:cdonotdoit            xyz(1,4)=xyz(1,4)-dijkl*xintd
uhf_grad.f:                      xyz(2,1)=xyz(2,1)-dijkl*yinta
uhf_grad.f:                      xyz(2,2)=xyz(2,2)-dijkl*yintb
uhf_grad.f:                      xyz(2,3)=xyz(2,3)-dijkl*yintc
uhf_grad.f:cdonotdoit            xyz(2,4)=xyz(2,4)-dijkl*yintd
uhf_grad.f:                      xyz(3,1)=xyz(3,1)-dijkl*zinta
uhf_grad.f:                      xyz(3,2)=xyz(3,2)-dijkl*zintb
uhf_grad.f:                      xyz(3,3)=xyz(3,3)-dijkl*zintc
uhf_grad.f:cdonotdoit            xyz(3,4)=xyz(3,4)-dijkl*zintd
uhf_grad.f:     *                      lind,ntri,nbls,ngcd,lnijkl,
uhf_grad.f:c  lnijkl   - number of integrals from one quartet
uhf_grad.f:      dimension buf(9,nbls,lnijkl,ngcd)
uhf_grad.f:        do 100 ijklp=1,nbls
uhf_grad.f:          icff=labels(1,iqu,ijklp)
uhf_grad.f:          jcff=labels(2,iqu,ijklp)
uhf_grad.f:          kcff=labels(3,iqu,ijklp)
uhf_grad.f:          lcff=labels(4,iqu,ijklp)
uhf_grad.f:c  Indices and integrals in the quartet ijkl :
uhf_grad.f:                ijf=ii+jcf
uhf_grad.f:                if(jcf.gt.icf) ijf=jj+icf
uhf_grad.f:                dij2=(denA(ijf)+denB(ijf))*Two
uhf_grad.f:                      dijkl=Two*(dij2*dkl - ax*(dikA*djlA + dilA*djkA
uhf_grad.f:                      xinta=buf(1,ijklp,integ,iqu)
uhf_grad.f:                      xintb=buf(2,ijklp,integ,iqu)
uhf_grad.f:                      xintc=buf(3,ijklp,integ,iqu)
uhf_grad.f:                      yinta=buf(4,ijklp,integ,iqu)
uhf_grad.f:                      yintb=buf(5,ijklp,integ,iqu)
uhf_grad.f:                      yintc=buf(6,ijklp,integ,iqu)
uhf_grad.f:                      zinta=buf(7,ijklp,integ,iqu)
uhf_grad.f:                      zintb=buf(8,ijklp,integ,iqu)
uhf_grad.f:                      zintc=buf(9,ijklp,integ,iqu)
uhf_grad.f:                      xyz(1,1)=xyz(1,1)-dijkl*xinta
uhf_grad.f:                      xyz(1,2)=xyz(1,2)-dijkl*xintb
uhf_grad.f:                      xyz(1,3)=xyz(1,3)-dijkl*xintc
uhf_grad.f:cdonotdoit            xyz(1,4)=xyz(1,4)-dijkl*xintd
uhf_grad.f:                      xyz(2,1)=xyz(2,1)-dijkl*yinta
uhf_grad.f:                      xyz(2,2)=xyz(2,2)-dijkl*yintb
uhf_grad.f:                      xyz(2,3)=xyz(2,3)-dijkl*yintc
uhf_grad.f:cdonotdoit            xyz(2,4)=xyz(2,4)-dijkl*yintd
uhf_grad.f:                      xyz(3,1)=xyz(3,1)-dijkl*zinta
uhf_grad.f:                      xyz(3,2)=xyz(3,2)-dijkl*zintb
uhf_grad.f:                      xyz(3,3)=xyz(3,3)-dijkl*zintc
uhf_grad.f:cdonotdoit            xyz(3,4)=xyz(3,4)-dijkl*zintd
uhf_grad.f:     *                      lind,ntri,nbls,ngcd,lnijkl,
uhf_grad.f:c  lnijkl   - number of integrals from one quartet
uhf_grad.f:      dimension buf(9,nbls,lnijkl,ngcd)
uhf_grad.f:        do 100 ijklp=1,nbls
uhf_grad.f:          icff=labels(1,iqu,ijklp)
uhf_grad.f:          jcff=labels(2,iqu,ijklp)
uhf_grad.f:          kcff=labels(3,iqu,ijklp)
uhf_grad.f:          lcff=labels(4,iqu,ijklp)
uhf_grad.f:c  Indices and integrals in the quartet ijkl :
uhf_grad.f:                ijf=ii+jcf
uhf_grad.f:                if(jcf.gt.icf) ijf=jj+icf
uhf_grad.f:                dij4=(denA(ijf)+denB(ijf))*Four
uhf_grad.f:                      dijkl=dij4*(denA(klf)+denB(klf))
uhf_grad.f:                      xinta=buf(1,ijklp,integ,iqu)
uhf_grad.f:                      xintb=buf(2,ijklp,integ,iqu)
uhf_grad.f:                      xintc=buf(3,ijklp,integ,iqu)
uhf_grad.f:                      yinta=buf(4,ijklp,integ,iqu)
uhf_grad.f:                      yintb=buf(5,ijklp,integ,iqu)
uhf_grad.f:                      yintc=buf(6,ijklp,integ,iqu)
uhf_grad.f:                      zinta=buf(7,ijklp,integ,iqu)
uhf_grad.f:                      zintb=buf(8,ijklp,integ,iqu)
uhf_grad.f:                      zintc=buf(9,ijklp,integ,iqu)
uhf_grad.f:                      xyz(1,1)=xyz(1,1)-dijkl*xinta
uhf_grad.f:                      xyz(1,2)=xyz(1,2)-dijkl*xintb
uhf_grad.f:                      xyz(1,3)=xyz(1,3)-dijkl*xintc
uhf_grad.f:cdonotdoit            xyz(1,4)=xyz(1,4)-dijkl*xintd
uhf_grad.f:                      xyz(2,1)=xyz(2,1)-dijkl*yinta
uhf_grad.f:                      xyz(2,2)=xyz(2,2)-dijkl*yintb
uhf_grad.f:                      xyz(2,3)=xyz(2,3)-dijkl*yintc
uhf_grad.f:cdonotdoit            xyz(2,4)=xyz(2,4)-dijkl*yintd
uhf_grad.f:                      xyz(3,1)=xyz(3,1)-dijkl*zinta
uhf_grad.f:                      xyz(3,2)=xyz(3,2)-dijkl*zintb
uhf_grad.f:                      xyz(3,3)=xyz(3,3)-dijkl*zintc
uhf_grad.f:cdonotdoit            xyz(3,4)=xyz(3,4)-dijkl*zintd
uhf_hess.f:     $                         thres1, ntri,  nbls,  ngcd,  lnijkl,
uhf_hess.f:c  lnijkl   - number of integrals from one quartet
uhf_hess.f:c    der2_AxAx=buf(1,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_AxAy=buf(2,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_AxAz=buf(3,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_AyAy=buf(4,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_AyAz=buf(5,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_AzAz=buf(6,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_AxBx= buf(7,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_AxBy= buf(8,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_AxBz= buf(9,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_AyBx=buf(10,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_AyBy=buf(11,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_AyBz=buf(12,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_AzBx=buf(13,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_AzBy=buf(14,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_AzBz=buf(15,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_AxCx=buf(16,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_AxCy=buf(17,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_AxCz=buf(18,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_AyCx=buf(19,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_AyCy=buf(20,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_AyCz=buf(21,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_AzCx=buf(22,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_AzCy=buf(23,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_AzCz=buf(24,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_BxBx=buf(25,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_BxBy=buf(26,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_BxBz=buf(27,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_ByBy=buf(28,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_ByBz=buf(29,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_BzBz=buf(30,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_BxCx=buf(31,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_BxCy=buf(32,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_BxCz=buf(33,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_ByCx=buf(34,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_ByCy=buf(35,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_ByCz=buf(36,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_BzCx=buf(37,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_BzCy=buf(38,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_BzCz=buf(39,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_CxCx=buf(40,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_CxCy=buf(41,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_CxCz=buf(42,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_CyCy=buf(43,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_CyCz=buf(44,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_CzCz=buf(45,nbls,lnijkl,ngcd),
uhf_hess.f:      dimension buf(45,nbls,lnijkl,ngcd)
uhf_hess.f:        do 100 ijklp=1,nbls
uhf_hess.f:          icff=labels(1,iqu,ijklp)
uhf_hess.f:          jcff=labels(2,iqu,ijklp)
uhf_hess.f:          kcff=labels(3,iqu,ijklp)
uhf_hess.f:          lcff=labels(4,iqu,ijklp)
uhf_hess.f:c  Indices and integrals in the quartet ijkl :
uhf_hess.f:                ijf=ii+jcf
uhf_hess.f:                if(jcf.gt.icf) ijf=jj+icf
uhf_hess.f:                dij2=(denA(ijf)+denB(ijf))*2.d0
uhf_hess.f:                      dijkl=2.0d0*(dij2*dkl - dikA*djlA - dilA*djkA
uhf_hess.f:                      dijkl=2.0d0*(dij2*dkl - ax*
uhf_hess.f:          if(abs(dijkl).lt.thres1) go to 350
uhf_hess.f:        call daxpy(45,dijkl,buf(1,ijklp,integ,iqu),1,work,1)
uhf_hess.f:c          work(iel)=work(iel)+dijkl*buf(iel,ijklp,integ,iqu)
uhf_hess.f:     *                          ntri,nbls, ngcd, lnijkl,
uhf_hess.f:c  lnijkl   - number of integrals from one quartet
uhf_hess.f:c    der2_AxAx=buf(1,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_AxAy=buf(2,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_AxAz=buf(3,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_AyAy=buf(4,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_AyAz=buf(5,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_AzAz=buf(6,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_AxBx= buf(7,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_AxBy= buf(8,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_AxBz= buf(9,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_AyBx=buf(10,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_AyBy=buf(11,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_AyBz=buf(12,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_AzBx=buf(13,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_AzBy=buf(14,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_AzBz=buf(15,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_AxCx=buf(16,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_AxCy=buf(17,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_AxCz=buf(18,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_AyCx=buf(19,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_AyCy=buf(20,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_AyCz=buf(21,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_AzCx=buf(22,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_AzCy=buf(23,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_AzCz=buf(24,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_BxBx=buf(25,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_BxBy=buf(26,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_BxBz=buf(27,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_ByBy=buf(28,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_ByBz=buf(29,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_BzBz=buf(30,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_BxCx=buf(31,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_BxCy=buf(32,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_BxCz=buf(33,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_ByCx=buf(34,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_ByCy=buf(35,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_ByCz=buf(36,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_BzCx=buf(37,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_BzCy=buf(38,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_BzCz=buf(39,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_CxCx=buf(40,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_CxCy=buf(41,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_CxCz=buf(42,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_CyCy=buf(43,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_CyCz=buf(44,nbls,lnijkl,ngcd),
uhf_hess.f:c    der2_CzCz=buf(45,nbls,lnijkl,ngcd),
uhf_hess.f:      dimension buf(45,nbls,lnijkl,ngcd)
uhf_hess.f:        do 100 ijklp=1,nbls
uhf_hess.f:          icff=labels(1,iqu,ijklp)
uhf_hess.f:          jcff=labels(2,iqu,ijklp)
uhf_hess.f:          kcff=labels(3,iqu,ijklp)
uhf_hess.f:          lcff=labels(4,iqu,ijklp)
uhf_hess.f:c  Indices and integrals in the quartet ijkl :
uhf_hess.f:                ijf=ii+jcf
uhf_hess.f:                if(jcf.gt.icf) ijf=jj+icf
uhf_hess.f:                dij4=(denA(ijf)+denB(ijf))*4.0d0
uhf_hess.f:                      dijkl=dij4*dkl
uhf_hess.f:          if(abs(dijkl).lt.thres1) go to 350
uhf_hess.f:        call dscal(45,dijkl,buf(1,ijklp,integ,iqu),1)
uhf_hess.f:        call make_78_from_45(buf(1,ijklp,integ,iqu),work)
uhf_hess.f:     *                  ntri,nbls,ngcd,lnijkl,ncenter,
uhf_hess.f:c  lnijkl   - number of integrals from one quartet
uhf_hess.f:      dimension buf(9,nbls,lnijkl,ngcd)
uhf_hess.f:        do 100 ijklp=1,nbls
uhf_hess.f:          icff=labels(1,iqu,ijklp)
uhf_hess.f:          jcff=labels(2,iqu,ijklp)
uhf_hess.f:          kcff=labels(3,iqu,ijklp)
uhf_hess.f:          lcff=labels(4,iqu,ijklp)
uhf_hess.f:c  Indices and integrals in the quartet ijkl :
uhf_hess.f:                ijf=ii+jcf
uhf_hess.f:                if(jcf.gt.icf) ijf=jj+icf
uhf_hess.f:                dij2=(denA(ijf)+denB(ijf))*two
uhf_hess.f:                      xinta=buf(1,ijklp,integ,iqu)
uhf_hess.f:                      xintb=buf(2,ijklp,integ,iqu)
uhf_hess.f:                      xintc=buf(3,ijklp,integ,iqu)
uhf_hess.f:                      yinta=buf(4,ijklp,integ,iqu)
uhf_hess.f:                      yintb=buf(5,ijklp,integ,iqu)
uhf_hess.f:                      yintc=buf(6,ijklp,integ,iqu)
uhf_hess.f:                      zinta=buf(7,ijklp,integ,iqu)
uhf_hess.f:                      zintb=buf(8,ijklp,integ,iqu)
uhf_hess.f:                      zintc=buf(9,ijklp,integ,iqu)
uhf_hess.f:           fderA(1,iat,ijf)=fderA(1,iat,ijf)+xinta*dkl2
uhf_hess.f:           fderA(2,iat,ijf)=fderA(2,iat,ijf)+yinta*dkl2
uhf_hess.f:           fderA(3,iat,ijf)=fderA(3,iat,ijf)+zinta*dkl2
uhf_hess.f:           fderB(1,iat,ijf)=fderB(1,iat,ijf)+xinta*dkl2
uhf_hess.f:           fderB(2,iat,ijf)=fderB(2,iat,ijf)+yinta*dkl2
uhf_hess.f:           fderB(3,iat,ijf)=fderB(3,iat,ijf)+zinta*dkl2
uhf_hess.f:           fderA(1,jat,ijf)=fderA(1,jat,ijf)+xintb*dkl2
uhf_hess.f:           fderA(2,jat,ijf)=fderA(2,jat,ijf)+yintb*dkl2
uhf_hess.f:           fderA(3,jat,ijf)=fderA(3,jat,ijf)+zintb*dkl2
uhf_hess.f:           fderB(1,jat,ijf)=fderB(1,jat,ijf)+xintb*dkl2
uhf_hess.f:           fderB(2,jat,ijf)=fderB(2,jat,ijf)+yintb*dkl2
uhf_hess.f:           fderB(3,jat,ijf)=fderB(3,jat,ijf)+zintb*dkl2
uhf_hess.f:           fderA(1,kat,ijf)=fderA(1,kat,ijf)+xintc*dkl2
uhf_hess.f:           fderA(2,kat,ijf)=fderA(2,kat,ijf)+yintc*dkl2
uhf_hess.f:           fderA(3,kat,ijf)=fderA(3,kat,ijf)+zintc*dkl2
uhf_hess.f:           fderB(1,kat,ijf)=fderB(1,kat,ijf)+xintc*dkl2
uhf_hess.f:           fderB(2,kat,ijf)=fderB(2,kat,ijf)+yintc*dkl2
uhf_hess.f:           fderB(3,kat,ijf)=fderB(3,kat,ijf)+zintc*dkl2
uhf_hess.f:           fderA(1,lat,ijf)=fderA(1,lat,ijf)+xintd*dkl2
uhf_hess.f:           fderA(2,lat,ijf)=fderA(2,lat,ijf)+yintd*dkl2
uhf_hess.f:           fderA(3,lat,ijf)=fderA(3,lat,ijf)+zintd*dkl2
uhf_hess.f:           fderB(1,lat,ijf)=fderB(1,lat,ijf)+xintd*dkl2
uhf_hess.f:           fderB(2,lat,ijf)=fderB(2,lat,ijf)+yintd*dkl2
uhf_hess.f:           fderB(3,lat,ijf)=fderB(3,lat,ijf)+zintd*dkl2
uhf_hess.f:           fderA(1,iat,klf)=fderA(1,iat,klf)+xinta*dij2
uhf_hess.f:           fderA(2,iat,klf)=fderA(2,iat,klf)+yinta*dij2
uhf_hess.f:           fderA(3,iat,klf)=fderA(3,iat,klf)+zinta*dij2
uhf_hess.f:           fderB(1,iat,klf)=fderB(1,iat,klf)+xinta*dij2
uhf_hess.f:           fderB(2,iat,klf)=fderB(2,iat,klf)+yinta*dij2
uhf_hess.f:           fderB(3,iat,klf)=fderB(3,iat,klf)+zinta*dij2
uhf_hess.f:           fderA(1,jat,klf)=fderA(1,jat,klf)+xintb*dij2
uhf_hess.f:           fderA(2,jat,klf)=fderA(2,jat,klf)+yintb*dij2
uhf_hess.f:           fderA(3,jat,klf)=fderA(3,jat,klf)+zintb*dij2
uhf_hess.f:           fderB(1,jat,klf)=fderB(1,jat,klf)+xintb*dij2
uhf_hess.f:           fderB(2,jat,klf)=fderB(2,jat,klf)+yintb*dij2
uhf_hess.f:           fderB(3,jat,klf)=fderB(3,jat,klf)+zintb*dij2
uhf_hess.f:           fderA(1,kat,klf)=fderA(1,kat,klf)+xintc*dij2
uhf_hess.f:           fderA(2,kat,klf)=fderA(2,kat,klf)+yintc*dij2
uhf_hess.f:           fderA(3,kat,klf)=fderA(3,kat,klf)+zintc*dij2
uhf_hess.f:           fderB(1,kat,klf)=fderB(1,kat,klf)+xintc*dij2
uhf_hess.f:           fderB(2,kat,klf)=fderB(2,kat,klf)+yintc*dij2
uhf_hess.f:           fderB(3,kat,klf)=fderB(3,kat,klf)+zintc*dij2
uhf_hess.f:           fderA(1,lat,klf)=fderA(1,lat,klf)+xintd*dij2
uhf_hess.f:           fderA(2,lat,klf)=fderA(2,lat,klf)+yintd*dij2
uhf_hess.f:           fderA(3,lat,klf)=fderA(3,lat,klf)+zintd*dij2
uhf_hess.f:           fderB(1,lat,klf)=fderB(1,lat,klf)+xintd*dij2
uhf_hess.f:           fderB(2,lat,klf)=fderB(2,lat,klf)+yintd*dij2
uhf_hess.f:           fderB(3,lat,klf)=fderB(3,lat,klf)+zintd*dij2
uhf_hess.f:     *                     ntri,nbls,ngcd,lnijkl,ncenter,
uhf_hess.f:c  lnijkl   - number of integrals from one quartet
uhf_hess.f:      dimension buf(9,nbls,lnijkl,ngcd)
uhf_hess.f:        do 100 ijklp=1,nbls
uhf_hess.f:          icff=labels(1,iqu,ijklp)
uhf_hess.f:          jcff=labels(2,iqu,ijklp)
uhf_hess.f:          kcff=labels(3,iqu,ijklp)
uhf_hess.f:          lcff=labels(4,iqu,ijklp)
uhf_hess.f:c  Indices and integrals in the quartet ijkl :
uhf_hess.f:                ijf=ii+jcf
uhf_hess.f:                if(jcf.gt.icf) ijf=jj+icf
uhf_hess.f:                dij2=(denA(ijf)+denB(ijf))*two
uhf_hess.f:                      xinta=buf(1,ijklp,integ,iqu)
uhf_hess.f:                      xintb=buf(2,ijklp,integ,iqu)
uhf_hess.f:                      xintc=buf(3,ijklp,integ,iqu)
uhf_hess.f:                      yinta=buf(4,ijklp,integ,iqu)
uhf_hess.f:                      yintb=buf(5,ijklp,integ,iqu)
uhf_hess.f:                      yintc=buf(6,ijklp,integ,iqu)
uhf_hess.f:                      zinta=buf(7,ijklp,integ,iqu)
uhf_hess.f:                      zintb=buf(8,ijklp,integ,iqu)
uhf_hess.f:                      zintc=buf(9,ijklp,integ,iqu)
uhf_hess.f:           fderA(1,iat,ijf)=fderA(1,iat,ijf)+xinta*dkl2
uhf_hess.f:           fderA(2,iat,ijf)=fderA(2,iat,ijf)+yinta*dkl2
uhf_hess.f:           fderA(3,iat,ijf)=fderA(3,iat,ijf)+zinta*dkl2
uhf_hess.f:           fderB(1,iat,ijf)=fderB(1,iat,ijf)+xinta*dkl2
uhf_hess.f:           fderB(2,iat,ijf)=fderB(2,iat,ijf)+yinta*dkl2
uhf_hess.f:           fderB(3,iat,ijf)=fderB(3,iat,ijf)+zinta*dkl2
uhf_hess.f:           fderA(1,jat,ijf)=fderA(1,jat,ijf)+xintb*dkl2
uhf_hess.f:           fderA(2,jat,ijf)=fderA(2,jat,ijf)+yintb*dkl2
uhf_hess.f:           fderA(3,jat,ijf)=fderA(3,jat,ijf)+zintb*dkl2
uhf_hess.f:           fderB(1,jat,ijf)=fderB(1,jat,ijf)+xintb*dkl2
uhf_hess.f:           fderB(2,jat,ijf)=fderB(2,jat,ijf)+yintb*dkl2
uhf_hess.f:           fderB(3,jat,ijf)=fderB(3,jat,ijf)+zintb*dkl2
uhf_hess.f:           fderA(1,kat,ijf)=fderA(1,kat,ijf)+xintc*dkl2
uhf_hess.f:           fderA(2,kat,ijf)=fderA(2,kat,ijf)+yintc*dkl2
uhf_hess.f:           fderA(3,kat,ijf)=fderA(3,kat,ijf)+zintc*dkl2
uhf_hess.f:           fderB(1,kat,ijf)=fderB(1,kat,ijf)+xintc*dkl2
uhf_hess.f:           fderB(2,kat,ijf)=fderB(2,kat,ijf)+yintc*dkl2
uhf_hess.f:           fderB(3,kat,ijf)=fderB(3,kat,ijf)+zintc*dkl2
uhf_hess.f:           fderA(1,lat,ijf)=fderA(1,lat,ijf)+xintd*dkl2
uhf_hess.f:           fderA(2,lat,ijf)=fderA(2,lat,ijf)+yintd*dkl2
uhf_hess.f:           fderA(3,lat,ijf)=fderA(3,lat,ijf)+zintd*dkl2
uhf_hess.f:           fderB(1,lat,ijf)=fderB(1,lat,ijf)+xintd*dkl2
uhf_hess.f:           fderB(2,lat,ijf)=fderB(2,lat,ijf)+yintd*dkl2
uhf_hess.f:           fderB(3,lat,ijf)=fderB(3,lat,ijf)+zintd*dkl2
uhf_hess.f:           fderA(1,iat,klf)=fderA(1,iat,klf)+xinta*dij2
uhf_hess.f:           fderA(2,iat,klf)=fderA(2,iat,klf)+yinta*dij2
uhf_hess.f:           fderA(3,iat,klf)=fderA(3,iat,klf)+zinta*dij2
uhf_hess.f:           fderB(1,iat,klf)=fderB(1,iat,klf)+xinta*dij2
uhf_hess.f:           fderB(2,iat,klf)=fderB(2,iat,klf)+yinta*dij2
uhf_hess.f:           fderB(3,iat,klf)=fderB(3,iat,klf)+zinta*dij2
uhf_hess.f:           fderA(1,jat,klf)=fderA(1,jat,klf)+xintb*dij2
uhf_hess.f:           fderA(2,jat,klf)=fderA(2,jat,klf)+yintb*dij2
uhf_hess.f:           fderA(3,jat,klf)=fderA(3,jat,klf)+zintb*dij2
uhf_hess.f:           fderB(1,jat,klf)=fderB(1,jat,klf)+xintb*dij2
uhf_hess.f:           fderB(2,jat,klf)=fderB(2,jat,klf)+yintb*dij2
uhf_hess.f:           fderB(3,jat,klf)=fderB(3,jat,klf)+zintb*dij2
uhf_hess.f:           fderA(1,kat,klf)=fderA(1,kat,klf)+xintc*dij2
uhf_hess.f:           fderA(2,kat,klf)=fderA(2,kat,klf)+yintc*dij2
uhf_hess.f:           fderA(3,kat,klf)=fderA(3,kat,klf)+zintc*dij2
uhf_hess.f:           fderB(1,kat,klf)=fderB(1,kat,klf)+xintc*dij2
uhf_hess.f:           fderB(2,kat,klf)=fderB(2,kat,klf)+yintc*dij2
uhf_hess.f:           fderB(3,kat,klf)=fderB(3,kat,klf)+zintc*dij2
uhf_hess.f:           fderA(1,lat,klf)=fderA(1,lat,klf)+xintd*dij2
uhf_hess.f:           fderA(2,lat,klf)=fderA(2,lat,klf)+yintd*dij2
uhf_hess.f:           fderA(3,lat,klf)=fderA(3,lat,klf)+zintd*dij2
uhf_hess.f:           fderB(1,lat,klf)=fderB(1,lat,klf)+xintd*dij2
uhf_hess.f:           fderB(2,lat,klf)=fderB(2,lat,klf)+yintd*dij2
uhf_hess.f:           fderB(3,lat,klf)=fderB(3,lat,klf)+zintd*dij2
uhf_hess.f:     *                     ntri,nbls,ngcd,lnijkl,ncenter,
uhf_hess.f:c  lnijkl   - number of integrals from one quartet
uhf_hess.f:      dimension buf(9,nbls,lnijkl,ngcd)
uhf_hess.f:        do 100 ijklp=1,nbls
uhf_hess.f:          icff=labels(1,iqu,ijklp)
uhf_hess.f:          jcff=labels(2,iqu,ijklp)
uhf_hess.f:          kcff=labels(3,iqu,ijklp)
uhf_hess.f:          lcff=labels(4,iqu,ijklp)
uhf_hess.f:c  Indices and integrals in the quartet ijkl :
uhf_hess.f:                ijf=ii+jcf
uhf_hess.f:                if(jcf.gt.icf) ijf=jj+icf
uhf_hess.f:                dij2=(denA(ijf)+denB(ijf))*two
uhf_hess.f:                      xinta=buf(1,ijklp,integ,iqu)
uhf_hess.f:                      xintb=buf(2,ijklp,integ,iqu)
uhf_hess.f:                      xintc=buf(3,ijklp,integ,iqu)
uhf_hess.f:                      yinta=buf(4,ijklp,integ,iqu)
uhf_hess.f:                      yintb=buf(5,ijklp,integ,iqu)
uhf_hess.f:                      yintc=buf(6,ijklp,integ,iqu)
uhf_hess.f:                      zinta=buf(7,ijklp,integ,iqu)
uhf_hess.f:                      zintb=buf(8,ijklp,integ,iqu)
uhf_hess.f:                      zintc=buf(9,ijklp,integ,iqu)
uhf_hess.f:           fderA(1,iat,ijf)=fderA(1,iat,ijf)+xinta*dkl2
uhf_hess.f:           fderA(2,iat,ijf)=fderA(2,iat,ijf)+yinta*dkl2
uhf_hess.f:           fderA(3,iat,ijf)=fderA(3,iat,ijf)+zinta*dkl2
uhf_hess.f:           fderB(1,iat,ijf)=fderB(1,iat,ijf)+xinta*dkl2
uhf_hess.f:           fderB(2,iat,ijf)=fderB(2,iat,ijf)+yinta*dkl2
uhf_hess.f:           fderB(3,iat,ijf)=fderB(3,iat,ijf)+zinta*dkl2
uhf_hess.f:           fderA(1,jat,ijf)=fderA(1,jat,ijf)+xintb*dkl2
uhf_hess.f:           fderA(2,jat,ijf)=fderA(2,jat,ijf)+yintb*dkl2
uhf_hess.f:           fderA(3,jat,ijf)=fderA(3,jat,ijf)+zintb*dkl2
uhf_hess.f:           fderB(1,jat,ijf)=fderB(1,jat,ijf)+xintb*dkl2
uhf_hess.f:           fderB(2,jat,ijf)=fderB(2,jat,ijf)+yintb*dkl2
uhf_hess.f:           fderB(3,jat,ijf)=fderB(3,jat,ijf)+zintb*dkl2
uhf_hess.f:           fderA(1,kat,ijf)=fderA(1,kat,ijf)+xintc*dkl2
uhf_hess.f:           fderA(2,kat,ijf)=fderA(2,kat,ijf)+yintc*dkl2
uhf_hess.f:           fderA(3,kat,ijf)=fderA(3,kat,ijf)+zintc*dkl2
uhf_hess.f:           fderB(1,kat,ijf)=fderB(1,kat,ijf)+xintc*dkl2
uhf_hess.f:           fderB(2,kat,ijf)=fderB(2,kat,ijf)+yintc*dkl2
uhf_hess.f:           fderB(3,kat,ijf)=fderB(3,kat,ijf)+zintc*dkl2
uhf_hess.f:           fderA(1,lat,ijf)=fderA(1,lat,ijf)+xintd*dkl2
uhf_hess.f:           fderA(2,lat,ijf)=fderA(2,lat,ijf)+yintd*dkl2
uhf_hess.f:           fderA(3,lat,ijf)=fderA(3,lat,ijf)+zintd*dkl2
uhf_hess.f:           fderB(1,lat,ijf)=fderB(1,lat,ijf)+xintd*dkl2
uhf_hess.f:           fderB(2,lat,ijf)=fderB(2,lat,ijf)+yintd*dkl2
uhf_hess.f:           fderB(3,lat,ijf)=fderB(3,lat,ijf)+zintd*dkl2
uhf_hess.f:           fderA(1,iat,klf)=fderA(1,iat,klf)+xinta*dij2
uhf_hess.f:           fderA(2,iat,klf)=fderA(2,iat,klf)+yinta*dij2
uhf_hess.f:           fderA(3,iat,klf)=fderA(3,iat,klf)+zinta*dij2
uhf_hess.f:           fderB(1,iat,klf)=fderB(1,iat,klf)+xinta*dij2
uhf_hess.f:           fderB(2,iat,klf)=fderB(2,iat,klf)+yinta*dij2
uhf_hess.f:           fderB(3,iat,klf)=fderB(3,iat,klf)+zinta*dij2
uhf_hess.f:           fderA(1,jat,klf)=fderA(1,jat,klf)+xintb*dij2
uhf_hess.f:           fderA(2,jat,klf)=fderA(2,jat,klf)+yintb*dij2
uhf_hess.f:           fderA(3,jat,klf)=fderA(3,jat,klf)+zintb*dij2
uhf_hess.f:           fderB(1,jat,klf)=fderB(1,jat,klf)+xintb*dij2
uhf_hess.f:           fderB(2,jat,klf)=fderB(2,jat,klf)+yintb*dij2
uhf_hess.f:           fderB(3,jat,klf)=fderB(3,jat,klf)+zintb*dij2
uhf_hess.f:           fderA(1,kat,klf)=fderA(1,kat,klf)+xintc*dij2
uhf_hess.f:           fderA(2,kat,klf)=fderA(2,kat,klf)+yintc*dij2
uhf_hess.f:           fderA(3,kat,klf)=fderA(3,kat,klf)+zintc*dij2
uhf_hess.f:           fderB(1,kat,klf)=fderB(1,kat,klf)+xintc*dij2
uhf_hess.f:           fderB(2,kat,klf)=fderB(2,kat,klf)+yintc*dij2
uhf_hess.f:           fderB(3,kat,klf)=fderB(3,kat,klf)+zintc*dij2
uhf_hess.f:           fderA(1,lat,klf)=fderA(1,lat,klf)+xintd*dij2
uhf_hess.f:           fderA(2,lat,klf)=fderA(2,lat,klf)+yintd*dij2
uhf_hess.f:           fderA(3,lat,klf)=fderA(3,lat,klf)+zintd*dij2
uhf_hess.f:           fderB(1,lat,klf)=fderB(1,lat,klf)+xintd*dij2
uhf_hess.f:           fderB(2,lat,klf)=fderB(2,lat,klf)+yintd*dij2
uhf_hess.f:           fderB(3,lat,klf)=fderB(3,lat,klf)+zintd*dij2
uhf_hess.f:     *                     ntri,nbls,ngcd,lnijkl,ncenter,
uhf_hess.f:c  lnijkl   - number of integrals from one quartet
uhf_hess.f:      dimension buf(9,nbls,lnijkl,ngcd)
uhf_hess.f:        do 100 ijklp=1,nbls
uhf_hess.f:          icff=labels(1,iqu,ijklp)
uhf_hess.f:          jcff=labels(2,iqu,ijklp)
uhf_hess.f:          kcff=labels(3,iqu,ijklp)
uhf_hess.f:          lcff=labels(4,iqu,ijklp)
uhf_hess.f:c  Indices and integrals in the quartet ijkl :
uhf_hess.f:                ijf=ii+jcf
uhf_hess.f:                if(jcf.gt.icf) ijf=jj+icf
uhf_hess.f:                dij2=(denA(ijf)+denB(ijf))*two
uhf_hess.f:                      xinta=buf(1,ijklp,integ,iqu)
uhf_hess.f:                      xintb=buf(2,ijklp,integ,iqu)
uhf_hess.f:                      xintc=buf(3,ijklp,integ,iqu)
uhf_hess.f:                      yinta=buf(4,ijklp,integ,iqu)
uhf_hess.f:                      yintb=buf(5,ijklp,integ,iqu)
uhf_hess.f:                      yintc=buf(6,ijklp,integ,iqu)
uhf_hess.f:                      zinta=buf(7,ijklp,integ,iqu)
uhf_hess.f:                      zintb=buf(8,ijklp,integ,iqu)
uhf_hess.f:                      zintc=buf(9,ijklp,integ,iqu)
uhf_hess.f:           fderA(1,iat,ijf)=fderA(1,iat,ijf)+xinta*dkl2
uhf_hess.f:           fderA(2,iat,ijf)=fderA(2,iat,ijf)+yinta*dkl2
uhf_hess.f:           fderA(3,iat,ijf)=fderA(3,iat,ijf)+zinta*dkl2
uhf_hess.f:           fderB(1,iat,ijf)=fderB(1,iat,ijf)+xinta*dkl2
uhf_hess.f:           fderB(2,iat,ijf)=fderB(2,iat,ijf)+yinta*dkl2
uhf_hess.f:           fderB(3,iat,ijf)=fderB(3,iat,ijf)+zinta*dkl2
uhf_hess.f:           fderA(1,iat,klf)=fderA(1,iat,klf)+xinta*dij2
uhf_hess.f:           fderA(2,iat,klf)=fderA(2,iat,klf)+yinta*dij2
uhf_hess.f:           fderA(3,iat,klf)=fderA(3,iat,klf)+zinta*dij2
uhf_hess.f:           fderB(1,iat,klf)=fderB(1,iat,klf)+xinta*dij2
uhf_hess.f:           fderB(2,iat,klf)=fderB(2,iat,klf)+yinta*dij2
uhf_hess.f:           fderB(3,iat,klf)=fderB(3,iat,klf)+zinta*dij2
uhf_hess.f:           fderA(1,jat,ijf)=fderA(1,jat,ijf)+xintb*dkl2
uhf_hess.f:           fderA(2,jat,ijf)=fderA(2,jat,ijf)+yintb*dkl2
uhf_hess.f:           fderA(3,jat,ijf)=fderA(3,jat,ijf)+zintb*dkl2
uhf_hess.f:           fderB(1,jat,ijf)=fderB(1,jat,ijf)+xintb*dkl2
uhf_hess.f:           fderB(2,jat,ijf)=fderB(2,jat,ijf)+yintb*dkl2
uhf_hess.f:           fderB(3,jat,ijf)=fderB(3,jat,ijf)+zintb*dkl2
uhf_hess.f:           fderA(1,jat,klf)=fderA(1,jat,klf)+xintb*dij2
uhf_hess.f:           fderA(2,jat,klf)=fderA(2,jat,klf)+yintb*dij2
uhf_hess.f:           fderA(3,jat,klf)=fderA(3,jat,klf)+zintb*dij2
uhf_hess.f:           fderB(1,jat,klf)=fderB(1,jat,klf)+xintb*dij2
uhf_hess.f:           fderB(2,jat,klf)=fderB(2,jat,klf)+yintb*dij2
uhf_hess.f:           fderB(3,jat,klf)=fderB(3,jat,klf)+zintb*dij2
uhf_hess.f:           fderA(1,kat,ijf)=fderA(1,kat,ijf)+xintc*dkl2
uhf_hess.f:           fderA(2,kat,ijf)=fderA(2,kat,ijf)+yintc*dkl2
uhf_hess.f:           fderA(3,kat,ijf)=fderA(3,kat,ijf)+zintc*dkl2
uhf_hess.f:           fderB(1,kat,ijf)=fderB(1,kat,ijf)+xintc*dkl2
uhf_hess.f:           fderB(2,kat,ijf)=fderB(2,kat,ijf)+yintc*dkl2
uhf_hess.f:           fderB(3,kat,ijf)=fderB(3,kat,ijf)+zintc*dkl2
uhf_hess.f:           fderA(1,kat,klf)=fderA(1,kat,klf)+xintc*dij2
uhf_hess.f:           fderA(2,kat,klf)=fderA(2,kat,klf)+yintc*dij2
uhf_hess.f:           fderA(3,kat,klf)=fderA(3,kat,klf)+zintc*dij2
uhf_hess.f:           fderB(1,kat,klf)=fderB(1,kat,klf)+xintc*dij2
uhf_hess.f:           fderB(2,kat,klf)=fderB(2,kat,klf)+yintc*dij2
uhf_hess.f:           fderB(3,kat,klf)=fderB(3,kat,klf)+zintc*dij2
uhf_hess.f:           fderA(1,lat,ijf)=fderA(1,lat,ijf)+xintd*dkl2
uhf_hess.f:           fderA(2,lat,ijf)=fderA(2,lat,ijf)+yintd*dkl2
uhf_hess.f:           fderA(3,lat,ijf)=fderA(3,lat,ijf)+zintd*dkl2
uhf_hess.f:           fderB(1,lat,ijf)=fderB(1,lat,ijf)+xintd*dkl2
uhf_hess.f:           fderB(2,lat,ijf)=fderB(2,lat,ijf)+yintd*dkl2
uhf_hess.f:           fderB(3,lat,ijf)=fderB(3,lat,ijf)+zintd*dkl2
uhf_hess.f:           fderA(1,lat,klf)=fderA(1,lat,klf)+xintd*dij2
uhf_hess.f:           fderA(2,lat,klf)=fderA(2,lat,klf)+yintd*dij2
uhf_hess.f:           fderA(3,lat,klf)=fderA(3,lat,klf)+zintd*dij2
uhf_hess.f:           fderB(1,lat,klf)=fderB(1,lat,klf)+xintd*dij2
uhf_hess.f:           fderB(2,lat,klf)=fderB(2,lat,klf)+yintd*dij2
uhf_hess.f:           fderB(3,lat,klf)=fderB(3,lat,klf)+zintd*dij2
uhf_hess.f:     *                     ntri,nbls,ngcd,lnijkl,ncenter,
uhf_hess.f:c  lnijkl   - number of integrals from one quartet
uhf_hess.f:      dimension buf(9,nbls,lnijkl,ngcd)
uhf_hess.f:        do 100 ijklp=1,nbls
uhf_hess.f:          icff=labels(1,iqu,ijklp)
uhf_hess.f:          jcff=labels(2,iqu,ijklp)
uhf_hess.f:          kcff=labels(3,iqu,ijklp)
uhf_hess.f:          lcff=labels(4,iqu,ijklp)
uhf_hess.f:c  Indices and integrals in the quartet ijkl :
uhf_hess.f:                ijf=ii+jcf
uhf_hess.f:                if(jcf.gt.icf) ijf=jj+icf
uhf_hess.f:                dij2=(denA(ijf)+denB(ijf))*two
uhf_hess.f:                      xinta=buf(1,ijklp,integ,iqu)
uhf_hess.f:                      xintb=buf(2,ijklp,integ,iqu)
uhf_hess.f:                      xintc=buf(3,ijklp,integ,iqu)
uhf_hess.f:                      yinta=buf(4,ijklp,integ,iqu)
uhf_hess.f:                      yintb=buf(5,ijklp,integ,iqu)
uhf_hess.f:                      yintc=buf(6,ijklp,integ,iqu)
uhf_hess.f:                      zinta=buf(7,ijklp,integ,iqu)
uhf_hess.f:                      zintb=buf(8,ijklp,integ,iqu)
uhf_hess.f:                      zintc=buf(9,ijklp,integ,iqu)
uhf_hess.f:           fderA(1,iat,ijf)=fderA(1,iat,ijf)+xinta*dkl2
uhf_hess.f:           fderA(2,iat,ijf)=fderA(2,iat,ijf)+yinta*dkl2
uhf_hess.f:           fderA(3,iat,ijf)=fderA(3,iat,ijf)+zinta*dkl2
uhf_hess.f:           fderB(1,iat,ijf)=fderB(1,iat,ijf)+xinta*dkl2
uhf_hess.f:           fderB(2,iat,ijf)=fderB(2,iat,ijf)+yinta*dkl2
uhf_hess.f:           fderB(3,iat,ijf)=fderB(3,iat,ijf)+zinta*dkl2
uhf_hess.f:           fderA(1,iat,klf)=fderA(1,iat,klf)+xinta*dij2
uhf_hess.f:           fderA(2,iat,klf)=fderA(2,iat,klf)+yinta*dij2
uhf_hess.f:           fderA(3,iat,klf)=fderA(3,iat,klf)+zinta*dij2
uhf_hess.f:           fderB(1,iat,klf)=fderB(1,iat,klf)+xinta*dij2
uhf_hess.f:           fderB(2,iat,klf)=fderB(2,iat,klf)+yinta*dij2
uhf_hess.f:           fderB(3,iat,klf)=fderB(3,iat,klf)+zinta*dij2
uhf_hess.f:           fderA(1,jat,ijf)=fderA(1,jat,ijf)+xintb*dkl2
uhf_hess.f:           fderA(2,jat,ijf)=fderA(2,jat,ijf)+yintb*dkl2
uhf_hess.f:           fderA(3,jat,ijf)=fderA(3,jat,ijf)+zintb*dkl2
uhf_hess.f:           fderB(1,jat,ijf)=fderB(1,jat,ijf)+xintb*dkl2
uhf_hess.f:           fderB(2,jat,ijf)=fderB(2,jat,ijf)+yintb*dkl2
uhf_hess.f:           fderB(3,jat,ijf)=fderB(3,jat,ijf)+zintb*dkl2
uhf_hess.f:           fderA(1,jat,klf)=fderA(1,jat,klf)+xintb*dij2
uhf_hess.f:           fderA(2,jat,klf)=fderA(2,jat,klf)+yintb*dij2
uhf_hess.f:           fderA(3,jat,klf)=fderA(3,jat,klf)+zintb*dij2
uhf_hess.f:           fderB(1,jat,klf)=fderB(1,jat,klf)+xintb*dij2
uhf_hess.f:           fderB(2,jat,klf)=fderB(2,jat,klf)+yintb*dij2
uhf_hess.f:           fderB(3,jat,klf)=fderB(3,jat,klf)+zintb*dij2
uhf_hess.f:           fderA(1,kat,ijf)=fderA(1,kat,ijf)+xintc*dkl2
uhf_hess.f:           fderA(2,kat,ijf)=fderA(2,kat,ijf)+yintc*dkl2
uhf_hess.f:           fderA(3,kat,ijf)=fderA(3,kat,ijf)+zintc*dkl2
uhf_hess.f:           fderB(1,kat,ijf)=fderB(1,kat,ijf)+xintc*dkl2
uhf_hess.f:           fderB(2,kat,ijf)=fderB(2,kat,ijf)+yintc*dkl2
uhf_hess.f:           fderB(3,kat,ijf)=fderB(3,kat,ijf)+zintc*dkl2
uhf_hess.f:           fderA(1,kat,klf)=fderA(1,kat,klf)+xintc*dij2
uhf_hess.f:           fderA(2,kat,klf)=fderA(2,kat,klf)+yintc*dij2
uhf_hess.f:           fderA(3,kat,klf)=fderA(3,kat,klf)+zintc*dij2
uhf_hess.f:           fderB(1,kat,klf)=fderB(1,kat,klf)+xintc*dij2
uhf_hess.f:           fderB(2,kat,klf)=fderB(2,kat,klf)+yintc*dij2
uhf_hess.f:           fderB(3,kat,klf)=fderB(3,kat,klf)+zintc*dij2
uhf_hess.f:           fderA(1,lat,ijf)=fderA(1,lat,ijf)+xintd*dkl2
uhf_hess.f:           fderA(2,lat,ijf)=fderA(2,lat,ijf)+yintd*dkl2
uhf_hess.f:           fderA(3,lat,ijf)=fderA(3,lat,ijf)+zintd*dkl2
uhf_hess.f:           fderB(1,lat,ijf)=fderB(1,lat,ijf)+xintd*dkl2
uhf_hess.f:           fderB(2,lat,ijf)=fderB(2,lat,ijf)+yintd*dkl2
uhf_hess.f:           fderB(3,lat,ijf)=fderB(3,lat,ijf)+zintd*dkl2
uhf_hess.f:           fderA(1,lat,klf)=fderA(1,lat,klf)+xintd*dij2
uhf_hess.f:           fderA(2,lat,klf)=fderA(2,lat,klf)+yintd*dij2
uhf_hess.f:           fderA(3,lat,klf)=fderA(3,lat,klf)+zintd*dij2
uhf_hess.f:           fderB(1,lat,klf)=fderB(1,lat,klf)+xintd*dij2
uhf_hess.f:           fderB(2,lat,klf)=fderB(2,lat,klf)+yintd*dij2
uhf_hess.f:           fderB(3,lat,klf)=fderB(3,lat,klf)+zintd*dij2
ump2.f:     2               'grad','pmij','scs ','sos ','noio','test'/
ump2.f:      ipmij=0
ump2.f:        ipmij=iopv(1,12)
ump2.f:        filname3=scrfile(1:len)//'.Tij'
ump2.f:      call get_ij_full(IJ,nvalA,I,J)
ump2.f:      call get_ij_full(IJ,nvalB,I,J)
ump2.f:      call get_ij_full(IJ,nvalB,I,J)
ump2.f:        xmatAB(lam,mu,ij)=xx
ump2.f:cc      do ij=istrtAB,iendAB
ump2.f:cc      write(6,*) ' IJ is:',ij
ump2.f:cc      call prntmat(ncf,ncf,ncf,xmatAB(1,1,ij))
ump2.f:      call get_ij_full(IJ,nvalA,I,J)
ump2.f:          write(6,*) ' IJ:',ij,' I:',i,' J:',j
ump2.f:          write(6,1234) ij,I,J,eIJ
ump2.f: 1234 format(' alpha-alpha: IJ=',i5,' i,j=',2(i5,1x),'eij= ',F12.6)
ump2.f:      call get_ij_full(IJ,nvalB,I,J)
ump2.f:        write(6,*) ' IJ:',ij,' I:',i,' J:',j
ump2.f:      ij1=ij-istrtAB
ump2.f:      call matconn('xmtAB',   'q',ncf,ncf, ibAB+ij1*ncf*ncf)
ump2.f:        write(6,1235) ij,I,J,0.5d0*eIJ
ump2.f: 1235 format(' alpha- beta: IJ=',i5,' i,j=',2(i5,1x),'eij= ',F12.6)
ump2.f:C  i,j     -  occupied MOs defining the ij pair
ump2.f:c  eij     -  on exit pair energy
ump2.f:      eij=zero
ump2.f:        tij=rdenom*xmo
ump2.f:        tnorm=tnorm+tij*tij
ump2.f:        eij=eij+tij*xmo
ump2.f:C  i,j     -  occupied MOs defining the ij pair
ump2.f:c  eij     -  on exit pair energy
ump2.f:      eij=zero
ump2.f:        tij=rdenom*xmo
ump2.f:        tnorm=tnorm+tij*tij
ump2.f:        eij=eij+tij*xmo
ump2.f:         ij=listAA(l)
ump2.f:         listAA_back(ij)=l
ump2.f:      call get_ij_full(IJ,nval,I,J)
ump2.f:      call get_ij_full(IJ,nval,I,J)
ump2.f:cc      do ij=istrt,iend
ump2.f:cc      write(6,*) ' IJ is:',ij
ump2.f:cc      call prntmat(ncf,ncf,ncf,xmatAA(1,1,ij))
ump2.f:      call get_ij_full(IJ,nvalB,I,J)
ump2.f:      call get_ij_full(IJ,nvalB,I,J)
ump2.f:      call get_ij_full(IJ,nvalB,I,J)
ump2.f:cc      do ij=istrt,iend
ump2.f:cc      write(6,*) ' IJ is:',ij
ump2.f:cc      call prntmat(ncf,ncf,ncf,xmatAB(1,1,ij))
xxx.f:      ijcf=0
xxx.f:            ijcf=ijcf+1
xxx.f:            ijne=iine+jnew
xxx.f:            if(jnew.gt.inew) ijne=jnew*(jnew-1)/2+inew
xxx.f:            den_sp(ijne)=den_lsh(ijcf)
xxx.f:      do ij=1,ncf*(ncf+1)/2
xxx.f:         den_lsh(ij)=den_sp(ij)
zeroint.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,MMAX,
zeroint.f:     * NQIJ,NQIJ1,NSIJ1,NQKL,NQKL1,NSKL1,ijbeg,klbeg
zeroint.f:     * ibfij1,ibfij2,ibfkl1,ibfkl2,
zeroint.f:     * ibf2l1,ibf2l2,ibf2l3,ibf2l4,ibfij3,ibfkl3,
zeroint.f:     * ixij,iyij,izij, iwij,ivij,iuij,isij
zeroint.f:      common /dimasse/ lqij,lqkl,lqmx,lij3,lkl3,l3l,lsss
zeroint.f:        call zerosp(lnijkl,nbls,bl(ibut),bl(idxnot),nbls2,ngcd)
zeroint.f:     *              bl(ibut ),l01,l02,nfu(nqij)+1,nfu(nqkl)+1 )
zeroint.f:      if(lshelij.eq.1 .or. lshelij.eq.3) then
zeroint.f:c-   --- for bfij1 ---
zeroint.f:     *               bl(ibfij1),lqij,l02,ijbeg,klbeg)
zeroint.f:      if(lshelij.eq.2 .or. lshelij.eq.3) then
zeroint.f:c-   --- for bfij2 ---
zeroint.f:     *               bl(ibfij2),lqij,l02,ijbeg,klbeg)
zeroint.f:     *               bl(ibfkl1),l01,lqkl,ijbeg,klbeg)
zeroint.f:     *               bl(ibfkl2),l01,lqkl,ijbeg,klbeg)
zeroint.f:      if(lshelij.eq.3) then
zeroint.f:c-   --- for bfij3 ---
zeroint.f:     *               bl(ibfij3),lij3,l02,ijbeg,klbeg)
zeroint.f:     *               bl(ibfkl3),l01,lkl3,ijbeg,klbeg)
zeroint.f:     *               bl(ibf2l1),lqij,lqkl,ijbeg,klbeg)
zeroint.f:     *               bl(ibf2l2),lqij,lqkl,ijbeg,klbeg)
zeroint.f:     *               bl(ibf2l3),lqij,lqkl,ijbeg,klbeg)
zeroint.f:     *               bl(ibf2l4),lqij,lqkl,ijbeg,klbeg)
zeroint.f:      ijkl=indx(i)
zeroint.f:      idpres(ijkl)=1
zeroint.f:      ijkl2=0
zeroint.f:      ijkl2=ijkl2+1
zeroint.f:      idxnot(ijkl2)=i
zeroint.f:      subroutine zerosp(lnijkl,nbls,buf,idxnot,nbls2,ngcd)
zeroint.f:      dimension buf(ngcd,nbls,lnijkl)
zeroint.f:            do 10 icx=1,lnijkl
zeroint.f:            ijkl=idxnot(i)
zeroint.f:            buf(iqu,ijkl,icx)=zero
zeroint.f:            do ij=i1,l1
zeroint.f:                  ijkl=idxnot(i)
zeroint.f:                     azero(iqu,ijkl,ij,kl)=zero
zeroint.f:     * lni,lnj,lnk,lnl,lnij,lnkl,lnijkl,MMAX,
zeroint.f:     * NQIJ,NQIJ1,NSIJ1,NQKL,NQKL1,NSKL1,ijbeg,klbeg
zeroint.f:      ijs=nfu(nqij)+1
zeroint.f:           do ij=ijs,lnij
zeroint.f:                 ijkl=idxnot(i)
zeroint.f:                 call zeroit(but2(1,1,ijkl,ij,kl),ngcd*ndim)
