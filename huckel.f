      SUBROUTINE ChkHuckel(NAtoms,IAN,NBasis,IErr)
      IMPLICIT INTEGER(A-Z)
C
C  Checks to see if all atoms in molecule have Huckel parameters
C  and determines number of Huckel basis functions
C
C  ARGUMENTS
C
C  NAtoms  -  number of atoms
C  IAN     -  atomic numbers
C  NBasis  -  on successful exit number of Huckel basis functions
C  IErr    -  Error flag on exit
C               0 - all atoms have Huckel parameters
C              -1 - 1 or more atoms DO NOT have Huckel parameters
C
C
      INTEGER caution
      DIMENSION IAN(NAtoms)
C
      IErr = -1
      NBasis = 0
      caution = 0
c
      IOut=ioutfil('iout')
c
      DO 10 I=1,NAtoms
      II = IAN(I)
      If(II.GT.36) RETURN
c
c 1S Shell
      If(II.LE.2) THEN
        NBasis = NBasis + 1
c 2S Shell
      Else If(II.LE.4) Then
        NBasis = NBasis + 2
c 2P Shell
      Else If(II.LE.10) Then
        NBasis = NBasis + 5
c 3S Shell
      Else If(II.LE.12) Then
        NBasis = NBasis + 6
c 3P Shell
      Else If(II.LE.18) Then
        NBasis = NBasis + 9
c 4S Shell
      Else If(II.LE.20) Then
        NBasis = NBasis + 10
c 3D Shell
      Else If(II.LE.30) Then
        NBasis = NBasis + 15
        caution = 1
c 4P Shell
      Else If(II.LE.36) Then
        NBasis = NBasis + 18
c 5S Shell
      Else If(II.LE.38) Then
        NBasis = NBasis + 19
c 4D Shell
      Else If(II.LE.48) Then
        NBasis = NBasis + 24
c 5P Shell
      Else If(II.LE.54) Then
        NBasis = NBasis + 27
      EndIf
 10   CONTINUE
c
cc      if(caution.eq.1) then
cc       write(IOut,*)'                  ****CAUTION****'
cc       write(IOut,123)
cc 123  FORMAT(' For Huckel Guess: First Row Transition Metals are not')
cc       write(IOut,*)'                   well tested.  Use with caution.'
cc      endif
c
      IErr = 0
c
      RETURN
      END
c ======================================================================
c
      SUBROUTINE HUCKEL(NAtoms, NBasis, NAlpha, NBeta,  IPRNT,
     $                  IAN,    XC,     NShell, BASDAT, INX,
     $                  IPSP,   H,      S,      SHalf,  V,
     $                  Z,      CMO,    IErr)
      IMPLICIT REAL*8(A-H,O-Z)
C
C
C  Extended Huckel Guess
C
C  ARGUMENTS
C  NAtoms  -  number of atoms
C  NBasis  -  number of Huckel basis functions
C  NAlpha  -  number of closed shell or alpha MOs
C  NBeta   -  number of Beta MOs
C             (must be zero in current implementation)
C  IPRNT   -  print flag
C  IAN     -  atomic numbers
C  XC      -  Cartesian coordinates
C  NShell  -  on exit number of shells in Huckel basis
C  BASDAT  -  array for basis function data (Texas format)
C  INX     -    ditto
C  IPSP    -  number of ECPs per atom
C  H       -  Hamiltonian matrix
C  S       -  overlap matrix
C  SHalf   -  S**-1/2
C  V       -  scratch vector (NBasis) the energies on return
C  Z       -  scratch array (at least 127008 double words)
C  CMO     -  on exit contains Huckel MOs
C  IErr    -  Error flag on exit
C               0 - success; Huckel MOs generated
C               anything else - failure
C
C
      DIMENSION IAN(NAtoms),XC(3,NAtoms),BASDAT(13,*),INX(12,*),
     $          IPSP(NAtoms),H(NBasis,NBasis),S(NBasis,NBasis),
     $          SHalf(NBasis,NBasis),V(NBasis),Z(*),CMO(NBasis,NBasis)
C
      PARAMETER (Zero=0.0d0,One=1.0d0)
C
C
C  first prepare Huckel basis
C
      CALL HuckBas(NAtoms, IAN,    XC,     IPSP,   NShell,
     $             NPrmS,  BASDAT, INX)
C
C  normalize the basis
C
      CALL normaliz(NShell,INX,BASDAT)
C
C  form overlap matrix
C
      CALL inton2(0,      NAtoms, S,      INX,    INX,
     $            0,      0,      BASDAT, BASDAT, XC,
     $            IAN,    NShell, NShell, NBasis, NBasis,
     $            Z)
cc      write(6,*) ' Huckel Overlap Matrix is:'
cc      call prntmat(nbasis,nbasis,nbasis,s)
C
C  form Extended Huckel Hamiltonian
C
      CALL HuckHamil(NAtoms,IAN,IPSP,NBasis,S,H)
c
c -- solve the generalized eigenproblem using fast and LAPACK
c -- NOTE: SHalf used as scratch - extra locations ARE allocated!
      call DSYGV(1,'V','U',NBasis,H,NBasis,S,NBasis,V,SHalf,
     *           NBasis*NBasis+5,IErr)
c
c -- copy the MOs to their rightful place
      call cpyvec(NBasis*NBasis,H,CMO)
C
C  form S**-1/2
C
c     CALL DIAGMAT(S,NBasis,SHalf,CMO,V,IErr)
c     If(IErr.NE.0) RETURN
c
c     DO 10 I=1,NBasis
c     V(I) = One/DSQRT(V(I))
c10   CONTINUE
c
c     DO 30 I=1,NBasis
c     DO 30 J=1,I
c     Val = Zero
c     DO 20 K=1,NBasis
c     Val = Val + S(I,K)*S(J,K)*V(K)
c20   CONTINUE
c     SHalf(I,J) = Val
c     SHalf(J,I) = Val
c30   CONTINUE

C
C  now transform Hamiltonian   H = S**-1/2 H S**-1/2
C
c     Call DGEMM('N',    'N',    NBasis, NBasis, NBasis,
c    $            One,    H,     NBasis, SHalf,  NBasis,
c    $            Zero,   CMO,   NBasis)
c
c     call DGEMM('T',	'N',	NBasis,	NBasis,	NBasis,
c    *            One,	 SHalf,	NBasis, CMO,	NBasis,
c    *            Zero,	 H,	NBasis)
c     DO 50 I=1,NBasis
c     DO 50 J=1,I
c     Val = Zero
c     DO 40 K=1,NBasis
c     Val = Val + SHalf(K,I)*CMO(K,J)
c40   CONTINUE
c     H(I,J) = Val
c     H(J,I) = Val
c50   CONTINUE
C
C  diagonalize transformed Hamiltonian
C
c     CALL DIAGMAT(H,NBasis,S,CMO,V,IErr)     ! CMO used as scratch
c     If(IErr.NE.0) RETURN
cc      write(6,*) ' Huckel orbital energies:'
cc      do i=1,nbasis
cc      write(6,*) i,v(i)
cc      enddo
C
C  back-transform to get correct Huckel MOs
C
c     Call DGEMM('N',    'N',    NBasis, NBasis, NBasis,
c    $            One,    SHalf, NBasis, H,      NBasis,
c    $            Zero,   CMO,   NBasis)
C
      RETURN
      END
c ======================================================================
c
      SUBROUTINE HuckHamil(NAtoms,IAN,IPSP,NBasis,S,H)
      IMPLICIT REAL*8(A-H,O-Z)
C
C
C  Set up the Huckel Hamiltonian matrix
C    Hii = hii;      Hij = 0.5K*(hii + hjj)*Sij
C
C  ARGUMENTS
C
C  NAtoms  -  number of atoms
C  IAN     -  atomic numbers
C  IPSP    -  number of ECPs per atom
C  NBasis  -  number of Huckel basis functions
C  S       -  overlap matrix
C  H       -  on exit contains Huckel Hamiltonian
C
C
      DIMENSION IAN(NAtoms),IPSP(NAtoms),S(NBasis,NBasis),
     $          H(NBasis,NBasis)
      Dimension hE(11,36),NB(54),NCORE(54)
      DIMENSION cvK(11,11)
C
      PARAMETER (Half=0.5d0)
      PARAMETER (HalfK=1.75d0*0.5d0)
c      PARAMETER (EVOLT=27.2114d0)
c
c  Core-Valence Interaction Coefficients
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
c  ATTENTION: These parameters need to be worked out for 5th row
c             if/when 5th row is added.
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
      Data cvK /
C       1s    2s    2p    3s    3p    3d    4s    4p    4d    5s    5p
     $ 1.00, 2.12, 1.00, 2.85, 1.00, 1.00, 2.30, 1.00, 1.00, 1.00, 1.00,
     $ 2.12, 1.00, 1.00, 1.13, 1.00, 1.00, 1.30, 1.00, 1.00, 1.00, 1.00,
     $ 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.07, 2.49, 1.00, 1.00, 1.00,
     $ 2.85, 1.13, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00,
     $ 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.10, 1.00, 1.00, 1.00,
     $ 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00,
     $ 2.30, 1.30, 1.07, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00,
     $ 1.00, 1.00, 2.49, 1.00, 1.10, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00,
     $ 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00,
     $ 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00,
     $ 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 1.00, 0.00/

      Data hE /
c           H
     $               -0.465916,     0.000000,     0.000000,
     $                0.000000,     0.000000,     0.000000,
     $                0.000000,     0.000000,     0.000000,
     $                0.000000,     0.000000,
c           HE
     $               -0.903570,     0.000000,     0.000000,
     $                0.000000,     0.000000,     0.000000,
     $                0.000000,     0.000000,     0.000000,
     $                0.000000,     0.000000,
c           LI
     $               -2.422829,    -0.279304,     0.000000,
     $                0.000000,     0.000000,     0.000000,
     $                0.000000,     0.000000,     0.000000,
     $                0.000000,     0.000000,
c           BE
     $               -4.591835,    -0.513627,     0.000000,
     $                0.000000,     0.000000,     0.000000,
     $                0.000000,     0.000000,     0.000000,
     $                0.000000,     0.000000,
c           B
     $               -7.416834,    -0.891628,    -0.252907,
     $                0.000000,     0.000000,     0.000000,
     $                0.000000,     0.000000,     0.000000,
     $                0.000000,     0.000000,
c           C
     $              -11.020563,    -1.570573,    -0.428885,
     $                0.000000,     0.000000,     0.000000,
     $                0.000000,     0.000000,     0.000000,
     $                0.000000,     0.000000,
c           N
     $              -15.325799,    -1.756129,    -0.506597,
     $                0.000000,     0.000000,     0.000000,
     $                0.000000,     0.000000,     0.000000,
     $                0.000000,     0.000000,
c           O
     $              -20.386997,    -2.331496,    -0.598205,
     $                0.000000,     0.000000,     0.000000,
     $                0.000000,     0.000000,     0.000000,
     $                0.000000,     0.000000,
c           F
     $              -26.068735,    -2.985961,    -0.683673,
     $                0.000000,     0.000000,     0.000000,
     $                0.000000,     0.000000,     0.000000,
     $                0.000000,     0.000000,
c           NE
     $              -32.451588,    -3.706065,    -0.788891,
     $                0.000000,     0.000000,     0.000000,
     $                0.000000,     0.000000,     0.000000,
     $                0.000000,     0.000000,
c           NA
     $              -40.074933,    -5.154367,    -1.434512,
     $               -0.292504,     0.000000,     0.000000,
     $                0.000000,     0.000000,     0.000000,
     $                0.000000,     0.000000,
c           MG
     $              -48.512288,    -6.781596,    -2.161397,
     $               -0.468408,     0.000000,     0.000000,
     $                0.000000,     0.000000,     0.000000,
     $                0.000000,     0.000000,
c           AL
     $              -57.829176,    -8.631140,    -3.022587,
     $               -0.802662,    -0.164042,     0.000000,
     $                0.000000,     0.000000,     0.000000,
     $                0.000000,     0.000000,
c           SI
     $              -67.995472,   -10.700470,    -4.012623,
     $               -1.098415,    -0.411265,     0.000000,
     $                0.000000,     0.000000,     0.000000,
     $                0.000000,     0.000000,
c           P
     $              -79.146010,   -13.081590,    -5.233941,
     $               -1.348559,    -0.701771,     0.000000,
     $                0.000000,     0.000000,     0.000000,
     $                0.000000,     0.000000,
c           S
     $              -91.121967,   -15.655040,    -6.547538,
     $               -1.694185,    -0.723996,     0.000000,
     $                0.000000,     0.000000,     0.000000,
     $                0.000000,     0.000000,
c           CL
     $             -103.921509,   -18.418398,    -7.956220,
     $               -2.084615,    -1.009493,     0.000000,
     $                0.000000,     0.000000,     0.000000,
     $                0.000000,     0.000000,
c           AR
     $             -117.544400,   -21.358245,    -9.460837,
     $               -2.516512,    -1.334499,     0.000000,
     $                0.000000,     0.000000,     0.000000,
     $                0.000000,     0.000000,
c           K
     $             -132.339228,   -24.839552,   -11.397251,
     $               -3.347961,    -1.991929,     0.000000,
     $               -0.254409,     0.000000,     0.000000,
     $                0.000000,     0.000000,
c           CA
     $             -148.033072,   -28.578478,   -13.493911,
     $               -4.247686,    -2.711279,     0.000000,
     $               -0.374117,     0.000000,     0.000000,
     $                0.000000,     0.000000,
c           SC
     $             -164.450868,   -32.346055,   -15.535304,
     $               -4.795401,    -3.242324,    -0.257829,
     $               -0.414754,     0.000000,     0.000000,
     $                0.000000,     0.000000,
c           TI
     $             -181.654628,   -36.254302,   -17.624975,
     $               -5.616482,    -3.757875,    -0.133571,
     $               -0.449426,     0.000000,     0.000000,
     $                0.000000,     0.000000,
c           V
     $             -199.703968,   -40.366432,   -19.828792,
     $               -6.329798,    -4.366730,    -0.469184,
     $               -0.484195,     0.000000,     0.000000,
     $                0.000000,     0.000000,
c           CR
     $             -218.311678,   -44.379429,   -21.841279,
     $               -6.809701,    -4.605132,    -0.281967,
     $               -1.895494,     0.000000,     0.000000,
     $                0.000000,     0.000000,
c           MN
     $             -238.431226,   -49.244752,   -24.587141,
     $               -7.807043,    -5.428726,    -0.565150,
     $               -0.523072,     0.000000,     0.000000,
     $                0.000000,     0.000000,
c           FE
     $             -258.234707,   -53.161531,   -26.319894,
     $               -8.023329,    -5.499988,    -0.049046,
     $               -0.310740,     0.000000,     0.000000,
     $                0.000000,     0.000000,
c           CO
     $             -280.606079,   -58.942477,   -29.847792,
     $               -9.454347,    -6.720678,    -0.578035,
     $               -0.545504,     0.000000,     0.000000,
     $                0.000000,     0.000000,
c           NI
     $             -302.991651,   -64.129782,   -32.657176,
     $              -10.361886,    -7.401197,    -0.561515,
     $               -0.561114,     0.000000,     0.000000,
     $                0.000000,     0.000000,
c           CU
     $             -325.819907,   -69.103562,   -35.176104,
     $              -10.874598,    -7.783351,    -0.256016,
     $               -0.295559,     0.000000,     0.000000,
     $                0.000000,     0.000000,
c           ZN
     $             -350.243978,   -75.035659,   -38.560850,
     $              -12.118547,    -8.820094,    -0.600325,
     $               -0.597233,     0.000000,     0.000000,
     $                0.000000,     0.000000,
c           GA
     $             -375.553791,   -81.232818,   -42.117474,
     $              -13.562466,   -10.047872,    -1.024855,
     $               -0.896877,    -0.206303,     0.000000,
     $                0.000000,     0.000000,
c           GE
     $             -401.769481,   -87.683428,   -45.843870,
     $              -15.094889,   -11.367013,    -1.474775,
     $               -1.182361,    -0.465852,     0.000000,
     $                0.000000,     0.000000,
c           AS
     $             -428.501230,   -94.033611,   -49.370137,
     $              -16.392242,   -12.464297,    -1.649213,
     $               -1.344897,    -1.086296,     0.000000,
     $                0.000000,     0.000000,
c           SE
     $             -456.966332,  -101.437231,   -53.804662,
     $              -18.442983,   -14.278644,    -2.498531,
     $               -1.815381,    -0.835453,     0.000000,
     $                0.000000,     0.000000,
c           BR
     $             -485.888847,  -108.674313,   -58.087792,
     $              -20.247792,   -15.864684,    -3.066315,
     $               -2.115744,    -1.128048,     0.000000,
     $                0.000000,     0.000000,
c           KR
     $             -515.748719,  -116.219434,   -62.514256,
     $              -22.141157,   -17.535222,    -3.670878,
     $               -2.470728,    -1.449823,     0.000000,
     $                0.000000,     0.000000/
C
       Data NB /1,1,2,2,5,5,5,5,5,5,6,6,9,9,9,9,9,9,10,10,15,15,15,15,
     $         15,15,15,15,15,15,18,18,18,18,18,18,19,19,24,24,24,24,
     $         24,24,24,24,24,27,27,27,27,27,27,27/
C
       Data NCORE /0,0,1,1,1,1,1,1,1,1,5,5,5,5,5,5,5,5,9,9,9,9,9,9,
     $            9,9,9,9,9,9,9,9,9,9,9,9,18,18,18,18,18,18,
     $            18,18,18,18,18,18,18,18,18,18,18,18/
C
      ni = 0
      DO 60 IAtm=1,NAtoms
      II = IAN(IAtm)
      JPSP = IPSP(IAtm)/2
      nbi = NB(II)
      DO 50 I=1+JPSP,nbi
      ni = ni+1
C
      If (I.EQ.1) Then
         NOrbI = 1
      Else If(I.EQ.2) Then
         NOrbI = 2
      Else If(I.LE.5) Then
         NOrbI = 3
      Else If(I.EQ.6) Then
         NOrbI = 4
      Else If(I.LE.9) Then
         NOrbI = 5
      Else If(I.EQ.10) Then
         NOrbI = 6
      Else If(I.LE.15) Then
         NOrbI = 7
      Else If(I.LE.18) Then
         NOrbI = 8
      Else If(I.EQ.19) Then
         NOrbI = 9
      Else If(I.LE.24) Then
         NOrbI = 10
      Else If(I.LE.27) Then
         NOrbI = 11
      EndIf
C	
c
      nj = 0
      DO 40 JAtm=1,IAtm
      JJ = IAN(JAtm)
      KPSP = IPSP(JAtm)/2
      nbj = NB(JJ)
      DO 30 J=1+KPSP,nbj
      nj = nj+1
C
      If (J.EQ.1) Then
         NOrbJ = 1
      Else If(J.EQ.2) Then
         NOrbJ = 2
      Else If(J.LE.5) Then
         NOrbJ = 3
      Else If(J.EQ.6) Then
         NOrbJ = 4
      Else If(J.LE.9) Then
         NOrbJ = 5
      Else If(J.EQ.10) Then
         NOrbJ = 6
      Else If(J.LE.15) Then
         NOrbJ = 7
      Else If(J.LE.18) Then
         NOrbJ = 8
      Else If(J.EQ.19) Then
         NOrbJ = 9
      Else If(J.LE.24) Then
         NOrbJ = 10
      Else If(J.LE.27) Then
         NOrbJ = 11
      EndIf
c
      If(II.LE.2) Then
        IIrow = 1
      Else if(II.LE.10) Then
        IIrow = 2
      Else if(II.LE.18) Then
        IIrow = 3
      Else if(II.LE.36) Then
        IIrow = 4
      EndIf
c
       IF (ni.EQ.nj) Then
c -- Diagonal terms
         H(ni,ni) = hE(NOrbI,II)
       ELSE IF ((I.LE.NCORE(II)).AND.(J.LE.NCORE(JJ))) THEN
c -- Off-Diagonal Core-Core Terms
         If(IAtm.EQ.JAtm) Then
c -- On the same atom
           If((IIrow.eq.3).AND.(((NOrbI.eq.1).and.(NOrbJ.eq.2)).OR.
     $                         ((NOrbI.eq.2).and.(NOrbJ.eq.1)))) Then
               cK = 1.98d0
         Else If((IIrow.eq.4).AND.(((NOrbI.eq.1).and.(NOrbJ.eq.2))
     $                     .OR.((NOrbI.eq.2).and.(NOrbJ.eq.1)))) Then
               cK = 1.88d0
         Else If((IIrow.eq.4).AND.(((NOrbI.eq.1).and.(NOrbJ.eq.4))
     $                     .OR.((NOrbI.eq.4).and.(NOrbJ.eq.1)))) Then
               cK = 2.66d0
         Else If((IIrow.eq.4).AND.(((NOrbI.eq.2).and.(NOrbJ.eq.4))
     $                     .OR.((NOrbI.eq.4).and.(NOrbJ.eq.2)))) Then
               cK = 1.12d0
         Else If((IIrow.eq.4).AND.(((NOrbI.eq.3).and.(NOrbJ.eq.5))
     $                     .OR.((NOrbI.eq.5).and.(NOrbJ.eq.3)))) Then
               cK = 1.77d0
         Else
               cK = 2.0d0
         EndIf
           H(ni,nj) = Half*cK*(hE(NOrbI,II)+hE(NOrbJ,JJ))*S(ni,nj)
         Else
c -- On Different atoms (set to zero for now)
           H(ni,nj) = 0.0d0
         EndIf
         H(nj,ni) = H(ni,nj)
       ELSE IF ((I.LE.NCORE(II)).OR.(J.LE.NCORE(JJ))) THEN
c -- Core-Valence Terms
cc         cK = 0.5d0*cvK(NOrbI,NOrbJ)
         cK = Half
         H(ni,nj) = HalfK*(hE(NOrbI,II)+hE(NOrbJ,JJ))*S(ni,nj)*cK
         H(nj,ni) = H(ni,nj)
       ELSE
c -- Off-Diagonal Valence-Valence Terms
         H(ni,nj) = HalfK*(hE(NOrbI,II)+hE(NOrbJ,JJ))*S(ni,nj)
         H(nj,ni) = H(ni,nj)
       ENDIF
c
 30   CONTINUE
 40   CONTINUE
c
 50   CONTINUE
 60   CONTINUE
cc      write(6,*) ' Huckel Hamiltonian is:'
cc      call prntmat(nbasis,nbasis,nbasis,h)
C
      RETURN
      END
c  =======================================================================
c
      SUBROUTINE HuckBas(NAtoms, IAN,    XC,     IPSP,   ncs,
     $                   NShl,   BASDAT, INX)
      IMPLICIT REAL*8(A-H,O-Z)

C
C  Use Scaled Mini basis set for Huckel core & valence basis.
C  Prepare basis set data and determine number of shells
C
C  ARGUMENTS
C  NAtoms  -  number of atoms
C  IAN     -  atomic numbers
C  XC      -  Cartesian coordinates
C             (needed in BASDAT - semiredundant?)
C  IPSP    -  number of ECPs per atom
C  ncs     -  on exit number of contracted shells
C  NShl    -  on exit number of primitive shells
C  BASDAT  -  on exit contains basis function data (Texas format)
C  INX     -    ditto
C
      DIMENSION IAN(NAtoms),XC(3,NAtoms),IPSP(NAtoms),
     $          BASDAT(13,*),INX(12,*)
      Dimension EXP1(3,2),COF1(3,2)
      Dimension EXP2(3,3,8),COF2(3,3,8)
      Dimension EXP3(3,5,8),COF3(3,5,8)
      Dimension EXP4(3,8,18), COF4(3,8,18)
c
c  exponents for scaled mini core basis - first row
c    (1s)
      DATA EXP1 / 7.034063, 1.064756, 0.236559,
     $           13.626736, 1.999349, 0.382993/
c
c  contraction coefficients for scaled mini core basis -  H,He
c    (1s)
      DATA COF1/ 0.070452, 0.407826, 0.647752,
     $           0.080241, 0.409143, 0.657278/
c
c  exponents for scaled mini core basis - first row
c    (1s,2s,2p)
      DATA EXP2/ 35.046150, 5.201690, 1.056240,
     $            0.851253, 0.083951, 0.032554,
     $            0.0,      0.0,      0.0,
     $           66.953540, 9.939290, 2.057130,
     $            2.334856, 0.196976, 0.067449,
     $            0.0,      0.0,      0.0,
     $          108.437040,16.120560, 3.373430,
     $            4.457854, 0.369315, 0.122555,
     $            3.214892, 0.646136, 0.153916,
     $          153.172260,23.073030, 4.923290,
     $            6.616612, 0.525856, 0.169958,
     $            4.912920, 0.997616, 0.232685,
     $          218.364490,32.598890, 6.917390,
     $            8.919426, 0.706141, 0.225054,
     $            6.556272, 1.349079, 0.312209,
     $          281.866580,42.416000, 9.095620,
     $           11.789326, 0.912894, 0.286661,
     $            8.274140, 1.715463, 0.383013,
     $          368.371120,55.061060,11.747670,
     $           15.364708, 1.167546, 0.363141,
     $           10.725667, 2.225817, 0.486105,
     $          456.952850,68.365430,14.619760,
     $           19.327190, 1.441820, 0.444080,
     $           13.352520, 2.779470, 0.600970/
c
c  contraction coefficients for scaled mini core basis - first row
c    (1s,2s,2p)
      DATA COF2/ 0.073760, 0.397471, 0.665092,
     $          -0.093970, 0.570100, 0.499750,
     $           0.0,      0.0,      0.0,
     $           0.070200, 0.391910, 0.669970,
     $          -0.082820, 0.557553, 0.516043,
     $           0.0,      0.0,      0.0,
     $           0.068651, 0.389933, 0.671395,
     $          -0.082419, 0.559064, 0.516795,
     $           0.105900, 0.457180, 0.631861,
     $           0.070740, 0.395380, 0.663311,
     $          -0.081380, 0.574853, 0.502413,
     $           0.109931, 0.462713, 0.627514,
     $           0.067870, 0.390202, 0.670083,
     $          -0.080890, 0.567202, 0.511092,
     $           0.115919, 0.469958, 0.618448,
     $           0.069060, 0.393159, 0.665669,
     $          -0.080820, 0.582090, 0.497160,
     $           0.124271, 0.476594, 0.613044,
     $           0.067040, 0.389249, 0.670788,
     $          -0.080550, 0.587729, 0.491979,
     $           0.126270, 0.477948, 0.614008,
     $           0.066910, 0.389349, 0.670518,
     $          -0.080250, 0.595298, 0.484868,
     $           0.128840, 0.480441, 0.611672/
c
c  exponents for scaled mini core basis - second row
c    (1s,2s,2p,3s,3p)
      DATA EXP3/542.760530, 81.959470, 17.723770,
     $           23.280420,  1.868340,  0.623250,
     $           17.836360,  3.795690,  0.877510,
     $            0.617611,  0.065219,  0.025351,
     $            0.0,       0.0,       0.0,
     $          650.643367, 98.370780, 21.322490,
     $           27.977380,  2.326520,  0.818080,
     $           23.216620,  5.002220,  1.204650,
     $            1.084751,  0.118314,  0.043124,
     $            0.0,       0.0,       0.0,
     $          777.443340,117.231530, 25.376297,
     $           33.356253,  2.801315,  1.022733,
     $           30.569580,  6.644701,  1.654395,
     $            1.685246,  0.204969,  0.074790,
     $            0.379920,  0.146881,  0.056613,
     $          909.234870,137.124560, 29.714810,
     $           39.129423,  3.335981,  1.251259,
     $           37.881761,  8.304598,  2.120792,
     $            2.197649,  0.275927,  0.100425,
     $            0.545789,  0.208220,  0.076007,
     $         1053.265800,158.790440, 34.424407,
     $           45.450377,  3.899926,  1.488507,
     $           46.100019, 10.165057,  2.644794,
     $            2.469483, 0.3208720,  0.116832,
     $            0.679059, 0.2578260,  0.092783,
     $         1201.458400,181.392120, 39.404795,
     $           52.139030,  4.528799,  1.754938,
     $           54.644071, 12.122902,  3.206504,
     $            2.920526, 0.3921870,  0.142699,
     $            0.887615, 0.3271000,  0.111743,
     $         1362.022000,205.811100, 44.772167,
     $           59.225732,  5.213902,  2.047346,
     $           64.099958, 14.287139,  3.828135,
     $            3.447124, 0.4737850,  0.171321,
     $            1.103904, 0.3991780,  0.133236,
     $         1536.932500,232.177650, 50.521685,
     $           66.933949,  5.918552,  2.339342,
     $           74.352915, 16.631346,  4.503927,
     $            4.045307, 0.5657010,  0.204065,
     $            1.357091, 0.4881130,  0.162126/
c
c  contraction coefficients for scaled mini core basis - second row
c    (1s,2s,2p,3s,3p)
      DATA COF3/ 0.068410, 0.392092, 0.666084,
     $          -0.083801, 0.582794, 0.492474,
     $           0.125710, 0.480461, 0.602281,
     $          -0.115762, 0.695863, 0.381047,
     $           0.0,      0.0,      0.0,
c
     $           0.068030, 0.390738, 0.667267,
     $          -0.086720, 0.585697, 0.486497,
     $           0.121460, 0.479291, 0.598942,
     $          -0.127651, 0.650773, 0.436272,
     $           0.0,      0.0,      0.0,
c
     $           0.066887, 0.387768, 0.670703,
     $          -0.088956, 0.601061, 0.468786,
     $           0.112353, 0.467467, 0.609782,
     $          -0.151389, 0.659386, 0.438693,
     $           0.226433, 0.500586, 0.396470,
c
     $           0.066405, 0.386222, 0.672240,
     $          -0.090999, 0.611615, 0.456860,
     $           0.108753, 0.463515, 0.611334,
     $          -0.168733, 0.675453, 0.429419,
     $           0.238913, 0.542295, 0.345453,
c
     $           0.065865, 0.384578, 0.673963,
     $          -0.092655, 0.626513, 0.441039,
     $           0.105388, 0.459712, 0.613714,
     $          -0.180549, 0.680952, 0.429142,
     $           0.235885, 0.554160, 0.336530,
c
     $           0.065765, 0.383948, 0.674372,
     $          -0.094232, 0.635468, 0.431506,
     $           0.103673, 0.458190, 0.613400,
     $          -0.190042, 0.685527, 0.429272,
     $           0.229436, 0.552960, 0.353700,
c
     $           0.065544, 0.382987, 0.675210,
     $          -0.095620, 0.641426, 0.425153,
     $           0.101789, 0.456107, 0.614282,
     $          -0.196401, 0.692360, 0.426193,
     $           0.235903, 0.558066, 0.346600,
c
     $           0.065159, 0.381807, 0.676446,
     $          -0.096740, 0.652749, 0.413573,
     $           0.100079, 0.454226, 0.615259,
     $          -0.200736, 0.696268, 0.424843,
     $           0.237276, 0.558360, 0.346165/
c
c
c  exponents for scaled mini core basis - third row
c   (1s,2s,2p,3s,3p,3d,4s,4p)
      DATA EXP4/ 1721.175500, 260.016330,  56.624554,
     $             75.055600,   6.691163,   2.667167,
     $             85.789846,  19.254794,   5.268624,
     $              4.668937,   0.700013,   0.275334,
     $              1.683145,   0.625809,   0.223898,
     $              0.000000,   0.000000,   0.000000,
     $              0.252312,   0.037631,   0.016218,
     $              0.000000,   0.000000,   0.000000,
c
     $           1915.434800, 289.533240,  63.106352,
     $             83.633281,   7.511840,   3.014585,
     $             97.974592,  22.067384,   6.093876,
     $              5.370754,   0.838380,   0.346226,
     $              2.017886,   0.766651,   0.284319,
     $              0.000000,   0.000000,   0.000000,
     $              0.429741,   0.062173,   0.024948,
     $              0.0,        0.0,        0.0,
c
     $           2119.887400, 320.429860,  69.898928,
     $             92.789823,   8.369686,   3.368258,
     $            110.203130,  24.903581,   6.931459,
     $              6.145464,   0.974196,   0.403617,
     $              0.331240,   2.350743,   0.894721,
     $              5.722214,   1.360850,   0.322652,
     $              0.509180,   0.070303,   0.027588,
     $              0.0,        0.0,        0.0,
c
     $           2335.019800, 353.044150,  77.058452,
     $            102.354710,   9.271966,   3.731893,
     $            123.335530,  27.945178,   7.820973,
     $              6.996867,   1.091590,   0.441157,
     $              0.384354,   2.727994,   1.039147,
     $              7.083666,   1.709634,   0.414122,
     $              0.568710,   0.077337,   0.029820,
     $              0.0,        0.0,        0.0,
c
     $           2563.877200, 387.534040,  84.598229,
     $            112.504720,  10.231034,   4.117754,
     $            137.029430,  31.100394,   8.753639,
     $              7.867280,   1.231767,   0.493523,
     $              0.432799,   3.084019,   1.172330,
     $              8.342917,   2.032944,   0.495712,
     $              0.625100,   0.085159,   0.032420,
     $              0.0,        0.0,        0.0,
c
     $           2798.294400, 423.136960,  92.438861,
     $            123.206530,  11.228891,   4.519872,
     $            151.509740,  34.472017,   9.747923,
     $              8.792361,   1.377638,   0.548533,
     $              0.479214,   3.443031,   1.302291,
     $              9.625339,   2.362264,   0.577094,
     $              0.688753,   0.090893,   0.341149,
     $              0.0,        0.0,        0.0,
c
     $           3041.685900, 460.090060, 100.595770,
     $            133.874500,  12.389910,   5.041718,
     $            167.820230,  38.173833,  10.816096,
     $              9.652931,   1.573752,   0.633124,
     $              3.881080,   1.464958,   0.539464,
     $             11.068839,   2.730707,   0.668509,
     $              0.764876,   0.095012,   0.035406,
     $              0.0,        0.0,        0.0,
c
     $           3299.183700, 499.088560, 109.161370,
     $            145.436890,  13.493821,   5.484332,
     $            183.055490,  41.740411,  11.881019,
     $             10.649671,   1.739504,   0.693455,
     $              4.314576,   1.629401,   0.599734,
     $             12.354893,   3.055605,   0.738591,
     $              0.842218,   0.101475,   0.037247,
     $              0.0,        0.0,        0.0,
c
     $           3654.762200, 539.390850, 118.044890,
     $            157.452010,  14.658306,   5.959160,
     $            198.965460,  45.476469,  12.999360,
     $             11.722140,   1.901775,   0.754211,
     $              4.816188,   1.821113,   0.669129,
     $             13.740698,   3.408983,   0.818641,
     $              0.906278,   0.107599,   0.038960,
     $              0.0,        0.0,        0.0,
c
     $           3848.005100, 582.030690, 127.367440,
     $            170.019100,  15.874877,   6.456559,
     $            216.239670,  49.479371,  14.182028,
     $             12.089821,   2.083488,   0.822258,
     $              5.293861,   1.992430,   0.728345,
     $             15.220694,   3.786020,   0.904557,
     $              0.984576,   0.114441,   0.041342,
     $              0.0,        0.0,        0.0,
c
     $           4134.302200, 625.491220, 136.955560,
     $            183.038620,  17.132109,   6.967340,
     $            234.235394,  53.659194,  15.417211,
     $             13.973273,   2.262891,   0.887841,
     $              5.792862,   2.183719,   0.799988,
     $             15.586486,   3.835578,   0.865043,
     $              0.830405,   0.085405,   0.031819,
     $              0.0,        0.0,        0.0,
c
     $           4432.288500, 670.660120, 146.902450,
     $            196.489110,  18.441663,   7.492968,
     $            252.477790,  57.934825,  16.689667,
     $             15.180864,   2.446792,   0.952935,
     $              6.341080,   2.388050,   0.873078,
     $             18.368202,   4.591304,   1.090203,
     $              1.121037,   0.125184,   0.044067,
     $              0.0,        0.0,        0.0,
c
     $           4751.897900, 718.920540, 157.445920,
     $            210.538330,  19.795805,   8.049797,
     $            273.645840,  62.815151,  18.134221,
     $             16.424933,   2.657653,   1.060987,
     $              6.838714,   2.595867,   0.983894,
     $             21.292530,   5.393166,   1.333883,
     $              1.353315,   0.176158,   0.063719,
     $              0.315688,   0.109619,   0.039944,
c
     $           5073.749900, 767.724170, 168.188810,
     $            224.983660,  21.187659,   8.625637,
     $            293.731740,  67.552546,  19.568631,
     $             17.764305,   2.855150,   1.158583,
     $              7.432617,   2.842684,   1.104117,
     $             24.321421,   6.223812,   1.588738,
     $              1.585949,   0.226724,   0.083725,
     $              0.052628,   0.382241,   0.141473,
c
     $           5407.613800, 818.174360, 179.265690,
     $            239.854640,  22.649060,   9.228004,
     $            315.022520,  72.557901,  21.079855,
     $             19.058432,   3.085413,   1.272735,
     $              8.104417,   3.128203,   1.239119,
     $             27.437209,   7.084044,   1.855823,
     $              1.819863,   0.278830,   0.103729,
     $              0.172044,   0.452601,   0.657373,
c
     $           5751.321500, 870.257210, 190.729490,
     $            255.188020,  24.155390,   9.852539,
     $            377.087530,  77.748281,  22.650400,
     $             20.463481,   3.312592,   1.379154,
     $              8.691400,   3.366879,   1.354653,
     $             30.627464,   7.971276,   2.134810,
     $              2.049275,   0.336412,   0.126127,
     $              0.542584,   0.206630,   0.077602,
c
     $           6103.289900, 923.697430, 202.520310,
     $            270.996490,  25.706395,  10.501175,
     $            360.499730,  83.244591,  24.311838,
     $             21.859513,   3.568159,   1.509006,
     $              9.422183,   3.677184,   1.493578,
     $             33.965097,   8.900831,   2.428436,
     $              2.340428,   0.388254,   0.145990,
     $              0.634547,   0.242528,   0.090530,
c
     $           6446.630700, 976.875700, 214.479550,
     $            287.011580,  27.328672,  11.174440,
     $            384.379500,  88.868156,  26.019696,
     $             23.331340,   3.813308,   1.613494,
     $             10.184792,   4.009436,   1.645966,
     $             37.368103,   9.854313,   2.732796,
     $              2.596493,   0.449090,   0.170124,
     $              0.729626,   0.280606,   0.105214/
c
C
c  contraction coefficients for scaled mini core basis - third row
c   (1s,2s,2p,3s,3p,3d,4s,4p)
      DATA COF4/ 0.0648747, 0.3808593, 0.6773681,
     $          -0.0978731, 0.6595598, 0.4065295,
     $           0.0980354, 0.4510408, 0.6177076,
     $          -0.2129302, 0.6892491, 0.4339254,
     $           0.2386360, 0.5710568, 0.3165357,
     $           0.0000000, 0.0000000, 0.0000000,
     $          -0.1529800, 0.6817280, 0.4144830,
     $           0.0,       0.0,       0.0,
c
     $           0.0646237, 0.3798376, 0.6783294,
     $          -0.0988822, 0.6660237, 0.3999119,
     $           0.0963163, 0.4481076, 0.6199212,
     $          -0.2235309, 0.7028863, 0.4235525,
     $           0.2450293, 0.5843849, 0.2876662,
     $           0.0000000, 0.0000000, 0.0000000,
     $          -0.1793100, 0.6728790, 0.4356660,
     $           0.0,       0.0,       0.0,
c
     $           0.0644208, 0.3791603, 0.6789629,
     $          -0.0997613, 0.6741630, 0.3917550,
     $           0.0956928, 0.4478028, 0.6192734,
     $          -0.2263535, 0.6596680, 0.4451938,
     $           0.2809362, 0.2511493, 0.5850024,
     $           0.1511320, 0.4876690, 0.6305140,
     $          -0.1712930, 0.6596680, 0.4451940,
     $           0.0,       0.0,       0.0,
c
     $           0.0642166, 0.3784120, 0.6796813,
     $          -0.1005412, 0.6822344, 0.3838104,
     $           0.0949053, 0.4473341, 0.6192239,
     $          -0.2259298, 0.7275730, 0.4013932,
     $           0.2848774, 0.2505492, 0.5822776,
     $           0.1517170, 0.4938170, 0.6195880,
     $          -0.1612460, 0.6458400, 0.4561630,
     $           0.0,       0.0,       0.0,
c
     $           0.0639475, 0.3775940, 0.6805421,
     $          -0.1012732, 0.6883122, 0.3778861,
     $           0.0944244, 0.4474620, 0.6184579,
     $          -0.2262084, 0.7292675, 0.4005212,
     $           0.2802351, 0.2573381, 0.4984040,
     $           0.1541160, 0.4984040, 0.6121540,
     $          -0.1530630, 0.6200940, 0.4799670,
     $           0.0,       0.0,       0.0,
c
     $           0.0638238, 0.3770840, 0.6809889,
     $          -0.1019051, 0.6944851, 0.3717753,
     $           0.0938564, 0.4469766, 0.6184514,
     $          -0.2257839, 0.7296696, 0.4004388,
     $           0.2725364, 0.2659315, 0.5810134,
     $           0.1564070, 0.5018270, 0.6068570,
     $          -0.1457690, 0.6172320, 0.4801500,
     $           0.0,       0.0,       0.0,
c
     $           0.0637449, 0.3767490, 0.6812474,
     $          -0.1027414, 0.6876812, 0.3786401,
     $           0.0925753, 0.4457439, 0.6199683,
     $          -0.2282033, 0.6963700, 0.4363343,
     $           0.2645827, 0.5783220, 0.2773533,
     $           0.1568380, 0.5036110, 0.6041680,
     $          -0.1404870, 0.6206340, 0.4732490,
     $           0.0,       0.0,       0.0,
c
     $           0.0635859, 0.3762016, 0.6817845,
     $          -0.1032788, 0.6929048, 0.3735863,
     $           0.0926544, 0.4465773, 0.6183961,
     $          -0.2282013, 0.6995646, 0.4339323,
     $           0.2672608, 0.5761623, 0.2773404,
     $           0.1600030, 0.5058830, 0.6024640,
     $          -0.1356590, 0.6159240, 0.4764540,
     $           0.0,       0.0,       0.0,
c
     $           0.0634866, 0.3758181, 0.6821217,
     $          -0.1037900, 0.6963308, 0.3732884,
     $           0.0927110, 0.4471948, 0.6170940,
     $          -0.2273489, 0.7047653, 0.4283786,
     $           0.2640499, 0.5738033, 0.2835067,
     $           0.1624150, 0.5079100, 0.6001890,
     $          -0.1291910, 0.6114770, 0.4794550,
     $           0.0,       0.0,       0.0,
c
     $           0.0632661, 0.3751710, 0.6828238,
     $          -0.1042620, 0.6990450, 0.3676850,
     $           0.0923705, 0.4473023, 0.6167285,
     $          -0.2271495, 0.7034123, 0.4301485,
     $           0.2668260, 0.5749350, 0.2804718,
     $           0.1641770, 0.5094620, 0.5984770,
     $          -0.1256450, 0.5956780, 0.4935130,
     $           0.0,       0.0,       0.0,
c
     $           0.0631878, 0.3749448, 0.6831002,
     $          -0.1046828, 0.7021851, 0.3646496,
     $           0.0920404, 0.4473156, 0.6164914,
     $          -0.2262847, 0.7061204, 0.4272635,
     $           0.2682453, 0.5714192, 0.2829565,
     $           0.1734540, 0.5121850, 0.6020150,
     $          -0.0890500, 0.5335650, 0.5380710,
     $           0.0,       0.0,       0.0,
c
     $           0.0630928, 0.3745038, 0.6834160,
     $          -0.1050843, 0.7049994, 0.3620077,
     $           0.0919591, 0.4476288, 0.6158034,
     $          -0.2254217, 0.7096746, 0.4236169,
     $           0.2675452, 0.5701029, 0.2856214,
     $           0.1672532, 0.5122790, 0.5948177,
     $          -0.1166690, 0.5950220, 0.4923300,
     $           0.0,       0.0,       0.0,
c
     $           0.0628396, 0.3736112, 0.6843626,
     $          -0.1054027, 0.7070778, 0.3599497,
     $           0.0908956, 0.4456593, 0.6179026,
     $          -0.2270732, 0.7111408, 0.4213859,
     $           0.2739015, 0.5689512, 0.2756075,
     $           0.1619895, 0.5116739, 0.5898732,
     $          -0.1507080, 0.6413440, 0.4600640,
     $           0.2062960, 0.5563570, 0.3670990,
c
     $           0.0627249, 0.3731671, 0.6847867,
     $          -0.1057096, 0.7094592, 0.3575586,
     $           0.0906975, 0.4451940, 0.6178940,
     $          -0.2280577, 0.7250544, 0.4064506,
     $           0.2751638, 0.5703353, 0.2690321,
     $           0.1577985, 0.5114922, 0.5857703,
     $          -0.1769110, 0.6604420, 0.4525470,
     $           0.2901740, 0.2627750, 0.5701240,
c
     $           0.0626011, 0.3727790, 0.6851842,
     $          -0.1060438, 0.7107219, 0.3563753,
     $           0.0903237, 0.4443841, 0.6183953,
     $          -0.2308017, 0.7325742, 0.3994769,
     $           0.2728475, 0.5717222, 0.2664488,
     $           0.1544952, 0.5114318, 0.5821935,
     $          -0.1983580, 0.6759510, 0.4476000,
     $           0.5671750, 0.3086720, 0.2410730,
c
     $           0.0624934, 0.3723683, 0.6855799,
     $          -0.1063403, 0.7120577, 0.3550792,
     $           0.0899627, 0.4435785, 0.6189101,
     $          -0.2326525, 0.7465053, 0.3857492,
     $           0.2789803, 0.5760239, 0.2529785,
     $           0.1519858, 0.5116403, 0.5786936,
     $          -0.2169520, 0.6852940, 0.4486600,
     $           0.3286250, 0.5489680, 0.2444430,
c
     $           0.0624175, 0.3720414, 0.6858728,
     $          -0.1066146, 0.7133792, 0.3537553,
     $           0.0894281, 0.4423065, 0.6200053,
     $          -0.2354458, 0.7528340, 0.3801608,
     $           0.2767522, 0.5795347, 0.2491162,
     $           0.1496666, 0.5117475, 0.5759148,
     $          -0.2363210, 0.7085530, 0.4329350,
     $           0.3466290, 0.5413300, 0.2347670,
c
     $           0.0625398, 0.3721075, 0.6856107,
     $          -0.1068933, 0.7139493, 0.3532914,
     $           0.0890288, 0.4413316, 0.6207416,
     $          -0.2376841, 0.7698488, 0.3641119,
     $           0.2745449, 0.5813334, 0.2470820,
     $           0.1479470, 0.5121720, 0.5729500,
     $          -0.2498590, 0.7128780, 0.4361010,
     $           0.3620060, 0.5352020, 0.2242010/
C
C
      NShl = 0      ! pointer to new BASDAT array
      ncs = 0
      nst = 0
      ncf = 0
c
      DO 10 I=1,NAtoms
      II = IAN(I)
      X = XC(1,I)
      Y = XC(2,I)
      Z = XC(3,I)
      JPSP = IPSP(I)
c
      IF(II.LE.2) THEN
C
C	Adding 1S
C
        NShl = NShl+1
        BASDAT(1,NShl) = EXP1(1,II)
        BASDAT(2,NShl) = COF1(1,II)
        BASDAT(11,NShl) = X
        BASDAT(12,NShl) = Y
        BASDAT(13,NShl) = Z
        NShl = NShl+1
        BASDAT(1,NShl) = EXP1(2,II)
        BASDAT(2,NShl) = COF1(2,II)
        BASDAT(11,NShl) = X
        BASDAT(12,NShl) = Y
        BASDAT(13,NShl) = Z
        NShl = NShl+1
        BASDAT(1,NShl) = EXP1(3,II)
        BASDAT(2,NShl) = COF1(3,II)
        BASDAT(11,NShl) = X
        BASDAT(12,NShl) = Y
        BASDAT(13,NShl) = Z
c
        ncs = ncs+1
        INX(1,ncs) = nst
        INX(2,ncs) = I
        INX(3,ncs) = 1
        nst = nst+3
        INX(5,ncs) = nst
        INX(11,ncs) = ncf
        ncf = ncf+1
        INX(10,ncs) = ncf
        INX(12,ncs) = 1
cc
      ELSE IF(II.LE.10) THEN
        I2 = II-2
C
C	Now Add 1S
C
        If(JPSP.EQ.0) Then
        NShl = NShl+1
        BASDAT(1,NShl) = EXP2(1,1,I2)
        BASDAT(2,NShl) = COF2(1,1,I2)
        BASDAT(11,NShl) = X
        BASDAT(12,NShl) = Y
        BASDAT(13,NShl) = Z
        NShl = NShl+1
        BASDAT(1,NShl) = EXP2(2,1,I2)
        BASDAT(2,NShl) = COF2(2,1,I2)
        BASDAT(11,NShl) = X
        BASDAT(12,NShl) = Y
        BASDAT(13,NShl) = Z
        NShl = NShl+1
        BASDAT(1,NShl) = EXP2(3,1,I2)
        BASDAT(2,NShl) = COF2(3,1,I2)
        BASDAT(11,NShl) = X
        BASDAT(12,NShl) = Y
        BASDAT(13,NShl) = Z
c
        ncs = ncs+1
        INX(1,ncs) = nst
        INX(2,ncs) = I
        INX(3,ncs) = 1
        nst = nst+3
        INX(5,ncs) = nst
        INX(11,ncs) = ncf
        ncf = ncf+1
        INX(10,ncs) = ncf
        INX(12,ncs) = 1
        EndIf
C
C	 Now Add 2S
C
        If(JPSP.LE.2) Then
        NShl = NShl+1
        BASDAT(1,NShl) = EXP2(1,2,I2)
        BASDAT(2,NShl) = COF2(1,2,I2)
        BASDAT(11,NShl) = X
        BASDAT(12,NShl) = Y
        BASDAT(13,NShl) = Z
        NShl = NShl+1
        BASDAT(1,NShl) = EXP2(2,2,I2)
        BASDAT(2,NShl) = COF2(2,2,I2)
        BASDAT(11,NShl) = X
        BASDAT(12,NShl) = Y
        BASDAT(13,NShl) = Z
        NShl = NShl+1
        BASDAT(1,NShl) = EXP2(3,2,I2)
        BASDAT(2,NShl) = COF2(3,2,I2)
        BASDAT(11,NShl) = X
        BASDAT(12,NShl) = Y
        BASDAT(13,NShl) = Z
c
        ncs = ncs+1
        INX(1,ncs) = nst
        INX(2,ncs) = I
        INX(3,ncs) = 1
        nst = nst+3
        INX(5,ncs) = nst
        INX(11,ncs) = ncf
        ncf = ncf+1
        INX(10,ncs) = ncf
        INX(12,ncs) = 1
        EndIf
C
C	Now add 2p
C
        IF (II.GE.5) THEN
c
        If(JPSP.LE.4) Then
        NShl = NShl+1
        MShl = MShl+1
        BASDAT(1,NShl) = EXP2(1,3,I2)
        BASDAT(2,NShl) = COF2(1,3,I2)
        BASDAT(11,NShl) = X
        BASDAT(12,NShl) = Y
        BASDAT(13,NShl) = Z
        NShl = NShl+1
        MShl = MShl+1
        BASDAT(1,NShl) = EXP2(2,3,I2)
        BASDAT(2,NShl) = COF2(2,3,I2)
        BASDAT(11,NShl) = X
        BASDAT(12,NShl) = Y
        BASDAT(13,NShl) = Z
        NShl = NShl+1
        MShl = MShl+1
        BASDAT(1,NShl) = EXP2(3,3,I2)
        BASDAT(2,NShl) = COF2(3,3,I2)
        BASDAT(11,NShl) = X
        BASDAT(12,NShl) = Y
        BASDAT(13,NShl) = Z
c
        ncs = ncs+1
        INX(1,ncs) = nst
        INX(2,ncs) = I
        INX(3,ncs) = 3
        nst = nst+3
        INX(5,ncs) = nst
        INX(11,ncs) = ncf
        ncf = ncf+3
        INX(10,ncs) = ncf
        INX(12,ncs) = 2
        EndIf

        ENDIF
cc
      ELSE IF(II.LE.18) THEN
        I2 = II-10
C
C	Now Add 1S
C
        If(JPSP.EQ.0) Then
        NShl = NShl+1
        BASDAT(1,NShl) = EXP3(1,1,I2)
        BASDAT(2,NShl) = COF3(1,1,I2)
        BASDAT(11,NShl) = X
        BASDAT(12,NShl) = Y
        BASDAT(13,NShl) = Z
        NShl = NShl+1
        BASDAT(1,NShl) = EXP3(2,1,I2)
        BASDAT(2,NShl) = COF3(2,1,I2)
        BASDAT(11,NShl) = X
        BASDAT(12,NShl) = Y
        BASDAT(13,NShl) = Z
        NShl = NShl+1
        BASDAT(1,NShl) = EXP3(3,1,I2)
        BASDAT(2,NShl) = COF3(3,1,I2)
        BASDAT(11,NShl) = X
        BASDAT(12,NShl) = Y
        BASDAT(13,NShl) = Z
c
        ncs = ncs+1
        INX(1,ncs) = nst
        INX(2,ncs) = I
        INX(3,ncs) = 1
        nst = nst+3
        INX(5,ncs) = nst
        INX(11,ncs) = ncf
        ncf = ncf+1
        INX(10,ncs) = ncf
        INX(12,ncs) = 1
        EndIf
C
C	Now Add 2S
C
        If(JPSP.LE.2) Then
        NShl = NShl+1
        BASDAT(1,NShl) = EXP3(1,2,I2)
        BASDAT(2,NShl) = COF3(1,2,I2)
        BASDAT(11,NShl) = X
        BASDAT(12,NShl) = Y
        BASDAT(13,NShl) = Z
        NShl = NShl+1
        BASDAT(1,NShl) = EXP3(2,2,I2)
        BASDAT(2,NShl) = COF3(2,2,I2)
        BASDAT(11,NShl) = X
        BASDAT(12,NShl) = Y
        BASDAT(13,NShl) = Z
        NShl = NShl+1
        BASDAT(1,NShl) = EXP3(3,2,I2)
        BASDAT(2,NShl) = COF3(3,2,I2)
        BASDAT(11,NShl) = X
        BASDAT(12,NShl) = Y
        BASDAT(13,NShl) = Z
c
        ncs = ncs+1
        INX(1,ncs) = nst
        INX(2,ncs) = I
        INX(3,ncs) = 1
        nst = nst+3
        INX(5,ncs) = nst
        INX(11,ncs) = ncf
        ncf = ncf+1
        INX(10,ncs) = ncf
        INX(12,ncs) = 1
        EndIf
C
C	Now Add 2p
C
        If(JPSP.LE.4) Then
        NShl = NShl+1
        BASDAT(1,NShl) = EXP3(1,3,I2)
        BASDAT(2,NShl) = COF3(1,3,I2)
        BASDAT(11,NShl) = X
        BASDAT(12,NShl) = Y
        BASDAT(13,NShl) = Z
        NShl = NShl+1
        BASDAT(1,NShl) = EXP3(2,3,I2)
        BASDAT(2,NShl) = COF3(2,3,I2)
        BASDAT(11,NShl) = X
        BASDAT(12,NShl) = Y
        BASDAT(13,NShl) = Z
        NShl = NShl+1
        BASDAT(1,NShl) = EXP3(3,3,I2)
        BASDAT(2,NShl) = COF3(3,3,I2)
        BASDAT(11,NShl) = X
        BASDAT(12,NShl) = Y
        BASDAT(13,NShl) = Z
c
        ncs = ncs+1
        INX(1,ncs) = nst
        INX(2,ncs) = I
        INX(3,ncs) = 3
        nst = nst+3
        INX(5,ncs) = nst
        INX(11,ncs) = ncf
        ncf = ncf+3
        INX(10,ncs) = ncf
        INX(12,ncs) = 2
        EndIf
C
C  now add 3S
C
        If(JPSP.LE.10) Then
        NShl = NShl+1
        BASDAT(1,NShl) = EXP3(1,4,I2)
        BASDAT(2,NShl) = COF3(1,4,I2)
        BASDAT(11,NShl) = X
        BASDAT(12,NShl) = Y
        BASDAT(13,NShl) = Z
        NShl = NShl+1
        BASDAT(1,NShl) = EXP3(2,4,I2)
        BASDAT(2,NShl) = COF3(2,4,I2)
        BASDAT(11,NShl) = X
        BASDAT(12,NShl) = Y
        BASDAT(13,NShl) = Z
        NShl = NShl+1
        BASDAT(1,NShl) = EXP3(3,4,I2)
        BASDAT(2,NShl) = COF3(3,4,I2)
        BASDAT(11,NShl) = X
        BASDAT(12,NShl) = Y
        BASDAT(13,NShl) = Z
c
        ncs = ncs+1
        INX(1,ncs) = nst
        INX(2,ncs) = I
        INX(3,ncs) = 1
        nst = nst+3
        INX(5,ncs) = nst
        INX(11,ncs) = ncf
        ncf = ncf+1
        INX(10,ncs) = ncf
        INX(12,ncs) = 1
        EndIf
C	
C	now add 3p
C
        IF (II.GE.13) THEN
c
        If(JPSP.LE.12) Then
        NShl = NShl+1
        BASDAT(1,NShl) = EXP3(1,5,I2)
        BASDAT(2,NShl) = COF3(1,5,I2)
        BASDAT(11,NShl) = X
        BASDAT(12,NShl) = Y
        BASDAT(13,NShl) = Z
        NShl = NShl+1
        BASDAT(1,NShl) = EXP3(2,5,I2)
        BASDAT(2,NShl) = COF3(2,5,I2)
        BASDAT(11,NShl) = X
        BASDAT(12,NShl) = Y
        BASDAT(13,NShl) = Z
        NShl = NShl+1
        BASDAT(1,NShl) = EXP3(3,5,I2)
        BASDAT(2,NShl) = COF3(3,5,I2)
        BASDAT(11,NShl) = X
        BASDAT(12,NShl) = Y
        BASDAT(13,NShl) = Z
c
        ncs = ncs+1
        INX(1,ncs) = nst
        INX(2,ncs) = I
        INX(3,ncs) = 3
        nst = nst+3
        INX(5,ncs) = nst
        INX(11,ncs) = ncf
        ncf = ncf+3
        INX(10,ncs) = ncf
        INX(12,ncs) = 2
        EndIf

        ENDIF
cc
      ELSE IF(II.LE.36) THEN
        I2 = II-18
C
C	Now Add 1S
C
        If(JPSP.EQ.0) Then
        NShl = NShl+1
        BASDAT(1,NShl) = EXP4(1,1,I2)
        BASDAT(2,NShl) = COF4(1,1,I2)
        BASDAT(11,NShl) = X
        BASDAT(12,NShl) = Y
        BASDAT(13,NShl) = Z
        NShl = NShl+1
        BASDAT(1,NShl) = EXP4(2,1,I2)
        BASDAT(2,NShl) = COF4(2,1,I2)
        BASDAT(11,NShl) = X
        BASDAT(12,NShl) = Y
        BASDAT(13,NShl) = Z
        NShl = NShl+1
        BASDAT(1,NShl) = EXP4(3,1,I2)
        BASDAT(2,NShl) = COF4(3,1,I2)
        BASDAT(11,NShl) = X
        BASDAT(12,NShl) = Y
        BASDAT(13,NShl) = Z
c
        ncs = ncs+1
        INX(1,ncs) = nst
        INX(2,ncs) = I
        INX(3,ncs) = 1
        nst = nst+3
        INX(5,ncs) = nst
        INX(11,ncs) = ncf
        ncf = ncf+1
        INX(10,ncs) = ncf
        INX(12,ncs) = 1
        EndIf
C
C	Now Add 2s
C
        If(JPSP.LE.2) Then
        NShl = NShl+1
        BASDAT(1,NShl) = EXP4(1,2,I2)
        BASDAT(2,NShl) = COF4(1,2,I2)
        BASDAT(11,NShl) = X
        BASDAT(12,NShl) = Y
        BASDAT(13,NShl) = Z
        NShl = NShl+1
        BASDAT(1,NShl) = EXP4(2,2,I2)
        BASDAT(2,NShl) = COF4(2,2,I2)
        BASDAT(11,NShl) = X
        BASDAT(12,NShl) = Y
        BASDAT(13,NShl) = Z
        NShl = NShl+1
        BASDAT(1,NShl) = EXP4(3,2,I2)
        BASDAT(2,NShl) = COF4(3,2,I2)
        BASDAT(11,NShl) = X
        BASDAT(12,NShl) = Y
        BASDAT(13,NShl) = Z
c
        ncs = ncs+1
        INX(1,ncs) = nst
        INX(2,ncs) = I
        INX(3,ncs) = 1
        nst = nst+3
        INX(5,ncs) = nst
        INX(11,ncs) = ncf
        ncf = ncf+1
        INX(10,ncs) = ncf
        INX(12,ncs) = 1
        EndIf
C
C	Now Add 2p
C
        If(JPSP.LE.4) Then
        NShl = NShl+1
        BASDAT(1,NShl) = EXP4(1,3,I2)
        BASDAT(2,NShl) = COF4(1,3,I2)
        BASDAT(11,NShl) = X
        BASDAT(12,NShl) = Y
        BASDAT(13,NShl) = Z
        NShl = NShl+1
        BASDAT(1,NShl) = EXP4(2,3,I2)
        BASDAT(2,NShl) = COF4(2,3,I2)
        BASDAT(11,NShl) = X
        BASDAT(12,NShl) = Y
        BASDAT(13,NShl) = Z
        NShl = NShl+1
        BASDAT(1,NShl) = EXP4(3,3,I2)
        BASDAT(2,NShl) = COF4(3,3,I2)
        BASDAT(11,NShl) = X
        BASDAT(12,NShl) = Y
        BASDAT(13,NShl) = Z
c
        ncs = ncs+1
        INX(1,ncs) = nst
        INX(2,ncs) = I
        INX(3,ncs) = 3
        nst = nst+3
        INX(5,ncs) = nst
        INX(11,ncs) = ncf
        ncf = ncf+3
        INX(10,ncs) = ncf
        INX(12,ncs) = 2
        EndIf
C
C	Now add 3s
C
        If(JPSP.LE.10) Then
        NShl = NShl+1
        BASDAT(1,NShl) = EXP4(1,4,I2)
        BASDAT(2,NShl) = COF4(1,4,I2)
        BASDAT(11,NShl) = X
        BASDAT(12,NShl) = Y
        BASDAT(13,NShl) = Z
        NShl = NShl+1
        BASDAT(1,NShl) = EXP4(2,4,I2)
        BASDAT(2,NShl) = COF4(2,4,I2)
        BASDAT(11,NShl) = X
        BASDAT(12,NShl) = Y
        BASDAT(13,NShl) = Z
        NShl = NShl+1
        BASDAT(1,NShl) = EXP4(3,4,I2)
        BASDAT(2,NShl) = COF4(3,4,I2)
        BASDAT(11,NShl) = X
        BASDAT(12,NShl) = Y
        BASDAT(13,NShl) = Z
c
        ncs = ncs+1
        INX(1,ncs) = nst
        INX(2,ncs) = I
        INX(3,ncs) = 1
        nst = nst+3
        INX(5,ncs) = nst
        INX(11,ncs) = ncf
        ncf = ncf+1
        INX(10,ncs) = ncf
        INX(12,ncs) = 1
        EndIf
C
C	now Add 3p
C
        If(JPSP.LE.12) Then
        NShl = NShl+1
        BASDAT(1,NShl) = EXP4(1,5,I2)
        BASDAT(2,NShl) = COF4(1,5,I2)
        BASDAT(11,NShl) = X
        BASDAT(12,NShl) = Y
        BASDAT(13,NShl) = Z
        NShl = NShl+1
        BASDAT(1,NShl) = EXP4(2,5,I2)
        BASDAT(2,NShl) = COF4(2,5,I2)
        BASDAT(11,NShl) = X
        BASDAT(12,NShl) = Y
        BASDAT(13,NShl) = Z
        NShl = NShl+1
        BASDAT(1,NShl) = EXP4(3,5,I2)
        BASDAT(2,NShl) = COF4(3,5,I2)
        BASDAT(11,NShl) = X
        BASDAT(12,NShl) = Y
        BASDAT(13,NShl) = Z
c
        ncs = ncs+1
        INX(1,ncs) = nst
        INX(2,ncs) = I
        INX(3,ncs) = 3
        nst = nst+3
        INX(5,ncs) = nst
        INX(11,ncs) = ncf
        ncf = ncf+3
        INX(10,ncs) = ncf
        INX(12,ncs) = 2
        EndIf
C
C  Add 3d orbitals
C
        IF(II.GE.21) THEN
c
        If(JPSP.LE.18) Then
        NShl = NShl+1
        BASDAT(1,NShl) = EXP4(1,6,I2)
        BASDAT(2,NShl) = COF4(1,6,I2)
        BASDAT(11,NShl) = X
        BASDAT(12,NShl) = Y
        BASDAT(13,NShl) = Z
        NShl = NShl+1
        BASDAT(1,NShl) = EXP4(2,6,I2)
        BASDAT(2,NShl) = COF4(2,6,I2)
        BASDAT(11,NShl) = X
        BASDAT(12,NShl) = Y
        BASDAT(13,NShl) = Z
        NShl = NShl+1
        BASDAT(1,NShl) = EXP4(3,6,I2)
        BASDAT(2,NShl) = COF4(3,6,I2)
        BASDAT(11,NShl) = X
        BASDAT(12,NShl) = Y
        BASDAT(13,NShl) = Z
c
        ncs = ncs+1
        INX(1,ncs) = nst
        INX(2,ncs) = I
        INX(3,ncs) = 5
        nst = nst+3
        INX(5,ncs) = nst
        INX(11,ncs) = ncf
        ncf = ncf+5
        INX(10,ncs) = ncf
        INX(12,ncs) = 4
        EndIf

        ENDIF
C
C  now add 4s
C
        If(JPSP.LE.28) Then
        NShl = NShl+1
        BASDAT(1,NShl) = EXP4(1,7,I2)
        BASDAT(2,NShl) = COF4(1,7,I2)
        BASDAT(11,NShl) = X
        BASDAT(12,NShl) = Y
        BASDAT(13,NShl) = Z
        NShl = NShl+1
        BASDAT(1,NShl) = EXP4(2,7,I2)
        BASDAT(2,NShl) = COF4(2,7,I2)
        BASDAT(11,NShl) = X
        BASDAT(12,NShl) = Y
        BASDAT(13,NShl) = Z
        NShl = NShl+1
        BASDAT(1,NShl) = EXP4(3,7,I2)
        BASDAT(2,NShl) = COF4(3,7,I2)
        BASDAT(11,NShl) = X
        BASDAT(12,NShl) = Y
        BASDAT(13,NShl) = Z
c
        ncs = ncs+1
        INX(1,ncs) = nst
        INX(2,ncs) = I
        INX(3,ncs) = 1
        nst = nst+3
        INX(5,ncs) = nst
        INX(11,ncs) = ncf
        ncf = ncf+1
        INX(10,ncs) = ncf
        INX(12,ncs) = 1
        EndIf
C
C	Now Add 4p
C
        IF(II.GE.31) THEN

        NShl = NShl+1
        BASDAT(1,NShl) = EXP4(1,8,I2)
        BASDAT(2,NShl) = COF4(1,8,I2)
        BASDAT(11,NShl) = X
        BASDAT(12,NShl) = Y
        BASDAT(13,NShl) = Z
        NShl = NShl+1
        BASDAT(1,NShl) = EXP4(2,8,I2)
        BASDAT(2,NShl) = COF4(2,8,I2)
        BASDAT(11,NShl) = X
        BASDAT(12,NShl) = Y
        BASDAT(13,NShl) = Z
        NShl = NShl+1
        BASDAT(1,NShl) = EXP4(3,8,I2)
        BASDAT(2,NShl) = COF4(3,8,I2)
        BASDAT(11,NShl) = X
        BASDAT(12,NShl) = Y
        BASDAT(13,NShl) = Z
c
        ncs = ncs+1
        INX(1,ncs) = nst
        INX(2,ncs) = I
        INX(3,ncs) = 3
        nst = nst+3
        INX(5,ncs) = nst
        INX(11,ncs) = ncf
        ncf = ncf+3
        INX(10,ncs) = ncf
        INX(12,ncs) = 2

        ENDIF
cc
      ENDIF
 10   CONTINUE
C
      RETURN
      END
